// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud
{
    /// <summary>
    /// This resource represents frontend TLS config
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Upcloud = Pulumi.Upcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var lbFe1Tls1 = new Upcloud.LoadbalancerFrontendTlsConfig("lbFe1Tls1", new()
    ///     {
    ///         Frontend = resource.Upcloud_loadbalancer_frontend.Lb_fe_1.Id,
    ///         CertificateBundle = resource.Upcloud_loadbalancer_manual_certificate_bundle.Lb_cb_m1.Id,
    ///     });
    /// 
    ///     var config = new Config();
    ///     var lbZone = config.Get("lbZone") ?? "fi-hel2";
    ///     var lbNetwork = new Upcloud.Network("lbNetwork", new()
    ///     {
    ///         Zone = lbZone,
    ///         IpNetwork = new Upcloud.Inputs.NetworkIpNetworkArgs
    ///         {
    ///             Address = "10.0.0.0/24",
    ///             Dhcp = true,
    ///             Family = "IPv4",
    ///         },
    ///     });
    /// 
    ///     var lb_cb_m1 = new Upcloud.LoadbalancerManualCertificateBundle("lb-cb-m1", new()
    ///     {
    ///         Certificate = "LS0tLS1CRUdJTiBDRVJ...",
    ///         PrivateKey = "LS0tLS1CRUdJTiBQUkl...",
    ///     });
    /// 
    ///     var lbFe1 = new Upcloud.LoadbalancerFrontend("lbFe1", new()
    ///     {
    ///         Loadbalancer = resource.Upcloud_loadbalancer.Lb.Id,
    ///         Mode = "http",
    ///         Port = 8080,
    ///         DefaultBackendName = resource.Upcloud_loadbalancer_backend.Lb_be_1.Name,
    ///     });
    /// 
    ///     var lb = new Upcloud.Loadbalancer("lb", new()
    ///     {
    ///         ConfiguredStatus = "started",
    ///         Plan = "development",
    ///         Zone = lbZone,
    ///         Network = resource.Upcloud_network.Lb_network.Id,
    ///     });
    /// 
    ///     var lbBe1 = new Upcloud.LoadbalancerBackend("lbBe1", new()
    ///     {
    ///         Loadbalancer = resource.Upcloud_loadbalancer.Lb.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UpcloudResourceType("upcloud:index/loadbalancerFrontendTlsConfig:LoadbalancerFrontendTlsConfig")]
    public partial class LoadbalancerFrontendTlsConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Reference to certificate bundle ID.
        /// </summary>
        [Output("certificateBundle")]
        public Output<string> CertificateBundle { get; private set; } = null!;

        /// <summary>
        /// ID of the load balancer frontend to which the TLS config is connected.
        /// </summary>
        [Output("frontend")]
        public Output<string> Frontend { get; private set; } = null!;

        /// <summary>
        /// The name of the TLS config. Must be unique within customer account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a LoadbalancerFrontendTlsConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadbalancerFrontendTlsConfig(string name, LoadbalancerFrontendTlsConfigArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/loadbalancerFrontendTlsConfig:LoadbalancerFrontendTlsConfig", name, args ?? new LoadbalancerFrontendTlsConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadbalancerFrontendTlsConfig(string name, Input<string> id, LoadbalancerFrontendTlsConfigState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/loadbalancerFrontendTlsConfig:LoadbalancerFrontendTlsConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadbalancerFrontendTlsConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadbalancerFrontendTlsConfig Get(string name, Input<string> id, LoadbalancerFrontendTlsConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadbalancerFrontendTlsConfig(name, id, state, options);
        }
    }

    public sealed class LoadbalancerFrontendTlsConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Reference to certificate bundle ID.
        /// </summary>
        [Input("certificateBundle", required: true)]
        public Input<string> CertificateBundle { get; set; } = null!;

        /// <summary>
        /// ID of the load balancer frontend to which the TLS config is connected.
        /// </summary>
        [Input("frontend", required: true)]
        public Input<string> Frontend { get; set; } = null!;

        /// <summary>
        /// The name of the TLS config. Must be unique within customer account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public LoadbalancerFrontendTlsConfigArgs()
        {
        }
        public static new LoadbalancerFrontendTlsConfigArgs Empty => new LoadbalancerFrontendTlsConfigArgs();
    }

    public sealed class LoadbalancerFrontendTlsConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Reference to certificate bundle ID.
        /// </summary>
        [Input("certificateBundle")]
        public Input<string>? CertificateBundle { get; set; }

        /// <summary>
        /// ID of the load balancer frontend to which the TLS config is connected.
        /// </summary>
        [Input("frontend")]
        public Input<string>? Frontend { get; set; }

        /// <summary>
        /// The name of the TLS config. Must be unique within customer account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public LoadbalancerFrontendTlsConfigState()
        {
        }
        public static new LoadbalancerFrontendTlsConfigState Empty => new LoadbalancerFrontendTlsConfigState();
    }
}
