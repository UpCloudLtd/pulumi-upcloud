// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud
{
    /// <summary>
    /// This resource represents a node group in a Managed Kubernetes cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Upcloud = Pulumi.Upcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a network for the Kubernetes cluster
    ///     var exampleNetwork = new Upcloud.Network("exampleNetwork", new()
    ///     {
    ///         Zone = "de-fra1",
    ///         IpNetwork = new Upcloud.Inputs.NetworkIpNetworkArgs
    ///         {
    ///             Address = "172.16.1.0/24",
    ///             Dhcp = true,
    ///             Family = "IPv4",
    ///         },
    ///     });
    /// 
    ///     // Create a Kubernetes cluster
    ///     var exampleKubernetesCluster = new Upcloud.KubernetesCluster("exampleKubernetesCluster", new()
    ///     {
    ///         ControlPlaneIpFilters = new[]
    ///         {
    ///             "0.0.0.0/0",
    ///         },
    ///         Network = exampleNetwork.Id,
    ///         Zone = "de-fra1",
    ///     });
    /// 
    ///     // Create a Kubernetes cluster node group
    ///     var @group = new Upcloud.KubernetesNodeGroup("group", new()
    ///     {
    ///         Cluster = resource.Upcloud_kubernetes_cluster.Example.Id,
    ///         NodeCount = 2,
    ///         Plan = "2xCPU-4GB",
    ///         Labels = 
    ///         {
    ///             { "managedBy", "terraform" },
    ///         },
    ///         Taints = new[]
    ///         {
    ///             new Upcloud.Inputs.KubernetesNodeGroupTaintArgs
    ///             {
    ///                 Effect = "NoExecute",
    ///                 Key = "taintKey",
    ///                 Value = "taintValue",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UpcloudResourceType("upcloud:index/kubernetesNodeGroup:KubernetesNodeGroup")]
    public partial class KubernetesNodeGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If set to true, nodes in this group will be placed on separate compute hosts. Please note that anti-affinity policy is
        /// considered "best effort" and enabling it does not fully guarantee that the nodes will end up on different hardware.
        /// </summary>
        [Output("antiAffinity")]
        public Output<bool?> AntiAffinity { get; private set; } = null!;

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Output("cluster")]
        public Output<string> Cluster { get; private set; } = null!;

        /// <summary>
        /// Resource properties for custom plan
        /// </summary>
        [Output("customPlan")]
        public Output<Outputs.KubernetesNodeGroupCustomPlan?> CustomPlan { get; private set; } = null!;

        /// <summary>
        /// Additional arguments for kubelet for the nodes in this group. WARNING - those arguments will be passed directly to
        /// kubelet CLI on each worker node without any validation. Passing invalid arguments can break your whole cluster. Be extra
        /// careful when adding kubelet args.
        /// </summary>
        [Output("kubeletArgs")]
        public Output<ImmutableArray<Outputs.KubernetesNodeGroupKubeletArg>> KubeletArgs { get; private set; } = null!;

        /// <summary>
        /// Key-value pairs to classify the node group.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the node group. Needs to be unique within a cluster.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Amount of nodes to provision in the node group.
        /// </summary>
        [Output("nodeCount")]
        public Output<int> NodeCount { get; private set; } = null!;

        /// <summary>
        /// The server plan used for the node group. You can list available plans with `upctl server plans`
        /// </summary>
        [Output("plan")]
        public Output<string> Plan { get; private set; } = null!;

        /// <summary>
        /// You can optionally select SSH keys to be added as authorized keys to the nodes in this node group. This allows you to
        /// connect to the nodes via SSH once they are running.
        /// </summary>
        [Output("sshKeys")]
        public Output<ImmutableArray<string>> SshKeys { get; private set; } = null!;

        /// <summary>
        /// Storage encryption strategy for the nodes in this group.
        /// </summary>
        [Output("storageEncryption")]
        public Output<string> StorageEncryption { get; private set; } = null!;

        /// <summary>
        /// Taints for the nodes in this group.
        /// </summary>
        [Output("taints")]
        public Output<ImmutableArray<Outputs.KubernetesNodeGroupTaint>> Taints { get; private set; } = null!;

        /// <summary>
        /// If set to false, nodes in this group will not have access to utility network.
        /// </summary>
        [Output("utilityNetworkAccess")]
        public Output<bool?> UtilityNetworkAccess { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesNodeGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesNodeGroup(string name, KubernetesNodeGroupArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/kubernetesNodeGroup:KubernetesNodeGroup", name, args ?? new KubernetesNodeGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesNodeGroup(string name, Input<string> id, KubernetesNodeGroupState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/kubernetesNodeGroup:KubernetesNodeGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesNodeGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesNodeGroup Get(string name, Input<string> id, KubernetesNodeGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new KubernetesNodeGroup(name, id, state, options);
        }
    }

    public sealed class KubernetesNodeGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, nodes in this group will be placed on separate compute hosts. Please note that anti-affinity policy is
        /// considered "best effort" and enabling it does not fully guarantee that the nodes will end up on different hardware.
        /// </summary>
        [Input("antiAffinity")]
        public Input<bool>? AntiAffinity { get; set; }

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("cluster", required: true)]
        public Input<string> Cluster { get; set; } = null!;

        /// <summary>
        /// Resource properties for custom plan
        /// </summary>
        [Input("customPlan")]
        public Input<Inputs.KubernetesNodeGroupCustomPlanArgs>? CustomPlan { get; set; }

        [Input("kubeletArgs")]
        private InputList<Inputs.KubernetesNodeGroupKubeletArgArgs>? _kubeletArgs;

        /// <summary>
        /// Additional arguments for kubelet for the nodes in this group. WARNING - those arguments will be passed directly to
        /// kubelet CLI on each worker node without any validation. Passing invalid arguments can break your whole cluster. Be extra
        /// careful when adding kubelet args.
        /// </summary>
        public InputList<Inputs.KubernetesNodeGroupKubeletArgArgs> KubeletArgs
        {
            get => _kubeletArgs ?? (_kubeletArgs = new InputList<Inputs.KubernetesNodeGroupKubeletArgArgs>());
            set => _kubeletArgs = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Key-value pairs to classify the node group.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the node group. Needs to be unique within a cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Amount of nodes to provision in the node group.
        /// </summary>
        [Input("nodeCount", required: true)]
        public Input<int> NodeCount { get; set; } = null!;

        /// <summary>
        /// The server plan used for the node group. You can list available plans with `upctl server plans`
        /// </summary>
        [Input("plan", required: true)]
        public Input<string> Plan { get; set; } = null!;

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;

        /// <summary>
        /// You can optionally select SSH keys to be added as authorized keys to the nodes in this node group. This allows you to
        /// connect to the nodes via SSH once they are running.
        /// </summary>
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        /// <summary>
        /// Storage encryption strategy for the nodes in this group.
        /// </summary>
        [Input("storageEncryption")]
        public Input<string>? StorageEncryption { get; set; }

        [Input("taints")]
        private InputList<Inputs.KubernetesNodeGroupTaintArgs>? _taints;

        /// <summary>
        /// Taints for the nodes in this group.
        /// </summary>
        public InputList<Inputs.KubernetesNodeGroupTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.KubernetesNodeGroupTaintArgs>());
            set => _taints = value;
        }

        /// <summary>
        /// If set to false, nodes in this group will not have access to utility network.
        /// </summary>
        [Input("utilityNetworkAccess")]
        public Input<bool>? UtilityNetworkAccess { get; set; }

        public KubernetesNodeGroupArgs()
        {
        }
        public static new KubernetesNodeGroupArgs Empty => new KubernetesNodeGroupArgs();
    }

    public sealed class KubernetesNodeGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, nodes in this group will be placed on separate compute hosts. Please note that anti-affinity policy is
        /// considered "best effort" and enabling it does not fully guarantee that the nodes will end up on different hardware.
        /// </summary>
        [Input("antiAffinity")]
        public Input<bool>? AntiAffinity { get; set; }

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        /// <summary>
        /// Resource properties for custom plan
        /// </summary>
        [Input("customPlan")]
        public Input<Inputs.KubernetesNodeGroupCustomPlanGetArgs>? CustomPlan { get; set; }

        [Input("kubeletArgs")]
        private InputList<Inputs.KubernetesNodeGroupKubeletArgGetArgs>? _kubeletArgs;

        /// <summary>
        /// Additional arguments for kubelet for the nodes in this group. WARNING - those arguments will be passed directly to
        /// kubelet CLI on each worker node without any validation. Passing invalid arguments can break your whole cluster. Be extra
        /// careful when adding kubelet args.
        /// </summary>
        public InputList<Inputs.KubernetesNodeGroupKubeletArgGetArgs> KubeletArgs
        {
            get => _kubeletArgs ?? (_kubeletArgs = new InputList<Inputs.KubernetesNodeGroupKubeletArgGetArgs>());
            set => _kubeletArgs = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Key-value pairs to classify the node group.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the node group. Needs to be unique within a cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Amount of nodes to provision in the node group.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The server plan used for the node group. You can list available plans with `upctl server plans`
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;

        /// <summary>
        /// You can optionally select SSH keys to be added as authorized keys to the nodes in this node group. This allows you to
        /// connect to the nodes via SSH once they are running.
        /// </summary>
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        /// <summary>
        /// Storage encryption strategy for the nodes in this group.
        /// </summary>
        [Input("storageEncryption")]
        public Input<string>? StorageEncryption { get; set; }

        [Input("taints")]
        private InputList<Inputs.KubernetesNodeGroupTaintGetArgs>? _taints;

        /// <summary>
        /// Taints for the nodes in this group.
        /// </summary>
        public InputList<Inputs.KubernetesNodeGroupTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.KubernetesNodeGroupTaintGetArgs>());
            set => _taints = value;
        }

        /// <summary>
        /// If set to false, nodes in this group will not have access to utility network.
        /// </summary>
        [Input("utilityNetworkAccess")]
        public Input<bool>? UtilityNetworkAccess { get; set; }

        public KubernetesNodeGroupState()
        {
        }
        public static new KubernetesNodeGroupState Empty => new KubernetesNodeGroupState();
    }
}
