// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud
{
    /// <summary>
    /// This resource represents a user in managed database
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Upcloud = Pulumi.Upcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Upcloud.ManagedDatabasePostgresql("example", new()
    ///     {
    ///         Plan = "1x1xCPU-2GB-25GB",
    ///         Title = "postgres",
    ///         Zone = "fi-hel1",
    ///     });
    /// 
    ///     var exampleUser = new Upcloud.ManagedDatabaseUser("exampleUser", new()
    ///     {
    ///         Service = example.Id,
    ///         Username = "example_user",
    ///         Password = "&lt;USER_PASSWORD&gt;",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UpcloudResourceType("upcloud:index/managedDatabaseUser:ManagedDatabaseUser")]
    public partial class ManagedDatabaseUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// MySQL only, authentication type.
        /// </summary>
        [Output("authentication")]
        public Output<string?> Authentication { get; private set; } = null!;

        /// <summary>
        /// OpenSearch access control object.
        /// </summary>
        [Output("opensearchAccessControl")]
        public Output<Outputs.ManagedDatabaseUserOpensearchAccessControl?> OpensearchAccessControl { get; private set; } = null!;

        /// <summary>
        /// Password for the database user. Defaults to a random value
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL access control object.
        /// </summary>
        [Output("pgAccessControl")]
        public Output<Outputs.ManagedDatabaseUserPgAccessControl?> PgAccessControl { get; private set; } = null!;

        /// <summary>
        /// Redis access control object.
        /// </summary>
        [Output("redisAccessControl")]
        public Output<Outputs.ManagedDatabaseUserRedisAccessControl?> RedisAccessControl { get; private set; } = null!;

        /// <summary>
        /// Service's UUID for which this user belongs to
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        /// <summary>
        /// Type of the user. Only normal type users can be created
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Name of the database user
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedDatabaseUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedDatabaseUser(string name, ManagedDatabaseUserArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/managedDatabaseUser:ManagedDatabaseUser", name, args ?? new ManagedDatabaseUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedDatabaseUser(string name, Input<string> id, ManagedDatabaseUserState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/managedDatabaseUser:ManagedDatabaseUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/UpCloudLtd/pulumi-upcloud/releases/download/v${VERSION}/",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedDatabaseUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedDatabaseUser Get(string name, Input<string> id, ManagedDatabaseUserState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedDatabaseUser(name, id, state, options);
        }
    }

    public sealed class ManagedDatabaseUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// MySQL only, authentication type.
        /// </summary>
        [Input("authentication")]
        public Input<string>? Authentication { get; set; }

        /// <summary>
        /// OpenSearch access control object.
        /// </summary>
        [Input("opensearchAccessControl")]
        public Input<Inputs.ManagedDatabaseUserOpensearchAccessControlArgs>? OpensearchAccessControl { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for the database user. Defaults to a random value
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// PostgreSQL access control object.
        /// </summary>
        [Input("pgAccessControl")]
        public Input<Inputs.ManagedDatabaseUserPgAccessControlArgs>? PgAccessControl { get; set; }

        /// <summary>
        /// Redis access control object.
        /// </summary>
        [Input("redisAccessControl")]
        public Input<Inputs.ManagedDatabaseUserRedisAccessControlArgs>? RedisAccessControl { get; set; }

        /// <summary>
        /// Service's UUID for which this user belongs to
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        /// <summary>
        /// Name of the database user
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public ManagedDatabaseUserArgs()
        {
        }
        public static new ManagedDatabaseUserArgs Empty => new ManagedDatabaseUserArgs();
    }

    public sealed class ManagedDatabaseUserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// MySQL only, authentication type.
        /// </summary>
        [Input("authentication")]
        public Input<string>? Authentication { get; set; }

        /// <summary>
        /// OpenSearch access control object.
        /// </summary>
        [Input("opensearchAccessControl")]
        public Input<Inputs.ManagedDatabaseUserOpensearchAccessControlGetArgs>? OpensearchAccessControl { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for the database user. Defaults to a random value
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// PostgreSQL access control object.
        /// </summary>
        [Input("pgAccessControl")]
        public Input<Inputs.ManagedDatabaseUserPgAccessControlGetArgs>? PgAccessControl { get; set; }

        /// <summary>
        /// Redis access control object.
        /// </summary>
        [Input("redisAccessControl")]
        public Input<Inputs.ManagedDatabaseUserRedisAccessControlGetArgs>? RedisAccessControl { get; set; }

        /// <summary>
        /// Service's UUID for which this user belongs to
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// Type of the user. Only normal type users can be created
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Name of the database user
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ManagedDatabaseUserState()
        {
        }
        public static new ManagedDatabaseUserState Empty => new ManagedDatabaseUserState();
    }
}
