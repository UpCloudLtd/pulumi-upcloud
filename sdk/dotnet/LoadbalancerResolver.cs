// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud
{
    /// <summary>
    /// This resource represents load balancer resolver.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Upcloud = Pulumi.Upcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var lbZone = config.Get("lbZone") ?? "fi-hel2";
    ///     var lbNetwork = new Upcloud.Network("lbNetwork", new()
    ///     {
    ///         Zone = lbZone,
    ///         IpNetwork = new Upcloud.Inputs.NetworkIpNetworkArgs
    ///         {
    ///             Address = "10.0.0.0/24",
    ///             Dhcp = true,
    ///             Family = "IPv4",
    ///         },
    ///     });
    /// 
    ///     var lb = new Upcloud.Loadbalancer("lb", new()
    ///     {
    ///         ConfiguredStatus = "started",
    ///         Plan = "development",
    ///         Zone = lbZone,
    ///         Network = resource.Upcloud_network.Lb_network.Id,
    ///     });
    /// 
    ///     var lbResolver1 = new Upcloud.LoadbalancerResolver("lbResolver1", new()
    ///     {
    ///         Loadbalancer = resource.Upcloud_loadbalancer.Lb.Id,
    ///         CacheInvalid = 10,
    ///         CacheValid = 100,
    ///         Retries = 5,
    ///         Timeout = 10,
    ///         TimeoutRetry = 10,
    ///         Nameservers = new[]
    ///         {
    ///             "10.0.0.10:53",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UpcloudResourceType("upcloud:index/loadbalancerResolver:LoadbalancerResolver")]
    public partial class LoadbalancerResolver : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time in seconds to cache invalid results.
        /// </summary>
        [Output("cacheInvalid")]
        public Output<int> CacheInvalid { get; private set; } = null!;

        /// <summary>
        /// Time in seconds to cache valid results.
        /// </summary>
        [Output("cacheValid")]
        public Output<int> CacheValid { get; private set; } = null!;

        /// <summary>
        /// ID of the load balancer to which the resolver is connected.
        /// </summary>
        [Output("loadbalancer")]
        public Output<string> Loadbalancer { get; private set; } = null!;

        /// <summary>
        /// The name of the resolver. Must be unique within the service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
        /// optional, if missing then default 53 will be used.
        /// </summary>
        [Output("nameservers")]
        public Output<ImmutableArray<string>> Nameservers { get; private set; } = null!;

        /// <summary>
        /// Number of retries on failure.
        /// </summary>
        [Output("retries")]
        public Output<int> Retries { get; private set; } = null!;

        /// <summary>
        /// Timeout for the query in seconds.
        /// </summary>
        [Output("timeout")]
        public Output<int> Timeout { get; private set; } = null!;

        /// <summary>
        /// Timeout for the query retries in seconds.
        /// </summary>
        [Output("timeoutRetry")]
        public Output<int> TimeoutRetry { get; private set; } = null!;


        /// <summary>
        /// Create a LoadbalancerResolver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadbalancerResolver(string name, LoadbalancerResolverArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/loadbalancerResolver:LoadbalancerResolver", name, args ?? new LoadbalancerResolverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadbalancerResolver(string name, Input<string> id, LoadbalancerResolverState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/loadbalancerResolver:LoadbalancerResolver", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/UpCloudLtd/pulumi-upcloud/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadbalancerResolver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadbalancerResolver Get(string name, Input<string> id, LoadbalancerResolverState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadbalancerResolver(name, id, state, options);
        }
    }

    public sealed class LoadbalancerResolverArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time in seconds to cache invalid results.
        /// </summary>
        [Input("cacheInvalid", required: true)]
        public Input<int> CacheInvalid { get; set; } = null!;

        /// <summary>
        /// Time in seconds to cache valid results.
        /// </summary>
        [Input("cacheValid", required: true)]
        public Input<int> CacheValid { get; set; } = null!;

        /// <summary>
        /// ID of the load balancer to which the resolver is connected.
        /// </summary>
        [Input("loadbalancer", required: true)]
        public Input<string> Loadbalancer { get; set; } = null!;

        /// <summary>
        /// The name of the resolver. Must be unique within the service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameservers", required: true)]
        private InputList<string>? _nameservers;

        /// <summary>
        /// List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
        /// optional, if missing then default 53 will be used.
        /// </summary>
        public InputList<string> Nameservers
        {
            get => _nameservers ?? (_nameservers = new InputList<string>());
            set => _nameservers = value;
        }

        /// <summary>
        /// Number of retries on failure.
        /// </summary>
        [Input("retries", required: true)]
        public Input<int> Retries { get; set; } = null!;

        /// <summary>
        /// Timeout for the query in seconds.
        /// </summary>
        [Input("timeout", required: true)]
        public Input<int> Timeout { get; set; } = null!;

        /// <summary>
        /// Timeout for the query retries in seconds.
        /// </summary>
        [Input("timeoutRetry", required: true)]
        public Input<int> TimeoutRetry { get; set; } = null!;

        public LoadbalancerResolverArgs()
        {
        }
        public static new LoadbalancerResolverArgs Empty => new LoadbalancerResolverArgs();
    }

    public sealed class LoadbalancerResolverState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time in seconds to cache invalid results.
        /// </summary>
        [Input("cacheInvalid")]
        public Input<int>? CacheInvalid { get; set; }

        /// <summary>
        /// Time in seconds to cache valid results.
        /// </summary>
        [Input("cacheValid")]
        public Input<int>? CacheValid { get; set; }

        /// <summary>
        /// ID of the load balancer to which the resolver is connected.
        /// </summary>
        [Input("loadbalancer")]
        public Input<string>? Loadbalancer { get; set; }

        /// <summary>
        /// The name of the resolver. Must be unique within the service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameservers")]
        private InputList<string>? _nameservers;

        /// <summary>
        /// List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
        /// optional, if missing then default 53 will be used.
        /// </summary>
        public InputList<string> Nameservers
        {
            get => _nameservers ?? (_nameservers = new InputList<string>());
            set => _nameservers = value;
        }

        /// <summary>
        /// Number of retries on failure.
        /// </summary>
        [Input("retries")]
        public Input<int>? Retries { get; set; }

        /// <summary>
        /// Timeout for the query in seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Timeout for the query retries in seconds.
        /// </summary>
        [Input("timeoutRetry")]
        public Input<int>? TimeoutRetry { get; set; }

        public LoadbalancerResolverState()
        {
        }
        public static new LoadbalancerResolverState Empty => new LoadbalancerResolverState();
    }
}
