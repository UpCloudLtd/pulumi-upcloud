// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud
{
    /// <summary>
    /// Network peerings can be used to connect networks across accounts. For the network peering to become active, the peering must be made from both directions.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Upcloud = Pulumi.Upcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Network peering requires the networks to have routers attached to them.
    ///     var thisRouter = new Upcloud.Router("thisRouter");
    /// 
    ///     var example = new Upcloud.Network("example", new()
    ///     {
    ///         Zone = "nl-ams1",
    ///         Router = upcloud_router.Example.Id,
    ///         IpNetwork = new Upcloud.Inputs.NetworkIpNetworkArgs
    ///         {
    ///             Address = "10.0.0.0/24",
    ///             Dhcp = true,
    ///             Family = "IPv4",
    ///         },
    ///     });
    /// 
    ///     var thisNetworkPeering = new List&lt;Upcloud.NetworkPeering&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; (1 == true); rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         thisNetworkPeering.Add(new Upcloud.NetworkPeering($"thisNetworkPeering-{range.Value}", new()
    ///         {
    ///             Network = new Upcloud.Inputs.NetworkPeeringNetworkArgs
    ///             {
    ///                 Uuid = example.Id,
    ///             },
    ///             PeerNetwork = new Upcloud.Inputs.NetworkPeeringPeerNetworkArgs
    ///             {
    ///                 Uuid = "0305723a-e5cb-4ef6-985d-e36ed44d133a",
    ///             },
    ///         }));
    ///     }
    /// });
    /// ```
    /// </summary>
    [UpcloudResourceType("upcloud:index/networkPeering:NetworkPeering")]
    public partial class NetworkPeering : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configured status of the network peering.
        /// </summary>
        [Output("configuredStatus")]
        public Output<string> ConfiguredStatus { get; private set; } = null!;

        /// <summary>
        /// User defined key-value pairs to classify the network peering.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the network peering.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Local network of the network peering.
        /// </summary>
        [Output("network")]
        public Output<Outputs.NetworkPeeringNetwork> Network { get; private set; } = null!;

        /// <summary>
        /// Peer network of the network peering.
        /// </summary>
        [Output("peerNetwork")]
        public Output<Outputs.NetworkPeeringPeerNetwork> PeerNetwork { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkPeering resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkPeering(string name, NetworkPeeringArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/networkPeering:NetworkPeering", name, args ?? new NetworkPeeringArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkPeering(string name, Input<string> id, NetworkPeeringState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/networkPeering:NetworkPeering", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/UpCloudLtd/pulumi-upcloud/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkPeering Get(string name, Input<string> id, NetworkPeeringState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkPeering(name, id, state, options);
        }
    }

    public sealed class NetworkPeeringArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configured status of the network peering.
        /// </summary>
        [Input("configuredStatus")]
        public Input<string>? ConfiguredStatus { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the network peering.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the network peering.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Local network of the network peering.
        /// </summary>
        [Input("network", required: true)]
        public Input<Inputs.NetworkPeeringNetworkArgs> Network { get; set; } = null!;

        /// <summary>
        /// Peer network of the network peering.
        /// </summary>
        [Input("peerNetwork", required: true)]
        public Input<Inputs.NetworkPeeringPeerNetworkArgs> PeerNetwork { get; set; } = null!;

        public NetworkPeeringArgs()
        {
        }
        public static new NetworkPeeringArgs Empty => new NetworkPeeringArgs();
    }

    public sealed class NetworkPeeringState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configured status of the network peering.
        /// </summary>
        [Input("configuredStatus")]
        public Input<string>? ConfiguredStatus { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the network peering.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the network peering.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Local network of the network peering.
        /// </summary>
        [Input("network")]
        public Input<Inputs.NetworkPeeringNetworkGetArgs>? Network { get; set; }

        /// <summary>
        /// Peer network of the network peering.
        /// </summary>
        [Input("peerNetwork")]
        public Input<Inputs.NetworkPeeringPeerNetworkGetArgs>? PeerNetwork { get; set; }

        public NetworkPeeringState()
        {
        }
        public static new NetworkPeeringState Empty => new NetworkPeeringState();
    }
}
