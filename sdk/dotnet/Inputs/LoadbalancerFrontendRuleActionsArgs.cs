// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud.Inputs
{

    public sealed class LoadbalancerFrontendRuleActionsArgs : global::Pulumi.ResourceArgs
    {
        [Input("httpRedirects")]
        private InputList<Inputs.LoadbalancerFrontendRuleActionsHttpRedirectArgs>? _httpRedirects;

        /// <summary>
        /// Redirects HTTP requests to specified location or URL scheme. Only either location or scheme can be defined at a time.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleActionsHttpRedirectArgs> HttpRedirects
        {
            get => _httpRedirects ?? (_httpRedirects = new InputList<Inputs.LoadbalancerFrontendRuleActionsHttpRedirectArgs>());
            set => _httpRedirects = value;
        }

        [Input("httpReturns")]
        private InputList<Inputs.LoadbalancerFrontendRuleActionsHttpReturnArgs>? _httpReturns;

        /// <summary>
        /// Returns HTTP response with specified HTTP status.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleActionsHttpReturnArgs> HttpReturns
        {
            get => _httpReturns ?? (_httpReturns = new InputList<Inputs.LoadbalancerFrontendRuleActionsHttpReturnArgs>());
            set => _httpReturns = value;
        }

        [Input("setForwardedHeaders")]
        private InputList<Inputs.LoadbalancerFrontendRuleActionsSetForwardedHeaderArgs>? _setForwardedHeaders;

        /// <summary>
        /// Adds 'X-Forwarded-For / -Proto / -Port' headers in your forwarded requests
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleActionsSetForwardedHeaderArgs> SetForwardedHeaders
        {
            get => _setForwardedHeaders ?? (_setForwardedHeaders = new InputList<Inputs.LoadbalancerFrontendRuleActionsSetForwardedHeaderArgs>());
            set => _setForwardedHeaders = value;
        }

        [Input("setRequestHeaders")]
        private InputList<Inputs.LoadbalancerFrontendRuleActionsSetRequestHeaderArgs>? _setRequestHeaders;

        /// <summary>
        /// Set request header
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleActionsSetRequestHeaderArgs> SetRequestHeaders
        {
            get => _setRequestHeaders ?? (_setRequestHeaders = new InputList<Inputs.LoadbalancerFrontendRuleActionsSetRequestHeaderArgs>());
            set => _setRequestHeaders = value;
        }

        [Input("setResponseHeaders")]
        private InputList<Inputs.LoadbalancerFrontendRuleActionsSetResponseHeaderArgs>? _setResponseHeaders;

        /// <summary>
        /// Set response header
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleActionsSetResponseHeaderArgs> SetResponseHeaders
        {
            get => _setResponseHeaders ?? (_setResponseHeaders = new InputList<Inputs.LoadbalancerFrontendRuleActionsSetResponseHeaderArgs>());
            set => _setResponseHeaders = value;
        }

        [Input("tcpRejects")]
        private InputList<Inputs.LoadbalancerFrontendRuleActionsTcpRejectArgs>? _tcpRejects;

        /// <summary>
        /// Terminates a connection.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleActionsTcpRejectArgs> TcpRejects
        {
            get => _tcpRejects ?? (_tcpRejects = new InputList<Inputs.LoadbalancerFrontendRuleActionsTcpRejectArgs>());
            set => _tcpRejects = value;
        }

        [Input("useBackends")]
        private InputList<Inputs.LoadbalancerFrontendRuleActionsUseBackendArgs>? _useBackends;

        /// <summary>
        /// Routes traffic to specified `backend`.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleActionsUseBackendArgs> UseBackends
        {
            get => _useBackends ?? (_useBackends = new InputList<Inputs.LoadbalancerFrontendRuleActionsUseBackendArgs>());
            set => _useBackends = value;
        }

        public LoadbalancerFrontendRuleActionsArgs()
        {
        }
        public static new LoadbalancerFrontendRuleActionsArgs Empty => new LoadbalancerFrontendRuleActionsArgs();
    }
}
