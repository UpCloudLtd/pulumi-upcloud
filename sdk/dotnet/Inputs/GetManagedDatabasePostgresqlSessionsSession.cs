// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud.Inputs
{

    public sealed class GetManagedDatabasePostgresqlSessionsSessionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the application that is connected to this service.
        /// </summary>
        [Input("applicationName", required: true)]
        public string ApplicationName { get; set; } = null!;

        /// <summary>
        /// Time when this process was started, i.e., when the client connected to the server.
        /// </summary>
        [Input("backendStart", required: true)]
        public string BackendStart { get; set; } = null!;

        /// <summary>
        /// Type of current service.
        /// </summary>
        [Input("backendType", required: true)]
        public string BackendType { get; set; } = null!;

        /// <summary>
        /// Top-level transaction identifier of this service, if any.
        /// </summary>
        [Input("backendXid", required: true)]
        public int BackendXid { get; set; }

        /// <summary>
        /// The current service's xmin horizon.
        /// </summary>
        [Input("backendXmin", required: true)]
        public int BackendXmin { get; set; }

        /// <summary>
        /// IP address of the client connected to this service. If this field is null, it indicates either that the client is connected via a Unix socket on the server machine or that this is an internal process such as autovacuum.
        /// </summary>
        [Input("clientAddr", required: true)]
        public string ClientAddr { get; set; } = null!;

        /// <summary>
        /// Host name of the connected client, as reported by a reverse DNS lookup of `client_addr`.
        /// </summary>
        [Input("clientHostname", required: true)]
        public string ClientHostname { get; set; } = null!;

        /// <summary>
        /// TCP port number that the client is using for communication with this service, or -1 if a Unix socket is used.
        /// </summary>
        [Input("clientPort", required: true)]
        public int ClientPort { get; set; }

        /// <summary>
        /// OID of the database this service is connected to.
        /// </summary>
        [Input("datid", required: true)]
        public int Datid { get; set; }

        /// <summary>
        /// Name of the database this service is connected to.
        /// </summary>
        [Input("datname", required: true)]
        public string Datname { get; set; } = null!;

        /// <summary>
        /// Process ID of this service.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Text of this service's most recent query. If state is active this field shows the currently executing query. In all other states, it shows the last query that was executed.
        /// </summary>
        [Input("query", required: true)]
        public string Query { get; set; } = null!;

        /// <summary>
        /// The active query current duration.
        /// </summary>
        [Input("queryDuration", required: true)]
        public string QueryDuration { get; set; } = null!;

        /// <summary>
        /// Time when the currently active query was started, or if state is not active, when the last query was started.
        /// </summary>
        [Input("queryStart", required: true)]
        public string QueryStart { get; set; } = null!;

        /// <summary>
        /// Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
        /// </summary>
        [Input("state", required: true)]
        public string State { get; set; } = null!;

        /// <summary>
        /// Time when the state was last changed.
        /// </summary>
        [Input("stateChange", required: true)]
        public string StateChange { get; set; } = null!;

        /// <summary>
        /// Name of the user logged into this service.
        /// </summary>
        [Input("usename", required: true)]
        public string Usename { get; set; } = null!;

        /// <summary>
        /// OID of the user logged into this service.
        /// </summary>
        [Input("usesysid", required: true)]
        public int Usesysid { get; set; }

        /// <summary>
        /// Wait event name if service is currently waiting.
        /// </summary>
        [Input("waitEvent", required: true)]
        public string WaitEvent { get; set; } = null!;

        /// <summary>
        /// The type of event for which the service is waiting, if any; otherwise NULL.
        /// </summary>
        [Input("waitEventType", required: true)]
        public string WaitEventType { get; set; } = null!;

        /// <summary>
        /// Time when this process' current transaction was started, or null if no transaction is active.
        /// </summary>
        [Input("xactStart", required: true)]
        public string XactStart { get; set; } = null!;

        public GetManagedDatabasePostgresqlSessionsSessionArgs()
        {
        }
        public static new GetManagedDatabasePostgresqlSessionsSessionArgs Empty => new GetManagedDatabasePostgresqlSessionsSessionArgs();
    }
}
