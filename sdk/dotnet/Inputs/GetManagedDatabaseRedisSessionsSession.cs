// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud.Inputs
{

    public sealed class GetManagedDatabaseRedisSessionsSessionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Number of active channel subscriptions
        /// </summary>
        [Input("activeChannelSubscriptions", required: true)]
        public int ActiveChannelSubscriptions { get; set; }

        /// <summary>
        /// Current database ID
        /// </summary>
        [Input("activeDatabase", required: true)]
        public string ActiveDatabase { get; set; } = null!;

        /// <summary>
        /// Number of pattern matching subscriptions.
        /// </summary>
        [Input("activePatternMatchingChannelSubscriptions", required: true)]
        public int ActivePatternMatchingChannelSubscriptions { get; set; }

        /// <summary>
        /// Name of the application that is connected to this service.
        /// </summary>
        [Input("applicationName", required: true)]
        public string ApplicationName { get; set; } = null!;

        /// <summary>
        /// Number of pattern matching subscriptions.
        /// </summary>
        [Input("clientAddr", required: true)]
        public string ClientAddr { get; set; } = null!;

        /// <summary>
        /// Total duration of the connection in nanoseconds.
        /// </summary>
        [Input("connectionAge", required: true)]
        public int ConnectionAge { get; set; }

        /// <summary>
        /// Idle time of the connection in nanoseconds.
        /// </summary>
        [Input("connectionIdle", required: true)]
        public int ConnectionIdle { get; set; }

        [Input("flags", required: true)]
        private List<string>? _flags;

        /// <summary>
        /// A set containing flags' descriptions.
        /// </summary>
        public List<string> Flags
        {
            get => _flags ?? (_flags = new List<string>());
            set => _flags = value;
        }

        /// <summary>
        /// Client connection flags in raw string format.
        /// </summary>
        [Input("flagsRaw", required: true)]
        public string FlagsRaw { get; set; } = null!;

        /// <summary>
        /// Process ID of this session.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Number of commands in a MULTI/EXEC context.
        /// </summary>
        [Input("multiExecCommands", required: true)]
        public int MultiExecCommands { get; set; }

        /// <summary>
        /// Output buffer length.
        /// </summary>
        [Input("outputBuffer", required: true)]
        public int OutputBuffer { get; set; }

        /// <summary>
        /// Output buffer memory usage.
        /// </summary>
        [Input("outputBufferMemory", required: true)]
        public int OutputBufferMemory { get; set; }

        /// <summary>
        /// Output list length (replies are queued in this list when the buffer is full).
        /// </summary>
        [Input("outputListLength", required: true)]
        public int OutputListLength { get; set; }

        /// <summary>
        /// The last executed command.
        /// </summary>
        [Input("query", required: true)]
        public string Query { get; set; } = null!;

        /// <summary>
        /// Query buffer length (0 means no query pending).
        /// </summary>
        [Input("queryBuffer", required: true)]
        public int QueryBuffer { get; set; }

        /// <summary>
        /// Free space of the query buffer (0 means the buffer is full).
        /// </summary>
        [Input("queryBufferFree", required: true)]
        public int QueryBufferFree { get; set; }

        public GetManagedDatabaseRedisSessionsSessionArgs()
        {
        }
        public static new GetManagedDatabaseRedisSessionsSessionArgs Empty => new GetManagedDatabaseRedisSessionsSessionArgs();
    }
}
