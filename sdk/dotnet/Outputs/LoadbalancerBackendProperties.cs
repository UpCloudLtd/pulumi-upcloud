// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud.Outputs
{

    [OutputType]
    public sealed class LoadbalancerBackendProperties
    {
        /// <summary>
        /// Expected HTTP status code returned by the customer application to mark server as healthy. Ignored for tcp type.
        /// </summary>
        public readonly int? HealthCheckExpectedStatus;
        /// <summary>
        /// Sets how many failed health checks are allowed until the backend member is taken off from the rotation.
        /// </summary>
        public readonly int? HealthCheckFall;
        /// <summary>
        /// Interval between health checks.
        /// </summary>
        public readonly int? HealthCheckInterval;
        /// <summary>
        /// Sets how many passing checks there must be before returning the backend member to the rotation.
        /// </summary>
        public readonly int? HealthCheckRise;
        /// <summary>
        /// Enables certificate verification with the system CA certificate bundle. Works with https scheme in health_check_url, otherwise ignored.
        /// </summary>
        public readonly bool? HealthCheckTlsVerify;
        /// <summary>
        /// Health check type.
        /// </summary>
        public readonly string? HealthCheckType;
        /// <summary>
        /// Target path for health check HTTP GET requests. Ignored for tcp type.
        /// </summary>
        public readonly string? HealthCheckUrl;
        /// <summary>
        /// Allow HTTP/2 connections to backend members by utilizing ALPN extension of TLS protocol, therefore it can only be enabled when tls_enabled is set to true. Note: members should support HTTP/2 for this setting to work.
        /// </summary>
        public readonly bool? Http2Enabled;
        /// <summary>
        /// Enable outbound proxy protocol by setting the desired version. Empty string disables proxy protocol.
        /// </summary>
        public readonly string? OutboundProxyProtocol;
        /// <summary>
        /// Sets sticky session cookie name. Empty string disables sticky session.
        /// </summary>
        public readonly string? StickySessionCookieName;
        /// <summary>
        /// Backend server timeout in seconds.
        /// </summary>
        public readonly int? TimeoutServer;
        /// <summary>
        /// Maximum inactivity time on the client and server side for tunnels in seconds.
        /// </summary>
        public readonly int? TimeoutTunnel;
        /// <summary>
        /// Set of TLS config names
        /// </summary>
        public readonly ImmutableArray<string> TlsConfigs;
        /// <summary>
        /// Enables TLS connection from the load balancer to backend servers.
        /// </summary>
        public readonly bool? TlsEnabled;
        /// <summary>
        /// If enabled, then the system CA certificate bundle will be used for the certificate verification.
        /// </summary>
        public readonly bool? TlsUseSystemCa;
        /// <summary>
        /// Enables backend servers certificate verification. Please make sure that TLS config with the certificate bundle of type authority attached to the backend or `tls_use_system_ca` enabled. Note: `tls_verify` has preference over `health_check_tls_verify` when `tls_enabled` in true.
        /// </summary>
        public readonly bool? TlsVerify;

        [OutputConstructor]
        private LoadbalancerBackendProperties(
            int? healthCheckExpectedStatus,

            int? healthCheckFall,

            int? healthCheckInterval,

            int? healthCheckRise,

            bool? healthCheckTlsVerify,

            string? healthCheckType,

            string? healthCheckUrl,

            bool? http2Enabled,

            string? outboundProxyProtocol,

            string? stickySessionCookieName,

            int? timeoutServer,

            int? timeoutTunnel,

            ImmutableArray<string> tlsConfigs,

            bool? tlsEnabled,

            bool? tlsUseSystemCa,

            bool? tlsVerify)
        {
            HealthCheckExpectedStatus = healthCheckExpectedStatus;
            HealthCheckFall = healthCheckFall;
            HealthCheckInterval = healthCheckInterval;
            HealthCheckRise = healthCheckRise;
            HealthCheckTlsVerify = healthCheckTlsVerify;
            HealthCheckType = healthCheckType;
            HealthCheckUrl = healthCheckUrl;
            Http2Enabled = http2Enabled;
            OutboundProxyProtocol = outboundProxyProtocol;
            StickySessionCookieName = stickySessionCookieName;
            TimeoutServer = timeoutServer;
            TimeoutTunnel = timeoutTunnel;
            TlsConfigs = tlsConfigs;
            TlsEnabled = tlsEnabled;
            TlsUseSystemCa = tlsUseSystemCa;
            TlsVerify = tlsVerify;
        }
    }
}
