// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud
{
    /// <summary>
    /// Manages UpCloud storage templates. The storage templates are stored in the system as storages with `template` type.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Upcloud = Pulumi.Upcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var template = new Upcloud.StorageTemplate("template", new()
    ///     {
    ///         Labels = 
    ///         {
    ///             { "os", "linux" },
    ///             { "usage", "example" },
    ///         },
    ///         SourceStorage = "e0328f8a-9944-406b-99c3-656dcc03e671",
    ///         Title = "custom-storage-template",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UpcloudResourceType("upcloud:index/storageTemplate:StorageTemplate")]
    public partial class StorageTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Sets if the storage is encrypted at rest.
        /// </summary>
        [Output("encrypt")]
        public Output<bool> Encrypt { get; private set; } = null!;

        /// <summary>
        /// User defined key-value pairs to classify the storage.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The size of the storage in gigabytes.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The source storage that is used as a base for this storage template.
        /// </summary>
        [Output("sourceStorage")]
        public Output<string> SourceStorage { get; private set; } = null!;

        /// <summary>
        /// System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore
        /// and can not be modified by the user.
        /// </summary>
        [Output("systemLabels")]
        public Output<ImmutableDictionary<string, string>> SystemLabels { get; private set; } = null!;

        /// <summary>
        /// The tier of the storage.
        /// </summary>
        [Output("tier")]
        public Output<string> Tier { get; private set; } = null!;

        /// <summary>
        /// The title of the storage.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// The type of the storage.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The zone the storage is in, e.g. `de-fra1`.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a StorageTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageTemplate(string name, StorageTemplateArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/storageTemplate:StorageTemplate", name, args ?? new StorageTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageTemplate(string name, Input<string> id, StorageTemplateState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/storageTemplate:StorageTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/UpCloudLtd/pulumi-upcloud/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageTemplate Get(string name, Input<string> id, StorageTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new StorageTemplate(name, id, state, options);
        }
    }

    public sealed class StorageTemplateArgs : global::Pulumi.ResourceArgs
    {
        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the storage.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The source storage that is used as a base for this storage template.
        /// </summary>
        [Input("sourceStorage", required: true)]
        public Input<string> SourceStorage { get; set; } = null!;

        /// <summary>
        /// The title of the storage.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public StorageTemplateArgs()
        {
        }
        public static new StorageTemplateArgs Empty => new StorageTemplateArgs();
    }

    public sealed class StorageTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sets if the storage is encrypted at rest.
        /// </summary>
        [Input("encrypt")]
        public Input<bool>? Encrypt { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the storage.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The size of the storage in gigabytes.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The source storage that is used as a base for this storage template.
        /// </summary>
        [Input("sourceStorage")]
        public Input<string>? SourceStorage { get; set; }

        [Input("systemLabels")]
        private InputMap<string>? _systemLabels;

        /// <summary>
        /// System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore
        /// and can not be modified by the user.
        /// </summary>
        public InputMap<string> SystemLabels
        {
            get => _systemLabels ?? (_systemLabels = new InputMap<string>());
            set => _systemLabels = value;
        }

        /// <summary>
        /// The tier of the storage.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// The title of the storage.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The type of the storage.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The zone the storage is in, e.g. `de-fra1`.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public StorageTemplateState()
        {
        }
        public static new StorageTemplateState Empty => new StorageTemplateState();
    }
}
