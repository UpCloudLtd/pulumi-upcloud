// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud
{
    public static class GetStorage
    {
        /// <summary>
        /// Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
        /// 
        /// Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Upcloud = Pulumi.Upcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var appImage = Upcloud.GetStorage.Invoke(new()
        ///     {
        ///         Type = "template",
        ///         NameRegex = "^app_image.*",
        ///         MostRecent = true,
        ///     });
        /// 
        ///     var example = new Upcloud.Server("example", new()
        ///     {
        ///         Hostname = "debian.example.tld",
        ///         Zone = "fi-hel1",
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Upcloud.Inputs.ServerNetworkInterfaceArgs
        ///             {
        ///                 Type = "public",
        ///             },
        ///         },
        ///         Template = new Upcloud.Inputs.ServerTemplateArgs
        ///         {
        ///             Storage = appImage.Apply(getStorageResult =&gt; getStorageResult.Id),
        ///         },
        ///     });
        /// 
        ///     // Build only new servers with your latest custom image 
        ///     //
        ///     // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
        ///     var example2 = new Upcloud.Server("example2", new()
        ///     {
        ///         Hostname = "debian.example2.tld",
        ///         Zone = "fi-hel1",
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Upcloud.Inputs.ServerNetworkInterfaceArgs
        ///             {
        ///                 Type = "public",
        ///             },
        ///         },
        ///         Template = new Upcloud.Inputs.ServerTemplateArgs
        ///         {
        ///             Storage = appImage.Apply(getStorageResult =&gt; getStorageResult.Id),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStorageResult> InvokeAsync(GetStorageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStorageResult>("upcloud:index/getStorage:getStorage", args ?? new GetStorageArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
        /// 
        /// Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Upcloud = Pulumi.Upcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var appImage = Upcloud.GetStorage.Invoke(new()
        ///     {
        ///         Type = "template",
        ///         NameRegex = "^app_image.*",
        ///         MostRecent = true,
        ///     });
        /// 
        ///     var example = new Upcloud.Server("example", new()
        ///     {
        ///         Hostname = "debian.example.tld",
        ///         Zone = "fi-hel1",
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Upcloud.Inputs.ServerNetworkInterfaceArgs
        ///             {
        ///                 Type = "public",
        ///             },
        ///         },
        ///         Template = new Upcloud.Inputs.ServerTemplateArgs
        ///         {
        ///             Storage = appImage.Apply(getStorageResult =&gt; getStorageResult.Id),
        ///         },
        ///     });
        /// 
        ///     // Build only new servers with your latest custom image 
        ///     //
        ///     // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
        ///     var example2 = new Upcloud.Server("example2", new()
        ///     {
        ///         Hostname = "debian.example2.tld",
        ///         Zone = "fi-hel1",
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Upcloud.Inputs.ServerNetworkInterfaceArgs
        ///             {
        ///                 Type = "public",
        ///             },
        ///         },
        ///         Template = new Upcloud.Inputs.ServerTemplateArgs
        ///         {
        ///             Storage = appImage.Apply(getStorageResult =&gt; getStorageResult.Id),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStorageResult> Invoke(GetStorageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageResult>("upcloud:index/getStorage:getStorage", args ?? new GetStorageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
        /// 
        /// Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Upcloud = Pulumi.Upcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var appImage = Upcloud.GetStorage.Invoke(new()
        ///     {
        ///         Type = "template",
        ///         NameRegex = "^app_image.*",
        ///         MostRecent = true,
        ///     });
        /// 
        ///     var example = new Upcloud.Server("example", new()
        ///     {
        ///         Hostname = "debian.example.tld",
        ///         Zone = "fi-hel1",
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Upcloud.Inputs.ServerNetworkInterfaceArgs
        ///             {
        ///                 Type = "public",
        ///             },
        ///         },
        ///         Template = new Upcloud.Inputs.ServerTemplateArgs
        ///         {
        ///             Storage = appImage.Apply(getStorageResult =&gt; getStorageResult.Id),
        ///         },
        ///     });
        /// 
        ///     // Build only new servers with your latest custom image 
        ///     //
        ///     // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
        ///     var example2 = new Upcloud.Server("example2", new()
        ///     {
        ///         Hostname = "debian.example2.tld",
        ///         Zone = "fi-hel1",
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Upcloud.Inputs.ServerNetworkInterfaceArgs
        ///             {
        ///                 Type = "public",
        ///             },
        ///         },
        ///         Template = new Upcloud.Inputs.ServerTemplateArgs
        ///         {
        ///             Storage = appImage.Apply(getStorageResult =&gt; getStorageResult.Id),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStorageResult> Invoke(GetStorageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageResult>("upcloud:index/getStorage:getStorage", args ?? new GetStorageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStorageArgs : global::Pulumi.InvokeArgs
    {
        [Input("accessType")]
        public string? AccessType { get; set; }

        [Input("id")]
        public string? Id { get; set; }

        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("title")]
        public string? Title { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        [Input("zone")]
        public string? Zone { get; set; }

        public GetStorageArgs()
        {
        }
        public static new GetStorageArgs Empty => new GetStorageArgs();
    }

    public sealed class GetStorageInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accessType")]
        public Input<string>? AccessType { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetStorageInvokeArgs()
        {
        }
        public static new GetStorageInvokeArgs Empty => new GetStorageInvokeArgs();
    }


    [OutputType]
    public sealed class GetStorageResult
    {
        public readonly string AccessType;
        public readonly bool Encrypt;
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly bool? MostRecent;
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly int Size;
        public readonly string State;
        public readonly ImmutableDictionary<string, string> SystemLabels;
        public readonly string Tier;
        public readonly string Title;
        public readonly string Type;
        public readonly string Zone;

        [OutputConstructor]
        private GetStorageResult(
            string accessType,

            bool encrypt,

            string id,

            ImmutableDictionary<string, string> labels,

            bool? mostRecent,

            string? name,

            string? nameRegex,

            int size,

            string state,

            ImmutableDictionary<string, string> systemLabels,

            string tier,

            string title,

            string type,

            string zone)
        {
            AccessType = accessType;
            Encrypt = encrypt;
            Id = id;
            Labels = labels;
            MostRecent = mostRecent;
            Name = name;
            NameRegex = nameRegex;
            Size = size;
            State = state;
            SystemLabels = systemLabels;
            Tier = tier;
            Title = title;
            Type = type;
            Zone = zone;
        }
    }
}
