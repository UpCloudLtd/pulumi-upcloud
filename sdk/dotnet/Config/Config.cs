// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace UpCloud.Pulumi.UpCloud
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("upcloud");

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password"));
        /// <summary>
        /// Password for UpCloud API user. Can also be configured using the `UPCLOUD_PASSWORD` environment variable.
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<int?> _requestTimeoutSec = new __Value<int?>(() => __config.GetInt32("requestTimeoutSec"));
        /// <summary>
        /// The duration (in seconds) that the provider waits for an HTTP request towards UpCloud API to complete. Defaults to 120
        /// seconds
        /// </summary>
        public static int? RequestTimeoutSec
        {
            get => _requestTimeoutSec.Get();
            set => _requestTimeoutSec.Set(value);
        }

        private static readonly __Value<int?> _retryMax = new __Value<int?>(() => __config.GetInt32("retryMax"));
        /// <summary>
        /// Maximum number of retries
        /// </summary>
        public static int? RetryMax
        {
            get => _retryMax.Get();
            set => _retryMax.Set(value);
        }

        private static readonly __Value<int?> _retryWaitMaxSec = new __Value<int?>(() => __config.GetInt32("retryWaitMaxSec"));
        /// <summary>
        /// Maximum time to wait between retries
        /// </summary>
        public static int? RetryWaitMaxSec
        {
            get => _retryWaitMaxSec.Get();
            set => _retryWaitMaxSec.Set(value);
        }

        private static readonly __Value<int?> _retryWaitMinSec = new __Value<int?>(() => __config.GetInt32("retryWaitMinSec"));
        /// <summary>
        /// Minimum time to wait between retries
        /// </summary>
        public static int? RetryWaitMinSec
        {
            get => _retryWaitMinSec.Get();
            set => _retryWaitMinSec.Set(value);
        }

        private static readonly __Value<string?> _username = new __Value<string?>(() => __config.Get("username"));
        /// <summary>
        /// UpCloud username with API access. Can also be configured using the `UPCLOUD_USERNAME` environment variable.
        /// </summary>
        public static string? Username
        {
            get => _username.Get();
            set => _username.Set(value);
        }

    }
}
