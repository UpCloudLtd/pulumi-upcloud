// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upcloud
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [UpcloudResourceType("upcloud:index/gatewayConnectionTunnel:GatewayConnectionTunnel")]
    public partial class GatewayConnectionTunnel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the upcloud.GatewayConnection resource to which the tunnel belongs
        /// </summary>
        [Output("connectionId")]
        public Output<string> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// Configuration for authenticating with pre-shared key
        /// </summary>
        [Output("ipsecAuthPsk")]
        public Output<Outputs.GatewayConnectionTunnelIpsecAuthPsk> IpsecAuthPsk { get; private set; } = null!;

        /// <summary>
        /// IPsec configuration for the tunnel
        /// </summary>
        [Output("ipsecProperties")]
        public Output<Outputs.GatewayConnectionTunnelIpsecProperties> IpsecProperties { get; private set; } = null!;

        /// <summary>
        /// Public (UpCloud) endpoint address of this tunnel
        /// </summary>
        [Output("localAddressName")]
        public Output<string> LocalAddressName { get; private set; } = null!;

        /// <summary>
        /// The name of the tunnel, should be unique within the connection
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Tunnel's current operational, effective state
        /// </summary>
        [Output("operationalState")]
        public Output<string> OperationalState { get; private set; } = null!;

        /// <summary>
        /// Remote public IP address of the tunnel
        /// </summary>
        [Output("remoteAddress")]
        public Output<string> RemoteAddress { get; private set; } = null!;

        /// <summary>
        /// The UUID of the tunnel
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayConnectionTunnel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayConnectionTunnel(string name, GatewayConnectionTunnelArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/gatewayConnectionTunnel:GatewayConnectionTunnel", name, args ?? new GatewayConnectionTunnelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayConnectionTunnel(string name, Input<string> id, GatewayConnectionTunnelState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/gatewayConnectionTunnel:GatewayConnectionTunnel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/UpCloudLtd/pulumi-upcloud/releases/download/v${VERSION}/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayConnectionTunnel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayConnectionTunnel Get(string name, Input<string> id, GatewayConnectionTunnelState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewayConnectionTunnel(name, id, state, options);
        }
    }

    public sealed class GatewayConnectionTunnelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the upcloud.GatewayConnection resource to which the tunnel belongs
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        /// <summary>
        /// Configuration for authenticating with pre-shared key
        /// </summary>
        [Input("ipsecAuthPsk", required: true)]
        public Input<Inputs.GatewayConnectionTunnelIpsecAuthPskArgs> IpsecAuthPsk { get; set; } = null!;

        /// <summary>
        /// IPsec configuration for the tunnel
        /// </summary>
        [Input("ipsecProperties")]
        public Input<Inputs.GatewayConnectionTunnelIpsecPropertiesArgs>? IpsecProperties { get; set; }

        /// <summary>
        /// Public (UpCloud) endpoint address of this tunnel
        /// </summary>
        [Input("localAddressName", required: true)]
        public Input<string> LocalAddressName { get; set; } = null!;

        /// <summary>
        /// The name of the tunnel, should be unique within the connection
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Remote public IP address of the tunnel
        /// </summary>
        [Input("remoteAddress", required: true)]
        public Input<string> RemoteAddress { get; set; } = null!;

        public GatewayConnectionTunnelArgs()
        {
        }
        public static new GatewayConnectionTunnelArgs Empty => new GatewayConnectionTunnelArgs();
    }

    public sealed class GatewayConnectionTunnelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the upcloud.GatewayConnection resource to which the tunnel belongs
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        /// <summary>
        /// Configuration for authenticating with pre-shared key
        /// </summary>
        [Input("ipsecAuthPsk")]
        public Input<Inputs.GatewayConnectionTunnelIpsecAuthPskGetArgs>? IpsecAuthPsk { get; set; }

        /// <summary>
        /// IPsec configuration for the tunnel
        /// </summary>
        [Input("ipsecProperties")]
        public Input<Inputs.GatewayConnectionTunnelIpsecPropertiesGetArgs>? IpsecProperties { get; set; }

        /// <summary>
        /// Public (UpCloud) endpoint address of this tunnel
        /// </summary>
        [Input("localAddressName")]
        public Input<string>? LocalAddressName { get; set; }

        /// <summary>
        /// The name of the tunnel, should be unique within the connection
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Tunnel's current operational, effective state
        /// </summary>
        [Input("operationalState")]
        public Input<string>? OperationalState { get; set; }

        /// <summary>
        /// Remote public IP address of the tunnel
        /// </summary>
        [Input("remoteAddress")]
        public Input<string>? RemoteAddress { get; set; }

        /// <summary>
        /// The UUID of the tunnel
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public GatewayConnectionTunnelState()
        {
        }
        public static new GatewayConnectionTunnelState Empty => new GatewayConnectionTunnelState();
    }
}
