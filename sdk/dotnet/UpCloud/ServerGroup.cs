// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud
{
    /// <summary>
    /// Server groups allow grouping servers and defining anti-affinity for the servers.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using UpCloud = UpCloud.Pulumi.UpCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new UpCloud.ServerGroup("main", new()
    ///     {
    ///         AntiAffinityPolicy = "yes",
    ///         Labels = 
    ///         {
    ///             { "key1", "val1" },
    ///             { "key2", "val2" },
    ///             { "key3", "val3" },
    ///         },
    ///         Members = new[]
    ///         {
    ///             "00b51165-fb58-4b77-bb8c-552277be1764",
    ///             "00d56575-3821-3301-9de4-2b2bc7e35pqf",
    ///             "000012dc-fe8c-a3y6-91f9-0db1215c36cf",
    ///         },
    ///         Title = "main_group",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import upcloud:index/serverGroup:ServerGroup main ead4544f-10bf-42a3-b98a-a0fea2e2ad14
    /// ```
    /// </summary>
    [UpCloudResourceType("upcloud:index/serverGroup:ServerGroup")]
    public partial class ServerGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
        /// group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn't allow
        /// servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
        /// different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
        /// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
        /// please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
        /// server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
        /// servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
        /// </summary>
        [Output("antiAffinityPolicy")]
        public Output<string> AntiAffinityPolicy { get; private set; } = null!;

        /// <summary>
        /// User defined key-value pairs to classify the server group.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group`
        /// property of `upcloud.Server`. See also `track_members` property.
        /// </summary>
        [Output("members")]
        public Output<ImmutableArray<string>> Members { get; private set; } = null!;

        /// <summary>
        /// Title of your server group
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group`
        /// property of `upcloud.Server` to attach servers to the server group to avoid delayed state updates.
        /// </summary>
        [Output("trackMembers")]
        public Output<bool> TrackMembers { get; private set; } = null!;


        /// <summary>
        /// Create a ServerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerGroup(string name, ServerGroupArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/serverGroup:ServerGroup", name, args ?? new ServerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerGroup(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/serverGroup:ServerGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UpCloudLtd/pulumi-upcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerGroup Get(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerGroup(name, id, state, options);
        }
    }

    public sealed class ServerGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
        /// group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn't allow
        /// servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
        /// different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
        /// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
        /// please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
        /// server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
        /// servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
        /// </summary>
        [Input("antiAffinityPolicy")]
        public Input<string>? AntiAffinityPolicy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the server group.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("members")]
        private InputList<string>? _members;

        /// <summary>
        /// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group`
        /// property of `upcloud.Server`. See also `track_members` property.
        /// </summary>
        public InputList<string> Members
        {
            get => _members ?? (_members = new InputList<string>());
            set => _members = value;
        }

        /// <summary>
        /// Title of your server group
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group`
        /// property of `upcloud.Server` to attach servers to the server group to avoid delayed state updates.
        /// </summary>
        [Input("trackMembers")]
        public Input<bool>? TrackMembers { get; set; }

        public ServerGroupArgs()
        {
        }
        public static new ServerGroupArgs Empty => new ServerGroupArgs();
    }

    public sealed class ServerGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
        /// group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn't allow
        /// servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
        /// different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
        /// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
        /// please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
        /// server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
        /// servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
        /// </summary>
        [Input("antiAffinityPolicy")]
        public Input<string>? AntiAffinityPolicy { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the server group.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("members")]
        private InputList<string>? _members;

        /// <summary>
        /// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group`
        /// property of `upcloud.Server`. See also `track_members` property.
        /// </summary>
        public InputList<string> Members
        {
            get => _members ?? (_members = new InputList<string>());
            set => _members = value;
        }

        /// <summary>
        /// Title of your server group
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group`
        /// property of `upcloud.Server` to attach servers to the server group to avoid delayed state updates.
        /// </summary>
        [Input("trackMembers")]
        public Input<bool>? TrackMembers { get; set; }

        public ServerGroupState()
        {
        }
        public static new ServerGroupState Empty => new ServerGroupState();
    }
}
