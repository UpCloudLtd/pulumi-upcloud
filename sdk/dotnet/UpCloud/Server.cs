// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud
{
    /// <summary>
    /// The UpCloud server resource allows the creation, update and deletion of [cloud servers](https://upcloud.com/products/cloud-servers).
    /// 
    /// &gt; To deploy a GPU server, select a plan with `GPU-` prefix, e.g., `GPU-8xCPU-64GB-1xL40S`. Use `upctl zone devices` command to list per zone GPU availability.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import upcloud:index/server:Server example_server ead4544f-10bf-42a3-b98a-a0fea2e2ad14
    /// ```
    /// </summary>
    [UpCloudResourceType("upcloud:index/server:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
        /// </summary>
        [Output("bootOrder")]
        public Output<string> BootOrder { get; private set; } = null!;

        /// <summary>
        /// The number of CPU cores for the server
        /// </summary>
        [Output("cpu")]
        public Output<int> Cpu { get; private set; } = null!;

        /// <summary>
        /// Are firewall rules active for the server
        /// </summary>
        [Output("firewall")]
        public Output<bool> Firewall { get; private set; } = null!;

        /// <summary>
        /// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud hosts
        /// </summary>
        [Output("host")]
        public Output<int> Host { get; private set; } = null!;

        /// <summary>
        /// The hostname of the server.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If hot resizing fails, the apply operation will fail.
        /// </summary>
        [Output("hotResize")]
        public Output<bool> HotResize { get; private set; } = null!;

        /// <summary>
        /// User defined key-value pairs to classify the server.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Configure access credentials to the server
        /// </summary>
        [Output("login")]
        public Output<Outputs.ServerLogin?> Login { get; private set; } = null!;

        /// <summary>
        /// The amount of memory for the server (in megabytes)
        /// </summary>
        [Output("mem")]
        public Output<int> Mem { get; private set; } = null!;

        /// <summary>
        /// Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based templates.
        /// </summary>
        [Output("metadata")]
        public Output<bool?> Metadata { get; private set; } = null!;

        /// <summary>
        /// One or more blocks describing the network interfaces of the server.
        /// 
        ///     In addition to list order, the configured network interfaces are matched to the server's actual network interfaces by `index` and `ip_address` fields. This is to avoid public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list.
        /// 
        ///     We recommend explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from middle of the list.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.ServerNetworkInterface>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// The model of the server's network interfaces
        /// </summary>
        [Output("nicModel")]
        public Output<string> NicModel { get; private set; } = null!;

        /// <summary>
        /// The pricing plan used for the server. You can list available server plans with `upctl server plans`
        /// </summary>
        [Output("plan")]
        public Output<string> Plan { get; private set; } = null!;

        /// <summary>
        /// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the `members` property of `upcloud.ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it has been set to non-zero value.
        /// </summary>
        [Output("serverGroup")]
        public Output<string?> ServerGroup { get; private set; } = null!;

        [Output("simpleBackup")]
        public Output<Outputs.ServerSimpleBackup?> SimpleBackup { get; private set; } = null!;

        /// <summary>
        /// A set of storage devices associated with the server
        /// </summary>
        [Output("storageDevices")]
        public Output<ImmutableArray<Outputs.ServerStorageDevice>> StorageDevices { get; private set; } = null!;

        /// <summary>
        /// The server related tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Block describing the preconfigured operating system
        /// </summary>
        [Output("template")]
        public Output<Outputs.ServerTemplate?> Template { get; private set; } = null!;

        /// <summary>
        /// The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;

        /// <summary>
        /// A short, informational description of the server.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Defines URL for a server setup script, or the script body itself
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// The model of the server's video interface
        /// </summary>
        [Output("videoModel")]
        public Output<string> VideoModel { get; private set; } = null!;

        /// <summary>
        /// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UpCloudLtd/pulumi-upcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
        /// </summary>
        [Input("bootOrder")]
        public Input<string>? BootOrder { get; set; }

        /// <summary>
        /// The number of CPU cores for the server
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// Are firewall rules active for the server
        /// </summary>
        [Input("firewall")]
        public Input<bool>? Firewall { get; set; }

        /// <summary>
        /// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud hosts
        /// </summary>
        [Input("host")]
        public Input<int>? Host { get; set; }

        /// <summary>
        /// The hostname of the server.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        /// <summary>
        /// If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If hot resizing fails, the apply operation will fail.
        /// </summary>
        [Input("hotResize")]
        public Input<bool>? HotResize { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the server.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Configure access credentials to the server
        /// </summary>
        [Input("login")]
        public Input<Inputs.ServerLoginArgs>? Login { get; set; }

        /// <summary>
        /// The amount of memory for the server (in megabytes)
        /// </summary>
        [Input("mem")]
        public Input<int>? Mem { get; set; }

        /// <summary>
        /// Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based templates.
        /// </summary>
        [Input("metadata")]
        public Input<bool>? Metadata { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.ServerNetworkInterfaceArgs>? _networkInterfaces;

        /// <summary>
        /// One or more blocks describing the network interfaces of the server.
        /// 
        ///     In addition to list order, the configured network interfaces are matched to the server's actual network interfaces by `index` and `ip_address` fields. This is to avoid public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list.
        /// 
        ///     We recommend explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from middle of the list.
        /// </summary>
        public InputList<Inputs.ServerNetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.ServerNetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// The model of the server's network interfaces
        /// </summary>
        [Input("nicModel")]
        public Input<string>? NicModel { get; set; }

        /// <summary>
        /// The pricing plan used for the server. You can list available server plans with `upctl server plans`
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the `members` property of `upcloud.ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it has been set to non-zero value.
        /// </summary>
        [Input("serverGroup")]
        public Input<string>? ServerGroup { get; set; }

        [Input("simpleBackup")]
        public Input<Inputs.ServerSimpleBackupArgs>? SimpleBackup { get; set; }

        [Input("storageDevices")]
        private InputList<Inputs.ServerStorageDeviceArgs>? _storageDevices;

        /// <summary>
        /// A set of storage devices associated with the server
        /// </summary>
        public InputList<Inputs.ServerStorageDeviceArgs> StorageDevices
        {
            get => _storageDevices ?? (_storageDevices = new InputList<Inputs.ServerStorageDeviceArgs>());
            set => _storageDevices = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The server related tags
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Block describing the preconfigured operating system
        /// </summary>
        [Input("template")]
        public Input<Inputs.ServerTemplateArgs>? Template { get; set; }

        /// <summary>
        /// The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// A short, informational description of the server.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Defines URL for a server setup script, or the script body itself
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The model of the server's video interface
        /// </summary>
        [Input("videoModel")]
        public Input<string>? VideoModel { get; set; }

        /// <summary>
        /// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public ServerArgs()
        {
        }
        public static new ServerArgs Empty => new ServerArgs();
    }

    public sealed class ServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
        /// </summary>
        [Input("bootOrder")]
        public Input<string>? BootOrder { get; set; }

        /// <summary>
        /// The number of CPU cores for the server
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// Are firewall rules active for the server
        /// </summary>
        [Input("firewall")]
        public Input<bool>? Firewall { get; set; }

        /// <summary>
        /// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud hosts
        /// </summary>
        [Input("host")]
        public Input<int>? Host { get; set; }

        /// <summary>
        /// The hostname of the server.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If hot resizing fails, the apply operation will fail.
        /// </summary>
        [Input("hotResize")]
        public Input<bool>? HotResize { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the server.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Configure access credentials to the server
        /// </summary>
        [Input("login")]
        public Input<Inputs.ServerLoginGetArgs>? Login { get; set; }

        /// <summary>
        /// The amount of memory for the server (in megabytes)
        /// </summary>
        [Input("mem")]
        public Input<int>? Mem { get; set; }

        /// <summary>
        /// Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based templates.
        /// </summary>
        [Input("metadata")]
        public Input<bool>? Metadata { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.ServerNetworkInterfaceGetArgs>? _networkInterfaces;

        /// <summary>
        /// One or more blocks describing the network interfaces of the server.
        /// 
        ///     In addition to list order, the configured network interfaces are matched to the server's actual network interfaces by `index` and `ip_address` fields. This is to avoid public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list.
        /// 
        ///     We recommend explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from middle of the list.
        /// </summary>
        public InputList<Inputs.ServerNetworkInterfaceGetArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.ServerNetworkInterfaceGetArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// The model of the server's network interfaces
        /// </summary>
        [Input("nicModel")]
        public Input<string>? NicModel { get; set; }

        /// <summary>
        /// The pricing plan used for the server. You can list available server plans with `upctl server plans`
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the `members` property of `upcloud.ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it has been set to non-zero value.
        /// </summary>
        [Input("serverGroup")]
        public Input<string>? ServerGroup { get; set; }

        [Input("simpleBackup")]
        public Input<Inputs.ServerSimpleBackupGetArgs>? SimpleBackup { get; set; }

        [Input("storageDevices")]
        private InputList<Inputs.ServerStorageDeviceGetArgs>? _storageDevices;

        /// <summary>
        /// A set of storage devices associated with the server
        /// </summary>
        public InputList<Inputs.ServerStorageDeviceGetArgs> StorageDevices
        {
            get => _storageDevices ?? (_storageDevices = new InputList<Inputs.ServerStorageDeviceGetArgs>());
            set => _storageDevices = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The server related tags
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Block describing the preconfigured operating system
        /// </summary>
        [Input("template")]
        public Input<Inputs.ServerTemplateGetArgs>? Template { get; set; }

        /// <summary>
        /// The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// A short, informational description of the server.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Defines URL for a server setup script, or the script body itself
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The model of the server's video interface
        /// </summary>
        [Input("videoModel")]
        public Input<string>? VideoModel { get; set; }

        /// <summary>
        /// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ServerState()
        {
        }
        public static new ServerState Empty => new ServerState();
    }
}
