// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud
{
    /// <summary>
    /// Manages an on-demand storage backup.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using UpCloud = UpCloud.Pulumi.UpCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var backup1 = new UpCloud.StorageBackup("backup_1", new()
    ///     {
    ///         Title = "backup",
    ///         SourceStorage = "01185ec5-1b0b-4cbc-a968-eb920ac7572d",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UpCloudResourceType("upcloud:index/storageBackup:StorageBackup")]
    public partial class StorageBackup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp of the backup creation.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Sets if the storage is encrypted at rest.
        /// </summary>
        [Output("encrypt")]
        public Output<bool> Encrypt { get; private set; } = null!;

        /// <summary>
        /// User defined key-value pairs to classify the storage.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The size of the storage in gigabytes.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The UUID of the storage to back up.
        /// </summary>
        [Output("sourceStorage")]
        public Output<string> SourceStorage { get; private set; } = null!;

        /// <summary>
        /// System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore and can not be modified by the user.
        /// </summary>
        [Output("systemLabels")]
        public Output<ImmutableDictionary<string, string>> SystemLabels { get; private set; } = null!;

        /// <summary>
        /// The tier of the storage.
        /// </summary>
        [Output("tier")]
        public Output<string> Tier { get; private set; } = null!;

        /// <summary>
        /// Title of the backup.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// The type of the storage.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The zone the storage is in, e.g. `de-fra1`.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a StorageBackup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageBackup(string name, StorageBackupArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/storageBackup:StorageBackup", name, args ?? new StorageBackupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageBackup(string name, Input<string> id, StorageBackupState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/storageBackup:StorageBackup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UpCloudLtd/pulumi-upcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageBackup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageBackup Get(string name, Input<string> id, StorageBackupState? state = null, CustomResourceOptions? options = null)
        {
            return new StorageBackup(name, id, state, options);
        }
    }

    public sealed class StorageBackupArgs : global::Pulumi.ResourceArgs
    {
        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the storage.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The UUID of the storage to back up.
        /// </summary>
        [Input("sourceStorage", required: true)]
        public Input<string> SourceStorage { get; set; } = null!;

        /// <summary>
        /// Title of the backup.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public StorageBackupArgs()
        {
        }
        public static new StorageBackupArgs Empty => new StorageBackupArgs();
    }

    public sealed class StorageBackupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp of the backup creation.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Sets if the storage is encrypted at rest.
        /// </summary>
        [Input("encrypt")]
        public Input<bool>? Encrypt { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the storage.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The size of the storage in gigabytes.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The UUID of the storage to back up.
        /// </summary>
        [Input("sourceStorage")]
        public Input<string>? SourceStorage { get; set; }

        [Input("systemLabels")]
        private InputMap<string>? _systemLabels;

        /// <summary>
        /// System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore and can not be modified by the user.
        /// </summary>
        public InputMap<string> SystemLabels
        {
            get => _systemLabels ?? (_systemLabels = new InputMap<string>());
            set => _systemLabels = value;
        }

        /// <summary>
        /// The tier of the storage.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// Title of the backup.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The type of the storage.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The zone the storage is in, e.g. `de-fra1`.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public StorageBackupState()
        {
        }
        public static new StorageBackupState Empty => new StorageBackupState();
    }
}
