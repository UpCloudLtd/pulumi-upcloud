// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud
{
    public static class GetNetworks
    {
        /// <summary>
        /// Use this data source to get the available UpCloud networks.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using UpCloud = Pulumi.UpCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var upcloud = UpCloud.GetNetworks.Invoke();
        /// 
        ///     var upcloudByZone = UpCloud.GetNetworks.Invoke(new()
        ///     {
        ///         FilterName = "^Public.*",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNetworksResult> InvokeAsync(GetNetworksArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworksResult>("upcloud:index/getNetworks:getNetworks", args ?? new GetNetworksArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the available UpCloud networks.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using UpCloud = Pulumi.UpCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var upcloud = UpCloud.GetNetworks.Invoke();
        /// 
        ///     var upcloudByZone = UpCloud.GetNetworks.Invoke(new()
        ///     {
        ///         FilterName = "^Public.*",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworksResult> Invoke(GetNetworksInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworksResult>("upcloud:index/getNetworks:getNetworks", args ?? new GetNetworksInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the available UpCloud networks.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using UpCloud = Pulumi.UpCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var upcloud = UpCloud.GetNetworks.Invoke();
        /// 
        ///     var upcloudByZone = UpCloud.GetNetworks.Invoke(new()
        ///     {
        ///         FilterName = "^Public.*",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworksResult> Invoke(GetNetworksInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworksResult>("upcloud:index/getNetworks:getNetworks", args ?? new GetNetworksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworksArgs : global::Pulumi.InvokeArgs
    {
        [Input("filterName")]
        public string? FilterName { get; set; }

        [Input("zone")]
        public string? Zone { get; set; }

        public GetNetworksArgs()
        {
        }
        public static new GetNetworksArgs Empty => new GetNetworksArgs();
    }

    public sealed class GetNetworksInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filterName")]
        public Input<string>? FilterName { get; set; }

        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetNetworksInvokeArgs()
        {
        }
        public static new GetNetworksInvokeArgs Empty => new GetNetworksInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworksResult
    {
        public readonly string? FilterName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetNetworksNetworkResult> Networks;
        public readonly string? Zone;

        [OutputConstructor]
        private GetNetworksResult(
            string? filterName,

            string id,

            ImmutableArray<Outputs.GetNetworksNetworkResult> networks,

            string? zone)
        {
            FilterName = filterName;
            Id = id;
            Networks = networks;
            Zone = zone;
        }
    }
}
