// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud.Inputs
{

    public sealed class ManagedDatabaseOpensearchPropertiesOpensearchDashboardsGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable or disable OpenSearch Dashboards.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch.
        /// </summary>
        [Input("maxOldSpaceSize")]
        public Input<int>? MaxOldSpaceSize { get; set; }

        /// <summary>
        /// Enable or disable multiple data sources in OpenSearch Dashboards.
        /// </summary>
        [Input("multipleDataSourceEnabled")]
        public Input<bool>? MultipleDataSourceEnabled { get; set; }

        /// <summary>
        /// Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch.
        /// </summary>
        [Input("opensearchRequestTimeout")]
        public Input<int>? OpensearchRequestTimeout { get; set; }

        public ManagedDatabaseOpensearchPropertiesOpensearchDashboardsGetArgs()
        {
        }
        public static new ManagedDatabaseOpensearchPropertiesOpensearchDashboardsGetArgs Empty => new ManagedDatabaseOpensearchPropertiesOpensearchDashboardsGetArgs();
    }
}
