// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud.Inputs
{

    public sealed class LoadbalancerFrontendRuleMatchersGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("bodySizeRanges")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersBodySizeRangeGetArgs>? _bodySizeRanges;

        /// <summary>
        /// Matches by range of HTTP request body sizes.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersBodySizeRangeGetArgs> BodySizeRanges
        {
            get => _bodySizeRanges ?? (_bodySizeRanges = new InputList<Inputs.LoadbalancerFrontendRuleMatchersBodySizeRangeGetArgs>());
            set => _bodySizeRanges = value;
        }

        [Input("bodySizes")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersBodySizeGetArgs>? _bodySizes;

        /// <summary>
        /// Matches by HTTP request body size.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersBodySizeGetArgs> BodySizes
        {
            get => _bodySizes ?? (_bodySizes = new InputList<Inputs.LoadbalancerFrontendRuleMatchersBodySizeGetArgs>());
            set => _bodySizes = value;
        }

        [Input("cookies")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersCookieGetArgs>? _cookies;

        /// <summary>
        /// Matches by HTTP cookie value. Cookie name must be provided.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersCookieGetArgs> Cookies
        {
            get => _cookies ?? (_cookies = new InputList<Inputs.LoadbalancerFrontendRuleMatchersCookieGetArgs>());
            set => _cookies = value;
        }

        [Input("headers")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersHeaderGetArgs>? _headers;

        /// <summary>
        /// Matches by HTTP header value. Header name must be provided.
        /// </summary>
        [Obsolete(@"Use `RequestHeader` instead.")]
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersHeaderGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.LoadbalancerFrontendRuleMatchersHeaderGetArgs>());
            set => _headers = value;
        }

        [Input("hosts")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersHostGetArgs>? _hosts;

        /// <summary>
        /// Matches by hostname. Header extracted from HTTP Headers or from TLS certificate in case of secured connection.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersHostGetArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.LoadbalancerFrontendRuleMatchersHostGetArgs>());
            set => _hosts = value;
        }

        [Input("httpMethods")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersHttpMethodGetArgs>? _httpMethods;

        /// <summary>
        /// Matches by HTTP method.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersHttpMethodGetArgs> HttpMethods
        {
            get => _httpMethods ?? (_httpMethods = new InputList<Inputs.LoadbalancerFrontendRuleMatchersHttpMethodGetArgs>());
            set => _httpMethods = value;
        }

        [Input("httpStatusRanges")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersHttpStatusRangeGetArgs>? _httpStatusRanges;

        /// <summary>
        /// Matches by range of HTTP statuses.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersHttpStatusRangeGetArgs> HttpStatusRanges
        {
            get => _httpStatusRanges ?? (_httpStatusRanges = new InputList<Inputs.LoadbalancerFrontendRuleMatchersHttpStatusRangeGetArgs>());
            set => _httpStatusRanges = value;
        }

        [Input("httpStatuses")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersHttpStatusGetArgs>? _httpStatuses;

        /// <summary>
        /// Matches by HTTP status.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersHttpStatusGetArgs> HttpStatuses
        {
            get => _httpStatuses ?? (_httpStatuses = new InputList<Inputs.LoadbalancerFrontendRuleMatchersHttpStatusGetArgs>());
            set => _httpStatuses = value;
        }

        [Input("numMembersUps")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersNumMembersUpGetArgs>? _numMembersUps;

        /// <summary>
        /// Matches by number of healthy backend members.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersNumMembersUpGetArgs> NumMembersUps
        {
            get => _numMembersUps ?? (_numMembersUps = new InputList<Inputs.LoadbalancerFrontendRuleMatchersNumMembersUpGetArgs>());
            set => _numMembersUps = value;
        }

        [Input("paths")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersPathGetArgs>? _paths;

        /// <summary>
        /// Matches by URL path.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersPathGetArgs> Paths
        {
            get => _paths ?? (_paths = new InputList<Inputs.LoadbalancerFrontendRuleMatchersPathGetArgs>());
            set => _paths = value;
        }

        [Input("requestHeaders")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersRequestHeaderGetArgs>? _requestHeaders;

        /// <summary>
        /// Matches by HTTP request header value. Header name must be provided.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersRequestHeaderGetArgs> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputList<Inputs.LoadbalancerFrontendRuleMatchersRequestHeaderGetArgs>());
            set => _requestHeaders = value;
        }

        [Input("responseHeaders")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersResponseHeaderGetArgs>? _responseHeaders;

        /// <summary>
        /// Matches by HTTP response header value. Header name must be provided.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersResponseHeaderGetArgs> ResponseHeaders
        {
            get => _responseHeaders ?? (_responseHeaders = new InputList<Inputs.LoadbalancerFrontendRuleMatchersResponseHeaderGetArgs>());
            set => _responseHeaders = value;
        }

        [Input("srcIps")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersSrcIpGetArgs>? _srcIps;

        /// <summary>
        /// Matches by source IP address.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersSrcIpGetArgs> SrcIps
        {
            get => _srcIps ?? (_srcIps = new InputList<Inputs.LoadbalancerFrontendRuleMatchersSrcIpGetArgs>());
            set => _srcIps = value;
        }

        [Input("srcPortRanges")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersSrcPortRangeGetArgs>? _srcPortRanges;

        /// <summary>
        /// Matches by range of source port numbers.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersSrcPortRangeGetArgs> SrcPortRanges
        {
            get => _srcPortRanges ?? (_srcPortRanges = new InputList<Inputs.LoadbalancerFrontendRuleMatchersSrcPortRangeGetArgs>());
            set => _srcPortRanges = value;
        }

        [Input("srcPorts")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersSrcPortGetArgs>? _srcPorts;

        /// <summary>
        /// Matches by source port number.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersSrcPortGetArgs> SrcPorts
        {
            get => _srcPorts ?? (_srcPorts = new InputList<Inputs.LoadbalancerFrontendRuleMatchersSrcPortGetArgs>());
            set => _srcPorts = value;
        }

        [Input("urlParams")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersUrlParamGetArgs>? _urlParams;

        /// <summary>
        /// Matches by URL query parameter value. Query parameter name must be provided
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersUrlParamGetArgs> UrlParams
        {
            get => _urlParams ?? (_urlParams = new InputList<Inputs.LoadbalancerFrontendRuleMatchersUrlParamGetArgs>());
            set => _urlParams = value;
        }

        [Input("urlQueries")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersUrlQueryGetArgs>? _urlQueries;

        /// <summary>
        /// Matches by URL query string.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersUrlQueryGetArgs> UrlQueries
        {
            get => _urlQueries ?? (_urlQueries = new InputList<Inputs.LoadbalancerFrontendRuleMatchersUrlQueryGetArgs>());
            set => _urlQueries = value;
        }

        [Input("urls")]
        private InputList<Inputs.LoadbalancerFrontendRuleMatchersUrlGetArgs>? _urls;

        /// <summary>
        /// Matches by URL without schema, e.g. `example.com/dashboard`.
        /// </summary>
        public InputList<Inputs.LoadbalancerFrontendRuleMatchersUrlGetArgs> Urls
        {
            get => _urls ?? (_urls = new InputList<Inputs.LoadbalancerFrontendRuleMatchersUrlGetArgs>());
            set => _urls = value;
        }

        public LoadbalancerFrontendRuleMatchersGetArgs()
        {
        }
        public static new LoadbalancerFrontendRuleMatchersGetArgs Empty => new LoadbalancerFrontendRuleMatchersGetArgs();
    }
}
