// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud.Inputs
{

    public sealed class ServerTemplateGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
        /// </summary>
        [Input("addressPosition")]
        public Input<string>? AddressPosition { get; set; }

        [Input("backupRule")]
        public Input<Inputs.ServerTemplateBackupRuleGetArgs>? BackupRule { get; set; }

        /// <summary>
        /// If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
        /// </summary>
        [Input("deleteAutoresizeBackup")]
        public Input<bool>? DeleteAutoresizeBackup { get; set; }

        /// <summary>
        /// Sets if the storage is encrypted at rest
        /// </summary>
        [Input("encrypt")]
        public Input<bool>? Encrypt { get; set; }

        /// <summary>
        /// If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
        /// 							Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
        /// 							to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
        /// 							Taking and keeping backups incure costs.
        /// </summary>
        [Input("filesystemAutoresize")]
        public Input<bool>? FilesystemAutoresize { get; set; }

        /// <summary>
        /// The unique identifier for the storage
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The size of the storage in gigabytes
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
        /// </summary>
        [Input("storage")]
        public Input<string>? Storage { get; set; }

        /// <summary>
        /// The storage tier to use.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// A short, informative description
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public ServerTemplateGetArgs()
        {
        }
        public static new ServerTemplateGetArgs Empty => new ServerTemplateGetArgs();
    }
}
