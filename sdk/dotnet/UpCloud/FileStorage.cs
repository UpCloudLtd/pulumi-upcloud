// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud
{
    /// <summary>
    /// Resource for managing UpCloud file storages (EXPERIMENTAL)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using UpCloud = UpCloud.Pulumi.UpCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create network for the File Storage
    ///     var @this = new UpCloud.Network("this", new()
    ///     {
    ///         Name = "file-storage-net-test",
    ///         Zone = "fi-hel2",
    ///         IpNetwork = new UpCloud.Inputs.NetworkIpNetworkArgs
    ///         {
    ///             Address = "172.16.8.0/24",
    ///             Dhcp = true,
    ///             Family = "IPv4",
    ///         },
    ///     });
    /// 
    ///     var example = new UpCloud.FileStorage("example", new()
    ///     {
    ///         Name = "example-file-storage-test",
    ///         Size = 250,
    ///         Zone = "fi-hel2",
    ///         ConfiguredStatus = "stopped",
    ///         Labels = 
    ///         {
    ///             { "environment", "staging" },
    ///             { "customer", "example-customer" },
    ///         },
    ///         Shares = new[]
    ///         {
    ///             new UpCloud.Inputs.FileStorageShareArgs
    ///             {
    ///                 Name = "write-to-project",
    ///                 Path = "/project",
    ///                 Acls = new[]
    ///                 {
    ///                     new UpCloud.Inputs.FileStorageShareAclArgs
    ///                     {
    ///                         Target = "172.16.8.12",
    ///                         Permission = "rw",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Networks = new[]
    ///         {
    ///             new UpCloud.Inputs.FileStorageNetworkArgs
    ///             {
    ///                 Family = "IPv4",
    ///                 Name = "example-private-net",
    ///                 Uuid = @this.Id,
    ///                 IpAddress = "172.16.8.11",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UpCloudResourceType("upcloud:index/fileStorage:FileStorage")]
    public partial class FileStorage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The service configured status indicates the service's current intended status. Managed by the customer.
        /// </summary>
        [Output("configuredStatus")]
        public Output<string> ConfiguredStatus { get; private set; } = null!;

        /// <summary>
        /// User defined key-value pairs to classify the file storage.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the file storage service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network attached to this file storage (currently supports at most one of these blocks).
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.FileStorageNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// List of shares exported by this file storage.
        /// </summary>
        [Output("shares")]
        public Output<ImmutableArray<Outputs.FileStorageShare>> Shares { get; private set; } = null!;

        /// <summary>
        /// Size of the file storage in GB.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a FileStorage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FileStorage(string name, FileStorageArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/fileStorage:FileStorage", name, args ?? new FileStorageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FileStorage(string name, Input<string> id, FileStorageState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/fileStorage:FileStorage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UpCloudLtd/pulumi-upcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FileStorage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FileStorage Get(string name, Input<string> id, FileStorageState? state = null, CustomResourceOptions? options = null)
        {
            return new FileStorage(name, id, state, options);
        }
    }

    public sealed class FileStorageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The service configured status indicates the service's current intended status. Managed by the customer.
        /// </summary>
        [Input("configuredStatus", required: true)]
        public Input<string> ConfiguredStatus { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the file storage.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the file storage service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.FileStorageNetworkArgs>? _networks;

        /// <summary>
        /// Network attached to this file storage (currently supports at most one of these blocks).
        /// </summary>
        public InputList<Inputs.FileStorageNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.FileStorageNetworkArgs>());
            set => _networks = value;
        }

        [Input("shares")]
        private InputList<Inputs.FileStorageShareArgs>? _shares;

        /// <summary>
        /// List of shares exported by this file storage.
        /// </summary>
        public InputList<Inputs.FileStorageShareArgs> Shares
        {
            get => _shares ?? (_shares = new InputList<Inputs.FileStorageShareArgs>());
            set => _shares = value;
        }

        /// <summary>
        /// Size of the file storage in GB.
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        /// <summary>
        /// Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public FileStorageArgs()
        {
        }
        public static new FileStorageArgs Empty => new FileStorageArgs();
    }

    public sealed class FileStorageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The service configured status indicates the service's current intended status. Managed by the customer.
        /// </summary>
        [Input("configuredStatus")]
        public Input<string>? ConfiguredStatus { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the file storage.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the file storage service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.FileStorageNetworkGetArgs>? _networks;

        /// <summary>
        /// Network attached to this file storage (currently supports at most one of these blocks).
        /// </summary>
        public InputList<Inputs.FileStorageNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.FileStorageNetworkGetArgs>());
            set => _networks = value;
        }

        [Input("shares")]
        private InputList<Inputs.FileStorageShareGetArgs>? _shares;

        /// <summary>
        /// List of shares exported by this file storage.
        /// </summary>
        public InputList<Inputs.FileStorageShareGetArgs> Shares
        {
            get => _shares ?? (_shares = new InputList<Inputs.FileStorageShareGetArgs>());
            set => _shares = value;
        }

        /// <summary>
        /// Size of the file storage in GB.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public FileStorageState()
        {
        }
        public static new FileStorageState Empty => new FileStorageState();
    }
}
