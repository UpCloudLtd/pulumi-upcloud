// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud
{
    /// <summary>
    /// Network gateways connect SDN Private Networks to external IP networks.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using UpCloud = UpCloud.Pulumi.UpCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create router for the gateway
    ///     var @this = new UpCloud.Router("this", new()
    ///     {
    ///         Name = "gateway-example-router",
    ///     });
    /// 
    ///     // Create network for the gateway
    ///     var thisNetwork = new UpCloud.Network("this", new()
    ///     {
    ///         Name = "gateway-example-net",
    ///         Zone = "pl-waw1",
    ///         IpNetwork = new UpCloud.Inputs.NetworkIpNetworkArgs
    ///         {
    ///             Address = "172.16.2.0/24",
    ///             Dhcp = true,
    ///             Family = "IPv4",
    ///         },
    ///         Router = @this.Id,
    ///     });
    /// 
    ///     var thisGateway = new UpCloud.Gateway("this", new()
    ///     {
    ///         Name = "gateway-example-gw",
    ///         Zone = "pl-waw1",
    ///         Features = new[]
    ///         {
    ///             "nat",
    ///         },
    ///         Router = new UpCloud.Inputs.GatewayRouterArgs
    ///         {
    ///             Id = @this.Id,
    ///         },
    ///         Labels = 
    ///         {
    ///             { "managed-by", "terraform" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UpCloudResourceType("upcloud:index/gateway:Gateway")]
    public partial class Gateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// IP addresses assigned to the gateway.
        /// </summary>
        [Output("address")]
        public Output<Outputs.GatewayAddress> Address { get; private set; } = null!;

        /// <summary>
        /// IP addresses assigned to the gateway.
        /// </summary>
        [Output("addresses")]
        public Output<ImmutableArray<Outputs.GatewayAddress>> Addresses { get; private set; } = null!;

        /// <summary>
        /// The service configured status indicates the service's current intended status. Managed by the customer.
        /// </summary>
        [Output("configuredStatus")]
        public Output<string?> ConfiguredStatus { get; private set; } = null!;

        /// <summary>
        /// Names of connections attached to the gateway. Note that this field can have outdated information as connections are created by a separate resource. To make sure that you have the most recent data run 'terrafrom refresh'.
        /// </summary>
        [Output("connections")]
        public Output<ImmutableArray<string>> Connections { get; private set; } = null!;

        /// <summary>
        /// Features enabled for the gateway. Note that VPN feature is currently in beta, for more details see https://upcloud.com/resources/docs/networking#nat-and-vpn-gateways.
        /// </summary>
        [Output("features")]
        public Output<ImmutableArray<string>> Features { get; private set; } = null!;

        /// <summary>
        /// User defined key-value pairs to classify the network gateway.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Gateway name. Needs to be unique within the account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The service operational state indicates the service's current operational, effective state. Managed by the system.
        /// </summary>
        [Output("operationalState")]
        public Output<string> OperationalState { get; private set; } = null!;

        /// <summary>
        /// Gateway pricing plan.
        /// </summary>
        [Output("plan")]
        public Output<string> Plan { get; private set; } = null!;

        /// <summary>
        /// Attached Router from where traffic is routed towards the network gateway service.
        /// </summary>
        [Output("router")]
        public Output<Outputs.GatewayRouter> Router { get; private set; } = null!;

        /// <summary>
        /// Zone in which the gateway will be hosted, e.g. `de-fra1`.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Gateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Gateway(string name, GatewayArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/gateway:Gateway", name, args ?? new GatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Gateway(string name, Input<string> id, GatewayState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/gateway:Gateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UpCloudLtd/pulumi-upcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Gateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Gateway Get(string name, Input<string> id, GatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new Gateway(name, id, state, options);
        }
    }

    public sealed class GatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// IP addresses assigned to the gateway.
        /// </summary>
        [Input("address")]
        public Input<Inputs.GatewayAddressArgs>? Address { get; set; }

        /// <summary>
        /// The service configured status indicates the service's current intended status. Managed by the customer.
        /// </summary>
        [Input("configuredStatus")]
        public Input<string>? ConfiguredStatus { get; set; }

        [Input("features", required: true)]
        private InputList<string>? _features;

        /// <summary>
        /// Features enabled for the gateway. Note that VPN feature is currently in beta, for more details see https://upcloud.com/resources/docs/networking#nat-and-vpn-gateways.
        /// </summary>
        public InputList<string> Features
        {
            get => _features ?? (_features = new InputList<string>());
            set => _features = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the network gateway.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Gateway name. Needs to be unique within the account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Gateway pricing plan.
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Attached Router from where traffic is routed towards the network gateway service.
        /// </summary>
        [Input("router", required: true)]
        public Input<Inputs.GatewayRouterArgs> Router { get; set; } = null!;

        /// <summary>
        /// Zone in which the gateway will be hosted, e.g. `de-fra1`.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GatewayArgs()
        {
        }
        public static new GatewayArgs Empty => new GatewayArgs();
    }

    public sealed class GatewayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// IP addresses assigned to the gateway.
        /// </summary>
        [Input("address")]
        public Input<Inputs.GatewayAddressGetArgs>? Address { get; set; }

        [Input("addresses")]
        private InputList<Inputs.GatewayAddressGetArgs>? _addresses;

        /// <summary>
        /// IP addresses assigned to the gateway.
        /// </summary>
        [Obsolete(@"Use 'address' attribute instead. This attribute will be removed in the next major version of the provider")]
        public InputList<Inputs.GatewayAddressGetArgs> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<Inputs.GatewayAddressGetArgs>());
            set => _addresses = value;
        }

        /// <summary>
        /// The service configured status indicates the service's current intended status. Managed by the customer.
        /// </summary>
        [Input("configuredStatus")]
        public Input<string>? ConfiguredStatus { get; set; }

        [Input("connections")]
        private InputList<string>? _connections;

        /// <summary>
        /// Names of connections attached to the gateway. Note that this field can have outdated information as connections are created by a separate resource. To make sure that you have the most recent data run 'terrafrom refresh'.
        /// </summary>
        public InputList<string> Connections
        {
            get => _connections ?? (_connections = new InputList<string>());
            set => _connections = value;
        }

        [Input("features")]
        private InputList<string>? _features;

        /// <summary>
        /// Features enabled for the gateway. Note that VPN feature is currently in beta, for more details see https://upcloud.com/resources/docs/networking#nat-and-vpn-gateways.
        /// </summary>
        public InputList<string> Features
        {
            get => _features ?? (_features = new InputList<string>());
            set => _features = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User defined key-value pairs to classify the network gateway.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Gateway name. Needs to be unique within the account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The service operational state indicates the service's current operational, effective state. Managed by the system.
        /// </summary>
        [Input("operationalState")]
        public Input<string>? OperationalState { get; set; }

        /// <summary>
        /// Gateway pricing plan.
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Attached Router from where traffic is routed towards the network gateway service.
        /// </summary>
        [Input("router")]
        public Input<Inputs.GatewayRouterGetArgs>? Router { get; set; }

        /// <summary>
        /// Zone in which the gateway will be hosted, e.g. `de-fra1`.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GatewayState()
        {
        }
        public static new GatewayState Empty => new GatewayState();
    }
}
