// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud
{
    public static class GetManagedDatabaseRedisSessions
    {
        /// <summary>
        /// &gt; Redis is deprecated in favor of Valkey. Please use Valkey for new key value store instances.
        /// 
        /// Current sessions of a Redis managed database
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using UpCloud = Pulumi.UpCloud;
        /// using UpCloud = UpCloud.Pulumi.UpCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Use data source to gather a list of the active sessions for a Managed Redis Database
        ///     // Create a Managed Redis resource
        ///     var exampleManagedDatabaseRedis = new UpCloud.ManagedDatabaseRedis("exampleManagedDatabaseRedis", new()
        ///     {
        ///         Title = "example",
        ///         Plan = "1x1xCPU-2GB",
        ///         Zone = "fi-hel2",
        ///     });
        /// 
        ///     var exampleManagedDatabaseRedisSessions = UpCloud.GetManagedDatabaseRedisSessions.Invoke(new()
        ///     {
        ///         Service = exampleManagedDatabaseRedis.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagedDatabaseRedisSessionsResult> InvokeAsync(GetManagedDatabaseRedisSessionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedDatabaseRedisSessionsResult>("upcloud:index/getManagedDatabaseRedisSessions:getManagedDatabaseRedisSessions", args ?? new GetManagedDatabaseRedisSessionsArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; Redis is deprecated in favor of Valkey. Please use Valkey for new key value store instances.
        /// 
        /// Current sessions of a Redis managed database
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using UpCloud = Pulumi.UpCloud;
        /// using UpCloud = UpCloud.Pulumi.UpCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Use data source to gather a list of the active sessions for a Managed Redis Database
        ///     // Create a Managed Redis resource
        ///     var exampleManagedDatabaseRedis = new UpCloud.ManagedDatabaseRedis("exampleManagedDatabaseRedis", new()
        ///     {
        ///         Title = "example",
        ///         Plan = "1x1xCPU-2GB",
        ///         Zone = "fi-hel2",
        ///     });
        /// 
        ///     var exampleManagedDatabaseRedisSessions = UpCloud.GetManagedDatabaseRedisSessions.Invoke(new()
        ///     {
        ///         Service = exampleManagedDatabaseRedis.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedDatabaseRedisSessionsResult> Invoke(GetManagedDatabaseRedisSessionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedDatabaseRedisSessionsResult>("upcloud:index/getManagedDatabaseRedisSessions:getManagedDatabaseRedisSessions", args ?? new GetManagedDatabaseRedisSessionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; Redis is deprecated in favor of Valkey. Please use Valkey for new key value store instances.
        /// 
        /// Current sessions of a Redis managed database
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using UpCloud = Pulumi.UpCloud;
        /// using UpCloud = UpCloud.Pulumi.UpCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Use data source to gather a list of the active sessions for a Managed Redis Database
        ///     // Create a Managed Redis resource
        ///     var exampleManagedDatabaseRedis = new UpCloud.ManagedDatabaseRedis("exampleManagedDatabaseRedis", new()
        ///     {
        ///         Title = "example",
        ///         Plan = "1x1xCPU-2GB",
        ///         Zone = "fi-hel2",
        ///     });
        /// 
        ///     var exampleManagedDatabaseRedisSessions = UpCloud.GetManagedDatabaseRedisSessions.Invoke(new()
        ///     {
        ///         Service = exampleManagedDatabaseRedis.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedDatabaseRedisSessionsResult> Invoke(GetManagedDatabaseRedisSessionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedDatabaseRedisSessionsResult>("upcloud:index/getManagedDatabaseRedisSessions:getManagedDatabaseRedisSessions", args ?? new GetManagedDatabaseRedisSessionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedDatabaseRedisSessionsArgs : global::Pulumi.InvokeArgs
    {
        [Input("limit")]
        public int? Limit { get; set; }

        [Input("offset")]
        public int? Offset { get; set; }

        [Input("order")]
        public string? Order { get; set; }

        [Input("service", required: true)]
        public string Service { get; set; } = null!;

        [Input("sessions")]
        private List<Inputs.GetManagedDatabaseRedisSessionsSessionArgs>? _sessions;
        public List<Inputs.GetManagedDatabaseRedisSessionsSessionArgs> Sessions
        {
            get => _sessions ?? (_sessions = new List<Inputs.GetManagedDatabaseRedisSessionsSessionArgs>());
            set => _sessions = value;
        }

        public GetManagedDatabaseRedisSessionsArgs()
        {
        }
        public static new GetManagedDatabaseRedisSessionsArgs Empty => new GetManagedDatabaseRedisSessionsArgs();
    }

    public sealed class GetManagedDatabaseRedisSessionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("offset")]
        public Input<int>? Offset { get; set; }

        [Input("order")]
        public Input<string>? Order { get; set; }

        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        [Input("sessions")]
        private InputList<Inputs.GetManagedDatabaseRedisSessionsSessionInputArgs>? _sessions;
        public InputList<Inputs.GetManagedDatabaseRedisSessionsSessionInputArgs> Sessions
        {
            get => _sessions ?? (_sessions = new InputList<Inputs.GetManagedDatabaseRedisSessionsSessionInputArgs>());
            set => _sessions = value;
        }

        public GetManagedDatabaseRedisSessionsInvokeArgs()
        {
        }
        public static new GetManagedDatabaseRedisSessionsInvokeArgs Empty => new GetManagedDatabaseRedisSessionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedDatabaseRedisSessionsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? Limit;
        public readonly int? Offset;
        public readonly string? Order;
        public readonly string Service;
        public readonly ImmutableArray<Outputs.GetManagedDatabaseRedisSessionsSessionResult> Sessions;

        [OutputConstructor]
        private GetManagedDatabaseRedisSessionsResult(
            string id,

            int? limit,

            int? offset,

            string? order,

            string service,

            ImmutableArray<Outputs.GetManagedDatabaseRedisSessionsSessionResult> sessions)
        {
            Id = id;
            Limit = limit;
            Offset = offset;
            Order = order;
            Service = service;
            Sessions = sessions;
        }
    }
}
