// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud.Outputs
{

    [OutputType]
    public sealed class LoadbalancerFrontendRuleMatchers
    {
        /// <summary>
        /// Matches by range of HTTP request body sizes.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersBodySizeRange> BodySizeRanges;
        /// <summary>
        /// Matches by HTTP request body size.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersBodySize> BodySizes;
        /// <summary>
        /// Matches by HTTP cookie value. Cookie name must be provided.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersCookie> Cookies;
        /// <summary>
        /// Matches by HTTP header value. Header name must be provided.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersHeader> Headers;
        /// <summary>
        /// Matches by hostname. Header extracted from HTTP Headers or from TLS certificate in case of secured connection.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersHost> Hosts;
        /// <summary>
        /// Matches by HTTP method.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersHttpMethod> HttpMethods;
        /// <summary>
        /// Matches by range of HTTP statuses.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersHttpStatusRange> HttpStatusRanges;
        /// <summary>
        /// Matches by HTTP status.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersHttpStatus> HttpStatuses;
        /// <summary>
        /// Matches by number of healthy backend members.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersNumMembersUp> NumMembersUps;
        /// <summary>
        /// Matches by URL path.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersPath> Paths;
        /// <summary>
        /// Matches by HTTP request header value. Header name must be provided.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersRequestHeader> RequestHeaders;
        /// <summary>
        /// Matches by HTTP response header value. Header name must be provided.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersResponseHeader> ResponseHeaders;
        /// <summary>
        /// Matches by source IP address.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersSrcIp> SrcIps;
        /// <summary>
        /// Matches by range of source port numbers.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersSrcPortRange> SrcPortRanges;
        /// <summary>
        /// Matches by source port number.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersSrcPort> SrcPorts;
        /// <summary>
        /// Matches by URL query parameter value. Query parameter name must be provided
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersUrlParam> UrlParams;
        /// <summary>
        /// Matches by URL query string.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersUrlQuery> UrlQueries;
        /// <summary>
        /// Matches by URL without schema, e.g. `example.com/dashboard`.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersUrl> Urls;

        [OutputConstructor]
        private LoadbalancerFrontendRuleMatchers(
            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersBodySizeRange> bodySizeRanges,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersBodySize> bodySizes,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersCookie> cookies,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersHeader> headers,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersHost> hosts,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersHttpMethod> httpMethods,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersHttpStatusRange> httpStatusRanges,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersHttpStatus> httpStatuses,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersNumMembersUp> numMembersUps,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersPath> paths,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersRequestHeader> requestHeaders,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersResponseHeader> responseHeaders,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersSrcIp> srcIps,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersSrcPortRange> srcPortRanges,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersSrcPort> srcPorts,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersUrlParam> urlParams,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersUrlQuery> urlQueries,

            ImmutableArray<Outputs.LoadbalancerFrontendRuleMatchersUrl> urls)
        {
            BodySizeRanges = bodySizeRanges;
            BodySizes = bodySizes;
            Cookies = cookies;
            Headers = headers;
            Hosts = hosts;
            HttpMethods = httpMethods;
            HttpStatusRanges = httpStatusRanges;
            HttpStatuses = httpStatuses;
            NumMembersUps = numMembersUps;
            Paths = paths;
            RequestHeaders = requestHeaders;
            ResponseHeaders = responseHeaders;
            SrcIps = srcIps;
            SrcPortRanges = srcPortRanges;
            SrcPorts = srcPorts;
            UrlParams = urlParams;
            UrlQueries = urlQueries;
            Urls = urls;
        }
    }
}
