// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud.Outputs
{

    [OutputType]
    public sealed class ManagedDatabasePostgresqlProperties
    {
        /// <summary>
        /// Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
        /// </summary>
        public readonly string? AdminPassword;
        /// <summary>
        /// Custom username for admin user. This must be set only when a new service is being created.
        /// </summary>
        public readonly string? AdminUsername;
        /// <summary>
        /// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
        /// </summary>
        public readonly bool? AutomaticUtilityNetworkIpFilter;
        /// <summary>
        /// Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE (e.g. `0.2` for 20% of the table size). The default is `0.2`.
        /// </summary>
        public readonly double? AutovacuumAnalyzeScaleFactor;
        /// <summary>
        /// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is `50`.
        /// </summary>
        public readonly int? AutovacuumAnalyzeThreshold;
        /// <summary>
        /// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. The system launches autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? AutovacuumFreezeMaxAge;
        /// <summary>
        /// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is `3`. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? AutovacuumMaxWorkers;
        /// <summary>
        /// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds. The default is `60`.
        /// </summary>
        public readonly int? AutovacuumNaptime;
        /// <summary>
        /// Specifies the cost delay value that will be used in automatic VACUUM operations. If `-1` is specified, the regular vacuum_cost_delay value will be used. The default is `2` (upstream default).
        /// </summary>
        public readonly int? AutovacuumVacuumCostDelay;
        /// <summary>
        /// Specifies the cost limit value that will be used in automatic VACUUM operations. If `-1` is specified, the regular vacuum_cost_limit value will be used. The default is `-1` (upstream default).
        /// </summary>
        public readonly int? AutovacuumVacuumCostLimit;
        /// <summary>
        /// Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM (e.g. `0.2` for 20% of the table size). The default is `0.2`.
        /// </summary>
        public readonly double? AutovacuumVacuumScaleFactor;
        /// <summary>
        /// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is `50`.
        /// </summary>
        public readonly int? AutovacuumVacuumThreshold;
        /// <summary>
        /// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
        /// </summary>
        public readonly int? BackupHour;
        /// <summary>
        /// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
        /// </summary>
        public readonly int? BackupMinute;
        /// <summary>
        /// Specifies the delay between activity rounds for the background writer in milliseconds. The default is `200`.
        /// </summary>
        public readonly int? BgwriterDelay;
        /// <summary>
        /// Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes. Setting of 0 disables forced writeback. The default is `512`.
        /// </summary>
        public readonly int? BgwriterFlushAfter;
        /// <summary>
        /// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. The default is `100`.
        /// </summary>
        public readonly int? BgwriterLruMaxpages;
        /// <summary>
        /// The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is `2.0`.
        /// </summary>
        public readonly double? BgwriterLruMultiplier;
        /// <summary>
        /// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition. The default is `1000` (upstream default).
        /// </summary>
        public readonly int? DeadlockTimeout;
        /// <summary>
        /// Specifies the default TOAST compression method for values of compressible columns. The default is `lz4`. Only available for PostgreSQL 14+.
        /// </summary>
        public readonly string? DefaultToastCompression;
        /// <summary>
        /// Time out sessions with open transactions after this number of milliseconds.
        /// </summary>
        public readonly int? IdleInTransactionSessionTimeout;
        /// <summary>
        /// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Controls system-wide use of Just-in-Time Compilation (JIT).
        /// </summary>
        public readonly bool? Jit;
        /// <summary>
        /// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one disables logging autovacuum actions. The default is `1000`.
        /// </summary>
        public readonly int? LogAutovacuumMinDuration;
        /// <summary>
        /// Controls the amount of detail written in the server log for each message that is logged.
        /// </summary>
        public readonly string? LogErrorVerbosity;
        /// <summary>
        /// Choose from one of the available log formats.
        /// </summary>
        public readonly string? LogLinePrefix;
        /// <summary>
        /// Log statements that take more than this number of milliseconds to run, -1 disables.
        /// </summary>
        public readonly int? LogMinDurationStatement;
        /// <summary>
        /// Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
        /// </summary>
        public readonly int? LogTempFiles;
        /// <summary>
        /// Sets the PostgreSQL maximum number of concurrent connections to the database server. This is a limited-release parameter. Contact your account team to confirm your eligibility. You cannot decrease this parameter value when set. For services with a read replica, first increase the read replica's value. After the change is applied to the replica, you can increase the primary service's value. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxConnections;
        /// <summary>
        /// PostgreSQL maximum number of files that can be open per process. The default is `1000` (upstream default). Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxFilesPerProcess;
        /// <summary>
        /// PostgreSQL maximum locks per transaction. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxLocksPerTransaction;
        /// <summary>
        /// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers). The default is `4` (upstream default). Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxLogicalReplicationWorkers;
        /// <summary>
        /// Sets the maximum number of workers that the system can support for parallel queries. The default is `8` (upstream default).
        /// </summary>
        public readonly int? MaxParallelWorkers;
        /// <summary>
        /// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node. The default is `2` (upstream default).
        /// </summary>
        public readonly int? MaxParallelWorkersPerGather;
        /// <summary>
        /// PostgreSQL maximum predicate locks per transaction. The default is `64` (upstream default). Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxPredLocksPerTransaction;
        /// <summary>
        /// PostgreSQL maximum prepared transactions. The default is `0`. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxPreparedTransactions;
        /// <summary>
        /// PostgreSQL maximum replication slots. The default is `20`. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxReplicationSlots;
        /// <summary>
        /// PostgreSQL maximum WAL size (MB) reserved for replication slots. If `-1` is specified, replication slots may retain an unlimited amount of WAL files. The default is `-1` (upstream default). wal_keep_size minimum WAL size setting takes precedence over this.
        /// </summary>
        public readonly int? MaxSlotWalKeepSize;
        /// <summary>
        /// Maximum depth of the stack in bytes. The default is `2097152` (upstream default).
        /// </summary>
        public readonly int? MaxStackDepth;
        /// <summary>
        /// Max standby archive delay in milliseconds. The default is `30000` (upstream default).
        /// </summary>
        public readonly int? MaxStandbyArchiveDelay;
        /// <summary>
        /// Max standby streaming delay in milliseconds. The default is `30000` (upstream default).
        /// </summary>
        public readonly int? MaxStandbyStreamingDelay;
        /// <summary>
        /// Maximum number of synchronization workers per subscription. The default is `2`.
        /// </summary>
        public readonly int? MaxSyncWorkersPerSubscription;
        /// <summary>
        /// PostgreSQL maximum WAL senders. The default is `20`. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxWalSenders;
        /// <summary>
        /// Sets the maximum number of background processes that the system can support. The default is `8`. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? MaxWorkerProcesses;
        /// <summary>
        /// Migrate data from existing server.
        /// </summary>
        public readonly Outputs.ManagedDatabasePostgresqlPropertiesMigration? Migration;
        /// <summary>
        /// Chooses the algorithm for encrypting passwords.
        /// </summary>
        public readonly string? PasswordEncryption;
        /// <summary>
        /// Sets the time interval in seconds to run pg_partman's scheduled tasks. The default is `3600`.
        /// </summary>
        public readonly int? PgPartmanBgwInterval;
        /// <summary>
        /// Controls which role to use for pg_partman's scheduled background tasks.
        /// </summary>
        public readonly string? PgPartmanBgwRole;
        /// <summary>
        /// Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Changing this parameter causes a service restart. When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
        /// </summary>
        public readonly bool? PgStatMonitorEnable;
        /// <summary>
        /// Enables or disables query plan monitoring. Changing this parameter causes a service restart. Only available for PostgreSQL 13+.
        /// </summary>
        public readonly bool? PgStatMonitorPgsmEnableQueryPlan;
        /// <summary>
        /// Sets the maximum number of buckets. Changing this parameter causes a service restart. Only available for PostgreSQL 13+.
        /// </summary>
        public readonly int? PgStatMonitorPgsmMaxBuckets;
        /// <summary>
        /// Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default is `top`.
        /// </summary>
        public readonly string? PgStatStatementsTrack;
        /// <summary>
        /// PGAudit settings. System-wide settings for the pgaudit extension.
        /// </summary>
        public readonly Outputs.ManagedDatabasePostgresqlPropertiesPgaudit? Pgaudit;
        /// <summary>
        /// PGBouncer connection pooling settings. System-wide settings for pgbouncer.
        /// </summary>
        public readonly Outputs.ManagedDatabasePostgresqlPropertiesPgbouncer? Pgbouncer;
        /// <summary>
        /// PGLookout settings. System-wide settings for pglookout.
        /// </summary>
        public readonly Outputs.ManagedDatabasePostgresqlPropertiesPglookout? Pglookout;
        /// <summary>
        /// Public Access. Allow access to the service from the public Internet.
        /// </summary>
        public readonly bool? PublicAccess;
        /// <summary>
        /// Service logging. Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value. Changing this parameter causes a service restart.
        /// </summary>
        public readonly double? SharedBuffersPercentage;
        /// <summary>
        /// Synchronous replication type. Note that the service plan also needs to support synchronous replication.
        /// </summary>
        public readonly string? SynchronousReplication;
        /// <summary>
        /// PostgreSQL temporary file limit in KiB, -1 for unlimited.
        /// </summary>
        public readonly int? TempFileLimit;
        /// <summary>
        /// TimescaleDB extension configuration values. System-wide settings for the timescaledb extension.
        /// </summary>
        public readonly Outputs.ManagedDatabasePostgresqlPropertiesTimescaledb? Timescaledb;
        /// <summary>
        /// PostgreSQL service timezone.
        /// </summary>
        public readonly string? Timezone;
        /// <summary>
        /// Specifies the number of bytes reserved to track the currently executing command for each active session. Changing this parameter causes a service restart.
        /// </summary>
        public readonly int? TrackActivityQuerySize;
        /// <summary>
        /// Record commit time of transactions. Changing this parameter causes a service restart.
        /// </summary>
        public readonly string? TrackCommitTimestamp;
        /// <summary>
        /// Enables tracking of function call counts and time used.
        /// </summary>
        public readonly string? TrackFunctions;
        /// <summary>
        /// Enables timing of database I/O calls. The default is `off`. When on, it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
        /// </summary>
        public readonly string? TrackIoTiming;
        /// <summary>
        /// Variant of the PostgreSQL service, may affect the features that are exposed by default.
        /// </summary>
        public readonly string? Variant;
        /// <summary>
        /// PostgreSQL major version.
        /// </summary>
        public readonly string? Version;
        /// <summary>
        /// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
        /// </summary>
        public readonly int? WalSenderTimeout;
        /// <summary>
        /// WAL flush interval in milliseconds. The default is `200`. Setting this parameter to a lower value may negatively impact performance.
        /// </summary>
        public readonly int? WalWriterDelay;
        /// <summary>
        /// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. The default is 1MB + 0.075% of total RAM (up to 32MB).
        /// </summary>
        public readonly int? WorkMem;

        [OutputConstructor]
        private ManagedDatabasePostgresqlProperties(
            string? adminPassword,

            string? adminUsername,

            bool? automaticUtilityNetworkIpFilter,

            double? autovacuumAnalyzeScaleFactor,

            int? autovacuumAnalyzeThreshold,

            int? autovacuumFreezeMaxAge,

            int? autovacuumMaxWorkers,

            int? autovacuumNaptime,

            int? autovacuumVacuumCostDelay,

            int? autovacuumVacuumCostLimit,

            double? autovacuumVacuumScaleFactor,

            int? autovacuumVacuumThreshold,

            int? backupHour,

            int? backupMinute,

            int? bgwriterDelay,

            int? bgwriterFlushAfter,

            int? bgwriterLruMaxpages,

            double? bgwriterLruMultiplier,

            int? deadlockTimeout,

            string? defaultToastCompression,

            int? idleInTransactionSessionTimeout,

            ImmutableArray<string> ipFilters,

            bool? jit,

            int? logAutovacuumMinDuration,

            string? logErrorVerbosity,

            string? logLinePrefix,

            int? logMinDurationStatement,

            int? logTempFiles,

            int? maxConnections,

            int? maxFilesPerProcess,

            int? maxLocksPerTransaction,

            int? maxLogicalReplicationWorkers,

            int? maxParallelWorkers,

            int? maxParallelWorkersPerGather,

            int? maxPredLocksPerTransaction,

            int? maxPreparedTransactions,

            int? maxReplicationSlots,

            int? maxSlotWalKeepSize,

            int? maxStackDepth,

            int? maxStandbyArchiveDelay,

            int? maxStandbyStreamingDelay,

            int? maxSyncWorkersPerSubscription,

            int? maxWalSenders,

            int? maxWorkerProcesses,

            Outputs.ManagedDatabasePostgresqlPropertiesMigration? migration,

            string? passwordEncryption,

            int? pgPartmanBgwInterval,

            string? pgPartmanBgwRole,

            bool? pgStatMonitorEnable,

            bool? pgStatMonitorPgsmEnableQueryPlan,

            int? pgStatMonitorPgsmMaxBuckets,

            string? pgStatStatementsTrack,

            Outputs.ManagedDatabasePostgresqlPropertiesPgaudit? pgaudit,

            Outputs.ManagedDatabasePostgresqlPropertiesPgbouncer? pgbouncer,

            Outputs.ManagedDatabasePostgresqlPropertiesPglookout? pglookout,

            bool? publicAccess,

            bool? serviceLog,

            double? sharedBuffersPercentage,

            string? synchronousReplication,

            int? tempFileLimit,

            Outputs.ManagedDatabasePostgresqlPropertiesTimescaledb? timescaledb,

            string? timezone,

            int? trackActivityQuerySize,

            string? trackCommitTimestamp,

            string? trackFunctions,

            string? trackIoTiming,

            string? variant,

            string? version,

            int? walSenderTimeout,

            int? walWriterDelay,

            int? workMem)
        {
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            AutomaticUtilityNetworkIpFilter = automaticUtilityNetworkIpFilter;
            AutovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
            AutovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
            AutovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
            AutovacuumMaxWorkers = autovacuumMaxWorkers;
            AutovacuumNaptime = autovacuumNaptime;
            AutovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
            AutovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
            AutovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
            AutovacuumVacuumThreshold = autovacuumVacuumThreshold;
            BackupHour = backupHour;
            BackupMinute = backupMinute;
            BgwriterDelay = bgwriterDelay;
            BgwriterFlushAfter = bgwriterFlushAfter;
            BgwriterLruMaxpages = bgwriterLruMaxpages;
            BgwriterLruMultiplier = bgwriterLruMultiplier;
            DeadlockTimeout = deadlockTimeout;
            DefaultToastCompression = defaultToastCompression;
            IdleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
            IpFilters = ipFilters;
            Jit = jit;
            LogAutovacuumMinDuration = logAutovacuumMinDuration;
            LogErrorVerbosity = logErrorVerbosity;
            LogLinePrefix = logLinePrefix;
            LogMinDurationStatement = logMinDurationStatement;
            LogTempFiles = logTempFiles;
            MaxConnections = maxConnections;
            MaxFilesPerProcess = maxFilesPerProcess;
            MaxLocksPerTransaction = maxLocksPerTransaction;
            MaxLogicalReplicationWorkers = maxLogicalReplicationWorkers;
            MaxParallelWorkers = maxParallelWorkers;
            MaxParallelWorkersPerGather = maxParallelWorkersPerGather;
            MaxPredLocksPerTransaction = maxPredLocksPerTransaction;
            MaxPreparedTransactions = maxPreparedTransactions;
            MaxReplicationSlots = maxReplicationSlots;
            MaxSlotWalKeepSize = maxSlotWalKeepSize;
            MaxStackDepth = maxStackDepth;
            MaxStandbyArchiveDelay = maxStandbyArchiveDelay;
            MaxStandbyStreamingDelay = maxStandbyStreamingDelay;
            MaxSyncWorkersPerSubscription = maxSyncWorkersPerSubscription;
            MaxWalSenders = maxWalSenders;
            MaxWorkerProcesses = maxWorkerProcesses;
            Migration = migration;
            PasswordEncryption = passwordEncryption;
            PgPartmanBgwInterval = pgPartmanBgwInterval;
            PgPartmanBgwRole = pgPartmanBgwRole;
            PgStatMonitorEnable = pgStatMonitorEnable;
            PgStatMonitorPgsmEnableQueryPlan = pgStatMonitorPgsmEnableQueryPlan;
            PgStatMonitorPgsmMaxBuckets = pgStatMonitorPgsmMaxBuckets;
            PgStatStatementsTrack = pgStatStatementsTrack;
            Pgaudit = pgaudit;
            Pgbouncer = pgbouncer;
            Pglookout = pglookout;
            PublicAccess = publicAccess;
            ServiceLog = serviceLog;
            SharedBuffersPercentage = sharedBuffersPercentage;
            SynchronousReplication = synchronousReplication;
            TempFileLimit = tempFileLimit;
            Timescaledb = timescaledb;
            Timezone = timezone;
            TrackActivityQuerySize = trackActivityQuerySize;
            TrackCommitTimestamp = trackCommitTimestamp;
            TrackFunctions = trackFunctions;
            TrackIoTiming = trackIoTiming;
            Variant = variant;
            Version = version;
            WalSenderTimeout = walSenderTimeout;
            WalWriterDelay = walWriterDelay;
            WorkMem = workMem;
        }
    }
}
