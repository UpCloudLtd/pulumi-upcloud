// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud.Outputs
{

    [OutputType]
    public sealed class ManagedDatabaseValkeyProperties
    {
        /// <summary>
        /// Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
        /// </summary>
        public readonly bool? AutomaticUtilityNetworkIpFilter;
        /// <summary>
        /// The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
        /// </summary>
        public readonly int? BackupHour;
        /// <summary>
        /// The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
        /// </summary>
        public readonly int? BackupMinute;
        /// <summary>
        /// Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkey_persistence` is set to `off`.
        /// </summary>
        public readonly bool? FrequentSnapshots;
        /// <summary>
        /// IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
        /// </summary>
        public readonly ImmutableArray<string> IpFilters;
        /// <summary>
        /// Migrate data from existing server.
        /// </summary>
        public readonly Outputs.ManagedDatabaseValkeyPropertiesMigration? Migration;
        /// <summary>
        /// Public Access. Allow access to the service from the public Internet.
        /// </summary>
        public readonly bool? PublicAccess;
        /// <summary>
        /// Service logging. Store logs for the service so that they are available in the HTTP API and console.
        /// </summary>
        public readonly bool? ServiceLog;
        /// <summary>
        /// Default ACL for pub/sub channels used when a Valkey user is created. Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Valkey configuration acl-pubsub-default.
        /// </summary>
        public readonly string? ValkeyAclChannelsDefault;
        /// <summary>
        /// Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
        /// </summary>
        public readonly int? ValkeyActiveExpireEffort;
        /// <summary>
        /// Valkey IO thread count. Set Valkey IO thread count. Changing this will cause a restart of the Valkey service.
        /// </summary>
        public readonly int? ValkeyIoThreads;
        /// <summary>
        /// LFU maxmemory-policy counter decay time in minutes.
        /// </summary>
        public readonly int? ValkeyLfuDecayTime;
        /// <summary>
        /// Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
        /// </summary>
        public readonly int? ValkeyLfuLogFactor;
        /// <summary>
        /// Valkey maxmemory-policy.
        /// </summary>
        public readonly string? ValkeyMaxmemoryPolicy;
        /// <summary>
        /// Set notify-keyspace-events option.
        /// </summary>
        public readonly string? ValkeyNotifyKeyspaceEvents;
        /// <summary>
        /// Number of Valkey databases. Set number of Valkey databases. Changing this will cause a restart of the Valkey service.
        /// </summary>
        public readonly int? ValkeyNumberOfDatabases;
        /// <summary>
        /// Valkey persistence. When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
        /// </summary>
        public readonly string? ValkeyPersistence;
        /// <summary>
        /// Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
        /// </summary>
        public readonly int? ValkeyPubsubClientOutputBufferLimit;
        /// <summary>
        /// Require SSL to access Valkey.
        /// </summary>
        public readonly bool? ValkeySsl;
        /// <summary>
        /// Valkey idle connection timeout in seconds.
        /// </summary>
        public readonly int? ValkeyTimeout;

        [OutputConstructor]
        private ManagedDatabaseValkeyProperties(
            bool? automaticUtilityNetworkIpFilter,

            int? backupHour,

            int? backupMinute,

            bool? frequentSnapshots,

            ImmutableArray<string> ipFilters,

            Outputs.ManagedDatabaseValkeyPropertiesMigration? migration,

            bool? publicAccess,

            bool? serviceLog,

            string? valkeyAclChannelsDefault,

            int? valkeyActiveExpireEffort,

            int? valkeyIoThreads,

            int? valkeyLfuDecayTime,

            int? valkeyLfuLogFactor,

            string? valkeyMaxmemoryPolicy,

            string? valkeyNotifyKeyspaceEvents,

            int? valkeyNumberOfDatabases,

            string? valkeyPersistence,

            int? valkeyPubsubClientOutputBufferLimit,

            bool? valkeySsl,

            int? valkeyTimeout)
        {
            AutomaticUtilityNetworkIpFilter = automaticUtilityNetworkIpFilter;
            BackupHour = backupHour;
            BackupMinute = backupMinute;
            FrequentSnapshots = frequentSnapshots;
            IpFilters = ipFilters;
            Migration = migration;
            PublicAccess = publicAccess;
            ServiceLog = serviceLog;
            ValkeyAclChannelsDefault = valkeyAclChannelsDefault;
            ValkeyActiveExpireEffort = valkeyActiveExpireEffort;
            ValkeyIoThreads = valkeyIoThreads;
            ValkeyLfuDecayTime = valkeyLfuDecayTime;
            ValkeyLfuLogFactor = valkeyLfuLogFactor;
            ValkeyMaxmemoryPolicy = valkeyMaxmemoryPolicy;
            ValkeyNotifyKeyspaceEvents = valkeyNotifyKeyspaceEvents;
            ValkeyNumberOfDatabases = valkeyNumberOfDatabases;
            ValkeyPersistence = valkeyPersistence;
            ValkeyPubsubClientOutputBufferLimit = valkeyPubsubClientOutputBufferLimit;
            ValkeySsl = valkeySsl;
            ValkeyTimeout = valkeyTimeout;
        }
    }
}
