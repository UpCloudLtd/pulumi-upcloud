// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud.Outputs
{

    [OutputType]
    public sealed class GetIpAddressesAddressResult
    {
        /// <summary>
        /// Is address for utility or public network
        /// </summary>
        public readonly string Access;
        /// <summary>
        /// An UpCloud assigned IP Address
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// IP address family
        /// </summary>
        public readonly string Family;
        /// <summary>
        /// Does the IP Address represents a floating IP Address
        /// </summary>
        public readonly bool Floating;
        /// <summary>
        /// MAC address of server interface to assign address to
        /// </summary>
        public readonly string Mac;
        /// <summary>
        /// Is the address a part of a plan
        /// </summary>
        public readonly bool PartOfPlan;
        /// <summary>
        /// A reverse DNS record entry
        /// </summary>
        public readonly string PtrRecord;
        /// <summary>
        /// The unique identifier for a server
        /// </summary>
        public readonly string Server;
        /// <summary>
        /// Zone of address, required when assigning a detached floating IP address, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetIpAddressesAddressResult(
            string access,

            string address,

            string family,

            bool floating,

            string mac,

            bool partOfPlan,

            string ptrRecord,

            string server,

            string zone)
        {
            Access = access;
            Address = address;
            Family = family;
            Floating = floating;
            Mac = mac;
            PartOfPlan = partOfPlan;
            PtrRecord = ptrRecord;
            Server = server;
            Zone = zone;
        }
    }
}
