// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud.Outputs
{

    [OutputType]
    public sealed class ServerNetworkInterface
    {
        /// <summary>
        /// 0-31 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
        /// </summary>
        public readonly ImmutableArray<Outputs.ServerNetworkInterfaceAdditionalIpAddress> AdditionalIpAddresses;
        /// <summary>
        /// `true` if this interface should be used for network booting.
        /// </summary>
        public readonly bool? Bootable;
        /// <summary>
        /// The interface index.
        /// </summary>
        public readonly int? Index;
        /// <summary>
        /// The primary IP address of this interface.
        /// </summary>
        public readonly string? IpAddress;
        /// <summary>
        /// The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
        /// </summary>
        public readonly string? IpAddressFamily;
        /// <summary>
        /// `true` indicates that the primary IP address is a floating IP address.
        /// </summary>
        public readonly bool? IpAddressFloating;
        /// <summary>
        /// The MAC address of the interface.
        /// </summary>
        public readonly string? MacAddress;
        /// <summary>
        /// The UUID of the network to attach this interface to. Required for private network interfaces.
        /// </summary>
        public readonly string? Network;
        /// <summary>
        /// `true` if source IP should be filtered.
        /// </summary>
        public readonly bool? SourceIpFiltering;
        /// <summary>
        /// Network interface type. For private network interfaces, a network must be specified with an existing network id.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ServerNetworkInterface(
            ImmutableArray<Outputs.ServerNetworkInterfaceAdditionalIpAddress> additionalIpAddresses,

            bool? bootable,

            int? index,

            string? ipAddress,

            string? ipAddressFamily,

            bool? ipAddressFloating,

            string? macAddress,

            string? network,

            bool? sourceIpFiltering,

            string type)
        {
            AdditionalIpAddresses = additionalIpAddresses;
            Bootable = bootable;
            Index = index;
            IpAddress = ipAddress;
            IpAddressFamily = ipAddressFamily;
            IpAddressFloating = ipAddressFloating;
            MacAddress = macAddress;
            Network = network;
            SourceIpFiltering = sourceIpFiltering;
            Type = type;
        }
    }
}
