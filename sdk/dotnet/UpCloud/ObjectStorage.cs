// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud
{
    /// <summary>
    /// &gt; The `upcloud.ObjectStorage` resource manages previous generatation object storage instances that will reach end of life (EOL) by the end of 2024. For new instances, consider using the new Object Storage product managed with `upcloud.ManagedObjectStorage` resource.
    /// 
    /// This resource represents an UpCloud Object Storage instance, which provides S3 compatible storage.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using UpCloud = UpCloud.Pulumi.UpCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Object storage instance called storage-name in the fi-hel2 zone, with 2 buckets called "products" and "images".
    ///     var myObjectStorage = new UpCloud.ObjectStorage("my_object_storage", new()
    ///     {
    ///         Size = 250,
    ///         Name = "storage-name",
    ///         Zone = "fi-hel2",
    ///         AccessKey = "admin",
    ///         SecretKey = "changeme",
    ///         Description = "catalogue",
    ///         Buckets = new[]
    ///         {
    ///             new UpCloud.Inputs.ObjectStorageBucketArgs
    ///             {
    ///                 Name = "products",
    ///             },
    ///             new UpCloud.Inputs.ObjectStorageBucketArgs
    ///             {
    ///                 Name = "images",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// For object storage import to work properly, you need to set environment variables for access and secret key.
    /// 
    /// The environment variables names are UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name} and UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}
    /// 
    /// where {name} is the name of your object storage instance (not the resource label!), all uppercased, and with all dashes (-)
    /// 
    /// replaced with underscores (_). So importing an object storage that is named "my-storage" will look like this:
    /// 
    /// UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_STORAGE=accesskey \
    /// 
    /// UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_STORAGE=supersecret \
    /// 
    /// ```sh
    /// $ pulumi import upcloud:index/objectStorage:ObjectStorage example_storage 06c1f4b6-faf2-47d0-8896-1d941092b009
    /// ```
    /// </summary>
    [UpCloudResourceType("upcloud:index/objectStorage:ObjectStorage")]
    public partial class ObjectStorage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access key used to identify user.
        /// 				Can be set to an empty string, which will tell the provider to get the access key from environment variable.
        /// 				The environment variable should be "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}".
        /// 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
        /// 				and all dashes (-) should be replaced with underscores (_). For example, object storage named "my-files" would
        /// 				use environment variable named "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES".
        /// </summary>
        [Output("accessKey")]
        public Output<string> AccessKey { get; private set; } = null!;

        [Output("buckets")]
        public Output<ImmutableArray<Outputs.ObjectStorageBucket>> Buckets { get; private set; } = null!;

        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The description of the object storage instance to be created
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the object storage instance to be created
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The secret key used to authenticate user.
        /// 				Can be set to an empty string, which will tell the provider to get the secret key from environment variable.
        /// 				The environment variable should be "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}".
        /// 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
        /// 				and all dashes (-) should be replaced with underscores (_). For example, object storage named "my-files" would
        /// 				use environment variable named "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES".
        /// </summary>
        [Output("secretKey")]
        public Output<string> SecretKey { get; private set; } = null!;

        /// <summary>
        /// The size of the object storage instance in gigabytes
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        [Output("usedSpace")]
        public Output<int> UsedSpace { get; private set; } = null!;

        /// <summary>
        /// The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a ObjectStorage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObjectStorage(string name, ObjectStorageArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/objectStorage:ObjectStorage", name, args ?? new ObjectStorageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObjectStorage(string name, Input<string> id, ObjectStorageState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/objectStorage:ObjectStorage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UpCloudLtd/pulumi-upcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObjectStorage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObjectStorage Get(string name, Input<string> id, ObjectStorageState? state = null, CustomResourceOptions? options = null)
        {
            return new ObjectStorage(name, id, state, options);
        }
    }

    public sealed class ObjectStorageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access key used to identify user.
        /// 				Can be set to an empty string, which will tell the provider to get the access key from environment variable.
        /// 				The environment variable should be "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}".
        /// 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
        /// 				and all dashes (-) should be replaced with underscores (_). For example, object storage named "my-files" would
        /// 				use environment variable named "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES".
        /// </summary>
        [Input("accessKey", required: true)]
        public Input<string> AccessKey { get; set; } = null!;

        [Input("buckets")]
        private InputList<Inputs.ObjectStorageBucketArgs>? _buckets;
        public InputList<Inputs.ObjectStorageBucketArgs> Buckets
        {
            get => _buckets ?? (_buckets = new InputList<Inputs.ObjectStorageBucketArgs>());
            set => _buckets = value;
        }

        /// <summary>
        /// The description of the object storage instance to be created
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the object storage instance to be created
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The secret key used to authenticate user.
        /// 				Can be set to an empty string, which will tell the provider to get the secret key from environment variable.
        /// 				The environment variable should be "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}".
        /// 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
        /// 				and all dashes (-) should be replaced with underscores (_). For example, object storage named "my-files" would
        /// 				use environment variable named "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES".
        /// </summary>
        [Input("secretKey", required: true)]
        public Input<string> SecretKey { get; set; } = null!;

        /// <summary>
        /// The size of the object storage instance in gigabytes
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        /// <summary>
        /// The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public ObjectStorageArgs()
        {
        }
        public static new ObjectStorageArgs Empty => new ObjectStorageArgs();
    }

    public sealed class ObjectStorageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access key used to identify user.
        /// 				Can be set to an empty string, which will tell the provider to get the access key from environment variable.
        /// 				The environment variable should be "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}".
        /// 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
        /// 				and all dashes (-) should be replaced with underscores (_). For example, object storage named "my-files" would
        /// 				use environment variable named "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES".
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        [Input("buckets")]
        private InputList<Inputs.ObjectStorageBucketGetArgs>? _buckets;
        public InputList<Inputs.ObjectStorageBucketGetArgs> Buckets
        {
            get => _buckets ?? (_buckets = new InputList<Inputs.ObjectStorageBucketGetArgs>());
            set => _buckets = value;
        }

        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The description of the object storage instance to be created
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the object storage instance to be created
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The secret key used to authenticate user.
        /// 				Can be set to an empty string, which will tell the provider to get the secret key from environment variable.
        /// 				The environment variable should be "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}".
        /// 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
        /// 				and all dashes (-) should be replaced with underscores (_). For example, object storage named "my-files" would
        /// 				use environment variable named "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES".
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        /// <summary>
        /// The size of the object storage instance in gigabytes
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("usedSpace")]
        public Input<int>? UsedSpace { get; set; }

        /// <summary>
        /// The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ObjectStorageState()
        {
        }
        public static new ObjectStorageState Empty => new ObjectStorageState();
    }
}
