// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UpCloud.Pulumi.UpCloud
{
    /// <summary>
    /// This resource represents load balancer frontend rule.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using UpCloud = UpCloud.Pulumi.UpCloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var lbZone = config.Get("lbZone") ?? "fi-hel2";
    ///     var lbNetwork = new UpCloud.Network("lbNetwork", new()
    ///     {
    ///         Zone = lbZone,
    ///         IpNetwork = new UpCloud.Inputs.NetworkIpNetworkArgs
    ///         {
    ///             Address = "10.0.0.0/24",
    ///             Dhcp = true,
    ///             Family = "IPv4",
    ///         },
    ///     });
    /// 
    ///     var lbFe1R1 = new UpCloud.LoadbalancerFrontendRule("lbFe1R1", new()
    ///     {
    ///         Frontend = resource.Upcloud_loadbalancer_frontend.Lb_fe_1.Id,
    ///         Priority = 10,
    ///         Matchers = new UpCloud.Inputs.LoadbalancerFrontendRuleMatchersArgs
    ///         {
    ///             SrcIps = new[]
    ///             {
    ///                 new UpCloud.Inputs.LoadbalancerFrontendRuleMatchersSrcIpArgs
    ///                 {
    ///                     Value = "192.168.0.0/24",
    ///                 },
    ///             },
    ///         },
    ///         Actions = new UpCloud.Inputs.LoadbalancerFrontendRuleActionsArgs
    ///         {
    ///             UseBackends = new[]
    ///             {
    ///                 new UpCloud.Inputs.LoadbalancerFrontendRuleActionsUseBackendArgs
    ///                 {
    ///                     BackendName = resource.Upcloud_loadbalancer_backend.Lb_be_1.Name,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var lbFe1 = new UpCloud.LoadbalancerFrontend("lbFe1", new()
    ///     {
    ///         Loadbalancer = resource.Upcloud_loadbalancer.Lb.Id,
    ///         Mode = "http",
    ///         Port = 8080,
    ///         DefaultBackendName = resource.Upcloud_loadbalancer_backend.Lb_be_1.Name,
    ///     });
    /// 
    ///     var lb = new UpCloud.Loadbalancer("lb", new()
    ///     {
    ///         ConfiguredStatus = "started",
    ///         Plan = "development",
    ///         Zone = lbZone,
    ///         Networks = new[]
    ///         {
    ///             new UpCloud.Inputs.LoadbalancerNetworkArgs
    ///             {
    ///                 Type = "public",
    ///                 Family = "IPv4",
    ///                 Name = "public",
    ///             },
    ///             new UpCloud.Inputs.LoadbalancerNetworkArgs
    ///             {
    ///                 Type = "private",
    ///                 Family = "IPv4",
    ///                 Name = "private",
    ///                 Network = resource.Upcloud_network.Lb_network.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var lbBe1 = new UpCloud.LoadbalancerBackend("lbBe1", new()
    ///     {
    ///         Loadbalancer = resource.Upcloud_loadbalancer.Lb.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UpCloudResourceType("upcloud:index/loadbalancerFrontendRule:LoadbalancerFrontendRule")]
    public partial class LoadbalancerFrontendRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Rule actions.
        /// </summary>
        [Output("actions")]
        public Output<Outputs.LoadbalancerFrontendRuleActions?> Actions { get; private set; } = null!;

        /// <summary>
        /// ID of the load balancer frontend to which the frontend rule is connected.
        /// </summary>
        [Output("frontend")]
        public Output<string> Frontend { get; private set; } = null!;

        /// <summary>
        /// Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
        /// </summary>
        [Output("matchers")]
        public Output<Outputs.LoadbalancerFrontendRuleMatchers?> Matchers { get; private set; } = null!;

        /// <summary>
        /// Defines boolean operator used to combine multiple matchers. Defaults to `and`.
        /// </summary>
        [Output("matchingCondition")]
        public Output<string> MatchingCondition { get; private set; } = null!;

        /// <summary>
        /// The name of the frontend rule. Must be unique within the frontend.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;


        /// <summary>
        /// Create a LoadbalancerFrontendRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadbalancerFrontendRule(string name, LoadbalancerFrontendRuleArgs args, CustomResourceOptions? options = null)
            : base("upcloud:index/loadbalancerFrontendRule:LoadbalancerFrontendRule", name, args ?? new LoadbalancerFrontendRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadbalancerFrontendRule(string name, Input<string> id, LoadbalancerFrontendRuleState? state = null, CustomResourceOptions? options = null)
            : base("upcloud:index/loadbalancerFrontendRule:LoadbalancerFrontendRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UpCloudLtd/pulumi-upcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadbalancerFrontendRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadbalancerFrontendRule Get(string name, Input<string> id, LoadbalancerFrontendRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadbalancerFrontendRule(name, id, state, options);
        }
    }

    public sealed class LoadbalancerFrontendRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Rule actions.
        /// </summary>
        [Input("actions")]
        public Input<Inputs.LoadbalancerFrontendRuleActionsArgs>? Actions { get; set; }

        /// <summary>
        /// ID of the load balancer frontend to which the frontend rule is connected.
        /// </summary>
        [Input("frontend", required: true)]
        public Input<string> Frontend { get; set; } = null!;

        /// <summary>
        /// Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
        /// </summary>
        [Input("matchers")]
        public Input<Inputs.LoadbalancerFrontendRuleMatchersArgs>? Matchers { get; set; }

        /// <summary>
        /// Defines boolean operator used to combine multiple matchers. Defaults to `and`.
        /// </summary>
        [Input("matchingCondition")]
        public Input<string>? MatchingCondition { get; set; }

        /// <summary>
        /// The name of the frontend rule. Must be unique within the frontend.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        public LoadbalancerFrontendRuleArgs()
        {
        }
        public static new LoadbalancerFrontendRuleArgs Empty => new LoadbalancerFrontendRuleArgs();
    }

    public sealed class LoadbalancerFrontendRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Rule actions.
        /// </summary>
        [Input("actions")]
        public Input<Inputs.LoadbalancerFrontendRuleActionsGetArgs>? Actions { get; set; }

        /// <summary>
        /// ID of the load balancer frontend to which the frontend rule is connected.
        /// </summary>
        [Input("frontend")]
        public Input<string>? Frontend { get; set; }

        /// <summary>
        /// Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
        /// </summary>
        [Input("matchers")]
        public Input<Inputs.LoadbalancerFrontendRuleMatchersGetArgs>? Matchers { get; set; }

        /// <summary>
        /// Defines boolean operator used to combine multiple matchers. Defaults to `and`.
        /// </summary>
        [Input("matchingCondition")]
        public Input<string>? MatchingCondition { get; set; }

        /// <summary>
        /// The name of the frontend rule. Must be unique within the frontend.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        public LoadbalancerFrontendRuleState()
        {
        }
        public static new LoadbalancerFrontendRuleState Empty => new LoadbalancerFrontendRuleState();
    }
}
