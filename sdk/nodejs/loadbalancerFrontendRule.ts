// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource represents load balancer frontend rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@upcloud/pulumi-upcloud";
 *
 * const config = new pulumi.Config();
 * const lbZone = config.get("lbZone") || "fi-hel2";
 * const lbNetwork = new upcloud.Network("lb_network", {
 *     name: "lb-test-net",
 *     zone: lbZone,
 *     ipNetwork: {
 *         address: "10.0.0.0/24",
 *         dhcp: true,
 *         family: "IPv4",
 *     },
 * });
 * const lbFe1R1 = new upcloud.LoadbalancerFrontendRule("lb_fe_1_r1", {
 *     frontend: upcloudLoadbalancerFrontend.lbFe1.id,
 *     name: "lb-fe-1-r1-test",
 *     priority: 10,
 *     matchers: {
 *         srcIps: [{
 *             value: "192.168.0.0/24",
 *         }],
 *     },
 *     actions: {
 *         useBackends: [{
 *             backendName: upcloudLoadbalancerBackend.lbBe1.name,
 *         }],
 *     },
 * });
 * const lbFe1 = new upcloud.LoadbalancerFrontend("lb_fe_1", {
 *     loadbalancer: upcloudLoadbalancer.lb.id,
 *     name: "lb-fe-1-test",
 *     mode: "http",
 *     port: 8080,
 *     defaultBackendName: upcloudLoadbalancerBackend.lbBe1.name,
 * });
 * const lb = new upcloud.Loadbalancer("lb", {
 *     configuredStatus: "started",
 *     name: "lb-test",
 *     plan: "development",
 *     zone: lbZone,
 *     networks: [
 *         {
 *             type: "public",
 *             family: "IPv4",
 *             name: "public",
 *         },
 *         {
 *             type: "private",
 *             family: "IPv4",
 *             name: "private",
 *             network: upcloudNetwork.lbNetwork.id,
 *         },
 *     ],
 * });
 * const lbBe1 = new upcloud.LoadbalancerBackend("lb_be_1", {
 *     loadbalancer: upcloudLoadbalancer.lb.id,
 *     name: "lb-be-1-test",
 * });
 * ```
 */
export class LoadbalancerFrontendRule extends pulumi.CustomResource {
    /**
     * Get an existing LoadbalancerFrontendRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerFrontendRuleState, opts?: pulumi.CustomResourceOptions): LoadbalancerFrontendRule {
        return new LoadbalancerFrontendRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/loadbalancerFrontendRule:LoadbalancerFrontendRule';

    /**
     * Returns true if the given object is an instance of LoadbalancerFrontendRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadbalancerFrontendRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadbalancerFrontendRule.__pulumiType;
    }

    /**
     * Rule actions.
     */
    declare public readonly actions: pulumi.Output<outputs.LoadbalancerFrontendRuleActions | undefined>;
    /**
     * ID of the load balancer frontend to which the frontend rule is connected.
     */
    declare public readonly frontend: pulumi.Output<string>;
    /**
     * Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
     */
    declare public readonly matchers: pulumi.Output<outputs.LoadbalancerFrontendRuleMatchers | undefined>;
    /**
     * Defines boolean operator used to combine multiple matchers. Defaults to `and`.
     */
    declare public readonly matchingCondition: pulumi.Output<string>;
    /**
     * The name of the frontend rule. Must be unique within the frontend.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
     */
    declare public readonly priority: pulumi.Output<number>;

    /**
     * Create a LoadbalancerFrontendRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerFrontendRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerFrontendRuleArgs | LoadbalancerFrontendRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerFrontendRuleState | undefined;
            resourceInputs["actions"] = state?.actions;
            resourceInputs["frontend"] = state?.frontend;
            resourceInputs["matchers"] = state?.matchers;
            resourceInputs["matchingCondition"] = state?.matchingCondition;
            resourceInputs["name"] = state?.name;
            resourceInputs["priority"] = state?.priority;
        } else {
            const args = argsOrState as LoadbalancerFrontendRuleArgs | undefined;
            if (args?.frontend === undefined && !opts.urn) {
                throw new Error("Missing required property 'frontend'");
            }
            if (args?.priority === undefined && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["actions"] = args?.actions;
            resourceInputs["frontend"] = args?.frontend;
            resourceInputs["matchers"] = args?.matchers;
            resourceInputs["matchingCondition"] = args?.matchingCondition;
            resourceInputs["name"] = args?.name;
            resourceInputs["priority"] = args?.priority;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadbalancerFrontendRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadbalancerFrontendRule resources.
 */
export interface LoadbalancerFrontendRuleState {
    /**
     * Rule actions.
     */
    actions?: pulumi.Input<inputs.LoadbalancerFrontendRuleActions>;
    /**
     * ID of the load balancer frontend to which the frontend rule is connected.
     */
    frontend?: pulumi.Input<string>;
    /**
     * Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
     */
    matchers?: pulumi.Input<inputs.LoadbalancerFrontendRuleMatchers>;
    /**
     * Defines boolean operator used to combine multiple matchers. Defaults to `and`.
     */
    matchingCondition?: pulumi.Input<string>;
    /**
     * The name of the frontend rule. Must be unique within the frontend.
     */
    name?: pulumi.Input<string>;
    /**
     * Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
     */
    priority?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LoadbalancerFrontendRule resource.
 */
export interface LoadbalancerFrontendRuleArgs {
    /**
     * Rule actions.
     */
    actions?: pulumi.Input<inputs.LoadbalancerFrontendRuleActions>;
    /**
     * ID of the load balancer frontend to which the frontend rule is connected.
     */
    frontend: pulumi.Input<string>;
    /**
     * Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
     */
    matchers?: pulumi.Input<inputs.LoadbalancerFrontendRuleMatchers>;
    /**
     * Defines boolean operator used to combine multiple matchers. Defaults to `and`.
     */
    matchingCondition?: pulumi.Input<string>;
    /**
     * The name of the frontend rule. Must be unique within the frontend.
     */
    name?: pulumi.Input<string>;
    /**
     * Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
     */
    priority: pulumi.Input<number>;
}
