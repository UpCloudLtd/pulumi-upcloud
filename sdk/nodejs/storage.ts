// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import upcloud:index/storage:Storage example_storage 0128ae5a-91dd-4ebf-bd1e-304c47f2c652
 * ```
 */
export class Storage extends pulumi.CustomResource {
    /**
     * Get an existing Storage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageState, opts?: pulumi.CustomResourceOptions): Storage {
        return new Storage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/storage:Storage';

    /**
     * Returns true if the given object is an instance of Storage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Storage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Storage.__pulumiType;
    }

    declare public readonly backupRule: pulumi.Output<outputs.StorageBackupRule | undefined>;
    /**
     * Block defining another storage/template to clone to storage.
     */
    declare public readonly clone: pulumi.Output<outputs.StorageClone | undefined>;
    /**
     * If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
     */
    declare public readonly deleteAutoresizeBackup: pulumi.Output<boolean>;
    /**
     * Sets if the storage is encrypted at rest.
     */
    declare public readonly encrypt: pulumi.Output<boolean>;
    /**
     * If set to true, provider will attempt to resize partition and filesystem when the size of the storage changes. Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless `deleteAutoresizeBackup` option is set to true).
     * 				Taking and keeping backups incure costs.
     */
    declare public readonly filesystemAutoresize: pulumi.Output<boolean>;
    /**
     * Block defining external data to import to storage
     */
    declare public readonly import: pulumi.Output<outputs.StorageImport | undefined>;
    /**
     * User defined key-value pairs to classify the storage.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * The size of the storage in gigabytes.
     */
    declare public readonly size: pulumi.Output<number>;
    /**
     * System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore and can not be modified by the user.
     */
    declare public /*out*/ readonly systemLabels: pulumi.Output<{[key: string]: string}>;
    /**
     * The tier of the storage.
     */
    declare public readonly tier: pulumi.Output<string>;
    /**
     * The title of the storage.
     */
    declare public readonly title: pulumi.Output<string>;
    /**
     * The type of the storage.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * The zone the storage is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a Storage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageArgs | StorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageState | undefined;
            resourceInputs["backupRule"] = state?.backupRule;
            resourceInputs["clone"] = state?.clone;
            resourceInputs["deleteAutoresizeBackup"] = state?.deleteAutoresizeBackup;
            resourceInputs["encrypt"] = state?.encrypt;
            resourceInputs["filesystemAutoresize"] = state?.filesystemAutoresize;
            resourceInputs["import"] = state?.import;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["size"] = state?.size;
            resourceInputs["systemLabels"] = state?.systemLabels;
            resourceInputs["tier"] = state?.tier;
            resourceInputs["title"] = state?.title;
            resourceInputs["type"] = state?.type;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as StorageArgs | undefined;
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if (args?.title === undefined && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["backupRule"] = args?.backupRule;
            resourceInputs["clone"] = args?.clone;
            resourceInputs["deleteAutoresizeBackup"] = args?.deleteAutoresizeBackup;
            resourceInputs["encrypt"] = args?.encrypt;
            resourceInputs["filesystemAutoresize"] = args?.filesystemAutoresize;
            resourceInputs["import"] = args?.import;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["size"] = args?.size;
            resourceInputs["tier"] = args?.tier;
            resourceInputs["title"] = args?.title;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["systemLabels"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Storage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Storage resources.
 */
export interface StorageState {
    backupRule?: pulumi.Input<inputs.StorageBackupRule>;
    /**
     * Block defining another storage/template to clone to storage.
     */
    clone?: pulumi.Input<inputs.StorageClone>;
    /**
     * If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
     */
    deleteAutoresizeBackup?: pulumi.Input<boolean>;
    /**
     * Sets if the storage is encrypted at rest.
     */
    encrypt?: pulumi.Input<boolean>;
    /**
     * If set to true, provider will attempt to resize partition and filesystem when the size of the storage changes. Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless `deleteAutoresizeBackup` option is set to true).
     * 				Taking and keeping backups incure costs.
     */
    filesystemAutoresize?: pulumi.Input<boolean>;
    /**
     * Block defining external data to import to storage
     */
    import?: pulumi.Input<inputs.StorageImport>;
    /**
     * User defined key-value pairs to classify the storage.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The size of the storage in gigabytes.
     */
    size?: pulumi.Input<number>;
    /**
     * System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore and can not be modified by the user.
     */
    systemLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The tier of the storage.
     */
    tier?: pulumi.Input<string>;
    /**
     * The title of the storage.
     */
    title?: pulumi.Input<string>;
    /**
     * The type of the storage.
     */
    type?: pulumi.Input<string>;
    /**
     * The zone the storage is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Storage resource.
 */
export interface StorageArgs {
    backupRule?: pulumi.Input<inputs.StorageBackupRule>;
    /**
     * Block defining another storage/template to clone to storage.
     */
    clone?: pulumi.Input<inputs.StorageClone>;
    /**
     * If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
     */
    deleteAutoresizeBackup?: pulumi.Input<boolean>;
    /**
     * Sets if the storage is encrypted at rest.
     */
    encrypt?: pulumi.Input<boolean>;
    /**
     * If set to true, provider will attempt to resize partition and filesystem when the size of the storage changes. Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless `deleteAutoresizeBackup` option is set to true).
     * 				Taking and keeping backups incure costs.
     */
    filesystemAutoresize?: pulumi.Input<boolean>;
    /**
     * Block defining external data to import to storage
     */
    import?: pulumi.Input<inputs.StorageImport>;
    /**
     * User defined key-value pairs to classify the storage.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The size of the storage in gigabytes.
     */
    size: pulumi.Input<number>;
    /**
     * The tier of the storage.
     */
    tier?: pulumi.Input<string>;
    /**
     * The title of the storage.
     */
    title: pulumi.Input<string>;
    /**
     * The zone the storage is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone: pulumi.Input<string>;
}
