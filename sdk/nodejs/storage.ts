// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import upcloud:index/storage:Storage example_storage 0128ae5a-91dd-4ebf-bd1e-304c47f2c652
 * ```
 */
export class Storage extends pulumi.CustomResource {
    /**
     * Get an existing Storage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageState, opts?: pulumi.CustomResourceOptions): Storage {
        return new Storage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/storage:Storage';

    /**
     * Returns true if the given object is an instance of Storage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Storage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Storage.__pulumiType;
    }

    public readonly backupRule!: pulumi.Output<outputs.StorageBackupRule | undefined>;
    /**
     * Block defining another storage/template to clone to storage.
     */
    public readonly clone!: pulumi.Output<outputs.StorageClone | undefined>;
    /**
     * If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after
     * success.
     */
    public readonly deleteAutoresizeBackup!: pulumi.Output<boolean>;
    /**
     * Sets if the storage is encrypted at rest.
     */
    public readonly encrypt!: pulumi.Output<boolean>;
    /**
     * If set to true, provider will attempt to resize partition and filesystem when the size of the storage changes. Please
     * note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the
     * backup will be used to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless
     * `deleteAutoresizeBackup` option is set to true). Taking and keeping backups incure costs.
     */
    public readonly filesystemAutoresize!: pulumi.Output<boolean>;
    /**
     * Block defining external data to import to storage
     */
    public readonly import!: pulumi.Output<outputs.StorageImport | undefined>;
    /**
     * User defined key-value pairs to classify the storage.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The size of the storage in gigabytes.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore
     * and can not be modified by the user.
     */
    public /*out*/ readonly systemLabels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The tier of the storage.
     */
    public readonly tier!: pulumi.Output<string>;
    /**
     * The title of the storage.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The type of the storage.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The zone the storage is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Storage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageArgs | StorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageState | undefined;
            resourceInputs["backupRule"] = state ? state.backupRule : undefined;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["deleteAutoresizeBackup"] = state ? state.deleteAutoresizeBackup : undefined;
            resourceInputs["encrypt"] = state ? state.encrypt : undefined;
            resourceInputs["filesystemAutoresize"] = state ? state.filesystemAutoresize : undefined;
            resourceInputs["import"] = state ? state.import : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["systemLabels"] = state ? state.systemLabels : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as StorageArgs | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["backupRule"] = args ? args.backupRule : undefined;
            resourceInputs["clone"] = args ? args.clone : undefined;
            resourceInputs["deleteAutoresizeBackup"] = args ? args.deleteAutoresizeBackup : undefined;
            resourceInputs["encrypt"] = args ? args.encrypt : undefined;
            resourceInputs["filesystemAutoresize"] = args ? args.filesystemAutoresize : undefined;
            resourceInputs["import"] = args ? args.import : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["systemLabels"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Storage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Storage resources.
 */
export interface StorageState {
    backupRule?: pulumi.Input<inputs.StorageBackupRule>;
    /**
     * Block defining another storage/template to clone to storage.
     */
    clone?: pulumi.Input<inputs.StorageClone>;
    /**
     * If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after
     * success.
     */
    deleteAutoresizeBackup?: pulumi.Input<boolean>;
    /**
     * Sets if the storage is encrypted at rest.
     */
    encrypt?: pulumi.Input<boolean>;
    /**
     * If set to true, provider will attempt to resize partition and filesystem when the size of the storage changes. Please
     * note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the
     * backup will be used to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless
     * `deleteAutoresizeBackup` option is set to true). Taking and keeping backups incure costs.
     */
    filesystemAutoresize?: pulumi.Input<boolean>;
    /**
     * Block defining external data to import to storage
     */
    import?: pulumi.Input<inputs.StorageImport>;
    /**
     * User defined key-value pairs to classify the storage.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The size of the storage in gigabytes.
     */
    size?: pulumi.Input<number>;
    /**
     * System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore
     * and can not be modified by the user.
     */
    systemLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The tier of the storage.
     */
    tier?: pulumi.Input<string>;
    /**
     * The title of the storage.
     */
    title?: pulumi.Input<string>;
    /**
     * The type of the storage.
     */
    type?: pulumi.Input<string>;
    /**
     * The zone the storage is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Storage resource.
 */
export interface StorageArgs {
    backupRule?: pulumi.Input<inputs.StorageBackupRule>;
    /**
     * Block defining another storage/template to clone to storage.
     */
    clone?: pulumi.Input<inputs.StorageClone>;
    /**
     * If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after
     * success.
     */
    deleteAutoresizeBackup?: pulumi.Input<boolean>;
    /**
     * Sets if the storage is encrypted at rest.
     */
    encrypt?: pulumi.Input<boolean>;
    /**
     * If set to true, provider will attempt to resize partition and filesystem when the size of the storage changes. Please
     * note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the
     * backup will be used to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless
     * `deleteAutoresizeBackup` option is set to true). Taking and keeping backups incure costs.
     */
    filesystemAutoresize?: pulumi.Input<boolean>;
    /**
     * Block defining external data to import to storage
     */
    import?: pulumi.Input<inputs.StorageImport>;
    /**
     * User defined key-value pairs to classify the storage.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The size of the storage in gigabytes.
     */
    size: pulumi.Input<number>;
    /**
     * The tier of the storage.
     */
    tier?: pulumi.Input<string>;
    /**
     * The title of the storage.
     */
    title: pulumi.Input<string>;
    /**
     * The zone the storage is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone: pulumi.Input<string>;
}
