// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GatewayAddress {
    /**
     * IP addresss
     */
    address: string;
    /**
     * Name of the IP address
     */
    name: string;
}

export interface GatewayConnectionLocalRoute {
    /**
     * Name of the route
     */
    name: string;
    /**
     * Destination prefix of the route; needs to be a valid IPv4 prefix
     */
    staticNetwork: string;
    /**
     * Type of route; currently the only supported type is 'static'
     */
    type?: string;
}

export interface GatewayConnectionRemoteRoute {
    /**
     * Name of the route
     */
    name: string;
    /**
     * Destination prefix of the route; needs to be a valid IPv4 prefix
     */
    staticNetwork: string;
    /**
     * Type of route; currently the only supported type is 'static'
     */
    type?: string;
}

export interface GatewayConnectionTunnelIpsecAuthPsk {
    /**
     * The pre-shared key. This value is only used during resource creation and is not returned in the state. It is not possible to update this value. If you need to update it, delete the connection and create a new one.
     */
    psk: string;
}

export interface GatewayConnectionTunnelIpsecProperties {
    /**
     * IKE child SA rekey time in seconds.
     */
    childRekeyTime: number;
    /**
     * Delay before sending Dead Peer Detection packets if no traffic is detected, in seconds.
     */
    dpdDelay: number;
    /**
     * Timeout period for DPD reply before considering the peer to be dead, in seconds.
     */
    dpdTimeout: number;
    /**
     * Maximum IKE SA lifetime in seconds.
     */
    ikeLifetime: number;
    /**
     * List of Phase 1: Proposal algorithms.
     */
    phase1Algorithms: string[];
    /**
     * List of Phase 1 Diffie-Hellman group numbers.
     */
    phase1DhGroupNumbers: number[];
    /**
     * List of Phase 1 integrity algorithms.
     */
    phase1IntegrityAlgorithms: string[];
    /**
     * List of Phase 2: Security Association algorithms.
     */
    phase2Algorithms: string[];
    /**
     * List of Phase 2 Diffie-Hellman group numbers.
     */
    phase2DhGroupNumbers: number[];
    /**
     * List of Phase 2 integrity algorithms.
     */
    phase2IntegrityAlgorithms: string[];
    /**
     * IKE SA rekey time in seconds.
     */
    rekeyTime: number;
}

export interface GatewayRouter {
    /**
     * ID of the router attached to the gateway.
     */
    id: string;
}

export interface GetHostsHost {
    /**
     * Free form text describing the host
     */
    description: string;
    /**
     * The unique id of the host
     */
    hostId: number;
    statistics?: outputs.GetHostsHostStatistic[];
    /**
     * If true, this node can be used as a host for Windows servers.
     */
    windowsEnabled: boolean;
    /**
     * The zone the host is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone: string;
}

export interface GetHostsHostStatistic {
    /**
     * The name of the statistic
     */
    name: string;
    /**
     * The timestamp of the statistic
     */
    timestamp: string;
    /**
     * The value of the statistic
     */
    value: number;
}

export interface GetIpAddressesAddress {
    /**
     * Is address for utility or public network
     */
    access: string;
    /**
     * An UpCloud assigned IP Address
     */
    address: string;
    /**
     * IP address family
     */
    family: string;
    /**
     * Does the IP Address represents a floating IP Address
     */
    floating: boolean;
    /**
     * MAC address of server interface to assign address to
     */
    mac: string;
    /**
     * Is the address a part of a plan
     */
    partOfPlan: boolean;
    /**
     * A reverse DNS record entry
     */
    ptrRecord: string;
    /**
     * The unique identifier for a server
     */
    server: string;
    /**
     * Zone of address, required when assigning a detached floating IP address, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone: string;
}

export interface GetManagedDatabaseMysqlSessionsSession {
    /**
     * Name of the application that is connected to this service.
     */
    applicationName: string;
    /**
     * IP address of the client connected to this service.
     */
    clientAddr: string;
    /**
     * Name of the database this service is connected to.
     */
    datname: string;
    /**
     * Process ID of this service.
     */
    id: string;
    /**
     * Text of this service's most recent query. If state is active this field shows the currently executing query. In all other states, it shows an empty string.
     */
    query: string;
    /**
     * The active query current duration.
     */
    queryDuration: string;
    /**
     * Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
     */
    state: string;
    /**
     * Name of the user logged into this service.
     */
    usename: string;
}

export interface GetManagedDatabaseOpensearchIndicesIndex {
    /**
     * Timestamp indicating the creation time of the index.
     */
    createTime: string;
    /**
     * Number of documents stored in the index.
     */
    docs: number;
    /**
     * Health status of the index e.g. `green`, `yellow`, or `red`.
     */
    health: string;
    /**
     * Name of the index.
     */
    indexName: string;
    /**
     * Number of replicas configured for the index.
     */
    numberOfReplicas: number;
    /**
     * Number of shards configured & used by the index.
     */
    numberOfShards: number;
    /**
     * Indicates whether the index is in a read-only state that permits deletion of the entire index. This attribute can be automatically set to true in certain scenarios where the node disk space exceeds the flood stage.
     */
    readOnlyAllowDelete: boolean;
    /**
     * Size of the index in bytes.
     */
    size: number;
    /**
     * Status of the index e.g. `open` or `closed`.
     */
    status: string;
}

export interface GetManagedDatabasePostgresqlSessionsSession {
    /**
     * Name of the application that is connected to this service.
     */
    applicationName: string;
    /**
     * Time when this process was started, i.e., when the client connected to the server.
     */
    backendStart: string;
    /**
     * Type of current service.
     */
    backendType: string;
    /**
     * Top-level transaction identifier of this service, if any.
     */
    backendXid: number;
    /**
     * The current service's xmin horizon.
     */
    backendXmin: number;
    /**
     * IP address of the client connected to this service. If this field is null, it indicates either that the client is connected via a Unix socket on the server machine or that this is an internal process such as autovacuum.
     */
    clientAddr: string;
    /**
     * Host name of the connected client, as reported by a reverse DNS lookup of `clientAddr`.
     */
    clientHostname: string;
    /**
     * TCP port number that the client is using for communication with this service, or -1 if a Unix socket is used.
     */
    clientPort: number;
    /**
     * OID of the database this service is connected to.
     */
    datid: number;
    /**
     * Name of the database this service is connected to.
     */
    datname: string;
    /**
     * Process ID of this service.
     */
    id: string;
    /**
     * Text of this service's most recent query. If state is active this field shows the currently executing query. In all other states, it shows the last query that was executed.
     */
    query: string;
    /**
     * The active query current duration.
     */
    queryDuration: string;
    /**
     * Time when the currently active query was started, or if state is not active, when the last query was started.
     */
    queryStart: string;
    /**
     * Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
     */
    state: string;
    /**
     * Time when the state was last changed.
     */
    stateChange: string;
    /**
     * Name of the user logged into this service.
     */
    usename: string;
    /**
     * OID of the user logged into this service.
     */
    usesysid: number;
    /**
     * Wait event name if service is currently waiting.
     */
    waitEvent: string;
    /**
     * The type of event for which the service is waiting, if any; otherwise NULL.
     */
    waitEventType: string;
    /**
     * Time when this process' current transaction was started, or null if no transaction is active.
     */
    xactStart: string;
}

export interface GetManagedDatabaseRedisSessionsSession {
    /**
     * Number of active channel subscriptions
     */
    activeChannelSubscriptions: number;
    /**
     * Current database ID
     */
    activeDatabase: string;
    /**
     * Number of pattern matching subscriptions.
     */
    activePatternMatchingChannelSubscriptions: number;
    /**
     * Name of the application that is connected to this service.
     */
    applicationName: string;
    /**
     * Number of pattern matching subscriptions.
     */
    clientAddr: string;
    /**
     * Total duration of the connection in nanoseconds.
     */
    connectionAge: number;
    /**
     * Idle time of the connection in nanoseconds.
     */
    connectionIdle: number;
    /**
     * A set containing flags' descriptions.
     */
    flags: string[];
    /**
     * Client connection flags in raw string format.
     */
    flagsRaw: string;
    /**
     * Process ID of this session.
     */
    id: string;
    /**
     * Number of commands in a MULTI/EXEC context.
     */
    multiExecCommands: number;
    /**
     * Output buffer length.
     */
    outputBuffer: number;
    /**
     * Output buffer memory usage.
     */
    outputBufferMemory: number;
    /**
     * Output list length (replies are queued in this list when the buffer is full).
     */
    outputListLength: number;
    /**
     * The last executed command.
     */
    query: string;
    /**
     * Query buffer length (0 means no query pending).
     */
    queryBuffer: number;
    /**
     * Free space of the query buffer (0 means the buffer is full).
     */
    queryBufferFree: number;
}

export interface GetManagedDatabaseValkeySessionsSession {
    /**
     * Number of active channel subscriptions
     */
    activeChannelSubscriptions: number;
    /**
     * Current database ID
     */
    activeDatabase: string;
    /**
     * Number of pattern matching subscriptions.
     */
    activePatternMatchingChannelSubscriptions: number;
    /**
     * Name of the application that is connected to this service.
     */
    applicationName: string;
    /**
     * Number of pattern matching subscriptions.
     */
    clientAddr: string;
    /**
     * Total duration of the connection in nanoseconds.
     */
    connectionAge: number;
    /**
     * Idle time of the connection in nanoseconds.
     */
    connectionIdle: number;
    /**
     * A set containing flags' descriptions.
     */
    flags: string[];
    /**
     * Client connection flags in raw string format.
     */
    flagsRaw: string;
    /**
     * Process ID of this session.
     */
    id: string;
    /**
     * Number of commands in a MULTI/EXEC context.
     */
    multiExecCommands: number;
    /**
     * Output buffer length.
     */
    outputBuffer: number;
    /**
     * Output buffer memory usage.
     */
    outputBufferMemory: number;
    /**
     * Output list length (replies are queued in this list when the buffer is full).
     */
    outputListLength: number;
    /**
     * The last executed command.
     */
    query: string;
    /**
     * Query buffer length (0 means no query pending).
     */
    queryBuffer: number;
    /**
     * Free space of the query buffer (0 means the buffer is full).
     */
    queryBufferFree: number;
}

export interface GetManagedObjectStoragePoliciesPolicy {
    /**
     * Policy ARN.
     */
    arn: string;
    /**
     * Attachment count.
     */
    attachmentCount: number;
    /**
     * Creation time.
     */
    createdAt: string;
    /**
     * Default version id.
     */
    defaultVersionId: string;
    /**
     * Description of the policy.
     */
    description?: string;
    /**
     * Policy document, URL-encoded compliant with RFC 3986.
     */
    document: string;
    /**
     * Policy name.
     */
    name: string;
    /**
     * Managed Object Storage service UUID.
     */
    serviceUuid: string;
    /**
     * Defines whether the policy was set up by the system.
     */
    system: boolean;
    /**
     * Update time.
     */
    updatedAt: string;
}

export interface GetManagedObjectStorageRegionsRegion {
    /**
     * Name of the region.
     */
    name: string;
    /**
     * Primary zone of the region.
     */
    primaryZone: string;
    /**
     * List of zones in the region.
     */
    zones: string[];
}

export interface GetNetworksNetwork {
    /**
     * The UUID of the network
     */
    id: string;
    /**
     * A list of IP subnets within the network
     */
    ipNetworks: outputs.GetNetworksNetworkIpNetwork[];
    /**
     * A valid name for the network
     */
    name: string;
    /**
     * A list of attached servers
     */
    servers: outputs.GetNetworksNetworkServer[];
    /**
     * The network type
     */
    type: string;
    /**
     * The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone: string;
}

export interface GetNetworksNetworkIpNetwork {
    /**
     * The CIDR range of the subnet
     */
    address: string;
    /**
     * Is DHCP enabled?
     */
    dhcp: boolean;
    /**
     * Is the gateway the DHCP default route?
     */
    dhcpDefaultRoute: boolean;
    /**
     * The DNS servers given by DHCP
     */
    dhcpDns: string[];
    /**
     * The additional DHCP classless static routes given by DHCP
     */
    dhcpRoutes: string[];
    /**
     * IP address family
     */
    family: string;
    /**
     * Gateway address given by DHCP
     */
    gateway: string;
}

export interface GetNetworksNetworkServer {
    /**
     * The UUID of the server
     */
    id: string;
    /**
     * The short description of the server
     */
    title: string;
}

export interface GetTagsTag {
    /**
     * Free form text representing the meaning of the tag
     */
    description: string;
    /**
     * The value representing the tag
     */
    name: string;
    /**
     * A collection of servers that have been assigned the tag
     */
    servers: string[];
}

export interface KubernetesNodeGroupCustomPlan {
    /**
     * The number of CPU cores dedicated to individual node group nodes when using custom plan
     */
    cores: number;
    /**
     * The amount of memory in megabytes to assign to individual node group node when using custom plan. Value needs to be divisible by 1024.
     */
    memory: number;
    /**
     * The size of the storage device in gigabytes.
     */
    storageSize: number;
    /**
     * The storage tier to use. Defaults to maxiops
     */
    storageTier: string;
}

export interface KubernetesNodeGroupKubeletArg {
    /**
     * Kubelet argument key.
     */
    key: string;
    /**
     * Kubelet argument value.
     */
    value: string;
}

export interface KubernetesNodeGroupTaint {
    /**
     * Taint effect.
     */
    effect: string;
    /**
     * Taint key.
     */
    key: string;
    /**
     * Taint value.
     */
    value: string;
}

export interface LoadbalancerBackendProperties {
    /**
     * Expected HTTP status code returned by the customer application to mark server as healthy. Ignored for `tcp` `healthCheckType`.
     */
    healthCheckExpectedStatus: number;
    /**
     * Sets how many failed health checks are allowed until the backend member is taken off from the rotation.
     */
    healthCheckFall: number;
    /**
     * Interval between health checks in seconds.
     */
    healthCheckInterval: number;
    /**
     * Sets how many successful health checks are required to put the backend member back into rotation.
     */
    healthCheckRise: number;
    /**
     * Enables certificate verification with the system CA certificate bundle. Works with https scheme in health_check_url, otherwise ignored.
     */
    healthCheckTlsVerify: boolean;
    /**
     * Health check type.
     */
    healthCheckType: string;
    /**
     * Target path for health check HTTP GET requests. Ignored for `tcp` `healthCheckType`.
     */
    healthCheckUrl: string;
    /**
     * Allow HTTP/2 connections to backend members by utilizing ALPN extension of TLS protocol, therefore it can only be enabled when tlsEnabled is set to true. Note: members should support HTTP/2 for this setting to work.
     */
    http2Enabled: boolean;
    /**
     * Enable outbound proxy protocol by setting the desired version. Defaults to empty string. Empty string disables proxy protocol.
     */
    outboundProxyProtocol: string;
    /**
     * Sets sticky session cookie name. Empty string disables sticky session.
     */
    stickySessionCookieName: string;
    /**
     * Backend server timeout in seconds.
     */
    timeoutServer: number;
    /**
     * Maximum inactivity time on the client and server side for tunnels in seconds.
     */
    timeoutTunnel: number;
    /**
     * Enables TLS connection from the load balancer to backend servers.
     */
    tlsEnabled: boolean;
    /**
     * If enabled, then the system CA certificate bundle will be used for the certificate verification.
     */
    tlsUseSystemCa: boolean;
    /**
     * Enables backend servers certificate verification. Please make sure that TLS config with the certificate bundle of type authority attached to the backend or `tlsUseSystemCa` enabled. Note: `tlsVerify` has preference over `healthCheckTlsVerify` when `tlsEnabled` in true.
     */
    tlsVerify: boolean;
}

export interface LoadbalancerFrontendNetwork {
    /**
     * Name of the load balancer network.
     */
    name: string;
}

export interface LoadbalancerFrontendProperties {
    /**
     * Enable or disable HTTP/2 support.
     */
    http2Enabled: boolean;
    /**
     * Enable or disable inbound proxy protocol support.
     */
    inboundProxyProtocol: boolean;
    /**
     * Client request timeout in seconds.
     */
    timeoutClient: number;
}

export interface LoadbalancerFrontendRuleActions {
    /**
     * Redirects HTTP requests to specified location or URL scheme. Only either location or scheme can be defined at a time.
     */
    httpRedirects?: outputs.LoadbalancerFrontendRuleActionsHttpRedirect[];
    /**
     * Returns HTTP response with specified HTTP status.
     */
    httpReturns?: outputs.LoadbalancerFrontendRuleActionsHttpReturn[];
    /**
     * Adds 'X-Forwarded-For / -Proto / -Port' headers in your forwarded requests
     */
    setForwardedHeaders?: outputs.LoadbalancerFrontendRuleActionsSetForwardedHeader[];
    /**
     * Set request header
     */
    setRequestHeaders?: outputs.LoadbalancerFrontendRuleActionsSetRequestHeader[];
    /**
     * Set response header
     */
    setResponseHeaders?: outputs.LoadbalancerFrontendRuleActionsSetResponseHeader[];
    /**
     * Terminates a connection.
     */
    tcpRejects?: outputs.LoadbalancerFrontendRuleActionsTcpReject[];
    /**
     * Routes traffic to specified `backend`.
     */
    useBackends?: outputs.LoadbalancerFrontendRuleActionsUseBackend[];
}

export interface LoadbalancerFrontendRuleActionsHttpRedirect {
    /**
     * Target location.
     */
    location?: string;
    /**
     * Target scheme.
     */
    scheme?: string;
    /**
     * HTTP status code.
     */
    status: number;
}

export interface LoadbalancerFrontendRuleActionsHttpReturn {
    /**
     * Content type.
     */
    contentType: string;
    /**
     * The payload.
     */
    payload: string;
    /**
     * HTTP status code.
     */
    status: number;
}

export interface LoadbalancerFrontendRuleActionsSetForwardedHeader {
    active: boolean;
}

export interface LoadbalancerFrontendRuleActionsSetRequestHeader {
    /**
     * Header name.
     */
    header: string;
    /**
     * Header value.
     */
    value?: string;
}

export interface LoadbalancerFrontendRuleActionsSetResponseHeader {
    /**
     * Header name.
     */
    header: string;
    /**
     * Header value.
     */
    value?: string;
}

export interface LoadbalancerFrontendRuleActionsTcpReject {
    /**
     * Indicates if the rule is active.
     */
    active: boolean;
}

export interface LoadbalancerFrontendRuleActionsUseBackend {
    /**
     * The name of the backend where traffic will be routed.
     */
    backendName: string;
}

export interface LoadbalancerFrontendRuleMatchers {
    /**
     * Matches by range of HTTP request body sizes.
     */
    bodySizeRanges?: outputs.LoadbalancerFrontendRuleMatchersBodySizeRange[];
    /**
     * Matches by HTTP request body size.
     */
    bodySizes?: outputs.LoadbalancerFrontendRuleMatchersBodySize[];
    /**
     * Matches by HTTP cookie value. Cookie name must be provided.
     */
    cookies?: outputs.LoadbalancerFrontendRuleMatchersCookie[];
    /**
     * Matches by HTTP header value. Header name must be provided.
     *
     * @deprecated Use `requestHeader` instead.
     */
    headers?: outputs.LoadbalancerFrontendRuleMatchersHeader[];
    /**
     * Matches by hostname. Header extracted from HTTP Headers or from TLS certificate in case of secured connection.
     */
    hosts?: outputs.LoadbalancerFrontendRuleMatchersHost[];
    /**
     * Matches by HTTP method.
     */
    httpMethods?: outputs.LoadbalancerFrontendRuleMatchersHttpMethod[];
    /**
     * Matches by range of HTTP statuses.
     */
    httpStatusRanges?: outputs.LoadbalancerFrontendRuleMatchersHttpStatusRange[];
    /**
     * Matches by HTTP status.
     */
    httpStatuses?: outputs.LoadbalancerFrontendRuleMatchersHttpStatus[];
    /**
     * Matches by number of healthy backend members.
     */
    numMembersUps?: outputs.LoadbalancerFrontendRuleMatchersNumMembersUp[];
    /**
     * Matches by URL path.
     */
    paths?: outputs.LoadbalancerFrontendRuleMatchersPath[];
    /**
     * Matches by HTTP request header value. Header name must be provided.
     */
    requestHeaders?: outputs.LoadbalancerFrontendRuleMatchersRequestHeader[];
    /**
     * Matches by HTTP response header value. Header name must be provided.
     */
    responseHeaders?: outputs.LoadbalancerFrontendRuleMatchersResponseHeader[];
    /**
     * Matches by source IP address.
     */
    srcIps?: outputs.LoadbalancerFrontendRuleMatchersSrcIp[];
    /**
     * Matches by range of source port numbers.
     */
    srcPortRanges?: outputs.LoadbalancerFrontendRuleMatchersSrcPortRange[];
    /**
     * Matches by source port number.
     */
    srcPorts?: outputs.LoadbalancerFrontendRuleMatchersSrcPort[];
    /**
     * Matches by URL query parameter value. Query parameter name must be provided
     */
    urlParams?: outputs.LoadbalancerFrontendRuleMatchersUrlParam[];
    /**
     * Matches by URL query string.
     */
    urlQueries?: outputs.LoadbalancerFrontendRuleMatchersUrlQuery[];
    /**
     * Matches by URL without schema, e.g. `example.com/dashboard`.
     */
    urls?: outputs.LoadbalancerFrontendRuleMatchersUrl[];
}

export interface LoadbalancerFrontendRuleMatchersBodySize {
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`equal`, `greater`, `greaterOrEqual`, `less`, `lessOrEqual`).
     */
    method: string;
    /**
     * Integer value.
     */
    value: number;
}

export interface LoadbalancerFrontendRuleMatchersBodySizeRange {
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Integer value.
     */
    rangeEnd: number;
    /**
     * Integer value.
     */
    rangeStart: number;
}

export interface LoadbalancerFrontendRuleMatchersCookie {
    /**
     * Defines if case should be ignored. Defaults to `false`.
     */
    ignoreCase: boolean;
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignoreCase` fields.
     */
    method: string;
    /**
     * Name of the argument.
     */
    name: string;
    /**
     * String value.
     */
    value?: string;
}

export interface LoadbalancerFrontendRuleMatchersHeader {
    /**
     * Defines if case should be ignored. Defaults to `false`.
     */
    ignoreCase: boolean;
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignoreCase` fields.
     */
    method: string;
    /**
     * Name of the argument.
     */
    name: string;
    /**
     * String value.
     */
    value?: string;
}

export interface LoadbalancerFrontendRuleMatchersHost {
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * String value.
     */
    value: string;
}

export interface LoadbalancerFrontendRuleMatchersHttpMethod {
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * String value (`GET`, `HEAD`, `POST`, `PUT`, `PATCH`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`).
     */
    value: string;
}

export interface LoadbalancerFrontendRuleMatchersHttpStatus {
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`equal`, `greater`, `greaterOrEqual`, `less`, `lessOrEqual`).
     */
    method: string;
    /**
     * Integer value.
     */
    value: number;
}

export interface LoadbalancerFrontendRuleMatchersHttpStatusRange {
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Integer value.
     */
    rangeEnd: number;
    /**
     * Integer value.
     */
    rangeStart: number;
}

export interface LoadbalancerFrontendRuleMatchersNumMembersUp {
    /**
     * The name of the `backend`.
     */
    backendName: string;
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`equal`, `greater`, `greaterOrEqual`, `less`, `lessOrEqual`).
     */
    method: string;
    /**
     * Integer value.
     */
    value: number;
}

export interface LoadbalancerFrontendRuleMatchersPath {
    /**
     * Defines if case should be ignored. Defaults to `false`.
     */
    ignoreCase: boolean;
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignoreCase` fields.
     */
    method: string;
    /**
     * String value.
     */
    value?: string;
}

export interface LoadbalancerFrontendRuleMatchersRequestHeader {
    /**
     * Defines if case should be ignored. Defaults to `false`.
     */
    ignoreCase: boolean;
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignoreCase` fields.
     */
    method: string;
    /**
     * Name of the argument.
     */
    name: string;
    /**
     * String value.
     */
    value?: string;
}

export interface LoadbalancerFrontendRuleMatchersResponseHeader {
    /**
     * Defines if case should be ignored. Defaults to `false`.
     */
    ignoreCase: boolean;
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignoreCase` fields.
     */
    method: string;
    /**
     * Name of the argument.
     */
    name: string;
    /**
     * String value.
     */
    value?: string;
}

export interface LoadbalancerFrontendRuleMatchersSrcIp {
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * IP address. CIDR masks are supported, e.g. `192.168.0.0/24`.
     */
    value: string;
}

export interface LoadbalancerFrontendRuleMatchersSrcPort {
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`equal`, `greater`, `greaterOrEqual`, `less`, `lessOrEqual`).
     */
    method: string;
    /**
     * Integer value.
     */
    value: number;
}

export interface LoadbalancerFrontendRuleMatchersSrcPortRange {
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Integer value.
     */
    rangeEnd: number;
    /**
     * Integer value.
     */
    rangeStart: number;
}

export interface LoadbalancerFrontendRuleMatchersUrl {
    /**
     * Defines if case should be ignored. Defaults to `false`.
     */
    ignoreCase: boolean;
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignoreCase` fields.
     */
    method: string;
    /**
     * String value.
     */
    value?: string;
}

export interface LoadbalancerFrontendRuleMatchersUrlParam {
    /**
     * Defines if case should be ignored. Defaults to `false`.
     */
    ignoreCase: boolean;
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignoreCase` fields.
     */
    method: string;
    /**
     * Name of the argument.
     */
    name: string;
    /**
     * String value.
     */
    value?: string;
}

export interface LoadbalancerFrontendRuleMatchersUrlQuery {
    /**
     * Defines if case should be ignored. Defaults to `false`.
     */
    ignoreCase: boolean;
    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     */
    inverse: boolean;
    /**
     * Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignoreCase` fields.
     */
    method: string;
    /**
     * String value.
     */
    value?: string;
}

export interface LoadbalancerNetwork {
    /**
     * DNS name of the load balancer network
     */
    dnsName: string;
    /**
     * Network family. Currently only `IPv4` is supported.
     */
    family: string;
    /**
     * The unique identifier of the network.
     */
    id: string;
    /**
     * The name of the network. Must be unique within the service.
     */
    name: string;
    /**
     * Private network UUID. Required for private networks and must reside in loadbalancer zone. For public network the field should be omitted.
     */
    network?: string;
    /**
     * The type of the network. Only one public network can be attached and at least one private network must be attached.
     */
    type: string;
}

export interface LoadbalancerNode {
    /**
     * Networks attached to the node
     */
    networks: outputs.LoadbalancerNodeNetwork[];
    /**
     * Node's operational state. Managed by the system.
     */
    operationalState: string;
}

export interface LoadbalancerNodeNetwork {
    /**
     * IP addresses attached to the network
     */
    ipAddresses: outputs.LoadbalancerNodeNetworkIpAddress[];
    /**
     * The name of the network
     */
    name: string;
    /**
     * The type of the network
     */
    type: string;
}

export interface LoadbalancerNodeNetworkIpAddress {
    /**
     * Node's IP address
     */
    address: string;
    /**
     * Whether the node listens to the traffic
     */
    listen: boolean;
}

export interface ManagedDatabaseMysqlComponent {
    /**
     * Type of the component
     */
    component: string;
    /**
     * Hostname of the component
     */
    host: string;
    /**
     * Port number of the component
     */
    port: number;
    /**
     * Component network route type
     */
    route: string;
    /**
     * Usage of the component
     */
    usage: string;
}

export interface ManagedDatabaseMysqlNetwork {
    /**
     * Network family. Currently only `IPv4` is supported.
     */
    family: string;
    /**
     * The name of the network. Must be unique within the service.
     */
    name: string;
    /**
     * The type of the network. Must be private.
     */
    type: string;
    /**
     * Private network UUID. Must reside in the same zone as the database.
     */
    uuid: string;
}

export interface ManagedDatabaseMysqlNodeState {
    /**
     * Name plus a node iteration
     */
    name: string;
    /**
     * Role of the node
     */
    role: string;
    /**
     * State of the node
     */
    state: string;
}

export interface ManagedDatabaseMysqlProperties {
    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     */
    adminPassword: string;
    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     */
    adminUsername: string;
    /**
     * Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     */
    automaticUtilityNetworkIpFilter?: boolean;
    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     */
    backupHour: number;
    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     */
    backupMinute: number;
    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.
     */
    binlogRetentionPeriod: number;
    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
     */
    connectTimeout: number;
    /**
     * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or 'SYSTEM' to use the MySQL server default.
     */
    defaultTimeZone: string;
    /**
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     */
    groupConcatMaxLen: number;
    /**
     * The time, in seconds, before cached statistics expire.
     */
    informationSchemaStatsExpiry: number;
    /**
     * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
     */
    innodbChangeBufferMaxSize: number;
    /**
     * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
     */
    innodbFlushNeighbors: number;
    /**
     * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
     */
    innodbFtMinTokenSize: number;
    /**
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
     */
    innodbFtServerStopwordTable: string;
    /**
     * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
     */
    innodbLockWaitTimeout: number;
    /**
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     */
    innodbLogBufferSize: number;
    /**
     * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
     */
    innodbOnlineAlterLogMaxSize: number;
    /**
     * When enabled, information about all deadlocks in InnoDB user transactions is recorded in the error log. Disabled by default.
     */
    innodbPrintAllDeadlocks: boolean;
    /**
     * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    innodbReadIoThreads: number;
    /**
     * When enabled a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
     */
    innodbRollbackOnTimeout: boolean;
    /**
     * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
     */
    innodbThreadConcurrency: number;
    /**
     * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    innodbWriteIoThreads: number;
    /**
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     */
    interactiveTimeout: number;
    /**
     * The storage engine for in-memory internal temporary tables.
     */
    internalTmpMemStorageEngine: string;
    /**
     * IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
     */
    ipFilters: string[];
    /**
     * The slow log output destination when slowQueryLog is ON. To enable MySQL AI Insights, choose INSIGHTS. To use MySQL AI Insights and the mysql.slow_log table at the same time, choose INSIGHTS,TABLE. To only use the mysql.slow_log table, choose TABLE. To silence slow logs, choose NONE.
     */
    logOutput: string;
    /**
     * The slowQueryLogs work as SQL statements that take more than longQueryTime seconds to execute.
     */
    longQueryTime: number;
    /**
     * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
     */
    maxAllowedPacket: number;
    /**
     * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
     */
    maxHeapTableSize: number;
    /**
     * Migrate data from existing server.
     */
    migration: outputs.ManagedDatabaseMysqlPropertiesMigration;
    /**
     * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
     */
    netBufferLength: number;
    /**
     * The number of seconds to wait for more data from a connection before aborting the read.
     */
    netReadTimeout: number;
    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     */
    netWriteTimeout: number;
    /**
     * Public Access. Allow access to the service from the public Internet.
     */
    publicAccess?: boolean;
    /**
     * Service logging. Store logs for the service so that they are available in the HTTP API and console.
     */
    serviceLog: boolean;
    /**
     * Slow query log enables capturing of slow queries. Setting slowQueryLog to false also truncates the mysql.slow_log table.
     */
    slowQueryLog: boolean;
    /**
     * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
     */
    sortBufferSize: number;
    /**
     * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
     */
    sqlMode?: string;
    /**
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     */
    sqlRequirePrimaryKey: boolean;
    /**
     * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
     */
    tmpTableSize: number;
    /**
     * MySQL major version.
     */
    version: string;
    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     */
    waitTimeout: number;
}

export interface ManagedDatabaseMysqlPropertiesMigration {
    /**
     * Database name for bootstrapping the initial connection.
     */
    dbname: string;
    /**
     * Hostname or IP address of the server where to migrate data from.
     */
    host: string;
    /**
     * Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
     */
    ignoreDbs: string;
    /**
     * Comma-separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
     */
    ignoreRoles: string;
    /**
     * The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
     */
    method: string;
    /**
     * Password for authentication with the server where to migrate data from.
     */
    password: string;
    /**
     * Port number of the server where to migrate data from.
     */
    port: number;
    /**
     * The server where to migrate data from is secured with SSL.
     */
    ssl: boolean;
    /**
     * User name for authentication with the server where to migrate data from.
     */
    username: string;
}

export interface ManagedDatabaseOpensearchComponent {
    /**
     * Type of the component
     */
    component: string;
    /**
     * Hostname of the component
     */
    host: string;
    /**
     * Port number of the component
     */
    port: number;
    /**
     * Component network route type
     */
    route: string;
    /**
     * Usage of the component
     */
    usage: string;
}

export interface ManagedDatabaseOpensearchNetwork {
    /**
     * Network family. Currently only `IPv4` is supported.
     */
    family: string;
    /**
     * The name of the network. Must be unique within the service.
     */
    name: string;
    /**
     * The type of the network. Must be private.
     */
    type: string;
    /**
     * Private network UUID. Must reside in the same zone as the database.
     */
    uuid: string;
}

export interface ManagedDatabaseOpensearchNodeState {
    /**
     * Name plus a node iteration
     */
    name: string;
    /**
     * Role of the node
     */
    role: string;
    /**
     * State of the node
     */
    state: string;
}

export interface ManagedDatabaseOpensearchProperties {
    /**
     * action.auto_create_index. Explicitly allow or block automatic creation of indices. Defaults to true.
     */
    actionAutoCreateIndexEnabled: boolean;
    /**
     * Require explicit index names when deleting.
     */
    actionDestructiveRequiresName: boolean;
    /**
     * Opensearch Security Plugin Settings.
     */
    authFailureListeners: outputs.ManagedDatabaseOpensearchPropertiesAuthFailureListeners;
    /**
     * Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     */
    automaticUtilityNetworkIpFilter?: boolean;
    /**
     * Controls the number of shards allowed in the cluster per data node.
     */
    clusterMaxShardsPerNode: number;
    /**
     * When set to true, OpenSearch attempts to evenly distribute the primary shards between the cluster nodes. Enabling this setting does not always guarantee an equal number of primary shards on each node, especially in the event of a failover. Changing this setting to false after it was set to true does not invoke redistribution of primary shards. Default is false.
     */
    clusterRoutingAllocationBalancePreferPrimary?: boolean;
    /**
     * Concurrent incoming/outgoing shard recoveries per node. How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to node cpu count * 2.
     */
    clusterRoutingAllocationNodeConcurrentRecoveries: number;
    clusterSearchRequestSlowlog: outputs.ManagedDatabaseOpensearchPropertiesClusterSearchRequestSlowlog;
    /**
     * Custom domain. Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
     */
    customDomain: string;
    /**
     * Watermark settings.
     */
    diskWatermarks: outputs.ManagedDatabaseOpensearchPropertiesDiskWatermarks;
    /**
     * Elasticsearch major version.
     */
    elasticsearchVersion: string;
    /**
     * Sender name placeholder to be used in Opensearch Dashboards and Opensearch keystore. This should be identical to the Sender name defined in Opensearch dashboards.
     */
    emailSenderName: string;
    /**
     * Sender password for Opensearch alerts to authenticate with SMTP server. Sender password for Opensearch alerts to authenticate with SMTP server.
     */
    emailSenderPassword: string;
    /**
     * Sender username for Opensearch alerts.
     */
    emailSenderUsername: string;
    /**
     * Enable remote-backed storage.
     */
    enableRemoteBackedStorage: boolean;
    /**
     * Enable/Disable security audit.
     */
    enableSecurityAudit: boolean;
    /**
     * Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes.
     */
    httpMaxContentLength: number;
    /**
     * The max size of allowed headers, in bytes.
     */
    httpMaxHeaderSize: number;
    /**
     * The max length of an HTTP URL, in bytes.
     */
    httpMaxInitialLineLength: number;
    /**
     * Index patterns.
     */
    indexPatterns: string[];
    /**
     * Index rollup settings.
     */
    indexRollup: outputs.ManagedDatabaseOpensearchPropertiesIndexRollup;
    /**
     * Template settings for all new indexes.
     */
    indexTemplate: outputs.ManagedDatabaseOpensearchPropertiesIndexTemplate;
    /**
     * Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.
     */
    indicesFielddataCacheSize: number;
    /**
     * Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.
     */
    indicesMemoryIndexBufferSize: number;
    /**
     * Absolute value. Default is unbound. Doesn't work without indices.memory.index_buffer_size. Maximum amount of heap used for query cache, an absolute indices.memory.index_buffer_size maximum hard limit.
     */
    indicesMemoryMaxIndexBufferSize: number;
    /**
     * Absolute value. Default is 48mb. Doesn't work without indices.memory.index_buffer_size. Minimum amount of heap used for query cache, an absolute indices.memory.index_buffer_size minimal hard limit.
     */
    indicesMemoryMinIndexBufferSize: number;
    /**
     * Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other OpenSearch functionality.
     */
    indicesQueriesCacheSize: number;
    /**
     * Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.
     */
    indicesQueryBoolMaxClauseCount: number;
    /**
     * Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb.
     */
    indicesRecoveryMaxBytesPerSec: number;
    /**
     * Number of file chunks sent in parallel for each recovery. Defaults to 2.
     */
    indicesRecoveryMaxConcurrentFileChunks: number;
    /**
     * IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
     */
    ipFilters: string[];
    /**
     * Specifies whether ISM is enabled or not.
     */
    ismEnabled: boolean;
    /**
     * Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document.
     */
    ismHistoryEnabled: boolean;
    /**
     * The maximum age before rolling over the audit history index in hours.
     */
    ismHistoryMaxAge: number;
    /**
     * The maximum number of documents before rolling over the audit history index.
     */
    ismHistoryMaxDocs: number;
    /**
     * The time between rollover checks for the audit history index in hours.
     */
    ismHistoryRolloverCheckPeriod: number;
    /**
     * How long audit history indices are kept in days.
     */
    ismHistoryRolloverRetentionPeriod: number;
    /**
     * Don't reset index.refresh_interval to the default value. Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
     */
    keepIndexRefreshInterval: boolean;
    /**
     * Enable or disable KNN memory circuit breaker. Defaults to true.
     */
    knnMemoryCircuitBreakerEnabled: boolean;
    /**
     * Maximum amount of memory that can be used for KNN index. Defaults to 50% of the JVM heap size.
     */
    knnMemoryCircuitBreakerLimit: number;
    /**
     * OpenSearch OpenID Connect Configuration.
     */
    openid: outputs.ManagedDatabaseOpensearchPropertiesOpenid;
    /**
     * OpenSearch Dashboards settings.
     */
    opensearchDashboards: outputs.ManagedDatabaseOpensearchPropertiesOpensearchDashboards;
    /**
     * Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false.
     */
    overrideMainResponseVersion: boolean;
    /**
     * Enable or disable filtering of alerting by backend roles. Requires Security plugin. Defaults to false.
     */
    pluginsAlertingFilterByBackendRoles: boolean;
    /**
     * Public Access. Allow access to the service from the public Internet.
     */
    publicAccess?: boolean;
    /**
     * Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
     */
    reindexRemoteWhitelists: string[];
    /**
     * OpenSearch SAML configuration.
     */
    saml: outputs.ManagedDatabaseOpensearchPropertiesSaml;
    /**
     * Script max compilation rate - circuit breaker to prevent/minimize OOMs. Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context.
     */
    scriptMaxCompilationsRate?: string;
    /**
     * Search Backpressure Settings.
     */
    searchBackpressure: outputs.ManagedDatabaseOpensearchPropertiesSearchBackpressure;
    searchInsightsTopQueries: outputs.ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueries;
    /**
     * Maximum number of aggregation buckets allowed in a single response. OpenSearch default value is used when this is not defined.
     */
    searchMaxBuckets: number;
    /**
     * Segment Replication Backpressure Settings.
     */
    segrep: outputs.ManagedDatabaseOpensearchPropertiesSegrep;
    /**
     * Service logging. Store logs for the service so that they are available in the HTTP API and console.
     */
    serviceLog: boolean;
    /**
     * Shard indexing back pressure settings.
     */
    shardIndexingPressure: outputs.ManagedDatabaseOpensearchPropertiesShardIndexingPressure;
    /**
     * analyze thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     */
    threadPoolAnalyzeQueueSize: number;
    /**
     * analyze thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     */
    threadPoolAnalyzeSize: number;
    /**
     * force_merge thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     */
    threadPoolForceMergeSize: number;
    /**
     * get thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     */
    threadPoolGetQueueSize: number;
    /**
     * get thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     */
    threadPoolGetSize: number;
    /**
     * search thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     */
    threadPoolSearchQueueSize: number;
    /**
     * search thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     */
    threadPoolSearchSize: number;
    /**
     * search_throttled thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     */
    threadPoolSearchThrottledQueueSize: number;
    /**
     * search_throttled thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     */
    threadPoolSearchThrottledSize: number;
    /**
     * write thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     */
    threadPoolWriteQueueSize: number;
    /**
     * write thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     */
    threadPoolWriteSize: number;
    /**
     * OpenSearch major version.
     */
    version: string;
}

export interface ManagedDatabaseOpensearchPropertiesAuthFailureListeners {
    internalAuthenticationBackendLimiting: outputs.ManagedDatabaseOpensearchPropertiesAuthFailureListenersInternalAuthenticationBackendLimiting;
}

export interface ManagedDatabaseOpensearchPropertiesAuthFailureListenersInternalAuthenticationBackendLimiting {
    /**
     * The number of login attempts allowed before login is blocked.
     */
    allowedTries: number;
    /**
     * The internal backend. Enter `internal`.
     */
    authenticationBackend: string;
    /**
     * The duration of time that login remains blocked after a failed login.
     */
    blockExpirySeconds: number;
    /**
     * The maximum number of blocked IP addresses.
     */
    maxBlockedClients: number;
    /**
     * The maximum number of tracked IP addresses that have failed login.
     */
    maxTrackedClients: number;
    /**
     * The window of time in which the value for `allowedTries` is enforced.
     */
    timeWindowSeconds: number;
    /**
     * The type of rate limiting.
     */
    type: string;
}

export interface ManagedDatabaseOpensearchPropertiesClusterSearchRequestSlowlog {
    /**
     * Log level.
     */
    level: string;
    threshold: outputs.ManagedDatabaseOpensearchPropertiesClusterSearchRequestSlowlogThreshold;
}

export interface ManagedDatabaseOpensearchPropertiesClusterSearchRequestSlowlogThreshold {
    /**
     * Debug threshold for total request took time. The value should be in the form count and unit, where unit one of (s,m,h,d,nanos,ms,micros) or -1. Default is -1.
     */
    debug?: string;
    /**
     * Info threshold for total request took time. The value should be in the form count and unit, where unit one of (s,m,h,d,nanos,ms,micros) or -1. Default is -1.
     */
    info?: string;
    /**
     * Trace threshold for total request took time. The value should be in the form count and unit, where unit one of (s,m,h,d,nanos,ms,micros) or -1. Default is -1.
     */
    trace?: string;
    /**
     * Warning threshold for total request took time. The value should be in the form count and unit, where unit one of (s,m,h,d,nanos,ms,micros) or -1. Default is -1.
     */
    warn?: string;
}

export interface ManagedDatabaseOpensearchPropertiesDiskWatermarks {
    /**
     * Flood stage watermark (percentage). The flood stage watermark for disk usage.
     */
    floodStage: number;
    /**
     * High watermark (percentage). The high watermark for disk usage.
     */
    high: number;
    /**
     * Low watermark (percentage). The low watermark for disk usage.
     */
    low: number;
}

export interface ManagedDatabaseOpensearchPropertiesIndexRollup {
    /**
     * plugins.rollup.dashboards.enabled. Whether rollups are enabled in OpenSearch Dashboards. Defaults to true.
     */
    rollupDashboardsEnabled: boolean;
    /**
     * plugins.rollup.enabled. Whether the rollup plugin is enabled. Defaults to true.
     */
    rollupEnabled: boolean;
    /**
     * plugins.rollup.search.backoff_count. How many retries the plugin should attempt for failed rollup jobs. Defaults to 5.
     */
    rollupSearchBackoffCount: number;
    /**
     * plugins.rollup.search.backoff_millis. The backoff time between retries for failed rollup jobs. Defaults to 1000ms.
     */
    rollupSearchBackoffMillis: number;
    /**
     * plugins.rollup.search.all_jobs. Whether OpenSearch should return all jobs that match all specified search terms. If disabled, OpenSearch returns just one, as opposed to all, of the jobs that matches the search terms. Defaults to false.
     */
    rollupSearchSearchAllJobs: boolean;
}

export interface ManagedDatabaseOpensearchPropertiesIndexTemplate {
    /**
     * index.mapping.nested_objects.limit. The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.
     */
    mappingNestedObjectsLimit: number;
    /**
     * The number of replicas each primary shard has.
     */
    numberOfReplicas: number;
    /**
     * The number of primary shards that an index should have.
     */
    numberOfShards: number;
}

export interface ManagedDatabaseOpensearchPropertiesOpenid {
    /**
     * The ID of the OpenID Connect client. The ID of the OpenID Connect client configured in your IdP. Required.
     */
    clientId: string;
    /**
     * The client secret of the OpenID Connect. The client secret of the OpenID Connect client configured in your IdP. Required.
     */
    clientSecret: string;
    /**
     * OpenID Connect metadata/configuration URL. The URL of your IdP where the Security plugin can find the OpenID Connect metadata/configuration settings.
     */
    connectUrl?: string;
    /**
     * Enable or disable OpenSearch OpenID Connect authentication. Enables or disables OpenID Connect authentication for OpenSearch. When enabled, users can authenticate using OpenID Connect with an Identity Provider.
     */
    enabled: boolean;
    /**
     * HTTP header name of the JWT token. HTTP header name of the JWT token. Optional. Default is Authorization.
     */
    header: string;
    /**
     * The HTTP header that stores the token. The HTTP header that stores the token. Typically the Authorization header with the Bearer schema: Authorization: Bearer <token>. Optional. Default is Authorization.
     */
    jwtHeader: string;
    /**
     * URL JWT token. If the token is not transmitted in the HTTP header, but as an URL parameter, define the name of the parameter here. Optional.
     */
    jwtUrlParameter: string;
    /**
     * The maximum number of unknown key IDs in the time frame. The maximum number of unknown key IDs in the time frame. Default is 10. Optional.
     */
    refreshRateLimitCount: number;
    /**
     * The time frame to use when checking the maximum number of unknown key IDs, in milliseconds. The time frame to use when checking the maximum number of unknown key IDs, in milliseconds. Optional.Default is 10000 (10 seconds).
     */
    refreshRateLimitTimeWindowMs: number;
    /**
     * The key in the JSON payload that stores the user’s roles. The key in the JSON payload that stores the user’s roles. The value of this key must be a comma-separated list of roles. Required only if you want to use roles in the JWT.
     */
    rolesKey: string;
    /**
     * The scope of the identity token issued by the IdP. The scope of the identity token issued by the IdP. Optional. Default is openid profile email address phone.
     */
    scope: string;
    /**
     * The key in the JSON payload that stores the user’s name. The key in the JSON payload that stores the user’s name. If not defined, the subject registered claim is used. Most IdP providers use the preferredUsername claim. Optional.
     */
    subjectKey: string;
}

export interface ManagedDatabaseOpensearchPropertiesOpensearchDashboards {
    /**
     * Enable or disable OpenSearch Dashboards.
     */
    enabled: boolean;
    /**
     * Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the maxOldSpaceSize option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch.
     */
    maxOldSpaceSize: number;
    /**
     * Enable or disable multiple data sources in OpenSearch Dashboards.
     */
    multipleDataSourceEnabled: boolean;
    /**
     * Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch.
     */
    opensearchRequestTimeout: number;
}

export interface ManagedDatabaseOpensearchPropertiesSaml {
    /**
     * Enable or disable OpenSearch SAML authentication. Enables or disables SAML-based authentication for OpenSearch. When enabled, users can authenticate using SAML with an Identity Provider.
     */
    enabled: boolean;
    /**
     * Identity Provider Entity ID. The unique identifier for the Identity Provider (IdP) entity that is used for SAML authentication. This value is typically provided by the IdP.
     */
    idpEntityId: string;
    /**
     * Identity Provider (IdP) SAML metadata URL. The URL of the SAML metadata for the Identity Provider (IdP). This is used to configure SAML-based authentication with the IdP.
     */
    idpMetadataUrl: string;
    /**
     * PEM-encoded root CA Content for SAML IdP server verification. This parameter specifies the PEM-encoded root certificate authority (CA) content for the SAML identity provider (IdP) server verification. The root CA content is used to verify the SSL/TLS certificate presented by the server.
     */
    idpPemtrustedcasContent: string;
    /**
     * SAML response role attribute. Optional. Specifies the attribute in the SAML response where role information is stored, if available. Role attributes are not required for SAML authentication, but can be included in SAML assertions by most Identity Providers (IdPs) to determine user access levels or permissions.
     */
    rolesKey: string;
    /**
     * Service Provider Entity ID. The unique identifier for the Service Provider (SP) entity that is used for SAML authentication. This value is typically provided by the SP.
     */
    spEntityId: string;
    /**
     * SAML response subject attribute. Optional. Specifies the attribute in the SAML response where the subject identifier is stored. If not configured, the NameID attribute is used by default.
     */
    subjectKey: string;
}

export interface ManagedDatabaseOpensearchPropertiesSearchBackpressure {
    /**
     * The search backpressure mode. The search backpressure mode. Valid values are monitor_only, enforced, or disabled. Default is monitor_only.
     */
    mode: string;
    /**
     * Node duress settings.
     */
    nodeDuress: outputs.ManagedDatabaseOpensearchPropertiesSearchBackpressureNodeDuress;
    /**
     * Search shard settings.
     */
    searchShardTask: outputs.ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchShardTask;
    /**
     * Search task settings.
     */
    searchTask: outputs.ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchTask;
}

export interface ManagedDatabaseOpensearchPropertiesSearchBackpressureNodeDuress {
    /**
     * The CPU usage threshold (as a percentage) required for a node to be considered to be under duress. The CPU usage threshold (as a percentage) required for a node to be considered to be under duress. Default is 0.9.
     */
    cpuThreshold: number;
    /**
     * The heap usage threshold (as a percentage) required for a node to be considered to be under duress. The heap usage threshold (as a percentage) required for a node to be considered to be under duress. Default is 0.7.
     */
    heapThreshold: number;
    /**
     * The number of successive limit breaches after which the node is considered to be under duress. The number of successive limit breaches after which the node is considered to be under duress. Default is 3.
     */
    numSuccessiveBreaches: number;
}

export interface ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchShardTask {
    /**
     * The maximum number of search tasks to cancel in a single iteration of the observer thread. The maximum number of search tasks to cancel in a single iteration of the observer thread. Default is 10.0.
     */
    cancellationBurst: number;
    /**
     * The maximum number of tasks to cancel per millisecond of elapsed time. The maximum number of tasks to cancel per millisecond of elapsed time. Default is 0.003.
     */
    cancellationRate: number;
    /**
     * The maximum number of tasks to cancel. The maximum number of tasks to cancel, as a percentage of successful task completions. Default is 0.1.
     */
    cancellationRatio: number;
    /**
     * The CPU usage threshold (in milliseconds) required for a single search shard task before it is considered for cancellation. The CPU usage threshold (in milliseconds) required for a single search shard task before it is considered for cancellation. Default is 15000.
     */
    cpuTimeMillisThreshold: number;
    /**
     * The elapsed time threshold (in milliseconds) required for a single search shard task before it is considered for cancellation. The elapsed time threshold (in milliseconds) required for a single search shard task before it is considered for cancellation. Default is 30000.
     */
    elapsedTimeMillisThreshold: number;
    /**
     * The number of previously completed search shard tasks to consider when calculating the rolling average of heap usage. The number of previously completed search shard tasks to consider when calculating the rolling average of heap usage. Default is 100.
     */
    heapMovingAverageWindowSize: number;
    /**
     * The heap usage threshold (as a percentage) required for a single search shard task before it is considered for cancellation. The heap usage threshold (as a percentage) required for a single search shard task before it is considered for cancellation. Default is 0.5.
     */
    heapPercentThreshold: number;
    /**
     * The minimum variance required for a single search shard task’s heap usage compared to the rolling average of previously completed tasks before it is considered for cancellation. The minimum variance required for a single search shard task’s heap usage compared to the rolling average of previously completed tasks before it is considered for cancellation. Default is 2.0.
     */
    heapVariance: number;
    /**
     * The heap usage threshold (as a percentage) required for the sum of heap usages of all search shard tasks before cancellation is applied. The heap usage threshold (as a percentage) required for the sum of heap usages of all search shard tasks before cancellation is applied. Default is 0.5.
     */
    totalHeapPercentThreshold: number;
}

export interface ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchTask {
    /**
     * The maximum number of search tasks to cancel in a single iteration of the observer thread. The maximum number of search tasks to cancel in a single iteration of the observer thread. Default is 5.0.
     */
    cancellationBurst: number;
    /**
     * The maximum number of search tasks to cancel per millisecond of elapsed time. The maximum number of search tasks to cancel per millisecond of elapsed time. Default is 0.003.
     */
    cancellationRate: number;
    /**
     * The maximum number of search tasks to cancel, as a percentage of successful search task completions. The maximum number of search tasks to cancel, as a percentage of successful search task completions. Default is 0.1.
     */
    cancellationRatio: number;
    /**
     * The CPU usage threshold (in milliseconds) required for an individual parent task before it is considered for cancellation. The CPU usage threshold (in milliseconds) required for an individual parent task before it is considered for cancellation. Default is 30000.
     */
    cpuTimeMillisThreshold: number;
    /**
     * The elapsed time threshold (in milliseconds) required for an individual parent task before it is considered for cancellation. The elapsed time threshold (in milliseconds) required for an individual parent task before it is considered for cancellation. Default is 45000.
     */
    elapsedTimeMillisThreshold: number;
    /**
     * The window size used to calculate the rolling average of the heap usage for the completed parent tasks. The window size used to calculate the rolling average of the heap usage for the completed parent tasks. Default is 10.
     */
    heapMovingAverageWindowSize: number;
    /**
     * The heap usage threshold (as a percentage) required for an individual parent task before it is considered for cancellation. The heap usage threshold (as a percentage) required for an individual parent task before it is considered for cancellation. Default is 0.2.
     */
    heapPercentThreshold: number;
    /**
     * The heap usage variance required for an individual parent task before it is considered for cancellation. The heap usage variance required for an individual parent task before it is considered for cancellation. A task is considered for cancellation when taskHeapUsage is greater than or equal to heapUsageMovingAverage * variance. Default is 2.0.
     */
    heapVariance: number;
    /**
     * The heap usage threshold (as a percentage) required for the sum of heap usages of all search tasks before cancellation is applied. The heap usage threshold (as a percentage) required for the sum of heap usages of all search tasks before cancellation is applied. Default is 0.5.
     */
    totalHeapPercentThreshold: number;
}

export interface ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueries {
    /**
     * Top N queries monitoring by CPU.
     */
    cpu: outputs.ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesCpu;
    /**
     * Top N queries monitoring by latency.
     */
    latency: outputs.ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesLatency;
    /**
     * Top N queries monitoring by memory.
     */
    memory: outputs.ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesMemory;
}

export interface ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesCpu {
    /**
     * Enable or disable top N query monitoring by the metric. Enable or disable top N query monitoring by the metric.
     */
    enabled?: boolean;
    /**
     * Specify the value of N for the top N queries by the metric.
     */
    topNSize: number;
    /**
     * The window size of the top N queries by the metric. Configure the window size of the top N queries.
     */
    windowSize?: string;
}

export interface ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesLatency {
    /**
     * Enable or disable top N query monitoring by the metric. Enable or disable top N query monitoring by the metric.
     */
    enabled?: boolean;
    /**
     * Specify the value of N for the top N queries by the metric.
     */
    topNSize: number;
    /**
     * The window size of the top N queries by the metric. Configure the window size of the top N queries.
     */
    windowSize?: string;
}

export interface ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesMemory {
    /**
     * Enable or disable top N query monitoring by the metric. Enable or disable top N query monitoring by the metric.
     */
    enabled?: boolean;
    /**
     * Specify the value of N for the top N queries by the metric.
     */
    topNSize: number;
    /**
     * The window size of the top N queries by the metric. Configure the window size of the top N queries.
     */
    windowSize?: string;
}

export interface ManagedDatabaseOpensearchPropertiesSegrep {
    /**
     * The maximum number of indexing checkpoints that a replica shard can fall behind when copying from primary. Once `segrep.pressure.checkpoint.limit` is breached along with `segrep.pressure.time.limit`, the segment replication backpressure mechanism is initiated. Default is 4 checkpoints.
     */
    pressureCheckpointLimit: number;
    /**
     * Enables the segment replication backpressure mechanism. Default is false.
     */
    pressureEnabled: boolean;
    /**
     * The maximum number of stale replica shards that can exist in a replication group. Once `segrep.pressure.replica.stale.limit` is breached, the segment replication backpressure mechanism is initiated. Default is .5, which is 50% of a replication group.
     */
    pressureReplicaStaleLimit: number;
    /**
     * The maximum amount of time that a replica shard can take to copy from the primary shard. Once segrep.pressure.time.limit is breached along with segrep.pressure.checkpoint.limit, the segment replication backpressure mechanism is initiated. Default is 5 minutes.
     */
    pressureTimeLimit: string;
}

export interface ManagedDatabaseOpensearchPropertiesShardIndexingPressure {
    /**
     * Enable or disable shard indexing backpressure. Enable or disable shard indexing backpressure. Default is false.
     */
    enabled: boolean;
    /**
     * Run shard indexing backpressure in shadow mode or enforced mode. Run shard indexing backpressure in shadow mode or enforced mode.
     *             In shadow mode (value set as false), shard indexing backpressure tracks all granular-level metrics,
     *             but it doesn’t actually reject any indexing requests.
     *             In enforced mode (value set as true),
     *             shard indexing backpressure rejects any requests to the cluster that might cause a dip in its performance.
     *             Default is false.
     */
    enforced: boolean;
    /**
     * Operating factor.
     */
    operatingFactor: outputs.ManagedDatabaseOpensearchPropertiesShardIndexingPressureOperatingFactor;
    /**
     * Primary parameter.
     */
    primaryParameter: outputs.ManagedDatabaseOpensearchPropertiesShardIndexingPressurePrimaryParameter;
}

export interface ManagedDatabaseOpensearchPropertiesShardIndexingPressureOperatingFactor {
    /**
     * Lower occupancy limit of the allocated quota of memory for the shard. Specify the lower occupancy limit of the allocated quota of memory for the shard.
     *                     If the total memory usage of a shard is below this limit,
     *                     shard indexing backpressure decreases the current allocated memory for that shard.
     *                     Default is 0.75.
     */
    lower: number;
    /**
     * Optimal occupancy of the allocated quota of memory for the shard. Specify the optimal occupancy of the allocated quota of memory for the shard.
     *                     If the total memory usage of a shard is at this level,
     *                     shard indexing backpressure doesn’t change the current allocated memory for that shard.
     *                     Default is 0.85.
     */
    optimal: number;
    /**
     * Upper occupancy limit of the allocated quota of memory for the shard. Specify the upper occupancy limit of the allocated quota of memory for the shard.
     *                     If the total memory usage of a shard is above this limit,
     *                     shard indexing backpressure increases the current allocated memory for that shard.
     *                     Default is 0.95.
     */
    upper: number;
}

export interface ManagedDatabaseOpensearchPropertiesShardIndexingPressurePrimaryParameter {
    node: outputs.ManagedDatabaseOpensearchPropertiesShardIndexingPressurePrimaryParameterNode;
    shard: outputs.ManagedDatabaseOpensearchPropertiesShardIndexingPressurePrimaryParameterShard;
}

export interface ManagedDatabaseOpensearchPropertiesShardIndexingPressurePrimaryParameterNode {
    /**
     * Node soft limit. Define the percentage of the node-level memory
     *                             threshold that acts as a soft indicator for strain on a node.
     *                             Default is 0.7.
     */
    softLimit: number;
}

export interface ManagedDatabaseOpensearchPropertiesShardIndexingPressurePrimaryParameterShard {
    /**
     * Shard min limit. Specify the minimum assigned quota for a new shard in any role (coordinator, primary, or replica).
     *                             Shard indexing backpressure increases or decreases this allocated quota based on the inflow of traffic for the shard.
     *                             Default is 0.001.
     */
    minLimit: number;
}

export interface ManagedDatabasePostgresqlComponent {
    /**
     * Type of the component
     */
    component: string;
    /**
     * Hostname of the component
     */
    host: string;
    /**
     * Port number of the component
     */
    port: number;
    /**
     * Component network route type
     */
    route: string;
    /**
     * Usage of the component
     */
    usage: string;
}

export interface ManagedDatabasePostgresqlNetwork {
    /**
     * Network family. Currently only `IPv4` is supported.
     */
    family: string;
    /**
     * The name of the network. Must be unique within the service.
     */
    name: string;
    /**
     * The type of the network. Must be private.
     */
    type: string;
    /**
     * Private network UUID. Must reside in the same zone as the database.
     */
    uuid: string;
}

export interface ManagedDatabasePostgresqlNodeState {
    /**
     * Name plus a node iteration
     */
    name: string;
    /**
     * Role of the node
     */
    role: string;
    /**
     * State of the node
     */
    state: string;
}

export interface ManagedDatabasePostgresqlProperties {
    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     */
    adminPassword: string;
    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     */
    adminUsername: string;
    /**
     * Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     */
    automaticUtilityNetworkIpFilter?: boolean;
    /**
     * Specifies a fraction of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
     */
    autovacuumAnalyzeScaleFactor: number;
    /**
     * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
     */
    autovacuumAnalyzeThreshold: number;
    /**
     * Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
     */
    autovacuumFreezeMaxAge: number;
    /**
     * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
     */
    autovacuumMaxWorkers: number;
    /**
     * Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
     */
    autovacuumNaptime: number;
    /**
     * Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuumCostDelay value will be used. The default value is 20 milliseconds.
     */
    autovacuumVacuumCostDelay: number;
    /**
     * Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
     */
    autovacuumVacuumCostLimit: number;
    /**
     * Specifies a fraction of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
     */
    autovacuumVacuumScaleFactor: number;
    /**
     * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
     */
    autovacuumVacuumThreshold: number;
    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     */
    backupHour: number;
    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     */
    backupMinute: number;
    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     */
    bgwriterDelay: number;
    /**
     * Whenever more than bgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     */
    bgwriterFlushAfter: number;
    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     */
    bgwriterLruMaxpages: number;
    /**
     * The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     */
    bgwriterLruMultiplier: number;
    /**
     * This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
     */
    deadlockTimeout: number;
    /**
     * Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
     */
    defaultToastCompression: string;
    /**
     * Time out sessions with open transactions after this number of milliseconds.
     */
    idleInTransactionSessionTimeout: number;
    /**
     * IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
     */
    ipFilters: string[];
    /**
     * Controls system-wide use of Just-in-Time Compilation (JIT).
     */
    jit: boolean;
    /**
     * Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
     */
    logAutovacuumMinDuration: number;
    /**
     * Controls the amount of detail written in the server log for each message that is logged.
     */
    logErrorVerbosity: string;
    /**
     * Choose from one of the available log formats.
     */
    logLinePrefix: string;
    /**
     * Log statements that take more than this number of milliseconds to run, -1 disables.
     */
    logMinDurationStatement: number;
    /**
     * Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
     */
    logTempFiles: number;
    /**
     * PostgreSQL maximum number of files that can be open per process.
     */
    maxFilesPerProcess: number;
    /**
     * PostgreSQL maximum locks per transaction.
     */
    maxLocksPerTransaction: number;
    /**
     * PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
     */
    maxLogicalReplicationWorkers: number;
    /**
     * Sets the maximum number of workers that the system can support for parallel queries.
     */
    maxParallelWorkers: number;
    /**
     * Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
     */
    maxParallelWorkersPerGather: number;
    /**
     * PostgreSQL maximum predicate locks per transaction.
     */
    maxPredLocksPerTransaction: number;
    /**
     * PostgreSQL maximum prepared transactions.
     */
    maxPreparedTransactions: number;
    /**
     * PostgreSQL maximum replication slots.
     */
    maxReplicationSlots: number;
    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). walKeepSize minimum WAL size setting takes precedence over this.
     */
    maxSlotWalKeepSize: number;
    /**
     * Maximum depth of the stack in bytes.
     */
    maxStackDepth: number;
    /**
     * Max standby archive delay in milliseconds.
     */
    maxStandbyArchiveDelay: number;
    /**
     * Max standby streaming delay in milliseconds.
     */
    maxStandbyStreamingDelay: number;
    /**
     * PostgreSQL maximum WAL senders.
     */
    maxWalSenders: number;
    /**
     * Sets the maximum number of background processes that the system can support.
     */
    maxWorkerProcesses: number;
    /**
     * Migrate data from existing server.
     */
    migration: outputs.ManagedDatabasePostgresqlPropertiesMigration;
    /**
     * Chooses the algorithm for encrypting passwords.
     */
    passwordEncryption: string;
    /**
     * Sets the time interval to run pg_partman's scheduled tasks.
     */
    pgPartmanBgwInterval: number;
    /**
     * Controls which role to use for pg_partman's scheduled background tasks.
     */
    pgPartmanBgwRole: string;
    /**
     * Enable pgStatMonitor extension if available for the current cluster. Enable the pgStatMonitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pgStatStatements results for utility commands are unreliable.
     */
    pgStatMonitorEnable?: boolean;
    /**
     * Enables or disables query plan monitoring.
     */
    pgStatMonitorPgsmEnableQueryPlan: boolean;
    /**
     * Sets the maximum number of buckets.
     */
    pgStatMonitorPgsmMaxBuckets: number;
    /**
     * Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
     */
    pgStatStatementsTrack: string;
    /**
     * PGAudit settings. System-wide settings for the pgaudit extension.
     */
    pgaudit: outputs.ManagedDatabasePostgresqlPropertiesPgaudit;
    /**
     * PGBouncer connection pooling settings. System-wide settings for pgbouncer.
     */
    pgbouncer: outputs.ManagedDatabasePostgresqlPropertiesPgbouncer;
    /**
     * PGLookout settings. System-wide settings for pglookout.
     */
    pglookout: outputs.ManagedDatabasePostgresqlPropertiesPglookout;
    /**
     * Public Access. Allow access to the service from the public Internet.
     */
    publicAccess?: boolean;
    /**
     * Service logging. Store logs for the service so that they are available in the HTTP API and console.
     */
    serviceLog: boolean;
    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
     */
    sharedBuffersPercentage: number;
    /**
     * Synchronous replication type. Note that the service plan also needs to support synchronous replication.
     */
    synchronousReplication: string;
    /**
     * PostgreSQL temporary file limit in KiB, -1 for unlimited.
     */
    tempFileLimit: number;
    /**
     * TimescaleDB extension configuration values. System-wide settings for the timescaledb extension.
     */
    timescaledb: outputs.ManagedDatabasePostgresqlPropertiesTimescaledb;
    /**
     * PostgreSQL service timezone.
     */
    timezone?: string;
    /**
     * Specifies the number of bytes reserved to track the currently executing command for each active session.
     */
    trackActivityQuerySize: number;
    /**
     * Record commit time of transactions.
     */
    trackCommitTimestamp: string;
    /**
     * Enables tracking of function call counts and time used.
     */
    trackFunctions: string;
    /**
     * Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
     */
    trackIoTiming: string;
    /**
     * Variant of the PostgreSQL service, may affect the features that are exposed by default.
     */
    variant: string;
    /**
     * PostgreSQL major version.
     */
    version: string;
    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     */
    walSenderTimeout: number;
    /**
     * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
     */
    walWriterDelay: number;
    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    workMem: number;
}

export interface ManagedDatabasePostgresqlPropertiesMigration {
    /**
     * Database name for bootstrapping the initial connection.
     */
    dbname: string;
    /**
     * Hostname or IP address of the server where to migrate data from.
     */
    host: string;
    /**
     * Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
     */
    ignoreDbs: string;
    /**
     * Comma-separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
     */
    ignoreRoles: string;
    /**
     * The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
     */
    method: string;
    /**
     * Password for authentication with the server where to migrate data from.
     */
    password: string;
    /**
     * Port number of the server where to migrate data from.
     */
    port: number;
    /**
     * The server where to migrate data from is secured with SSL.
     */
    ssl: boolean;
    /**
     * User name for authentication with the server where to migrate data from.
     */
    username: string;
}

export interface ManagedDatabasePostgresqlPropertiesPgaudit {
    /**
     * Enable pgaudit extension. Enable pgaudit extension. When enabled, pgaudit extension will be automatically installed.Otherwise, extension will be uninstalled but auditing configurations will be preserved.
     */
    featureEnabled: boolean;
    /**
     * Specifies that session logging should be enabled in the casewhere all relations in a statement are in pg_catalog.
     */
    logCatalog: boolean;
    /**
     * Specifies whether log messages will be visible to a client process such as psql.
     */
    logClient: boolean;
    /**
     * Specifies the log level that will be used for log entries.
     */
    logLevel: string;
    /**
     * Crop parameters representation and whole statements if they exceed this threshold. A (default) value of -1 disable the truncation.
     */
    logMaxStringLength: number;
    /**
     * This GUC allows to turn off logging nested statements, that is, statements that are executed as part of another ExecutorRun.
     */
    logNestedStatements: boolean;
    /**
     * Specifies that audit logging should include the parameters that were passed with the statement.
     */
    logParameter: boolean;
    /**
     * Specifies that parameter values longer than this setting (in bytes) should not be logged, but replaced with <long param suppressed>.
     */
    logParameterMaxSize: number;
    /**
     * Specifies whether session audit logging should create a separate log entry for each relation (TABLE, VIEW, etc.) referenced in a SELECT or DML statement.
     */
    logRelation: boolean;
    /**
     * Specifies that audit logging should include the rows retrieved or affected by a statement. When enabled the rows field will be included after the parameter field.
     */
    logRows: boolean;
    /**
     * Specifies whether logging will include the statement text and parameters (if enabled).
     */
    logStatement: boolean;
    /**
     * Specifies whether logging will include the statement text and parameters with the first log entry for a statement/substatement combination or with every entry.
     */
    logStatementOnce: boolean;
    /**
     * Specifies which classes of statements will be logged by session audit logging.
     */
    logs: string[];
    /**
     * Specifies the master role to use for object audit logging.
     */
    role: string;
}

export interface ManagedDatabasePostgresqlPropertiesPgbouncer {
    /**
     * If the automatically created database pools have been unused this many seconds, they are freed. If 0 then timeout is disabled. [seconds].
     */
    autodbIdleTimeout: number;
    /**
     * Do not allow more than this many server connections per database (regardless of user). Setting it to 0 means unlimited.
     */
    autodbMaxDbConnections: number;
    /**
     * PGBouncer pool mode.
     */
    autodbPoolMode: string;
    /**
     * If non-zero then create automatically a pool of that size per user when a pool doesn't exist.
     */
    autodbPoolSize: number;
    /**
     * List of parameters to ignore when given in startup packet.
     */
    ignoreStartupParameters: string[];
    /**
     * PgBouncer tracks protocol-level named prepared statements related commands sent by the client in transaction and statement pooling modes when maxPreparedStatements is set to a non-zero value. Setting it to 0 disables prepared statements. maxPreparedStatements defaults to 100, and its maximum is 3000.
     */
    maxPreparedStatements: number;
    /**
     * Add more server connections to pool if below this number. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.
     */
    minPoolSize: number;
    /**
     * If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. [seconds].
     */
    serverIdleTimeout: number;
    /**
     * The pooler will close an unused server connection that has been connected longer than this. [seconds].
     */
    serverLifetime: number;
    /**
     * Run serverResetQuery (DISCARD ALL) in all pooling modes.
     */
    serverResetQueryAlways: boolean;
}

export interface ManagedDatabasePostgresqlPropertiesPglookout {
    /**
     * Number of seconds of master unavailability before triggering database failover to standby.
     */
    maxFailoverReplicationTimeLag: number;
}

export interface ManagedDatabasePostgresqlPropertiesTimescaledb {
    /**
     * The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
     */
    maxBackgroundWorkers: number;
}

export interface ManagedDatabaseRedisComponent {
    /**
     * Type of the component
     */
    component: string;
    /**
     * Hostname of the component
     */
    host: string;
    /**
     * Port number of the component
     */
    port: number;
    /**
     * Component network route type
     */
    route: string;
    /**
     * Usage of the component
     */
    usage: string;
}

export interface ManagedDatabaseRedisNetwork {
    /**
     * Network family. Currently only `IPv4` is supported.
     */
    family: string;
    /**
     * The name of the network. Must be unique within the service.
     */
    name: string;
    /**
     * The type of the network. Must be private.
     */
    type: string;
    /**
     * Private network UUID. Must reside in the same zone as the database.
     */
    uuid: string;
}

export interface ManagedDatabaseRedisNodeState {
    /**
     * Name plus a node iteration
     */
    name: string;
    /**
     * Role of the node
     */
    role: string;
    /**
     * State of the node
     */
    state: string;
}

export interface ManagedDatabaseRedisProperties {
    /**
     * Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     */
    automaticUtilityNetworkIpFilter?: boolean;
    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     */
    backupHour: number;
    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     */
    backupMinute: number;
    /**
     * IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
     */
    ipFilters: string[];
    /**
     * Migrate data from existing server.
     */
    migration: outputs.ManagedDatabaseRedisPropertiesMigration;
    /**
     * Public Access. Allow access to the service from the public Internet.
     */
    publicAccess?: boolean;
    /**
     * Default ACL for pub/sub channels used when Redis user is created. Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.
     */
    redisAclChannelsDefault: string;
    /**
     * Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
     */
    redisIoThreads: number;
    /**
     * LFU maxmemory-policy counter decay time in minutes.
     */
    redisLfuDecayTime: number;
    /**
     * Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
     */
    redisLfuLogFactor: number;
    /**
     * Redis maxmemory-policy.
     */
    redisMaxmemoryPolicy: string;
    /**
     * Set notify-keyspace-events option.
     */
    redisNotifyKeyspaceEvents?: string;
    /**
     * Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
     */
    redisNumberOfDatabases: number;
    /**
     * Redis persistence. When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is 'off', no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can't be forked.
     */
    redisPersistence: string;
    /**
     * Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     */
    redisPubsubClientOutputBufferLimit: number;
    /**
     * Require SSL to access Redis.
     */
    redisSsl?: boolean;
    /**
     * Redis idle connection timeout in seconds.
     */
    redisTimeout: number;
    /**
     * Redis major version.
     */
    redisVersion: string;
    /**
     * Service logging. Store logs for the service so that they are available in the HTTP API and console.
     */
    serviceLog: boolean;
}

export interface ManagedDatabaseRedisPropertiesMigration {
    /**
     * Database name for bootstrapping the initial connection.
     */
    dbname: string;
    /**
     * Hostname or IP address of the server where to migrate data from.
     */
    host: string;
    /**
     * Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
     */
    ignoreDbs: string;
    /**
     * Comma-separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
     */
    ignoreRoles: string;
    /**
     * The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
     */
    method: string;
    /**
     * Password for authentication with the server where to migrate data from.
     */
    password: string;
    /**
     * Port number of the server where to migrate data from.
     */
    port: number;
    /**
     * The server where to migrate data from is secured with SSL.
     */
    ssl: boolean;
    /**
     * User name for authentication with the server where to migrate data from.
     */
    username: string;
}

export interface ManagedDatabaseUserOpensearchAccessControl {
    /**
     * Set user access control rules.
     */
    rules: outputs.ManagedDatabaseUserOpensearchAccessControlRule[];
}

export interface ManagedDatabaseUserOpensearchAccessControlRule {
    /**
     * Set index name, pattern or top level API.
     */
    index: string;
    /**
     * Set permission access.
     */
    permission: string;
}

export interface ManagedDatabaseUserPgAccessControl {
    /**
     * Grant replication privilege
     */
    allowReplication?: boolean;
}

export interface ManagedDatabaseUserRedisAccessControl {
    /**
     * Set access control to all commands in specified categories.
     */
    categories?: string;
    /**
     * Set access control to Pub/Sub channels.
     */
    channels?: string;
    /**
     * Set access control to commands.
     */
    commands?: string;
    /**
     * Set access control to keys.
     */
    keys?: string;
}

export interface ManagedDatabaseUserValkeyAccessControl {
    /**
     * Set access control to all commands in specified categories.
     */
    categories?: string;
    /**
     * Set access control to Pub/Sub channels.
     */
    channels?: string;
    /**
     * Set access control to commands.
     */
    commands?: string;
    /**
     * Set access control to keys.
     */
    keys?: string;
}

export interface ManagedDatabaseValkeyComponent {
    /**
     * Type of the component
     */
    component: string;
    /**
     * Hostname of the component
     */
    host: string;
    /**
     * Port number of the component
     */
    port: number;
    /**
     * Component network route type
     */
    route: string;
    /**
     * Usage of the component
     */
    usage: string;
}

export interface ManagedDatabaseValkeyNetwork {
    /**
     * Network family. Currently only `IPv4` is supported.
     */
    family: string;
    /**
     * The name of the network. Must be unique within the service.
     */
    name: string;
    /**
     * The type of the network. Must be private.
     */
    type: string;
    /**
     * Private network UUID. Must reside in the same zone as the database.
     */
    uuid: string;
}

export interface ManagedDatabaseValkeyNodeState {
    /**
     * Name plus a node iteration
     */
    name: string;
    /**
     * Role of the node
     */
    role: string;
    /**
     * State of the node
     */
    state: string;
}

export interface ManagedDatabaseValkeyProperties {
    /**
     * Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     */
    automaticUtilityNetworkIpFilter?: boolean;
    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     */
    backupHour: number;
    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     */
    backupMinute: number;
    /**
     * Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkeyPersistence` is set to `off`.
     */
    frequentSnapshots?: boolean;
    /**
     * IP filter. Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'.
     */
    ipFilters: string[];
    /**
     * Migrate data from existing server.
     */
    migration: outputs.ManagedDatabaseValkeyPropertiesMigration;
    /**
     * Public Access. Allow access to the service from the public Internet.
     */
    publicAccess?: boolean;
    /**
     * Service logging. Store logs for the service so that they are available in the HTTP API and console.
     */
    serviceLog: boolean;
    /**
     * Default ACL for pub/sub channels used when a Valkey user is created. Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn't affect Valkey configuration acl-pubsub-default.
     */
    valkeyAclChannelsDefault: string;
    /**
     * Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
     */
    valkeyActiveExpireEffort: number;
    /**
     * Valkey IO thread count. Set Valkey IO thread count. Changing this will cause a restart of the Valkey service.
     */
    valkeyIoThreads: number;
    /**
     * LFU maxmemory-policy counter decay time in minutes.
     */
    valkeyLfuDecayTime: number;
    /**
     * Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
     */
    valkeyLfuLogFactor: number;
    /**
     * Valkey maxmemory-policy.
     */
    valkeyMaxmemoryPolicy: string;
    /**
     * Set notify-keyspace-events option.
     */
    valkeyNotifyKeyspaceEvents?: string;
    /**
     * Number of Valkey databases. Set number of Valkey databases. Changing this will cause a restart of the Valkey service.
     */
    valkeyNumberOfDatabases: number;
    /**
     * Valkey persistence. When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
     */
    valkeyPersistence: string;
    /**
     * Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     */
    valkeyPubsubClientOutputBufferLimit: number;
    /**
     * Require SSL to access Valkey.
     */
    valkeySsl?: boolean;
    /**
     * Valkey idle connection timeout in seconds.
     */
    valkeyTimeout: number;
}

export interface ManagedDatabaseValkeyPropertiesMigration {
    /**
     * Database name for bootstrapping the initial connection.
     */
    dbname: string;
    /**
     * Hostname or IP address of the server where to migrate data from.
     */
    host: string;
    /**
     * Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
     */
    ignoreDbs: string;
    /**
     * Comma-separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
     */
    ignoreRoles: string;
    /**
     * The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
     */
    method: string;
    /**
     * Password for authentication with the server where to migrate data from.
     */
    password: string;
    /**
     * Port number of the server where to migrate data from.
     */
    port: number;
    /**
     * The server where to migrate data from is secured with SSL.
     */
    ssl: boolean;
    /**
     * User name for authentication with the server where to migrate data from.
     */
    username: string;
}

export interface ManagedObjectStorageEndpoint {
    /**
     * Domain name of the endpoint.
     */
    domainName: string;
    /**
     * URL for IAM.
     */
    iamUrl: string;
    /**
     * URL for STS.
     */
    stsUrl: string;
    /**
     * Type of the endpoint (`private` / `public`).
     */
    type: string;
}

export interface ManagedObjectStorageNetwork {
    /**
     * Network family. IPv6 currently not supported.
     */
    family: string;
    /**
     * Network name. Must be unique within the service.
     */
    name: string;
    /**
     * Network type.
     */
    type: string;
    /**
     * Private network uuid. For public networks the field should be omitted.
     */
    uuid?: string;
}

export interface NetworkIpNetwork {
    /**
     * The CIDR range of the subnet
     */
    address: string;
    /**
     * Is DHCP enabled?
     */
    dhcp: boolean;
    /**
     * Is the gateway the DHCP default route?
     */
    dhcpDefaultRoute: boolean;
    /**
     * The DNS servers given by DHCP
     */
    dhcpDns: string[];
    /**
     * The additional DHCP classless static routes given by DHCP
     */
    dhcpRoutes: string[];
    /**
     * IP address family
     */
    family: string;
    /**
     * Gateway address given by DHCP
     */
    gateway: string;
}

export interface NetworkPeeringNetwork {
    /**
     * The UUID of the network.
     */
    uuid: string;
}

export interface NetworkPeeringPeerNetwork {
    /**
     * The UUID of the network.
     */
    uuid: string;
}

export interface ObjectStorageBucket {
    /**
     * The name of the bucket
     */
    name: string;
}

export interface RouterStaticRoute {
    name: string;
    nexthop: string;
    route: string;
    type: string;
}

export interface ServerFirewallRulesFirewallRule {
    /**
     * Action to take if the rule conditions are met. Valid values `accept | drop`
     */
    action: string;
    /**
     * Freeform comment string for the rule
     */
    comment?: string;
    /**
     * The destination address range ends from this address
     */
    destinationAddressEnd?: string;
    /**
     * The destination address range starts from this address
     */
    destinationAddressStart?: string;
    /**
     * The destination port range ends from this port number
     */
    destinationPortEnd?: string;
    /**
     * The destination port range starts from this port number
     */
    destinationPortStart?: string;
    /**
     * The direction of network traffic this rule will be applied to
     */
    direction: string;
    /**
     * The address family of new firewall rule
     */
    family?: string;
    /**
     * The ICMP type
     */
    icmpType?: string;
    /**
     * The protocol this rule will be applied to
     */
    protocol?: string;
    /**
     * The source address range ends from this address
     */
    sourceAddressEnd?: string;
    /**
     * The source address range starts from this address
     */
    sourceAddressStart?: string;
    /**
     * The source port range ends from this port number
     */
    sourcePortEnd?: string;
    /**
     * The source port range starts from this port number
     */
    sourcePortStart?: string;
}

export interface ServerLogin {
    /**
     * Indicates a password should be create to allow access
     */
    createPassword: boolean;
    /**
     * A list of ssh keys to access the server
     */
    keys?: string[];
    /**
     * The delivery method for the server's root password (one of `none`, `email` or `sms`)
     */
    passwordDelivery: string;
    /**
     * Username to be create to access the server
     */
    user?: string;
}

export interface ServerNetworkInterface {
    /**
     * 0-31 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
     */
    additionalIpAddresses?: outputs.ServerNetworkInterfaceAdditionalIpAddress[];
    /**
     * `true` if this interface should be used for network booting.
     */
    bootable: boolean;
    /**
     * The interface index.
     */
    index: number;
    /**
     * The primary IP address of this interface.
     */
    ipAddress: string;
    /**
     * The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
     */
    ipAddressFamily: string;
    /**
     * `true` indicates that the primary IP address is a floating IP address.
     */
    ipAddressFloating: boolean;
    /**
     * The MAC address of the interface.
     */
    macAddress: string;
    /**
     * The UUID of the network to attach this interface to. Required for private network interfaces.
     */
    network: string;
    /**
     * `true` if source IP should be filtered.
     */
    sourceIpFiltering: boolean;
    /**
     * Network interface type. For private network interfaces, a network must be specified with an existing network id.
     */
    type: string;
}

export interface ServerNetworkInterfaceAdditionalIpAddress {
    /**
     * An additional IP address for this interface.
     */
    ipAddress: string;
    /**
     * The type of the additional IP address of this interface (one of `IPv4` or `IPv6`).
     */
    ipAddressFamily: string;
    /**
     * `true` indicates that the additional IP address is a floating IP address.
     */
    ipAddressFloating: boolean;
}

export interface ServerSimpleBackup {
    /**
     * Simple backup plan. Accepted values: daily, dailies, weeklies, monthlies.
     */
    plan?: string;
    /**
     * Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230).
     */
    time?: string;
}

export interface ServerStorageDevice {
    /**
     * The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `addressPosition` field empty to auto-select next available address from that bus.
     */
    address: string;
    /**
     * The device position in the given bus (defined via field `address`). Valid values for address `virtio` are `0-15` (`0`, for example). Valid values for `scsi` or `ide` are `0-1:0-1` (`0:0`, for example). Leave empty to auto-select next available address in the given bus.
     */
    addressPosition: string;
    /**
     * The UUID of the storage to attach to the server.
     */
    storage?: string;
    /**
     * The device type the storage will be attached as
     */
    type: string;
}

export interface ServerTemplate {
    /**
     * The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `addressPosition` field empty to auto-select next available address from that bus.
     */
    address: string;
    /**
     * The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
     */
    addressPosition: string;
    backupRule?: outputs.ServerTemplateBackupRule;
    /**
     * If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
     */
    deleteAutoresizeBackup: boolean;
    /**
     * Sets if the storage is encrypted at rest
     */
    encrypt: boolean;
    /**
     * If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
     * 							Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
     * 							to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless deleteAutoresizeBackup option is set to true).
     * 							Taking and keeping backups incure costs.
     */
    filesystemAutoresize: boolean;
    /**
     * The unique identifier for the storage
     */
    id: string;
    /**
     * The size of the storage in gigabytes
     */
    size: number;
    /**
     * A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
     */
    storage?: string;
    /**
     * The storage tier to use.
     */
    tier: string;
    /**
     * A short, informative description
     */
    title: string;
}

export interface ServerTemplateBackupRule {
    /**
     * The weekday when the backup is created
     */
    interval: string;
    /**
     * The number of days before a backup is automatically deleted
     */
    retention: number;
    /**
     * The time of day when the backup is created
     */
    time: string;
}

export interface StorageBackupRule {
    /**
     * The weekday when the backup is created
     */
    interval: string;
    /**
     * The number of days before a backup is automatically deleted
     */
    retention: number;
    /**
     * The time of day when the backup is created
     */
    time: string;
}

export interface StorageClone {
    /**
     * The unique identifier of the storage/template to clone.
     */
    id: string;
}

export interface StorageImport {
    /**
     * sha256 sum of the imported data
     */
    sha256sum: string;
    /**
     * The mode of the import task. One of `httpImport` or `directUpload`.
     */
    source: string;
    /**
     * SHA256 hash of the source content. This hash is used to verify the integrity of the imported data by comparing it to `sha256sum` after the import has completed. Possible filename is automatically removed from the hash before comparison.
     */
    sourceHash?: string;
    /**
     * The location of the file to import. For `httpImport` an accessible URL. For `directUpload` a local file. When direct uploading a compressed image, `Content-Type` header of the PUT request is set automatically based on the file extension (`.gz` or `.xz`, case-insensitive).
     */
    sourceLocation: string;
    /**
     * Number of bytes imported
     */
    writtenBytes: number;
}

