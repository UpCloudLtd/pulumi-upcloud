// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource represents load balancer frontend service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@upcloud/pulumi-upcloud";
 *
 * const config = new pulumi.Config();
 * const lbZone = config.get("lbZone") || "fi-hel2";
 * const lbNetwork = new upcloud.Network("lb_network", {
 *     name: "lb-test-net",
 *     zone: lbZone,
 *     ipNetwork: {
 *         address: "10.0.0.0/24",
 *         dhcp: true,
 *         family: "IPv4",
 *     },
 * });
 * const lbFe1 = new upcloud.LoadbalancerFrontend("lb_fe_1", {
 *     loadbalancer: upcloudLoadbalancer.lb.id,
 *     name: "lb-fe-1-test",
 *     mode: "http",
 *     port: 8080,
 *     defaultBackendName: upcloudLoadbalancerBackend.lbBe1.name,
 *     networks: [{
 *         name: upcloudLoadbalancer.lb.networks[1].name,
 *     }],
 * });
 * const lb = new upcloud.Loadbalancer("lb", {
 *     configuredStatus: "started",
 *     name: "lb-test",
 *     plan: "development",
 *     zone: lbZone,
 *     networks: [
 *         {
 *             name: "Private-Net",
 *             type: "private",
 *             family: "IPv4",
 *             network: upcloudNetwork.lbNetwork.id,
 *         },
 *         {
 *             name: "Public-Net",
 *             type: "public",
 *             family: "IPv4",
 *         },
 *     ],
 * });
 * const lbBe1 = new upcloud.LoadbalancerBackend("lb_be_1", {
 *     loadbalancer: upcloudLoadbalancer.lb.id,
 *     name: "lb-be-1-test",
 * });
 * ```
 */
export class LoadbalancerFrontend extends pulumi.CustomResource {
    /**
     * Get an existing LoadbalancerFrontend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerFrontendState, opts?: pulumi.CustomResourceOptions): LoadbalancerFrontend {
        return new LoadbalancerFrontend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/loadbalancerFrontend:LoadbalancerFrontend';

    /**
     * Returns true if the given object is an instance of LoadbalancerFrontend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadbalancerFrontend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadbalancerFrontend.__pulumiType;
    }

    /**
     * The name of the backend where traffic will be routed by default. The default backend can be overridden in frontend rules.
     *
     * 	Note that the frontend resource depends on the default backend resource. Use the `name` field of a backend resource as the value for this field (like in the example above) or the `dependsOn` meta argument to ensure the resources are created and destroyed in the correct order.
     */
    declare public readonly defaultBackendName: pulumi.Output<string>;
    /**
     * UUID of the load balancer to which the frontend is connected.
     */
    declare public readonly loadbalancer: pulumi.Output<string>;
    /**
     * When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * The name of the frontend. Must be unique within the load balancer service.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will be required when deprecated field `network` is removed from load balancer resource.
     */
    declare public readonly networks: pulumi.Output<outputs.LoadbalancerFrontendNetwork[] | undefined>;
    /**
     * Port to listen for incoming requests.
     */
    declare public readonly port: pulumi.Output<number>;
    declare public readonly properties: pulumi.Output<outputs.LoadbalancerFrontendProperties | undefined>;
    /**
     * Set of frontend rule names.
     */
    declare public /*out*/ readonly rules: pulumi.Output<string[]>;
    /**
     * Set of TLS config names.
     */
    declare public /*out*/ readonly tlsConfigs: pulumi.Output<string[]>;

    /**
     * Create a LoadbalancerFrontend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerFrontendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerFrontendArgs | LoadbalancerFrontendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerFrontendState | undefined;
            resourceInputs["defaultBackendName"] = state?.defaultBackendName;
            resourceInputs["loadbalancer"] = state?.loadbalancer;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["name"] = state?.name;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["port"] = state?.port;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["tlsConfigs"] = state?.tlsConfigs;
        } else {
            const args = argsOrState as LoadbalancerFrontendArgs | undefined;
            if (args?.defaultBackendName === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultBackendName'");
            }
            if (args?.loadbalancer === undefined && !opts.urn) {
                throw new Error("Missing required property 'loadbalancer'");
            }
            if (args?.mode === undefined && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if (args?.port === undefined && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["defaultBackendName"] = args?.defaultBackendName;
            resourceInputs["loadbalancer"] = args?.loadbalancer;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["name"] = args?.name;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["port"] = args?.port;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["rules"] = undefined /*out*/;
            resourceInputs["tlsConfigs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadbalancerFrontend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadbalancerFrontend resources.
 */
export interface LoadbalancerFrontendState {
    /**
     * The name of the backend where traffic will be routed by default. The default backend can be overridden in frontend rules.
     *
     * 	Note that the frontend resource depends on the default backend resource. Use the `name` field of a backend resource as the value for this field (like in the example above) or the `dependsOn` meta argument to ensure the resources are created and destroyed in the correct order.
     */
    defaultBackendName?: pulumi.Input<string>;
    /**
     * UUID of the load balancer to which the frontend is connected.
     */
    loadbalancer?: pulumi.Input<string>;
    /**
     * When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the frontend. Must be unique within the load balancer service.
     */
    name?: pulumi.Input<string>;
    /**
     * Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will be required when deprecated field `network` is removed from load balancer resource.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.LoadbalancerFrontendNetwork>[]>;
    /**
     * Port to listen for incoming requests.
     */
    port?: pulumi.Input<number>;
    properties?: pulumi.Input<inputs.LoadbalancerFrontendProperties>;
    /**
     * Set of frontend rule names.
     */
    rules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of TLS config names.
     */
    tlsConfigs?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LoadbalancerFrontend resource.
 */
export interface LoadbalancerFrontendArgs {
    /**
     * The name of the backend where traffic will be routed by default. The default backend can be overridden in frontend rules.
     *
     * 	Note that the frontend resource depends on the default backend resource. Use the `name` field of a backend resource as the value for this field (like in the example above) or the `dependsOn` meta argument to ensure the resources are created and destroyed in the correct order.
     */
    defaultBackendName: pulumi.Input<string>;
    /**
     * UUID of the load balancer to which the frontend is connected.
     */
    loadbalancer: pulumi.Input<string>;
    /**
     * When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
     */
    mode: pulumi.Input<string>;
    /**
     * The name of the frontend. Must be unique within the load balancer service.
     */
    name?: pulumi.Input<string>;
    /**
     * Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will be required when deprecated field `network` is removed from load balancer resource.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.LoadbalancerFrontendNetwork>[]>;
    /**
     * Port to listen for incoming requests.
     */
    port: pulumi.Input<number>;
    properties?: pulumi.Input<inputs.LoadbalancerFrontendProperties>;
}
