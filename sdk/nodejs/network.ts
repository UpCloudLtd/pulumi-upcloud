// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource represents an SDN private network that cloud servers and other resources from the same zone can be attached to.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@upcloud/pulumi-upcloud";
 *
 * const exampleRouter = new upcloud.Router("example_router", {name: "example_router"});
 * // SDN network with a router
 * const exampleNetwork = new upcloud.Network("example_network", {
 *     name: "example_private_net",
 *     zone: "nl-ams1",
 *     router: exampleRouter.id,
 *     ipNetwork: {
 *         address: "10.0.0.0/24",
 *         dhcp: true,
 *         dhcpDefaultRoute: false,
 *         family: "IPv4",
 *         gateway: "10.0.0.1",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import upcloud:index/network:Network my_example_network 03e44422-07b8-4798-a597-c8eab1fa64df
 * ```
 */
export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * IP subnet within the network. Network must have exactly one IP subnet.
     */
    declare public readonly ipNetwork: pulumi.Output<outputs.NetworkIpNetwork>;
    /**
     * User defined key-value pairs to classify the network.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * Name of the network.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * UUID of a router to attach to this network.
     */
    declare public readonly router: pulumi.Output<string | undefined>;
    /**
     * The network type
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["ipNetwork"] = state?.ipNetwork;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["router"] = state?.router;
            resourceInputs["type"] = state?.type;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if (args?.ipNetwork === undefined && !opts.urn) {
                throw new Error("Missing required property 'ipNetwork'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["ipNetwork"] = args?.ipNetwork;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["router"] = args?.router;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * IP subnet within the network. Network must have exactly one IP subnet.
     */
    ipNetwork?: pulumi.Input<inputs.NetworkIpNetwork>;
    /**
     * User defined key-value pairs to classify the network.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the network.
     */
    name?: pulumi.Input<string>;
    /**
     * UUID of a router to attach to this network.
     */
    router?: pulumi.Input<string>;
    /**
     * The network type
     */
    type?: pulumi.Input<string>;
    /**
     * The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * IP subnet within the network. Network must have exactly one IP subnet.
     */
    ipNetwork: pulumi.Input<inputs.NetworkIpNetwork>;
    /**
     * User defined key-value pairs to classify the network.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the network.
     */
    name?: pulumi.Input<string>;
    /**
     * UUID of a router to attach to this network.
     */
    router?: pulumi.Input<string>;
    /**
     * The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone: pulumi.Input<string>;
}
