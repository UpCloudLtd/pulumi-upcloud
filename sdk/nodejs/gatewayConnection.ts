// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@upcloud/pulumi-upcloud";
 *
 * const thisRouter = new upcloud.Router("thisRouter", {});
 * const thisNetwork = new upcloud.Network("thisNetwork", {
 *     zone: "pl-waw1",
 *     ipNetwork: {
 *         address: "172.16.2.0/24",
 *         dhcp: true,
 *         family: "IPv4",
 *     },
 *     router: thisRouter.id,
 * });
 * const thisGateway = new upcloud.Gateway("thisGateway", {
 *     zone: "pl-waw1",
 *     features: ["vpn"],
 *     plan: "advanced",
 *     router: {
 *         id: thisRouter.id,
 *     },
 * });
 * const thisGatewayConnection = new upcloud.GatewayConnection("thisGatewayConnection", {
 *     gateway: thisGateway.id,
 *     type: "ipsec",
 *     localRoutes: [{
 *         name: "local-route",
 *         type: "static",
 *         staticNetwork: "10.123.123.0/24",
 *     }],
 *     remoteRoutes: [{
 *         name: "remote-route",
 *         type: "static",
 *         staticNetwork: "100.123.123.0/24",
 *     }],
 * });
 * ```
 */
export class GatewayConnection extends pulumi.CustomResource {
    /**
     * Get an existing GatewayConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayConnectionState, opts?: pulumi.CustomResourceOptions): GatewayConnection {
        return new GatewayConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/gatewayConnection:GatewayConnection';

    /**
     * Returns true if the given object is an instance of GatewayConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayConnection.__pulumiType;
    }

    /**
     * The ID of the upcloud.Gateway resource to which the connection belongs.
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * Route for the UpCloud side of the network.
     */
    public readonly localRoutes!: pulumi.Output<outputs.GatewayConnectionLocalRoute[] | undefined>;
    /**
     * The name of the connection, should be unique within the gateway.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Route for the remote side of the network.
     */
    public readonly remoteRoutes!: pulumi.Output<outputs.GatewayConnectionRemoteRoute[] | undefined>;
    /**
     * List of connection's tunnels names. Note that this field can have outdated information as connections are created by a
     * separate resource. To make sure that you have the most recent data run 'terrafrom refresh'.
     */
    public /*out*/ readonly tunnels!: pulumi.Output<string[]>;
    /**
     * The type of the connection; currently the only supported type is 'ipsec'.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The UUID of the connection
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a GatewayConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayConnectionArgs | GatewayConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayConnectionState | undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["localRoutes"] = state ? state.localRoutes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remoteRoutes"] = state ? state.remoteRoutes : undefined;
            resourceInputs["tunnels"] = state ? state.tunnels : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as GatewayConnectionArgs | undefined;
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["localRoutes"] = args ? args.localRoutes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remoteRoutes"] = args ? args.remoteRoutes : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["tunnels"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayConnection resources.
 */
export interface GatewayConnectionState {
    /**
     * The ID of the upcloud.Gateway resource to which the connection belongs.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Route for the UpCloud side of the network.
     */
    localRoutes?: pulumi.Input<pulumi.Input<inputs.GatewayConnectionLocalRoute>[]>;
    /**
     * The name of the connection, should be unique within the gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * Route for the remote side of the network.
     */
    remoteRoutes?: pulumi.Input<pulumi.Input<inputs.GatewayConnectionRemoteRoute>[]>;
    /**
     * List of connection's tunnels names. Note that this field can have outdated information as connections are created by a
     * separate resource. To make sure that you have the most recent data run 'terrafrom refresh'.
     */
    tunnels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the connection; currently the only supported type is 'ipsec'.
     */
    type?: pulumi.Input<string>;
    /**
     * The UUID of the connection
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayConnection resource.
 */
export interface GatewayConnectionArgs {
    /**
     * The ID of the upcloud.Gateway resource to which the connection belongs.
     */
    gateway: pulumi.Input<string>;
    /**
     * Route for the UpCloud side of the network.
     */
    localRoutes?: pulumi.Input<pulumi.Input<inputs.GatewayConnectionLocalRoute>[]>;
    /**
     * The name of the connection, should be unique within the gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * Route for the remote side of the network.
     */
    remoteRoutes?: pulumi.Input<pulumi.Input<inputs.GatewayConnectionRemoteRoute>[]>;
    /**
     * The type of the connection; currently the only supported type is 'ipsec'.
     */
    type?: pulumi.Input<string>;
}
