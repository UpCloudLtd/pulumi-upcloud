// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource represents a logical database in managed database
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@upcloud/pulumi-upcloud";
 *
 * // PostgreSQL managed database with additional logical database: example_db 
 * const example = new upcloud.ManagedDatabasePostgresql("example", {
 *     name: "postgres",
 *     plan: "1x1xCPU-2GB-25GB",
 *     title: "postgres",
 *     zone: "fi-hel1",
 * });
 * const exampleDb = new upcloud.ManagedDatabaseLogicalDatabase("example_db", {
 *     service: example.id,
 *     name: "example_db",
 * });
 * // MySQL managed database with additional logical database: example2_db 
 * const exampleManagedDatabaseMysql = new upcloud.ManagedDatabaseMysql("example", {
 *     name: "mysql",
 *     plan: "1x1xCPU-2GB-25GB",
 *     title: "mysql",
 *     zone: "fi-hel1",
 * });
 * const example2Db = new upcloud.ManagedDatabaseLogicalDatabase("example2_db", {
 *     service: exampleManagedDatabaseMysql.id,
 *     name: "example2_db",
 * });
 * ```
 */
export class ManagedDatabaseLogicalDatabase extends pulumi.CustomResource {
    /**
     * Get an existing ManagedDatabaseLogicalDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedDatabaseLogicalDatabaseState, opts?: pulumi.CustomResourceOptions): ManagedDatabaseLogicalDatabase {
        return new ManagedDatabaseLogicalDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/managedDatabaseLogicalDatabase:ManagedDatabaseLogicalDatabase';

    /**
     * Returns true if the given object is an instance of ManagedDatabaseLogicalDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedDatabaseLogicalDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedDatabaseLogicalDatabase.__pulumiType;
    }

    /**
     * Default character set for the database (LC_CTYPE)
     */
    declare public readonly characterSet: pulumi.Output<string>;
    /**
     * Default collation for the database (LC_COLLATE)
     */
    declare public readonly collation: pulumi.Output<string>;
    /**
     * Name of the logical database
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Service's UUID for which this user belongs to
     */
    declare public readonly service: pulumi.Output<string>;

    /**
     * Create a ManagedDatabaseLogicalDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedDatabaseLogicalDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedDatabaseLogicalDatabaseArgs | ManagedDatabaseLogicalDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedDatabaseLogicalDatabaseState | undefined;
            resourceInputs["characterSet"] = state?.characterSet;
            resourceInputs["collation"] = state?.collation;
            resourceInputs["name"] = state?.name;
            resourceInputs["service"] = state?.service;
        } else {
            const args = argsOrState as ManagedDatabaseLogicalDatabaseArgs | undefined;
            if (args?.service === undefined && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["characterSet"] = args?.characterSet;
            resourceInputs["collation"] = args?.collation;
            resourceInputs["name"] = args?.name;
            resourceInputs["service"] = args?.service;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedDatabaseLogicalDatabase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedDatabaseLogicalDatabase resources.
 */
export interface ManagedDatabaseLogicalDatabaseState {
    /**
     * Default character set for the database (LC_CTYPE)
     */
    characterSet?: pulumi.Input<string>;
    /**
     * Default collation for the database (LC_COLLATE)
     */
    collation?: pulumi.Input<string>;
    /**
     * Name of the logical database
     */
    name?: pulumi.Input<string>;
    /**
     * Service's UUID for which this user belongs to
     */
    service?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedDatabaseLogicalDatabase resource.
 */
export interface ManagedDatabaseLogicalDatabaseArgs {
    /**
     * Default character set for the database (LC_CTYPE)
     */
    characterSet?: pulumi.Input<string>;
    /**
     * Default collation for the database (LC_COLLATE)
     */
    collation?: pulumi.Input<string>;
    /**
     * Name of the logical database
     */
    name?: pulumi.Input<string>;
    /**
     * Service's UUID for which this user belongs to
     */
    service: pulumi.Input<string>;
}
