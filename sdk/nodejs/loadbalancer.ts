// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource represents [Managed Load Balancer](https://upcloud.com/products/managed-load-balancer) service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@upcloud/pulumi-upcloud";
 *
 * const config = new pulumi.Config();
 * const lbZone = config.get("lbZone") || "fi-hel2";
 * const lbNetwork = new upcloud.Network("lb_network", {
 *     name: "lb-test-net",
 *     zone: lbZone,
 *     ipNetwork: {
 *         address: "10.0.0.0/24",
 *         dhcp: true,
 *         family: "IPv4",
 *     },
 * });
 * const lb = new upcloud.Loadbalancer("lb", {
 *     configuredStatus: "started",
 *     name: "lb-test",
 *     plan: "development",
 *     zone: lbZone,
 *     networks: [
 *         {
 *             name: "Private-Net",
 *             type: "private",
 *             family: "IPv4",
 *             network: upcloudNetwork.lbNetwork.id,
 *         },
 *         {
 *             name: "Public-Net",
 *             type: "public",
 *             family: "IPv4",
 *         },
 *     ],
 * });
 * ```
 */
export class Loadbalancer extends pulumi.CustomResource {
    /**
     * Get an existing Loadbalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerState, opts?: pulumi.CustomResourceOptions): Loadbalancer {
        return new Loadbalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/loadbalancer:Loadbalancer';

    /**
     * Returns true if the given object is an instance of Loadbalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Loadbalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Loadbalancer.__pulumiType;
    }

    /**
     * Backends are groups of customer servers whose traffic should be balanced.
     */
    public /*out*/ readonly backends!: pulumi.Output<string[]>;
    /**
     * The service configured status indicates the service's current intended status. Managed by the customer.
     */
    public readonly configuredStatus!: pulumi.Output<string>;
    /**
     * DNS name of the load balancer
     *
     * @deprecated Use 'networks' to get network DNS name
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * Frontends receive the traffic before dispatching it to the backends.
     */
    public /*out*/ readonly frontends!: pulumi.Output<string[]>;
    /**
     * User defined key-value pairs to classify the load balancer.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day.
     * Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
     */
    public readonly maintenanceDow!: pulumi.Output<string>;
    /**
     * The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this
     * period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime
     * of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC
     * HH:MM:SSZ, for example `20:01:01Z`.
     */
    public readonly maintenanceTime!: pulumi.Output<string>;
    /**
     * The name of the service. Must be unique within customer account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Private network UUID where traffic will be routed. Must reside in load balancer zone.
     *
     * @deprecated Use 'networks' to define networks attached to load balancer
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
     */
    public readonly networks!: pulumi.Output<outputs.LoadbalancerNetwork[] | undefined>;
    /**
     * Nodes are instances running load balancer service
     */
    public /*out*/ readonly nodes!: pulumi.Output<outputs.LoadbalancerNode[]>;
    /**
     * The service operational state indicates the service's current operational, effective state. Managed by the system.
     */
    public /*out*/ readonly operationalState!: pulumi.Output<string>;
    /**
     * Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
     */
    public readonly plan!: pulumi.Output<string>;
    /**
     * Domain Name Resolvers.
     */
    public /*out*/ readonly resolvers!: pulumi.Output<string[]>;
    /**
     * Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Loadbalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerArgs | LoadbalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerState | undefined;
            resourceInputs["backends"] = state ? state.backends : undefined;
            resourceInputs["configuredStatus"] = state ? state.configuredStatus : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["frontends"] = state ? state.frontends : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maintenanceDow"] = state ? state.maintenanceDow : undefined;
            resourceInputs["maintenanceTime"] = state ? state.maintenanceTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["operationalState"] = state ? state.operationalState : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["resolvers"] = state ? state.resolvers : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as LoadbalancerArgs | undefined;
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["configuredStatus"] = args ? args.configuredStatus : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maintenanceDow"] = args ? args.maintenanceDow : undefined;
            resourceInputs["maintenanceTime"] = args ? args.maintenanceTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["backends"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["frontends"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["operationalState"] = undefined /*out*/;
            resourceInputs["resolvers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Loadbalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Loadbalancer resources.
 */
export interface LoadbalancerState {
    /**
     * Backends are groups of customer servers whose traffic should be balanced.
     */
    backends?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The service configured status indicates the service's current intended status. Managed by the customer.
     */
    configuredStatus?: pulumi.Input<string>;
    /**
     * DNS name of the load balancer
     *
     * @deprecated Use 'networks' to get network DNS name
     */
    dnsName?: pulumi.Input<string>;
    /**
     * Frontends receive the traffic before dispatching it to the backends.
     */
    frontends?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User defined key-value pairs to classify the load balancer.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day.
     * Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
     */
    maintenanceDow?: pulumi.Input<string>;
    /**
     * The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this
     * period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime
     * of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC
     * HH:MM:SSZ, for example `20:01:01Z`.
     */
    maintenanceTime?: pulumi.Input<string>;
    /**
     * The name of the service. Must be unique within customer account.
     */
    name?: pulumi.Input<string>;
    /**
     * Private network UUID where traffic will be routed. Must reside in load balancer zone.
     *
     * @deprecated Use 'networks' to define networks attached to load balancer
     */
    network?: pulumi.Input<string>;
    /**
     * Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.LoadbalancerNetwork>[]>;
    /**
     * Nodes are instances running load balancer service
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.LoadbalancerNode>[]>;
    /**
     * The service operational state indicates the service's current operational, effective state. Managed by the system.
     */
    operationalState?: pulumi.Input<string>;
    /**
     * Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
     */
    plan?: pulumi.Input<string>;
    /**
     * Domain Name Resolvers.
     */
    resolvers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Loadbalancer resource.
 */
export interface LoadbalancerArgs {
    /**
     * The service configured status indicates the service's current intended status. Managed by the customer.
     */
    configuredStatus?: pulumi.Input<string>;
    /**
     * User defined key-value pairs to classify the load balancer.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day.
     * Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
     */
    maintenanceDow?: pulumi.Input<string>;
    /**
     * The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this
     * period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime
     * of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC
     * HH:MM:SSZ, for example `20:01:01Z`.
     */
    maintenanceTime?: pulumi.Input<string>;
    /**
     * The name of the service. Must be unique within customer account.
     */
    name?: pulumi.Input<string>;
    /**
     * Private network UUID where traffic will be routed. Must reside in load balancer zone.
     *
     * @deprecated Use 'networks' to define networks attached to load balancer
     */
    network?: pulumi.Input<string>;
    /**
     * Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.LoadbalancerNetwork>[]>;
    /**
     * Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
     */
    plan: pulumi.Input<string>;
    /**
     * Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     */
    zone: pulumi.Input<string>;
}
