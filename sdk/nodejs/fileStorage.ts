// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Resource for managing UpCloud file storages (EXPERIMENTAL)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@upcloud/pulumi-upcloud";
 *
 * // Create network for the File Storage
 * const _this = new upcloud.Network("this", {
 *     name: "file-storage-net-test",
 *     zone: "fi-hel2",
 *     ipNetwork: {
 *         address: "172.16.8.0/24",
 *         dhcp: true,
 *         family: "IPv4",
 *     },
 * });
 * const example = new upcloud.FileStorage("example", {
 *     name: "example-file-storage-test",
 *     size: 250,
 *     zone: "fi-hel2",
 *     configuredStatus: "stopped",
 *     labels: {
 *         environment: "staging",
 *         customer: "example-customer",
 *     },
 *     shares: [{
 *         name: "write-to-project",
 *         path: "/project",
 *         acls: [{
 *             target: "172.16.8.12",
 *             permission: "rw",
 *         }],
 *     }],
 *     networks: [{
 *         family: "IPv4",
 *         name: "example-private-net",
 *         uuid: _this.id,
 *         ipAddress: "172.16.8.11",
 *     }],
 * });
 * ```
 */
export class FileStorage extends pulumi.CustomResource {
    /**
     * Get an existing FileStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileStorageState, opts?: pulumi.CustomResourceOptions): FileStorage {
        return new FileStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/fileStorage:FileStorage';

    /**
     * Returns true if the given object is an instance of FileStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileStorage.__pulumiType;
    }

    /**
     * The service configured status indicates the service's current intended status. Managed by the customer.
     */
    declare public readonly configuredStatus: pulumi.Output<string>;
    /**
     * User defined key-value pairs to classify the file storage.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * Name of the file storage service.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Network attached to this file storage (currently supports at most one of these blocks).
     */
    declare public readonly networks: pulumi.Output<outputs.FileStorageNetwork[] | undefined>;
    /**
     * List of shares exported by this file storage.
     */
    declare public readonly shares: pulumi.Output<outputs.FileStorageShare[] | undefined>;
    /**
     * Size of the file storage in GB.
     */
    declare public readonly size: pulumi.Output<number>;
    /**
     * Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a FileStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileStorageArgs | FileStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileStorageState | undefined;
            resourceInputs["configuredStatus"] = state?.configuredStatus;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["shares"] = state?.shares;
            resourceInputs["size"] = state?.size;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as FileStorageArgs | undefined;
            if (args?.configuredStatus === undefined && !opts.urn) {
                throw new Error("Missing required property 'configuredStatus'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["configuredStatus"] = args?.configuredStatus;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["shares"] = args?.shares;
            resourceInputs["size"] = args?.size;
            resourceInputs["zone"] = args?.zone;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileStorage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileStorage resources.
 */
export interface FileStorageState {
    /**
     * The service configured status indicates the service's current intended status. Managed by the customer.
     */
    configuredStatus?: pulumi.Input<string>;
    /**
     * User defined key-value pairs to classify the file storage.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the file storage service.
     */
    name?: pulumi.Input<string>;
    /**
     * Network attached to this file storage (currently supports at most one of these blocks).
     */
    networks?: pulumi.Input<pulumi.Input<inputs.FileStorageNetwork>[]>;
    /**
     * List of shares exported by this file storage.
     */
    shares?: pulumi.Input<pulumi.Input<inputs.FileStorageShare>[]>;
    /**
     * Size of the file storage in GB.
     */
    size?: pulumi.Input<number>;
    /**
     * Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FileStorage resource.
 */
export interface FileStorageArgs {
    /**
     * The service configured status indicates the service's current intended status. Managed by the customer.
     */
    configuredStatus: pulumi.Input<string>;
    /**
     * User defined key-value pairs to classify the file storage.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the file storage service.
     */
    name?: pulumi.Input<string>;
    /**
     * Network attached to this file storage (currently supports at most one of these blocks).
     */
    networks?: pulumi.Input<pulumi.Input<inputs.FileStorageNetwork>[]>;
    /**
     * List of shares exported by this file storage.
     */
    shares?: pulumi.Input<pulumi.Input<inputs.FileStorageShare>[]>;
    /**
     * Size of the file storage in GB.
     */
    size: pulumi.Input<number>;
    /**
     * Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     */
    zone: pulumi.Input<string>;
}
