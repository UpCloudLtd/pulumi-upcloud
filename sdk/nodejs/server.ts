// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The UpCloud server resource allows the creation, update and deletion of [cloud servers](https://upcloud.com/products/cloud-servers).
 *
 * > To deploy a GPU server, select a plan with `GPU-` prefix, e.g., `GPU-8xCPU-64GB-1xL40S`. Use `upctl zone devices` command to list per zone GPU availability.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import upcloud:index/server:Server example_server ead4544f-10bf-42a3-b98a-a0fea2e2ad14
 * ```
 */
export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
     */
    declare public readonly bootOrder: pulumi.Output<string>;
    /**
     * The number of CPU cores for the server
     */
    declare public readonly cpu: pulumi.Output<number>;
    /**
     * Are firewall rules active for the server
     */
    declare public readonly firewall: pulumi.Output<boolean>;
    /**
     * Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud hosts
     */
    declare public readonly host: pulumi.Output<number>;
    /**
     * The hostname of the server.
     */
    declare public readonly hostname: pulumi.Output<string>;
    /**
     * If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If hot resizing fails, the apply operation will fail.
     */
    declare public readonly hotResize: pulumi.Output<boolean>;
    /**
     * User defined key-value pairs to classify the server.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * Configure access credentials to the server
     */
    declare public readonly login: pulumi.Output<outputs.ServerLogin | undefined>;
    /**
     * The amount of memory for the server (in megabytes)
     */
    declare public readonly mem: pulumi.Output<number>;
    /**
     * Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based templates.
     */
    declare public readonly metadata: pulumi.Output<boolean | undefined>;
    /**
     * One or more blocks describing the network interfaces of the server.
     *
     *     In addition to list order, the configured network interfaces are matched to the server's actual network interfaces by `index` and `ipAddress` fields. This is to avoid public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list.
     *
     *     We recommend explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from middle of the list.
     */
    declare public readonly networkInterfaces: pulumi.Output<outputs.ServerNetworkInterface[] | undefined>;
    /**
     * The model of the server's network interfaces
     */
    declare public readonly nicModel: pulumi.Output<string>;
    /**
     * The pricing plan used for the server. You can list available server plans with `upctl server plans`
     */
    declare public readonly plan: pulumi.Output<string>;
    /**
     * The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the `members` property of `upcloud.ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it has been set to non-zero value.
     */
    declare public readonly serverGroup: pulumi.Output<string | undefined>;
    declare public readonly simpleBackup: pulumi.Output<outputs.ServerSimpleBackup | undefined>;
    /**
     * A set of storage devices associated with the server
     */
    declare public readonly storageDevices: pulumi.Output<outputs.ServerStorageDevice[] | undefined>;
    /**
     * The server related tags
     */
    declare public readonly tags: pulumi.Output<string[]>;
    /**
     * Block describing the preconfigured operating system
     */
    declare public readonly template: pulumi.Output<outputs.ServerTemplate | undefined>;
    /**
     * The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
     */
    declare public readonly timezone: pulumi.Output<string>;
    /**
     * A short, informational description of the server.
     */
    declare public readonly title: pulumi.Output<string>;
    /**
     * Defines URL for a server setup script, or the script body itself
     */
    declare public readonly userData: pulumi.Output<string | undefined>;
    /**
     * The model of the server's video interface
     */
    declare public readonly videoModel: pulumi.Output<string>;
    /**
     * The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["bootOrder"] = state?.bootOrder;
            resourceInputs["cpu"] = state?.cpu;
            resourceInputs["firewall"] = state?.firewall;
            resourceInputs["host"] = state?.host;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["hotResize"] = state?.hotResize;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["login"] = state?.login;
            resourceInputs["mem"] = state?.mem;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["networkInterfaces"] = state?.networkInterfaces;
            resourceInputs["nicModel"] = state?.nicModel;
            resourceInputs["plan"] = state?.plan;
            resourceInputs["serverGroup"] = state?.serverGroup;
            resourceInputs["simpleBackup"] = state?.simpleBackup;
            resourceInputs["storageDevices"] = state?.storageDevices;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["template"] = state?.template;
            resourceInputs["timezone"] = state?.timezone;
            resourceInputs["title"] = state?.title;
            resourceInputs["userData"] = state?.userData;
            resourceInputs["videoModel"] = state?.videoModel;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if (args?.hostname === undefined && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["bootOrder"] = args?.bootOrder;
            resourceInputs["cpu"] = args?.cpu;
            resourceInputs["firewall"] = args?.firewall;
            resourceInputs["host"] = args?.host;
            resourceInputs["hostname"] = args?.hostname;
            resourceInputs["hotResize"] = args?.hotResize;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["login"] = args?.login;
            resourceInputs["mem"] = args?.mem;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["networkInterfaces"] = args?.networkInterfaces;
            resourceInputs["nicModel"] = args?.nicModel;
            resourceInputs["plan"] = args?.plan;
            resourceInputs["serverGroup"] = args?.serverGroup;
            resourceInputs["simpleBackup"] = args?.simpleBackup;
            resourceInputs["storageDevices"] = args?.storageDevices;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["template"] = args?.template;
            resourceInputs["timezone"] = args?.timezone;
            resourceInputs["title"] = args?.title;
            resourceInputs["userData"] = args?.userData;
            resourceInputs["videoModel"] = args?.videoModel;
            resourceInputs["zone"] = args?.zone;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
     */
    bootOrder?: pulumi.Input<string>;
    /**
     * The number of CPU cores for the server
     */
    cpu?: pulumi.Input<number>;
    /**
     * Are firewall rules active for the server
     */
    firewall?: pulumi.Input<boolean>;
    /**
     * Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud hosts
     */
    host?: pulumi.Input<number>;
    /**
     * The hostname of the server.
     */
    hostname?: pulumi.Input<string>;
    /**
     * If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If hot resizing fails, the apply operation will fail.
     */
    hotResize?: pulumi.Input<boolean>;
    /**
     * User defined key-value pairs to classify the server.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configure access credentials to the server
     */
    login?: pulumi.Input<inputs.ServerLogin>;
    /**
     * The amount of memory for the server (in megabytes)
     */
    mem?: pulumi.Input<number>;
    /**
     * Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based templates.
     */
    metadata?: pulumi.Input<boolean>;
    /**
     * One or more blocks describing the network interfaces of the server.
     *
     *     In addition to list order, the configured network interfaces are matched to the server's actual network interfaces by `index` and `ipAddress` fields. This is to avoid public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list.
     *
     *     We recommend explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from middle of the list.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ServerNetworkInterface>[]>;
    /**
     * The model of the server's network interfaces
     */
    nicModel?: pulumi.Input<string>;
    /**
     * The pricing plan used for the server. You can list available server plans with `upctl server plans`
     */
    plan?: pulumi.Input<string>;
    /**
     * The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the `members` property of `upcloud.ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it has been set to non-zero value.
     */
    serverGroup?: pulumi.Input<string>;
    simpleBackup?: pulumi.Input<inputs.ServerSimpleBackup>;
    /**
     * A set of storage devices associated with the server
     */
    storageDevices?: pulumi.Input<pulumi.Input<inputs.ServerStorageDevice>[]>;
    /**
     * The server related tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Block describing the preconfigured operating system
     */
    template?: pulumi.Input<inputs.ServerTemplate>;
    /**
     * The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
     */
    timezone?: pulumi.Input<string>;
    /**
     * A short, informational description of the server.
     */
    title?: pulumi.Input<string>;
    /**
     * Defines URL for a server setup script, or the script body itself
     */
    userData?: pulumi.Input<string>;
    /**
     * The model of the server's video interface
     */
    videoModel?: pulumi.Input<string>;
    /**
     * The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
     */
    bootOrder?: pulumi.Input<string>;
    /**
     * The number of CPU cores for the server
     */
    cpu?: pulumi.Input<number>;
    /**
     * Are firewall rules active for the server
     */
    firewall?: pulumi.Input<boolean>;
    /**
     * Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud hosts
     */
    host?: pulumi.Input<number>;
    /**
     * The hostname of the server.
     */
    hostname: pulumi.Input<string>;
    /**
     * If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If hot resizing fails, the apply operation will fail.
     */
    hotResize?: pulumi.Input<boolean>;
    /**
     * User defined key-value pairs to classify the server.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configure access credentials to the server
     */
    login?: pulumi.Input<inputs.ServerLogin>;
    /**
     * The amount of memory for the server (in megabytes)
     */
    mem?: pulumi.Input<number>;
    /**
     * Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based templates.
     */
    metadata?: pulumi.Input<boolean>;
    /**
     * One or more blocks describing the network interfaces of the server.
     *
     *     In addition to list order, the configured network interfaces are matched to the server's actual network interfaces by `index` and `ipAddress` fields. This is to avoid public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list.
     *
     *     We recommend explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from middle of the list.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ServerNetworkInterface>[]>;
    /**
     * The model of the server's network interfaces
     */
    nicModel?: pulumi.Input<string>;
    /**
     * The pricing plan used for the server. You can list available server plans with `upctl server plans`
     */
    plan?: pulumi.Input<string>;
    /**
     * The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the `members` property of `upcloud.ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it has been set to non-zero value.
     */
    serverGroup?: pulumi.Input<string>;
    simpleBackup?: pulumi.Input<inputs.ServerSimpleBackup>;
    /**
     * A set of storage devices associated with the server
     */
    storageDevices?: pulumi.Input<pulumi.Input<inputs.ServerStorageDevice>[]>;
    /**
     * The server related tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Block describing the preconfigured operating system
     */
    template?: pulumi.Input<inputs.ServerTemplate>;
    /**
     * The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
     */
    timezone?: pulumi.Input<string>;
    /**
     * A short, informational description of the server.
     */
    title?: pulumi.Input<string>;
    /**
     * Defines URL for a server setup script, or the script body itself
     */
    userData?: pulumi.Input<string>;
    /**
     * The model of the server's video interface
     */
    videoModel?: pulumi.Input<string>;
    /**
     * The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     */
    zone: pulumi.Input<string>;
}
