// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource represents a user in managed database
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@pulumi/upcloud";
 *
 * const example = new upcloud.ManagedDatabasePostgresql("example", {
 *     plan: "1x1xCPU-2GB-25GB",
 *     title: "postgres",
 *     zone: "fi-hel1",
 * });
 * const exampleUser = new upcloud.ManagedDatabaseUser("exampleUser", {
 *     service: example.id,
 *     username: "example_user",
 *     password: "<USER_PASSWORD>",
 * });
 * ```
 */
export class ManagedDatabaseUser extends pulumi.CustomResource {
    /**
     * Get an existing ManagedDatabaseUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedDatabaseUserState, opts?: pulumi.CustomResourceOptions): ManagedDatabaseUser {
        return new ManagedDatabaseUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/managedDatabaseUser:ManagedDatabaseUser';

    /**
     * Returns true if the given object is an instance of ManagedDatabaseUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedDatabaseUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedDatabaseUser.__pulumiType;
    }

    /**
     * MySQL only, authentication type.
     */
    public readonly authentication!: pulumi.Output<string | undefined>;
    /**
     * OpenSearch access control object.
     */
    public readonly opensearchAccessControl!: pulumi.Output<outputs.ManagedDatabaseUserOpensearchAccessControl | undefined>;
    /**
     * Password for the database user. Defaults to a random value
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * PostgreSQL access control object.
     */
    public readonly pgAccessControl!: pulumi.Output<outputs.ManagedDatabaseUserPgAccessControl | undefined>;
    /**
     * Redis access control object.
     */
    public readonly redisAccessControl!: pulumi.Output<outputs.ManagedDatabaseUserRedisAccessControl | undefined>;
    /**
     * Service's UUID for which this user belongs to
     */
    public readonly service!: pulumi.Output<string>;
    /**
     * Type of the user. Only normal type users can be created
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Name of the database user
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ManagedDatabaseUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedDatabaseUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedDatabaseUserArgs | ManagedDatabaseUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedDatabaseUserState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["opensearchAccessControl"] = state ? state.opensearchAccessControl : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pgAccessControl"] = state ? state.pgAccessControl : undefined;
            resourceInputs["redisAccessControl"] = state ? state.redisAccessControl : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ManagedDatabaseUserArgs | undefined;
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["opensearchAccessControl"] = args ? args.opensearchAccessControl : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["pgAccessControl"] = args ? args.pgAccessControl : undefined;
            resourceInputs["redisAccessControl"] = args ? args.redisAccessControl : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagedDatabaseUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedDatabaseUser resources.
 */
export interface ManagedDatabaseUserState {
    /**
     * MySQL only, authentication type.
     */
    authentication?: pulumi.Input<string>;
    /**
     * OpenSearch access control object.
     */
    opensearchAccessControl?: pulumi.Input<inputs.ManagedDatabaseUserOpensearchAccessControl>;
    /**
     * Password for the database user. Defaults to a random value
     */
    password?: pulumi.Input<string>;
    /**
     * PostgreSQL access control object.
     */
    pgAccessControl?: pulumi.Input<inputs.ManagedDatabaseUserPgAccessControl>;
    /**
     * Redis access control object.
     */
    redisAccessControl?: pulumi.Input<inputs.ManagedDatabaseUserRedisAccessControl>;
    /**
     * Service's UUID for which this user belongs to
     */
    service?: pulumi.Input<string>;
    /**
     * Type of the user. Only normal type users can be created
     */
    type?: pulumi.Input<string>;
    /**
     * Name of the database user
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedDatabaseUser resource.
 */
export interface ManagedDatabaseUserArgs {
    /**
     * MySQL only, authentication type.
     */
    authentication?: pulumi.Input<string>;
    /**
     * OpenSearch access control object.
     */
    opensearchAccessControl?: pulumi.Input<inputs.ManagedDatabaseUserOpensearchAccessControl>;
    /**
     * Password for the database user. Defaults to a random value
     */
    password?: pulumi.Input<string>;
    /**
     * PostgreSQL access control object.
     */
    pgAccessControl?: pulumi.Input<inputs.ManagedDatabaseUserPgAccessControl>;
    /**
     * Redis access control object.
     */
    redisAccessControl?: pulumi.Input<inputs.ManagedDatabaseUserRedisAccessControl>;
    /**
     * Service's UUID for which this user belongs to
     */
    service: pulumi.Input<string>;
    /**
     * Name of the database user
     */
    username: pulumi.Input<string>;
}
