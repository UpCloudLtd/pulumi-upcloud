// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource represents frontend TLS config
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@pulumi/upcloud";
 *
 * const lbFe1Tls1 = new upcloud.LoadbalancerFrontendTlsConfig("lbFe1Tls1", {
 *     frontend: resource.upcloud_loadbalancer_frontend.lb_fe_1.id,
 *     certificateBundle: resource.upcloud_loadbalancer_manual_certificate_bundle["lb-cb-m1"].id,
 * });
 * const config = new pulumi.Config();
 * const lbZone = config.get("lbZone") || "fi-hel2";
 * const lbNetwork = new upcloud.Network("lbNetwork", {
 *     zone: lbZone,
 *     ipNetwork: {
 *         address: "10.0.0.0/24",
 *         dhcp: true,
 *         family: "IPv4",
 *     },
 * });
 * const lb_cb_m1 = new upcloud.LoadbalancerManualCertificateBundle("lb-cb-m1", {
 *     certificate: "LS0tLS1CRUdJTiBDRVJ...",
 *     privateKey: "LS0tLS1CRUdJTiBQUkl...",
 * });
 * const lbFe1 = new upcloud.LoadbalancerFrontend("lbFe1", {
 *     loadbalancer: resource.upcloud_loadbalancer.lb.id,
 *     mode: "http",
 *     port: 8080,
 *     defaultBackendName: resource.upcloud_loadbalancer_backend.lb_be_1.name,
 * });
 * const lb = new upcloud.Loadbalancer("lb", {
 *     configuredStatus: "started",
 *     plan: "development",
 *     zone: lbZone,
 *     network: resource.upcloud_network.lb_network.id,
 * });
 * const lbBe1 = new upcloud.LoadbalancerBackend("lbBe1", {loadbalancer: resource.upcloud_loadbalancer.lb.id});
 * ```
 */
export class LoadbalancerFrontendTlsConfig extends pulumi.CustomResource {
    /**
     * Get an existing LoadbalancerFrontendTlsConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerFrontendTlsConfigState, opts?: pulumi.CustomResourceOptions): LoadbalancerFrontendTlsConfig {
        return new LoadbalancerFrontendTlsConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/loadbalancerFrontendTlsConfig:LoadbalancerFrontendTlsConfig';

    /**
     * Returns true if the given object is an instance of LoadbalancerFrontendTlsConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadbalancerFrontendTlsConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadbalancerFrontendTlsConfig.__pulumiType;
    }

    /**
     * Reference to certificate bundle ID.
     */
    public readonly certificateBundle!: pulumi.Output<string>;
    /**
     * ID of the load balancer frontend to which the TLS config is connected.
     */
    public readonly frontend!: pulumi.Output<string>;
    /**
     * The name of the TLS config. Must be unique within customer account.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a LoadbalancerFrontendTlsConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerFrontendTlsConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerFrontendTlsConfigArgs | LoadbalancerFrontendTlsConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerFrontendTlsConfigState | undefined;
            resourceInputs["certificateBundle"] = state ? state.certificateBundle : undefined;
            resourceInputs["frontend"] = state ? state.frontend : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as LoadbalancerFrontendTlsConfigArgs | undefined;
            if ((!args || args.certificateBundle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateBundle'");
            }
            if ((!args || args.frontend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontend'");
            }
            resourceInputs["certificateBundle"] = args ? args.certificateBundle : undefined;
            resourceInputs["frontend"] = args ? args.frontend : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadbalancerFrontendTlsConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadbalancerFrontendTlsConfig resources.
 */
export interface LoadbalancerFrontendTlsConfigState {
    /**
     * Reference to certificate bundle ID.
     */
    certificateBundle?: pulumi.Input<string>;
    /**
     * ID of the load balancer frontend to which the TLS config is connected.
     */
    frontend?: pulumi.Input<string>;
    /**
     * The name of the TLS config. Must be unique within customer account.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadbalancerFrontendTlsConfig resource.
 */
export interface LoadbalancerFrontendTlsConfigArgs {
    /**
     * Reference to certificate bundle ID.
     */
    certificateBundle: pulumi.Input<string>;
    /**
     * ID of the load balancer frontend to which the TLS config is connected.
     */
    frontend: pulumi.Input<string>;
    /**
     * The name of the TLS config. Must be unique within customer account.
     */
    name?: pulumi.Input<string>;
}
