// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > The `upcloud.ObjectStorage` resource manages previous generatation object storage instances that will reach end of life (EOL) by the end of 2024. For new instances, consider using the new Object Storage product managed with `upcloud.ManagedObjectStorage` resource.
 *
 * This resource represents an UpCloud Object Storage instance, which provides S3 compatible storage.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@upcloud/pulumi-upcloud";
 *
 * // Object storage instance called storage-name in the fi-hel2 zone, with 2 buckets called "products" and "images".
 * const myObjectStorage = new upcloud.ObjectStorage("myObjectStorage", {
 *     accessKey: "admin",
 *     buckets: [
 *         {
 *             name: "products",
 *         },
 *         {
 *             name: "images",
 *         },
 *     ],
 *     description: "catalogue",
 *     secretKey: "changeme",
 *     size: 250,
 *     zone: "fi-hel2",
 * });
 * // The zone in wgich to create the instance
 * ```
 *
 * ## Import
 *
 * For object storage import to work properly, you need to set environment variables for access and secret key.
 *
 * The environment variables names are UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name} and UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}
 *
 * where {name} is the name of your object storage instance (not the resource label!), all uppercased, and with all dashes (-)
 *
 * replaced with underscores (_). So importing an object storage that is named "my-storage" will look like this:
 *
 * UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_STORAGE=accesskey \
 *
 * UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_STORAGE=supersecret \
 *
 * ```sh
 * $ pulumi import upcloud:index/objectStorage:ObjectStorage example_storage 06c1f4b6-faf2-47d0-8896-1d941092b009
 * ```
 */
export class ObjectStorage extends pulumi.CustomResource {
    /**
     * Get an existing ObjectStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectStorageState, opts?: pulumi.CustomResourceOptions): ObjectStorage {
        return new ObjectStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/objectStorage:ObjectStorage';

    /**
     * Returns true if the given object is an instance of ObjectStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectStorage.__pulumiType;
    }

    /**
     * The access key used to identify user. Can be set to an empty string, which will tell the provider to get the access key
     * from environment variable. The environment variable should be "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}". {name} is the
     * name given to object storage instance (so not the resource label), it should be all uppercased and all dashes (-) should
     * be replaced with underscores (_). For example, object storage named "my-files" would use environment variable named
     * "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES".
     */
    public readonly accessKey!: pulumi.Output<string>;
    public readonly buckets!: pulumi.Output<outputs.ObjectStorageBucket[] | undefined>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * The description of the object storage instance to be created
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the object storage instance to be created
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The secret key used to authenticate user. Can be set to an empty string, which will tell the provider to get the secret
     * key from environment variable. The environment variable should be "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}". {name} is
     * the name given to object storage instance (so not the resource label), it should be all uppercased and all dashes (-)
     * should be replaced with underscores (_). For example, object storage named "my-files" would use environment variable
     * named "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES".
     */
    public readonly secretKey!: pulumi.Output<string>;
    /**
     * The size of the object storage instance in gigabytes
     */
    public readonly size!: pulumi.Output<number>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly url!: pulumi.Output<string>;
    public /*out*/ readonly usedSpace!: pulumi.Output<number>;
    /**
     * The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl
     * zone list`.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a ObjectStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectStorageArgs | ObjectStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectStorageState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["buckets"] = state ? state.buckets : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["usedSpace"] = state ? state.usedSpace : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ObjectStorageArgs | undefined;
            if ((!args || args.accessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessKey'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.secretKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["accessKey"] = args ? args.accessKey : undefined;
            resourceInputs["buckets"] = args ? args.buckets : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secretKey"] = args ? args.secretKey : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["usedSpace"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectStorage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ObjectStorage resources.
 */
export interface ObjectStorageState {
    /**
     * The access key used to identify user. Can be set to an empty string, which will tell the provider to get the access key
     * from environment variable. The environment variable should be "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}". {name} is the
     * name given to object storage instance (so not the resource label), it should be all uppercased and all dashes (-) should
     * be replaced with underscores (_). For example, object storage named "my-files" would use environment variable named
     * "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES".
     */
    accessKey?: pulumi.Input<string>;
    buckets?: pulumi.Input<pulumi.Input<inputs.ObjectStorageBucket>[]>;
    created?: pulumi.Input<string>;
    /**
     * The description of the object storage instance to be created
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the object storage instance to be created
     */
    name?: pulumi.Input<string>;
    /**
     * The secret key used to authenticate user. Can be set to an empty string, which will tell the provider to get the secret
     * key from environment variable. The environment variable should be "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}". {name} is
     * the name given to object storage instance (so not the resource label), it should be all uppercased and all dashes (-)
     * should be replaced with underscores (_). For example, object storage named "my-files" would use environment variable
     * named "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES".
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The size of the object storage instance in gigabytes
     */
    size?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    usedSpace?: pulumi.Input<number>;
    /**
     * The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl
     * zone list`.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectStorage resource.
 */
export interface ObjectStorageArgs {
    /**
     * The access key used to identify user. Can be set to an empty string, which will tell the provider to get the access key
     * from environment variable. The environment variable should be "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}". {name} is the
     * name given to object storage instance (so not the resource label), it should be all uppercased and all dashes (-) should
     * be replaced with underscores (_). For example, object storage named "my-files" would use environment variable named
     * "UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES".
     */
    accessKey: pulumi.Input<string>;
    buckets?: pulumi.Input<pulumi.Input<inputs.ObjectStorageBucket>[]>;
    /**
     * The description of the object storage instance to be created
     */
    description: pulumi.Input<string>;
    /**
     * The name of the object storage instance to be created
     */
    name?: pulumi.Input<string>;
    /**
     * The secret key used to authenticate user. Can be set to an empty string, which will tell the provider to get the secret
     * key from environment variable. The environment variable should be "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}". {name} is
     * the name given to object storage instance (so not the resource label), it should be all uppercased and all dashes (-)
     * should be replaced with underscores (_). For example, object storage named "my-files" would use environment variable
     * named "UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES".
     */
    secretKey: pulumi.Input<string>;
    /**
     * The size of the object storage instance in gigabytes
     */
    size: pulumi.Input<number>;
    /**
     * The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl
     * zone list`.
     */
    zone: pulumi.Input<string>;
}
