// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Returns storage resource information based on defined arguments.
 *
 * Data object can be used to map storage to other resource based on the ID or just to read some other storage property like zone information.\
 * Storage types are: normal, backup, cdrom, template
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@pulumi/upcloud";
 *
 * const appImage = upcloud.getStorage({
 *     type: "template",
 *     nameRegex: "^app_image.*",
 *     mostRecent: true,
 * });
 * const example = new upcloud.Server("example", {
 *     hostname: "debian.example.tld",
 *     zone: "fi-hel1",
 *     networkInterfaces: [{
 *         type: "public",
 *     }],
 *     template: {
 *         storage: appImage.then(appImage => appImage.id),
 *     },
 * });
 * // Build only new servers with your latest custom image 
 * //
 * // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
 * const example2 = new upcloud.Server("example2", {
 *     hostname: "debian.example2.tld",
 *     zone: "fi-hel1",
 *     networkInterfaces: [{
 *         type: "public",
 *     }],
 *     template: {
 *         storage: appImage.then(appImage => appImage.id),
 *     },
 * });
 * ```
 */
export function getStorage(args: GetStorageArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("upcloud:index/getStorage:getStorage", {
        "accessType": args.accessType,
        "mostRecent": args.mostRecent,
        "name": args.name,
        "nameRegex": args.nameRegex,
        "type": args.type,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getStorage.
 */
export interface GetStorageArgs {
    accessType?: string;
    mostRecent?: boolean;
    name?: string;
    nameRegex?: string;
    type: string;
    zone?: string;
}

/**
 * A collection of values returned by getStorage.
 */
export interface GetStorageResult {
    readonly accessType: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly mostRecent?: boolean;
    readonly name?: string;
    readonly nameRegex?: string;
    readonly size: number;
    readonly state: string;
    readonly tier: string;
    readonly title: string;
    readonly type: string;
    readonly zone: string;
}
/**
 * Returns storage resource information based on defined arguments.
 *
 * Data object can be used to map storage to other resource based on the ID or just to read some other storage property like zone information.\
 * Storage types are: normal, backup, cdrom, template
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as upcloud from "@pulumi/upcloud";
 *
 * const appImage = upcloud.getStorage({
 *     type: "template",
 *     nameRegex: "^app_image.*",
 *     mostRecent: true,
 * });
 * const example = new upcloud.Server("example", {
 *     hostname: "debian.example.tld",
 *     zone: "fi-hel1",
 *     networkInterfaces: [{
 *         type: "public",
 *     }],
 *     template: {
 *         storage: appImage.then(appImage => appImage.id),
 *     },
 * });
 * // Build only new servers with your latest custom image 
 * //
 * // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
 * const example2 = new upcloud.Server("example2", {
 *     hostname: "debian.example2.tld",
 *     zone: "fi-hel1",
 *     networkInterfaces: [{
 *         type: "public",
 *     }],
 *     template: {
 *         storage: appImage.then(appImage => appImage.id),
 *     },
 * });
 * ```
 */
export function getStorageOutput(args: GetStorageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageResult> {
    return pulumi.output(args).apply((a: any) => getStorage(a, opts))
}

/**
 * A collection of arguments for invoking getStorage.
 */
export interface GetStorageOutputArgs {
    accessType?: pulumi.Input<string>;
    mostRecent?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nameRegex?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
