// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an on-demand storage backup.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := upcloud.NewStorageBackup(ctx, "backup_1", &upcloud.StorageBackupArgs{
//				Title:         pulumi.String("backup"),
//				SourceStorage: pulumi.String("01185ec5-1b0b-4cbc-a968-eb920ac7572d"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StorageBackup struct {
	pulumi.CustomResourceState

	// Timestamp of the backup creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Sets if the storage is encrypted at rest.
	Encrypt pulumi.BoolOutput `pulumi:"encrypt"`
	// User defined key-value pairs to classify the storage.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The size of the storage in gigabytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// The UUID of the storage to back up.
	SourceStorage pulumi.StringOutput `pulumi:"sourceStorage"`
	// System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore and can not be modified by the user.
	SystemLabels pulumi.StringMapOutput `pulumi:"systemLabels"`
	// The tier of the storage.
	Tier pulumi.StringOutput `pulumi:"tier"`
	// Title of the backup.
	Title pulumi.StringOutput `pulumi:"title"`
	// The type of the storage.
	Type pulumi.StringOutput `pulumi:"type"`
	// The zone the storage is in, e.g. `de-fra1`.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewStorageBackup registers a new resource with the given unique name, arguments, and options.
func NewStorageBackup(ctx *pulumi.Context,
	name string, args *StorageBackupArgs, opts ...pulumi.ResourceOption) (*StorageBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceStorage == nil {
		return nil, errors.New("invalid value for required argument 'SourceStorage'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StorageBackup
	err := ctx.RegisterResource("upcloud:index/storageBackup:StorageBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageBackup gets an existing StorageBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageBackupState, opts ...pulumi.ResourceOption) (*StorageBackup, error) {
	var resource StorageBackup
	err := ctx.ReadResource("upcloud:index/storageBackup:StorageBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageBackup resources.
type storageBackupState struct {
	// Timestamp of the backup creation.
	CreatedAt *string `pulumi:"createdAt"`
	// Sets if the storage is encrypted at rest.
	Encrypt *bool `pulumi:"encrypt"`
	// User defined key-value pairs to classify the storage.
	Labels map[string]string `pulumi:"labels"`
	// The size of the storage in gigabytes.
	Size *int `pulumi:"size"`
	// The UUID of the storage to back up.
	SourceStorage *string `pulumi:"sourceStorage"`
	// System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore and can not be modified by the user.
	SystemLabels map[string]string `pulumi:"systemLabels"`
	// The tier of the storage.
	Tier *string `pulumi:"tier"`
	// Title of the backup.
	Title *string `pulumi:"title"`
	// The type of the storage.
	Type *string `pulumi:"type"`
	// The zone the storage is in, e.g. `de-fra1`.
	Zone *string `pulumi:"zone"`
}

type StorageBackupState struct {
	// Timestamp of the backup creation.
	CreatedAt pulumi.StringPtrInput
	// Sets if the storage is encrypted at rest.
	Encrypt pulumi.BoolPtrInput
	// User defined key-value pairs to classify the storage.
	Labels pulumi.StringMapInput
	// The size of the storage in gigabytes.
	Size pulumi.IntPtrInput
	// The UUID of the storage to back up.
	SourceStorage pulumi.StringPtrInput
	// System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore and can not be modified by the user.
	SystemLabels pulumi.StringMapInput
	// The tier of the storage.
	Tier pulumi.StringPtrInput
	// Title of the backup.
	Title pulumi.StringPtrInput
	// The type of the storage.
	Type pulumi.StringPtrInput
	// The zone the storage is in, e.g. `de-fra1`.
	Zone pulumi.StringPtrInput
}

func (StorageBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageBackupState)(nil)).Elem()
}

type storageBackupArgs struct {
	// User defined key-value pairs to classify the storage.
	Labels map[string]string `pulumi:"labels"`
	// The UUID of the storage to back up.
	SourceStorage string `pulumi:"sourceStorage"`
	// Title of the backup.
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a StorageBackup resource.
type StorageBackupArgs struct {
	// User defined key-value pairs to classify the storage.
	Labels pulumi.StringMapInput
	// The UUID of the storage to back up.
	SourceStorage pulumi.StringInput
	// Title of the backup.
	Title pulumi.StringInput
}

func (StorageBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageBackupArgs)(nil)).Elem()
}

type StorageBackupInput interface {
	pulumi.Input

	ToStorageBackupOutput() StorageBackupOutput
	ToStorageBackupOutputWithContext(ctx context.Context) StorageBackupOutput
}

func (*StorageBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBackup)(nil)).Elem()
}

func (i *StorageBackup) ToStorageBackupOutput() StorageBackupOutput {
	return i.ToStorageBackupOutputWithContext(context.Background())
}

func (i *StorageBackup) ToStorageBackupOutputWithContext(ctx context.Context) StorageBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBackupOutput)
}

// StorageBackupArrayInput is an input type that accepts StorageBackupArray and StorageBackupArrayOutput values.
// You can construct a concrete instance of `StorageBackupArrayInput` via:
//
//	StorageBackupArray{ StorageBackupArgs{...} }
type StorageBackupArrayInput interface {
	pulumi.Input

	ToStorageBackupArrayOutput() StorageBackupArrayOutput
	ToStorageBackupArrayOutputWithContext(context.Context) StorageBackupArrayOutput
}

type StorageBackupArray []StorageBackupInput

func (StorageBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageBackup)(nil)).Elem()
}

func (i StorageBackupArray) ToStorageBackupArrayOutput() StorageBackupArrayOutput {
	return i.ToStorageBackupArrayOutputWithContext(context.Background())
}

func (i StorageBackupArray) ToStorageBackupArrayOutputWithContext(ctx context.Context) StorageBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBackupArrayOutput)
}

// StorageBackupMapInput is an input type that accepts StorageBackupMap and StorageBackupMapOutput values.
// You can construct a concrete instance of `StorageBackupMapInput` via:
//
//	StorageBackupMap{ "key": StorageBackupArgs{...} }
type StorageBackupMapInput interface {
	pulumi.Input

	ToStorageBackupMapOutput() StorageBackupMapOutput
	ToStorageBackupMapOutputWithContext(context.Context) StorageBackupMapOutput
}

type StorageBackupMap map[string]StorageBackupInput

func (StorageBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageBackup)(nil)).Elem()
}

func (i StorageBackupMap) ToStorageBackupMapOutput() StorageBackupMapOutput {
	return i.ToStorageBackupMapOutputWithContext(context.Background())
}

func (i StorageBackupMap) ToStorageBackupMapOutputWithContext(ctx context.Context) StorageBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBackupMapOutput)
}

type StorageBackupOutput struct{ *pulumi.OutputState }

func (StorageBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBackup)(nil)).Elem()
}

func (o StorageBackupOutput) ToStorageBackupOutput() StorageBackupOutput {
	return o
}

func (o StorageBackupOutput) ToStorageBackupOutputWithContext(ctx context.Context) StorageBackupOutput {
	return o
}

// Timestamp of the backup creation.
func (o StorageBackupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageBackup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Sets if the storage is encrypted at rest.
func (o StorageBackupOutput) Encrypt() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageBackup) pulumi.BoolOutput { return v.Encrypt }).(pulumi.BoolOutput)
}

// User defined key-value pairs to classify the storage.
func (o StorageBackupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StorageBackup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The size of the storage in gigabytes.
func (o StorageBackupOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *StorageBackup) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The UUID of the storage to back up.
func (o StorageBackupOutput) SourceStorage() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageBackup) pulumi.StringOutput { return v.SourceStorage }).(pulumi.StringOutput)
}

// System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore and can not be modified by the user.
func (o StorageBackupOutput) SystemLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StorageBackup) pulumi.StringMapOutput { return v.SystemLabels }).(pulumi.StringMapOutput)
}

// The tier of the storage.
func (o StorageBackupOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageBackup) pulumi.StringOutput { return v.Tier }).(pulumi.StringOutput)
}

// Title of the backup.
func (o StorageBackupOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageBackup) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The type of the storage.
func (o StorageBackupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageBackup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The zone the storage is in, e.g. `de-fra1`.
func (o StorageBackupOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageBackup) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type StorageBackupArrayOutput struct{ *pulumi.OutputState }

func (StorageBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageBackup)(nil)).Elem()
}

func (o StorageBackupArrayOutput) ToStorageBackupArrayOutput() StorageBackupArrayOutput {
	return o
}

func (o StorageBackupArrayOutput) ToStorageBackupArrayOutputWithContext(ctx context.Context) StorageBackupArrayOutput {
	return o
}

func (o StorageBackupArrayOutput) Index(i pulumi.IntInput) StorageBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StorageBackup {
		return vs[0].([]*StorageBackup)[vs[1].(int)]
	}).(StorageBackupOutput)
}

type StorageBackupMapOutput struct{ *pulumi.OutputState }

func (StorageBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageBackup)(nil)).Elem()
}

func (o StorageBackupMapOutput) ToStorageBackupMapOutput() StorageBackupMapOutput {
	return o
}

func (o StorageBackupMapOutput) ToStorageBackupMapOutputWithContext(ctx context.Context) StorageBackupMapOutput {
	return o
}

func (o StorageBackupMapOutput) MapIndex(k pulumi.StringInput) StorageBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StorageBackup {
		return vs[0].(map[string]*StorageBackup)[vs[1].(string)]
	}).(StorageBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageBackupInput)(nil)).Elem(), &StorageBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageBackupArrayInput)(nil)).Elem(), StorageBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageBackupMapInput)(nil)).Elem(), StorageBackupMap{})
	pulumi.RegisterOutputType(StorageBackupOutput{})
	pulumi.RegisterOutputType(StorageBackupArrayOutput{})
	pulumi.RegisterOutputType(StorageBackupMapOutput{})
}
