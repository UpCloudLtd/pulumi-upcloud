// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type GatewayConnectionTunnel struct {
	pulumi.CustomResourceState

	// ID of the GatewayConnection resource to which the tunnel belongs
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// Configuration for authenticating with pre-shared key
	IpsecAuthPsk GatewayConnectionTunnelIpsecAuthPskOutput `pulumi:"ipsecAuthPsk"`
	// IPsec configuration for the tunnel
	IpsecProperties GatewayConnectionTunnelIpsecPropertiesOutput `pulumi:"ipsecProperties"`
	// Public (UpCloud) endpoint address of this tunnel
	LocalAddressName pulumi.StringOutput `pulumi:"localAddressName"`
	// The name of the tunnel, should be unique within the connection
	Name pulumi.StringOutput `pulumi:"name"`
	// Tunnel's current operational, effective state
	OperationalState pulumi.StringOutput `pulumi:"operationalState"`
	// Remote public IP address of the tunnel
	RemoteAddress pulumi.StringOutput `pulumi:"remoteAddress"`
	// The UUID of the tunnel
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewGatewayConnectionTunnel registers a new resource with the given unique name, arguments, and options.
func NewGatewayConnectionTunnel(ctx *pulumi.Context,
	name string, args *GatewayConnectionTunnelArgs, opts ...pulumi.ResourceOption) (*GatewayConnectionTunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.IpsecAuthPsk == nil {
		return nil, errors.New("invalid value for required argument 'IpsecAuthPsk'")
	}
	if args.LocalAddressName == nil {
		return nil, errors.New("invalid value for required argument 'LocalAddressName'")
	}
	if args.RemoteAddress == nil {
		return nil, errors.New("invalid value for required argument 'RemoteAddress'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayConnectionTunnel
	err := ctx.RegisterResource("upcloud:index/gatewayConnectionTunnel:GatewayConnectionTunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayConnectionTunnel gets an existing GatewayConnectionTunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayConnectionTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayConnectionTunnelState, opts ...pulumi.ResourceOption) (*GatewayConnectionTunnel, error) {
	var resource GatewayConnectionTunnel
	err := ctx.ReadResource("upcloud:index/gatewayConnectionTunnel:GatewayConnectionTunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayConnectionTunnel resources.
type gatewayConnectionTunnelState struct {
	// ID of the GatewayConnection resource to which the tunnel belongs
	ConnectionId *string `pulumi:"connectionId"`
	// Configuration for authenticating with pre-shared key
	IpsecAuthPsk *GatewayConnectionTunnelIpsecAuthPsk `pulumi:"ipsecAuthPsk"`
	// IPsec configuration for the tunnel
	IpsecProperties *GatewayConnectionTunnelIpsecProperties `pulumi:"ipsecProperties"`
	// Public (UpCloud) endpoint address of this tunnel
	LocalAddressName *string `pulumi:"localAddressName"`
	// The name of the tunnel, should be unique within the connection
	Name *string `pulumi:"name"`
	// Tunnel's current operational, effective state
	OperationalState *string `pulumi:"operationalState"`
	// Remote public IP address of the tunnel
	RemoteAddress *string `pulumi:"remoteAddress"`
	// The UUID of the tunnel
	Uuid *string `pulumi:"uuid"`
}

type GatewayConnectionTunnelState struct {
	// ID of the GatewayConnection resource to which the tunnel belongs
	ConnectionId pulumi.StringPtrInput
	// Configuration for authenticating with pre-shared key
	IpsecAuthPsk GatewayConnectionTunnelIpsecAuthPskPtrInput
	// IPsec configuration for the tunnel
	IpsecProperties GatewayConnectionTunnelIpsecPropertiesPtrInput
	// Public (UpCloud) endpoint address of this tunnel
	LocalAddressName pulumi.StringPtrInput
	// The name of the tunnel, should be unique within the connection
	Name pulumi.StringPtrInput
	// Tunnel's current operational, effective state
	OperationalState pulumi.StringPtrInput
	// Remote public IP address of the tunnel
	RemoteAddress pulumi.StringPtrInput
	// The UUID of the tunnel
	Uuid pulumi.StringPtrInput
}

func (GatewayConnectionTunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayConnectionTunnelState)(nil)).Elem()
}

type gatewayConnectionTunnelArgs struct {
	// ID of the GatewayConnection resource to which the tunnel belongs
	ConnectionId string `pulumi:"connectionId"`
	// Configuration for authenticating with pre-shared key
	IpsecAuthPsk GatewayConnectionTunnelIpsecAuthPsk `pulumi:"ipsecAuthPsk"`
	// IPsec configuration for the tunnel
	IpsecProperties *GatewayConnectionTunnelIpsecProperties `pulumi:"ipsecProperties"`
	// Public (UpCloud) endpoint address of this tunnel
	LocalAddressName string `pulumi:"localAddressName"`
	// The name of the tunnel, should be unique within the connection
	Name *string `pulumi:"name"`
	// Remote public IP address of the tunnel
	RemoteAddress string `pulumi:"remoteAddress"`
}

// The set of arguments for constructing a GatewayConnectionTunnel resource.
type GatewayConnectionTunnelArgs struct {
	// ID of the GatewayConnection resource to which the tunnel belongs
	ConnectionId pulumi.StringInput
	// Configuration for authenticating with pre-shared key
	IpsecAuthPsk GatewayConnectionTunnelIpsecAuthPskInput
	// IPsec configuration for the tunnel
	IpsecProperties GatewayConnectionTunnelIpsecPropertiesPtrInput
	// Public (UpCloud) endpoint address of this tunnel
	LocalAddressName pulumi.StringInput
	// The name of the tunnel, should be unique within the connection
	Name pulumi.StringPtrInput
	// Remote public IP address of the tunnel
	RemoteAddress pulumi.StringInput
}

func (GatewayConnectionTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayConnectionTunnelArgs)(nil)).Elem()
}

type GatewayConnectionTunnelInput interface {
	pulumi.Input

	ToGatewayConnectionTunnelOutput() GatewayConnectionTunnelOutput
	ToGatewayConnectionTunnelOutputWithContext(ctx context.Context) GatewayConnectionTunnelOutput
}

func (*GatewayConnectionTunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayConnectionTunnel)(nil)).Elem()
}

func (i *GatewayConnectionTunnel) ToGatewayConnectionTunnelOutput() GatewayConnectionTunnelOutput {
	return i.ToGatewayConnectionTunnelOutputWithContext(context.Background())
}

func (i *GatewayConnectionTunnel) ToGatewayConnectionTunnelOutputWithContext(ctx context.Context) GatewayConnectionTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayConnectionTunnelOutput)
}

// GatewayConnectionTunnelArrayInput is an input type that accepts GatewayConnectionTunnelArray and GatewayConnectionTunnelArrayOutput values.
// You can construct a concrete instance of `GatewayConnectionTunnelArrayInput` via:
//
//	GatewayConnectionTunnelArray{ GatewayConnectionTunnelArgs{...} }
type GatewayConnectionTunnelArrayInput interface {
	pulumi.Input

	ToGatewayConnectionTunnelArrayOutput() GatewayConnectionTunnelArrayOutput
	ToGatewayConnectionTunnelArrayOutputWithContext(context.Context) GatewayConnectionTunnelArrayOutput
}

type GatewayConnectionTunnelArray []GatewayConnectionTunnelInput

func (GatewayConnectionTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayConnectionTunnel)(nil)).Elem()
}

func (i GatewayConnectionTunnelArray) ToGatewayConnectionTunnelArrayOutput() GatewayConnectionTunnelArrayOutput {
	return i.ToGatewayConnectionTunnelArrayOutputWithContext(context.Background())
}

func (i GatewayConnectionTunnelArray) ToGatewayConnectionTunnelArrayOutputWithContext(ctx context.Context) GatewayConnectionTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayConnectionTunnelArrayOutput)
}

// GatewayConnectionTunnelMapInput is an input type that accepts GatewayConnectionTunnelMap and GatewayConnectionTunnelMapOutput values.
// You can construct a concrete instance of `GatewayConnectionTunnelMapInput` via:
//
//	GatewayConnectionTunnelMap{ "key": GatewayConnectionTunnelArgs{...} }
type GatewayConnectionTunnelMapInput interface {
	pulumi.Input

	ToGatewayConnectionTunnelMapOutput() GatewayConnectionTunnelMapOutput
	ToGatewayConnectionTunnelMapOutputWithContext(context.Context) GatewayConnectionTunnelMapOutput
}

type GatewayConnectionTunnelMap map[string]GatewayConnectionTunnelInput

func (GatewayConnectionTunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayConnectionTunnel)(nil)).Elem()
}

func (i GatewayConnectionTunnelMap) ToGatewayConnectionTunnelMapOutput() GatewayConnectionTunnelMapOutput {
	return i.ToGatewayConnectionTunnelMapOutputWithContext(context.Background())
}

func (i GatewayConnectionTunnelMap) ToGatewayConnectionTunnelMapOutputWithContext(ctx context.Context) GatewayConnectionTunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayConnectionTunnelMapOutput)
}

type GatewayConnectionTunnelOutput struct{ *pulumi.OutputState }

func (GatewayConnectionTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayConnectionTunnel)(nil)).Elem()
}

func (o GatewayConnectionTunnelOutput) ToGatewayConnectionTunnelOutput() GatewayConnectionTunnelOutput {
	return o
}

func (o GatewayConnectionTunnelOutput) ToGatewayConnectionTunnelOutputWithContext(ctx context.Context) GatewayConnectionTunnelOutput {
	return o
}

// ID of the GatewayConnection resource to which the tunnel belongs
func (o GatewayConnectionTunnelOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayConnectionTunnel) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// Configuration for authenticating with pre-shared key
func (o GatewayConnectionTunnelOutput) IpsecAuthPsk() GatewayConnectionTunnelIpsecAuthPskOutput {
	return o.ApplyT(func(v *GatewayConnectionTunnel) GatewayConnectionTunnelIpsecAuthPskOutput { return v.IpsecAuthPsk }).(GatewayConnectionTunnelIpsecAuthPskOutput)
}

// IPsec configuration for the tunnel
func (o GatewayConnectionTunnelOutput) IpsecProperties() GatewayConnectionTunnelIpsecPropertiesOutput {
	return o.ApplyT(func(v *GatewayConnectionTunnel) GatewayConnectionTunnelIpsecPropertiesOutput {
		return v.IpsecProperties
	}).(GatewayConnectionTunnelIpsecPropertiesOutput)
}

// Public (UpCloud) endpoint address of this tunnel
func (o GatewayConnectionTunnelOutput) LocalAddressName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayConnectionTunnel) pulumi.StringOutput { return v.LocalAddressName }).(pulumi.StringOutput)
}

// The name of the tunnel, should be unique within the connection
func (o GatewayConnectionTunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayConnectionTunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Tunnel's current operational, effective state
func (o GatewayConnectionTunnelOutput) OperationalState() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayConnectionTunnel) pulumi.StringOutput { return v.OperationalState }).(pulumi.StringOutput)
}

// Remote public IP address of the tunnel
func (o GatewayConnectionTunnelOutput) RemoteAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayConnectionTunnel) pulumi.StringOutput { return v.RemoteAddress }).(pulumi.StringOutput)
}

// The UUID of the tunnel
func (o GatewayConnectionTunnelOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayConnectionTunnel) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type GatewayConnectionTunnelArrayOutput struct{ *pulumi.OutputState }

func (GatewayConnectionTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayConnectionTunnel)(nil)).Elem()
}

func (o GatewayConnectionTunnelArrayOutput) ToGatewayConnectionTunnelArrayOutput() GatewayConnectionTunnelArrayOutput {
	return o
}

func (o GatewayConnectionTunnelArrayOutput) ToGatewayConnectionTunnelArrayOutputWithContext(ctx context.Context) GatewayConnectionTunnelArrayOutput {
	return o
}

func (o GatewayConnectionTunnelArrayOutput) Index(i pulumi.IntInput) GatewayConnectionTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayConnectionTunnel {
		return vs[0].([]*GatewayConnectionTunnel)[vs[1].(int)]
	}).(GatewayConnectionTunnelOutput)
}

type GatewayConnectionTunnelMapOutput struct{ *pulumi.OutputState }

func (GatewayConnectionTunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayConnectionTunnel)(nil)).Elem()
}

func (o GatewayConnectionTunnelMapOutput) ToGatewayConnectionTunnelMapOutput() GatewayConnectionTunnelMapOutput {
	return o
}

func (o GatewayConnectionTunnelMapOutput) ToGatewayConnectionTunnelMapOutputWithContext(ctx context.Context) GatewayConnectionTunnelMapOutput {
	return o
}

func (o GatewayConnectionTunnelMapOutput) MapIndex(k pulumi.StringInput) GatewayConnectionTunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayConnectionTunnel {
		return vs[0].(map[string]*GatewayConnectionTunnel)[vs[1].(string)]
	}).(GatewayConnectionTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayConnectionTunnelInput)(nil)).Elem(), &GatewayConnectionTunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayConnectionTunnelArrayInput)(nil)).Elem(), GatewayConnectionTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayConnectionTunnelMapInput)(nil)).Elem(), GatewayConnectionTunnelMap{})
	pulumi.RegisterOutputType(GatewayConnectionTunnelOutput{})
	pulumi.RegisterOutputType(GatewayConnectionTunnelArrayOutput{})
	pulumi.RegisterOutputType(GatewayConnectionTunnelMapOutput{})
}
