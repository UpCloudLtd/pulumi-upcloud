// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"fmt"

	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "upcloud:index/floatingIpAddress:FloatingIpAddress":
		r = &FloatingIpAddress{}
	case "upcloud:index/gateway:Gateway":
		r = &Gateway{}
	case "upcloud:index/gatewayConnection:GatewayConnection":
		r = &GatewayConnection{}
	case "upcloud:index/gatewayConnectionTunnel:GatewayConnectionTunnel":
		r = &GatewayConnectionTunnel{}
	case "upcloud:index/kubernetesCluster:KubernetesCluster":
		r = &KubernetesCluster{}
	case "upcloud:index/kubernetesNodeGroup:KubernetesNodeGroup":
		r = &KubernetesNodeGroup{}
	case "upcloud:index/loadbalancer:Loadbalancer":
		r = &Loadbalancer{}
	case "upcloud:index/loadbalancerBackend:LoadbalancerBackend":
		r = &LoadbalancerBackend{}
	case "upcloud:index/loadbalancerBackendTlsConfig:LoadbalancerBackendTlsConfig":
		r = &LoadbalancerBackendTlsConfig{}
	case "upcloud:index/loadbalancerDynamicBackendMember:LoadbalancerDynamicBackendMember":
		r = &LoadbalancerDynamicBackendMember{}
	case "upcloud:index/loadbalancerDynamicCertificateBundle:LoadbalancerDynamicCertificateBundle":
		r = &LoadbalancerDynamicCertificateBundle{}
	case "upcloud:index/loadbalancerFrontend:LoadbalancerFrontend":
		r = &LoadbalancerFrontend{}
	case "upcloud:index/loadbalancerFrontendRule:LoadbalancerFrontendRule":
		r = &LoadbalancerFrontendRule{}
	case "upcloud:index/loadbalancerFrontendTlsConfig:LoadbalancerFrontendTlsConfig":
		r = &LoadbalancerFrontendTlsConfig{}
	case "upcloud:index/loadbalancerManualCertificateBundle:LoadbalancerManualCertificateBundle":
		r = &LoadbalancerManualCertificateBundle{}
	case "upcloud:index/loadbalancerResolver:LoadbalancerResolver":
		r = &LoadbalancerResolver{}
	case "upcloud:index/loadbalancerStaticBackendMember:LoadbalancerStaticBackendMember":
		r = &LoadbalancerStaticBackendMember{}
	case "upcloud:index/managedDatabaseLogicalDatabase:ManagedDatabaseLogicalDatabase":
		r = &ManagedDatabaseLogicalDatabase{}
	case "upcloud:index/managedDatabaseMysql:ManagedDatabaseMysql":
		r = &ManagedDatabaseMysql{}
	case "upcloud:index/managedDatabaseOpensearch:ManagedDatabaseOpensearch":
		r = &ManagedDatabaseOpensearch{}
	case "upcloud:index/managedDatabasePostgresql:ManagedDatabasePostgresql":
		r = &ManagedDatabasePostgresql{}
	case "upcloud:index/managedDatabaseRedis:ManagedDatabaseRedis":
		r = &ManagedDatabaseRedis{}
	case "upcloud:index/managedDatabaseUser:ManagedDatabaseUser":
		r = &ManagedDatabaseUser{}
	case "upcloud:index/managedObjectStorage:ManagedObjectStorage":
		r = &ManagedObjectStorage{}
	case "upcloud:index/managedObjectStorageCustomDomain:ManagedObjectStorageCustomDomain":
		r = &ManagedObjectStorageCustomDomain{}
	case "upcloud:index/managedObjectStoragePolicy:ManagedObjectStoragePolicy":
		r = &ManagedObjectStoragePolicy{}
	case "upcloud:index/managedObjectStorageUser:ManagedObjectStorageUser":
		r = &ManagedObjectStorageUser{}
	case "upcloud:index/managedObjectStorageUserAccessKey:ManagedObjectStorageUserAccessKey":
		r = &ManagedObjectStorageUserAccessKey{}
	case "upcloud:index/managedObjectStorageUserPolicy:ManagedObjectStorageUserPolicy":
		r = &ManagedObjectStorageUserPolicy{}
	case "upcloud:index/network:Network":
		r = &Network{}
	case "upcloud:index/networkPeering:NetworkPeering":
		r = &NetworkPeering{}
	case "upcloud:index/objectStorage:ObjectStorage":
		r = &ObjectStorage{}
	case "upcloud:index/router:Router":
		r = &Router{}
	case "upcloud:index/server:Server":
		r = &Server{}
	case "upcloud:index/serverFirewallRules:ServerFirewallRules":
		r = &ServerFirewallRules{}
	case "upcloud:index/serverGroup:ServerGroup":
		r = &ServerGroup{}
	case "upcloud:index/storage:Storage":
		r = &Storage{}
	case "upcloud:index/storageTemplate:StorageTemplate":
		r = &StorageTemplate{}
	case "upcloud:index/tag:Tag":
		r = &Tag{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:upcloud" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/floatingIpAddress",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/gateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/gatewayConnection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/gatewayConnectionTunnel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/kubernetesCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/kubernetesNodeGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancerBackend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancerBackendTlsConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancerDynamicBackendMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancerDynamicCertificateBundle",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancerFrontend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancerFrontendRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancerFrontendTlsConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancerManualCertificateBundle",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancerResolver",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/loadbalancerStaticBackendMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedDatabaseLogicalDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedDatabaseMysql",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedDatabaseOpensearch",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedDatabasePostgresql",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedDatabaseRedis",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedDatabaseUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedObjectStorage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedObjectStorageCustomDomain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedObjectStoragePolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedObjectStorageUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedObjectStorageUserAccessKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/managedObjectStorageUserPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/network",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/networkPeering",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/objectStorage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/router",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/server",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/serverFirewallRules",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/serverGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/storage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/storageTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"upcloud",
		"index/tag",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"upcloud",
		&pkg{version},
	)
}
