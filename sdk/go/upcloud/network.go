// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents an SDN private network that cloud servers and other resources from the same zone can be attached to.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleRouter, err := upcloud.NewRouter(ctx, "exampleRouter", nil)
//			if err != nil {
//				return err
//			}
//			// SDN network with a router
//			_, err = upcloud.NewNetwork(ctx, "exampleNetwork", &upcloud.NetworkArgs{
//				Zone:   pulumi.String("nl-ams1"),
//				Router: exampleRouter.ID(),
//				IpNetwork: &upcloud.NetworkIpNetworkArgs{
//					Address:          pulumi.String("10.0.0.0/24"),
//					Dhcp:             pulumi.Bool(true),
//					DhcpDefaultRoute: pulumi.Bool(false),
//					Family:           pulumi.String("IPv4"),
//					Gateway:          pulumi.String("10.0.0.1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import upcloud:index/network:Network my_example_network 03e44422-07b8-4798-a597-c8eab1fa64df
// ```
type Network struct {
	pulumi.CustomResourceState

	// IP subnet within the network. Network must have exactly one IP subnet.
	IpNetwork NetworkIpNetworkOutput `pulumi:"ipNetwork"`
	// Key-value pairs to classify the network.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the network.
	Name pulumi.StringOutput `pulumi:"name"`
	// UUID of a router to attach to this network.
	Router pulumi.StringPtrOutput `pulumi:"router"`
	// The network type
	Type pulumi.StringOutput `pulumi:"type"`
	// The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpNetwork == nil {
		return nil, errors.New("invalid value for required argument 'IpNetwork'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Network
	err := ctx.RegisterResource("upcloud:index/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("upcloud:index/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	// IP subnet within the network. Network must have exactly one IP subnet.
	IpNetwork *NetworkIpNetwork `pulumi:"ipNetwork"`
	// Key-value pairs to classify the network.
	Labels map[string]string `pulumi:"labels"`
	// Name of the network.
	Name *string `pulumi:"name"`
	// UUID of a router to attach to this network.
	Router *string `pulumi:"router"`
	// The network type
	Type *string `pulumi:"type"`
	// The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `pulumi:"zone"`
}

type NetworkState struct {
	// IP subnet within the network. Network must have exactly one IP subnet.
	IpNetwork NetworkIpNetworkPtrInput
	// Key-value pairs to classify the network.
	Labels pulumi.StringMapInput
	// Name of the network.
	Name pulumi.StringPtrInput
	// UUID of a router to attach to this network.
	Router pulumi.StringPtrInput
	// The network type
	Type pulumi.StringPtrInput
	// The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringPtrInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// IP subnet within the network. Network must have exactly one IP subnet.
	IpNetwork NetworkIpNetwork `pulumi:"ipNetwork"`
	// Key-value pairs to classify the network.
	Labels map[string]string `pulumi:"labels"`
	// Name of the network.
	Name *string `pulumi:"name"`
	// UUID of a router to attach to this network.
	Router *string `pulumi:"router"`
	// The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// IP subnet within the network. Network must have exactly one IP subnet.
	IpNetwork NetworkIpNetworkInput
	// Key-value pairs to classify the network.
	Labels pulumi.StringMapInput
	// Name of the network.
	Name pulumi.StringPtrInput
	// UUID of a router to attach to this network.
	Router pulumi.StringPtrInput
	// The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//	NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//	NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

// IP subnet within the network. Network must have exactly one IP subnet.
func (o NetworkOutput) IpNetwork() NetworkIpNetworkOutput {
	return o.ApplyT(func(v *Network) NetworkIpNetworkOutput { return v.IpNetwork }).(NetworkIpNetworkOutput)
}

// Key-value pairs to classify the network.
func (o NetworkOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Network) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the network.
func (o NetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// UUID of a router to attach to this network.
func (o NetworkOutput) Router() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Router }).(pulumi.StringPtrOutput)
}

// The network type
func (o NetworkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
func (o NetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}
