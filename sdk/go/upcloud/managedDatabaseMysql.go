// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents MySQL managed database. See UpCloud [Managed Databases](https://upcloud.com/products/managed-databases) product page for more details about the service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Minimal config
//			_, err := upcloud.NewManagedDatabaseMysql(ctx, "example_1", &upcloud.ManagedDatabaseMysqlArgs{
//				Name:  pulumi.String("mysql-1"),
//				Title: pulumi.String("mysql-1-example-1"),
//				Plan:  pulumi.String("1x1xCPU-2GB-25GB"),
//				Zone:  pulumi.String("fi-hel1"),
//			})
//			if err != nil {
//				return err
//			}
//			// Shutdown instance after creation
//			_, err = upcloud.NewManagedDatabaseMysql(ctx, "example_2", &upcloud.ManagedDatabaseMysqlArgs{
//				Name:    pulumi.String("mysql-2"),
//				Title:   pulumi.String("mysql-2-example-2"),
//				Plan:    pulumi.String("1x1xCPU-2GB-25GB"),
//				Zone:    pulumi.String("fi-hel1"),
//				Powered: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// Service with custom properties
//			// Note that this basically sets strict mode off which is not normally recommended
//			_, err = upcloud.NewManagedDatabaseMysql(ctx, "example_3", &upcloud.ManagedDatabaseMysqlArgs{
//				Name:  pulumi.String("mysql-3"),
//				Title: pulumi.String("mysql-3-example-3"),
//				Plan:  pulumi.String("1x1xCPU-2GB-25GB"),
//				Zone:  pulumi.String("fi-hel1"),
//				Properties: &upcloud.ManagedDatabaseMysqlPropertiesArgs{
//					SqlMode:          pulumi.String("NO_ENGINE_SUBSTITUTION"),
//					WaitTimeout:      pulumi.Int(300),
//					SortBufferSize:   pulumi.Int(4000000),
//					MaxAllowedPacket: pulumi.Int(16000000),
//					AdminUsername:    pulumi.String("admin"),
//					AdminPassword:    pulumi.String("<ADMIN_PASSWORD>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ManagedDatabaseMysql struct {
	pulumi.CustomResourceState

	// Service component information
	Components ManagedDatabaseMysqlComponentArrayOutput `pulumi:"components"`
	// User defined key-value pairs to classify the managed database.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow pulumi.StringOutput `pulumi:"maintenanceWindowDow"`
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime pulumi.StringOutput `pulumi:"maintenanceWindowTime"`
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name pulumi.StringOutput `pulumi:"name"`
	// Private networks attached to the managed database
	Networks ManagedDatabaseMysqlNetworkArrayOutput `pulumi:"networks"`
	// Information about nodes providing the managed service
	NodeStates ManagedDatabaseMysqlNodeStateArrayOutput `pulumi:"nodeStates"`
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The administrative power state of the service
	Powered pulumi.BoolPtrOutput `pulumi:"powered"`
	// Primary database name
	PrimaryDatabase pulumi.StringOutput `pulumi:"primaryDatabase"`
	// Database Engine properties for MySQL
	Properties ManagedDatabaseMysqlPropertiesOutput `pulumi:"properties"`
	// Hostname to the service instance
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Primary username's password to the service instance
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// Port to the service instance
	ServicePort pulumi.StringOutput `pulumi:"servicePort"`
	// URI to the service instance
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Primary username to the service instance
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// State of the service
	State pulumi.StringOutput `pulumi:"state"`
	// If set to true, prevents the managed service from being powered off, or deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// Title of a managed database instance
	Title pulumi.StringOutput `pulumi:"title"`
	// Type of the service
	Type pulumi.StringOutput `pulumi:"type"`
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewManagedDatabaseMysql registers a new resource with the given unique name, arguments, and options.
func NewManagedDatabaseMysql(ctx *pulumi.Context,
	name string, args *ManagedDatabaseMysqlArgs, opts ...pulumi.ResourceOption) (*ManagedDatabaseMysql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"servicePassword",
		"serviceUri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedDatabaseMysql
	err := ctx.RegisterResource("upcloud:index/managedDatabaseMysql:ManagedDatabaseMysql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedDatabaseMysql gets an existing ManagedDatabaseMysql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedDatabaseMysql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedDatabaseMysqlState, opts ...pulumi.ResourceOption) (*ManagedDatabaseMysql, error) {
	var resource ManagedDatabaseMysql
	err := ctx.ReadResource("upcloud:index/managedDatabaseMysql:ManagedDatabaseMysql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedDatabaseMysql resources.
type managedDatabaseMysqlState struct {
	// Service component information
	Components []ManagedDatabaseMysqlComponent `pulumi:"components"`
	// User defined key-value pairs to classify the managed database.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `pulumi:"name"`
	// Private networks attached to the managed database
	Networks []ManagedDatabaseMysqlNetwork `pulumi:"networks"`
	// Information about nodes providing the managed service
	NodeStates []ManagedDatabaseMysqlNodeState `pulumi:"nodeStates"`
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan *string `pulumi:"plan"`
	// The administrative power state of the service
	Powered *bool `pulumi:"powered"`
	// Primary database name
	PrimaryDatabase *string `pulumi:"primaryDatabase"`
	// Database Engine properties for MySQL
	Properties *ManagedDatabaseMysqlProperties `pulumi:"properties"`
	// Hostname to the service instance
	ServiceHost *string `pulumi:"serviceHost"`
	// Primary username's password to the service instance
	ServicePassword *string `pulumi:"servicePassword"`
	// Port to the service instance
	ServicePort *string `pulumi:"servicePort"`
	// URI to the service instance
	ServiceUri *string `pulumi:"serviceUri"`
	// Primary username to the service instance
	ServiceUsername *string `pulumi:"serviceUsername"`
	// State of the service
	State *string `pulumi:"state"`
	// If set to true, prevents the managed service from being powered off, or deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Title of a managed database instance
	Title *string `pulumi:"title"`
	// Type of the service
	Type *string `pulumi:"type"`
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `pulumi:"zone"`
}

type ManagedDatabaseMysqlState struct {
	// Service component information
	Components ManagedDatabaseMysqlComponentArrayInput
	// User defined key-value pairs to classify the managed database.
	Labels pulumi.StringMapInput
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow pulumi.StringPtrInput
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime pulumi.StringPtrInput
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name pulumi.StringPtrInput
	// Private networks attached to the managed database
	Networks ManagedDatabaseMysqlNetworkArrayInput
	// Information about nodes providing the managed service
	NodeStates ManagedDatabaseMysqlNodeStateArrayInput
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan pulumi.StringPtrInput
	// The administrative power state of the service
	Powered pulumi.BoolPtrInput
	// Primary database name
	PrimaryDatabase pulumi.StringPtrInput
	// Database Engine properties for MySQL
	Properties ManagedDatabaseMysqlPropertiesPtrInput
	// Hostname to the service instance
	ServiceHost pulumi.StringPtrInput
	// Primary username's password to the service instance
	ServicePassword pulumi.StringPtrInput
	// Port to the service instance
	ServicePort pulumi.StringPtrInput
	// URI to the service instance
	ServiceUri pulumi.StringPtrInput
	// Primary username to the service instance
	ServiceUsername pulumi.StringPtrInput
	// State of the service
	State pulumi.StringPtrInput
	// If set to true, prevents the managed service from being powered off, or deleted.
	TerminationProtection pulumi.BoolPtrInput
	// Title of a managed database instance
	Title pulumi.StringPtrInput
	// Type of the service
	Type pulumi.StringPtrInput
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringPtrInput
}

func (ManagedDatabaseMysqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseMysqlState)(nil)).Elem()
}

type managedDatabaseMysqlArgs struct {
	// User defined key-value pairs to classify the managed database.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `pulumi:"name"`
	// Private networks attached to the managed database
	Networks []ManagedDatabaseMysqlNetwork `pulumi:"networks"`
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan string `pulumi:"plan"`
	// The administrative power state of the service
	Powered *bool `pulumi:"powered"`
	// Database Engine properties for MySQL
	Properties *ManagedDatabaseMysqlProperties `pulumi:"properties"`
	// If set to true, prevents the managed service from being powered off, or deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Title of a managed database instance
	Title string `pulumi:"title"`
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a ManagedDatabaseMysql resource.
type ManagedDatabaseMysqlArgs struct {
	// User defined key-value pairs to classify the managed database.
	Labels pulumi.StringMapInput
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow pulumi.StringPtrInput
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime pulumi.StringPtrInput
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name pulumi.StringPtrInput
	// Private networks attached to the managed database
	Networks ManagedDatabaseMysqlNetworkArrayInput
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
	Plan pulumi.StringInput
	// The administrative power state of the service
	Powered pulumi.BoolPtrInput
	// Database Engine properties for MySQL
	Properties ManagedDatabaseMysqlPropertiesPtrInput
	// If set to true, prevents the managed service from being powered off, or deleted.
	TerminationProtection pulumi.BoolPtrInput
	// Title of a managed database instance
	Title pulumi.StringInput
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringInput
}

func (ManagedDatabaseMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseMysqlArgs)(nil)).Elem()
}

type ManagedDatabaseMysqlInput interface {
	pulumi.Input

	ToManagedDatabaseMysqlOutput() ManagedDatabaseMysqlOutput
	ToManagedDatabaseMysqlOutputWithContext(ctx context.Context) ManagedDatabaseMysqlOutput
}

func (*ManagedDatabaseMysql) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDatabaseMysql)(nil)).Elem()
}

func (i *ManagedDatabaseMysql) ToManagedDatabaseMysqlOutput() ManagedDatabaseMysqlOutput {
	return i.ToManagedDatabaseMysqlOutputWithContext(context.Background())
}

func (i *ManagedDatabaseMysql) ToManagedDatabaseMysqlOutputWithContext(ctx context.Context) ManagedDatabaseMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseMysqlOutput)
}

// ManagedDatabaseMysqlArrayInput is an input type that accepts ManagedDatabaseMysqlArray and ManagedDatabaseMysqlArrayOutput values.
// You can construct a concrete instance of `ManagedDatabaseMysqlArrayInput` via:
//
//	ManagedDatabaseMysqlArray{ ManagedDatabaseMysqlArgs{...} }
type ManagedDatabaseMysqlArrayInput interface {
	pulumi.Input

	ToManagedDatabaseMysqlArrayOutput() ManagedDatabaseMysqlArrayOutput
	ToManagedDatabaseMysqlArrayOutputWithContext(context.Context) ManagedDatabaseMysqlArrayOutput
}

type ManagedDatabaseMysqlArray []ManagedDatabaseMysqlInput

func (ManagedDatabaseMysqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedDatabaseMysql)(nil)).Elem()
}

func (i ManagedDatabaseMysqlArray) ToManagedDatabaseMysqlArrayOutput() ManagedDatabaseMysqlArrayOutput {
	return i.ToManagedDatabaseMysqlArrayOutputWithContext(context.Background())
}

func (i ManagedDatabaseMysqlArray) ToManagedDatabaseMysqlArrayOutputWithContext(ctx context.Context) ManagedDatabaseMysqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseMysqlArrayOutput)
}

// ManagedDatabaseMysqlMapInput is an input type that accepts ManagedDatabaseMysqlMap and ManagedDatabaseMysqlMapOutput values.
// You can construct a concrete instance of `ManagedDatabaseMysqlMapInput` via:
//
//	ManagedDatabaseMysqlMap{ "key": ManagedDatabaseMysqlArgs{...} }
type ManagedDatabaseMysqlMapInput interface {
	pulumi.Input

	ToManagedDatabaseMysqlMapOutput() ManagedDatabaseMysqlMapOutput
	ToManagedDatabaseMysqlMapOutputWithContext(context.Context) ManagedDatabaseMysqlMapOutput
}

type ManagedDatabaseMysqlMap map[string]ManagedDatabaseMysqlInput

func (ManagedDatabaseMysqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedDatabaseMysql)(nil)).Elem()
}

func (i ManagedDatabaseMysqlMap) ToManagedDatabaseMysqlMapOutput() ManagedDatabaseMysqlMapOutput {
	return i.ToManagedDatabaseMysqlMapOutputWithContext(context.Background())
}

func (i ManagedDatabaseMysqlMap) ToManagedDatabaseMysqlMapOutputWithContext(ctx context.Context) ManagedDatabaseMysqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseMysqlMapOutput)
}

type ManagedDatabaseMysqlOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDatabaseMysql)(nil)).Elem()
}

func (o ManagedDatabaseMysqlOutput) ToManagedDatabaseMysqlOutput() ManagedDatabaseMysqlOutput {
	return o
}

func (o ManagedDatabaseMysqlOutput) ToManagedDatabaseMysqlOutputWithContext(ctx context.Context) ManagedDatabaseMysqlOutput {
	return o
}

// Service component information
func (o ManagedDatabaseMysqlOutput) Components() ManagedDatabaseMysqlComponentArrayOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) ManagedDatabaseMysqlComponentArrayOutput { return v.Components }).(ManagedDatabaseMysqlComponentArrayOutput)
}

// User defined key-value pairs to classify the managed database.
func (o ManagedDatabaseMysqlOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
func (o ManagedDatabaseMysqlOutput) MaintenanceWindowDow() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.MaintenanceWindowDow }).(pulumi.StringOutput)
}

// Maintenance window UTC time in hh:mm:ss format
func (o ManagedDatabaseMysqlOutput) MaintenanceWindowTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.MaintenanceWindowTime }).(pulumi.StringOutput)
}

// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
func (o ManagedDatabaseMysqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Private networks attached to the managed database
func (o ManagedDatabaseMysqlOutput) Networks() ManagedDatabaseMysqlNetworkArrayOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) ManagedDatabaseMysqlNetworkArrayOutput { return v.Networks }).(ManagedDatabaseMysqlNetworkArrayOutput)
}

// Information about nodes providing the managed service
func (o ManagedDatabaseMysqlOutput) NodeStates() ManagedDatabaseMysqlNodeStateArrayOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) ManagedDatabaseMysqlNodeStateArrayOutput { return v.NodeStates }).(ManagedDatabaseMysqlNodeStateArrayOutput)
}

// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans <type>`.
func (o ManagedDatabaseMysqlOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// The administrative power state of the service
func (o ManagedDatabaseMysqlOutput) Powered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.BoolPtrOutput { return v.Powered }).(pulumi.BoolPtrOutput)
}

// Primary database name
func (o ManagedDatabaseMysqlOutput) PrimaryDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.PrimaryDatabase }).(pulumi.StringOutput)
}

// Database Engine properties for MySQL
func (o ManagedDatabaseMysqlOutput) Properties() ManagedDatabaseMysqlPropertiesOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) ManagedDatabaseMysqlPropertiesOutput { return v.Properties }).(ManagedDatabaseMysqlPropertiesOutput)
}

// Hostname to the service instance
func (o ManagedDatabaseMysqlOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.ServiceHost }).(pulumi.StringOutput)
}

// Primary username's password to the service instance
func (o ManagedDatabaseMysqlOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

// Port to the service instance
func (o ManagedDatabaseMysqlOutput) ServicePort() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.ServicePort }).(pulumi.StringOutput)
}

// URI to the service instance
func (o ManagedDatabaseMysqlOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.ServiceUri }).(pulumi.StringOutput)
}

// Primary username to the service instance
func (o ManagedDatabaseMysqlOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.ServiceUsername }).(pulumi.StringOutput)
}

// State of the service
func (o ManagedDatabaseMysqlOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// If set to true, prevents the managed service from being powered off, or deleted.
func (o ManagedDatabaseMysqlOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// Title of a managed database instance
func (o ManagedDatabaseMysqlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Type of the service
func (o ManagedDatabaseMysqlOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
func (o ManagedDatabaseMysqlOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseMysql) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ManagedDatabaseMysqlArrayOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseMysqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedDatabaseMysql)(nil)).Elem()
}

func (o ManagedDatabaseMysqlArrayOutput) ToManagedDatabaseMysqlArrayOutput() ManagedDatabaseMysqlArrayOutput {
	return o
}

func (o ManagedDatabaseMysqlArrayOutput) ToManagedDatabaseMysqlArrayOutputWithContext(ctx context.Context) ManagedDatabaseMysqlArrayOutput {
	return o
}

func (o ManagedDatabaseMysqlArrayOutput) Index(i pulumi.IntInput) ManagedDatabaseMysqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedDatabaseMysql {
		return vs[0].([]*ManagedDatabaseMysql)[vs[1].(int)]
	}).(ManagedDatabaseMysqlOutput)
}

type ManagedDatabaseMysqlMapOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseMysqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedDatabaseMysql)(nil)).Elem()
}

func (o ManagedDatabaseMysqlMapOutput) ToManagedDatabaseMysqlMapOutput() ManagedDatabaseMysqlMapOutput {
	return o
}

func (o ManagedDatabaseMysqlMapOutput) ToManagedDatabaseMysqlMapOutputWithContext(ctx context.Context) ManagedDatabaseMysqlMapOutput {
	return o
}

func (o ManagedDatabaseMysqlMapOutput) MapIndex(k pulumi.StringInput) ManagedDatabaseMysqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedDatabaseMysql {
		return vs[0].(map[string]*ManagedDatabaseMysql)[vs[1].(string)]
	}).(ManagedDatabaseMysqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseMysqlInput)(nil)).Elem(), &ManagedDatabaseMysql{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseMysqlArrayInput)(nil)).Elem(), ManagedDatabaseMysqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseMysqlMapInput)(nil)).Elem(), ManagedDatabaseMysqlMap{})
	pulumi.RegisterOutputType(ManagedDatabaseMysqlOutput{})
	pulumi.RegisterOutputType(ManagedDatabaseMysqlArrayOutput{})
	pulumi.RegisterOutputType(ManagedDatabaseMysqlMapOutput{})
}
