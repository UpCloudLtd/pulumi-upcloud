// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents backend TLS config
type LoadbalancerBackendTlsConfig struct {
	pulumi.CustomResourceState

	// ID of the load balancer backend to which the TLS config is connected.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Reference to certificate bundle ID.
	CertificateBundle pulumi.StringOutput `pulumi:"certificateBundle"`
	// The name of the TLS config. Must be unique within customer account.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewLoadbalancerBackendTlsConfig registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerBackendTlsConfig(ctx *pulumi.Context,
	name string, args *LoadbalancerBackendTlsConfigArgs, opts ...pulumi.ResourceOption) (*LoadbalancerBackendTlsConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	if args.CertificateBundle == nil {
		return nil, errors.New("invalid value for required argument 'CertificateBundle'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerBackendTlsConfig
	err := ctx.RegisterResource("upcloud:index/loadbalancerBackendTlsConfig:LoadbalancerBackendTlsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerBackendTlsConfig gets an existing LoadbalancerBackendTlsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerBackendTlsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerBackendTlsConfigState, opts ...pulumi.ResourceOption) (*LoadbalancerBackendTlsConfig, error) {
	var resource LoadbalancerBackendTlsConfig
	err := ctx.ReadResource("upcloud:index/loadbalancerBackendTlsConfig:LoadbalancerBackendTlsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerBackendTlsConfig resources.
type loadbalancerBackendTlsConfigState struct {
	// ID of the load balancer backend to which the TLS config is connected.
	Backend *string `pulumi:"backend"`
	// Reference to certificate bundle ID.
	CertificateBundle *string `pulumi:"certificateBundle"`
	// The name of the TLS config. Must be unique within customer account.
	Name *string `pulumi:"name"`
}

type LoadbalancerBackendTlsConfigState struct {
	// ID of the load balancer backend to which the TLS config is connected.
	Backend pulumi.StringPtrInput
	// Reference to certificate bundle ID.
	CertificateBundle pulumi.StringPtrInput
	// The name of the TLS config. Must be unique within customer account.
	Name pulumi.StringPtrInput
}

func (LoadbalancerBackendTlsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerBackendTlsConfigState)(nil)).Elem()
}

type loadbalancerBackendTlsConfigArgs struct {
	// ID of the load balancer backend to which the TLS config is connected.
	Backend string `pulumi:"backend"`
	// Reference to certificate bundle ID.
	CertificateBundle string `pulumi:"certificateBundle"`
	// The name of the TLS config. Must be unique within customer account.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LoadbalancerBackendTlsConfig resource.
type LoadbalancerBackendTlsConfigArgs struct {
	// ID of the load balancer backend to which the TLS config is connected.
	Backend pulumi.StringInput
	// Reference to certificate bundle ID.
	CertificateBundle pulumi.StringInput
	// The name of the TLS config. Must be unique within customer account.
	Name pulumi.StringPtrInput
}

func (LoadbalancerBackendTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerBackendTlsConfigArgs)(nil)).Elem()
}

type LoadbalancerBackendTlsConfigInput interface {
	pulumi.Input

	ToLoadbalancerBackendTlsConfigOutput() LoadbalancerBackendTlsConfigOutput
	ToLoadbalancerBackendTlsConfigOutputWithContext(ctx context.Context) LoadbalancerBackendTlsConfigOutput
}

func (*LoadbalancerBackendTlsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerBackendTlsConfig)(nil)).Elem()
}

func (i *LoadbalancerBackendTlsConfig) ToLoadbalancerBackendTlsConfigOutput() LoadbalancerBackendTlsConfigOutput {
	return i.ToLoadbalancerBackendTlsConfigOutputWithContext(context.Background())
}

func (i *LoadbalancerBackendTlsConfig) ToLoadbalancerBackendTlsConfigOutputWithContext(ctx context.Context) LoadbalancerBackendTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerBackendTlsConfigOutput)
}

// LoadbalancerBackendTlsConfigArrayInput is an input type that accepts LoadbalancerBackendTlsConfigArray and LoadbalancerBackendTlsConfigArrayOutput values.
// You can construct a concrete instance of `LoadbalancerBackendTlsConfigArrayInput` via:
//
//	LoadbalancerBackendTlsConfigArray{ LoadbalancerBackendTlsConfigArgs{...} }
type LoadbalancerBackendTlsConfigArrayInput interface {
	pulumi.Input

	ToLoadbalancerBackendTlsConfigArrayOutput() LoadbalancerBackendTlsConfigArrayOutput
	ToLoadbalancerBackendTlsConfigArrayOutputWithContext(context.Context) LoadbalancerBackendTlsConfigArrayOutput
}

type LoadbalancerBackendTlsConfigArray []LoadbalancerBackendTlsConfigInput

func (LoadbalancerBackendTlsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerBackendTlsConfig)(nil)).Elem()
}

func (i LoadbalancerBackendTlsConfigArray) ToLoadbalancerBackendTlsConfigArrayOutput() LoadbalancerBackendTlsConfigArrayOutput {
	return i.ToLoadbalancerBackendTlsConfigArrayOutputWithContext(context.Background())
}

func (i LoadbalancerBackendTlsConfigArray) ToLoadbalancerBackendTlsConfigArrayOutputWithContext(ctx context.Context) LoadbalancerBackendTlsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerBackendTlsConfigArrayOutput)
}

// LoadbalancerBackendTlsConfigMapInput is an input type that accepts LoadbalancerBackendTlsConfigMap and LoadbalancerBackendTlsConfigMapOutput values.
// You can construct a concrete instance of `LoadbalancerBackendTlsConfigMapInput` via:
//
//	LoadbalancerBackendTlsConfigMap{ "key": LoadbalancerBackendTlsConfigArgs{...} }
type LoadbalancerBackendTlsConfigMapInput interface {
	pulumi.Input

	ToLoadbalancerBackendTlsConfigMapOutput() LoadbalancerBackendTlsConfigMapOutput
	ToLoadbalancerBackendTlsConfigMapOutputWithContext(context.Context) LoadbalancerBackendTlsConfigMapOutput
}

type LoadbalancerBackendTlsConfigMap map[string]LoadbalancerBackendTlsConfigInput

func (LoadbalancerBackendTlsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerBackendTlsConfig)(nil)).Elem()
}

func (i LoadbalancerBackendTlsConfigMap) ToLoadbalancerBackendTlsConfigMapOutput() LoadbalancerBackendTlsConfigMapOutput {
	return i.ToLoadbalancerBackendTlsConfigMapOutputWithContext(context.Background())
}

func (i LoadbalancerBackendTlsConfigMap) ToLoadbalancerBackendTlsConfigMapOutputWithContext(ctx context.Context) LoadbalancerBackendTlsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerBackendTlsConfigMapOutput)
}

type LoadbalancerBackendTlsConfigOutput struct{ *pulumi.OutputState }

func (LoadbalancerBackendTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerBackendTlsConfig)(nil)).Elem()
}

func (o LoadbalancerBackendTlsConfigOutput) ToLoadbalancerBackendTlsConfigOutput() LoadbalancerBackendTlsConfigOutput {
	return o
}

func (o LoadbalancerBackendTlsConfigOutput) ToLoadbalancerBackendTlsConfigOutputWithContext(ctx context.Context) LoadbalancerBackendTlsConfigOutput {
	return o
}

// ID of the load balancer backend to which the TLS config is connected.
func (o LoadbalancerBackendTlsConfigOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerBackendTlsConfig) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// Reference to certificate bundle ID.
func (o LoadbalancerBackendTlsConfigOutput) CertificateBundle() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerBackendTlsConfig) pulumi.StringOutput { return v.CertificateBundle }).(pulumi.StringOutput)
}

// The name of the TLS config. Must be unique within customer account.
func (o LoadbalancerBackendTlsConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerBackendTlsConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type LoadbalancerBackendTlsConfigArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerBackendTlsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerBackendTlsConfig)(nil)).Elem()
}

func (o LoadbalancerBackendTlsConfigArrayOutput) ToLoadbalancerBackendTlsConfigArrayOutput() LoadbalancerBackendTlsConfigArrayOutput {
	return o
}

func (o LoadbalancerBackendTlsConfigArrayOutput) ToLoadbalancerBackendTlsConfigArrayOutputWithContext(ctx context.Context) LoadbalancerBackendTlsConfigArrayOutput {
	return o
}

func (o LoadbalancerBackendTlsConfigArrayOutput) Index(i pulumi.IntInput) LoadbalancerBackendTlsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerBackendTlsConfig {
		return vs[0].([]*LoadbalancerBackendTlsConfig)[vs[1].(int)]
	}).(LoadbalancerBackendTlsConfigOutput)
}

type LoadbalancerBackendTlsConfigMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerBackendTlsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerBackendTlsConfig)(nil)).Elem()
}

func (o LoadbalancerBackendTlsConfigMapOutput) ToLoadbalancerBackendTlsConfigMapOutput() LoadbalancerBackendTlsConfigMapOutput {
	return o
}

func (o LoadbalancerBackendTlsConfigMapOutput) ToLoadbalancerBackendTlsConfigMapOutputWithContext(ctx context.Context) LoadbalancerBackendTlsConfigMapOutput {
	return o
}

func (o LoadbalancerBackendTlsConfigMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerBackendTlsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerBackendTlsConfig {
		return vs[0].(map[string]*LoadbalancerBackendTlsConfig)[vs[1].(string)]
	}).(LoadbalancerBackendTlsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerBackendTlsConfigInput)(nil)).Elem(), &LoadbalancerBackendTlsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerBackendTlsConfigArrayInput)(nil)).Elem(), LoadbalancerBackendTlsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerBackendTlsConfigMapInput)(nil)).Elem(), LoadbalancerBackendTlsConfigMap{})
	pulumi.RegisterOutputType(LoadbalancerBackendTlsConfigOutput{})
	pulumi.RegisterOutputType(LoadbalancerBackendTlsConfigArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerBackendTlsConfigMapOutput{})
}
