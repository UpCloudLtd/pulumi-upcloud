// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents OpenSearch managed database. See UpCloud [Managed Databases](https://upcloud.com/products/managed-databases) product page for more details about the service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Minimal config
//			_, err := upcloud.NewManagedDatabaseOpensearch(ctx, "example1", &upcloud.ManagedDatabaseOpensearchArgs{
//				Plan:  pulumi.String("1x2xCPU-4GB-80GB-1D"),
//				Title: pulumi.String("opensearch-1-example-1"),
//				Zone:  pulumi.String("fi-hel2"),
//			})
//			if err != nil {
//				return err
//			}
//			// Service with custom properties and access control
//			_, err = upcloud.NewManagedDatabaseOpensearch(ctx, "example2", &upcloud.ManagedDatabaseOpensearchArgs{
//				AccessControl:         pulumi.Bool(true),
//				ExtendedAccessControl: pulumi.Bool(true),
//				Plan:                  pulumi.String("1x2xCPU-4GB-80GB-1D"),
//				Properties: &upcloud.ManagedDatabaseOpensearchPropertiesArgs{
//					PublicAccess: pulumi.Bool(false),
//				},
//				Title: pulumi.String("opensearch-2-example-2"),
//				Zone:  pulumi.String("fi-hel1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ManagedDatabaseOpensearch struct {
	pulumi.CustomResourceState

	// Enables users access control for OpenSearch service. User access control rules will only be enforced if this attribute
	// is enabled.
	AccessControl pulumi.BoolOutput `pulumi:"accessControl"`
	// Service component information
	Components ManagedDatabaseOpensearchComponentArrayOutput `pulumi:"components"`
	// Grant access to top-level `_mget`, `_msearch` and `_bulk` APIs. Users are limited to perform operations on indices based
	// on the user-specific access control rules.
	ExtendedAccessControl pulumi.BoolOutput `pulumi:"extendedAccessControl"`
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow pulumi.StringOutput `pulumi:"maintenanceWindowDow"`
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime pulumi.StringOutput `pulumi:"maintenanceWindowTime"`
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name pulumi.StringOutput `pulumi:"name"`
	// Private networks attached to the managed database
	Networks ManagedDatabaseOpensearchNetworkArrayOutput `pulumi:"networks"`
	// Information about nodes providing the managed service
	NodeStates ManagedDatabaseOpensearchNodeStateArrayOutput `pulumi:"nodeStates"`
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
	// database plans <type>`.
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The administrative power state of the service
	Powered pulumi.BoolPtrOutput `pulumi:"powered"`
	// Primary database name
	PrimaryDatabase pulumi.StringOutput `pulumi:"primaryDatabase"`
	// Database Engine properties for OpenSearch
	Properties ManagedDatabaseOpensearchPropertiesOutput `pulumi:"properties"`
	// Hostname to the service instance
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Primary username's password to the service instance
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// Port to the service instance
	ServicePort pulumi.StringOutput `pulumi:"servicePort"`
	// URI to the service instance
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Primary username to the service instance
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// State of the service
	State pulumi.StringOutput `pulumi:"state"`
	// Title of a managed database instance
	Title pulumi.StringOutput `pulumi:"title"`
	// Type of the service
	Type pulumi.StringOutput `pulumi:"type"`
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewManagedDatabaseOpensearch registers a new resource with the given unique name, arguments, and options.
func NewManagedDatabaseOpensearch(ctx *pulumi.Context,
	name string, args *ManagedDatabaseOpensearchArgs, opts ...pulumi.ResourceOption) (*ManagedDatabaseOpensearch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"servicePassword",
		"serviceUri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedDatabaseOpensearch
	err := ctx.RegisterResource("upcloud:index/managedDatabaseOpensearch:ManagedDatabaseOpensearch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedDatabaseOpensearch gets an existing ManagedDatabaseOpensearch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedDatabaseOpensearch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedDatabaseOpensearchState, opts ...pulumi.ResourceOption) (*ManagedDatabaseOpensearch, error) {
	var resource ManagedDatabaseOpensearch
	err := ctx.ReadResource("upcloud:index/managedDatabaseOpensearch:ManagedDatabaseOpensearch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedDatabaseOpensearch resources.
type managedDatabaseOpensearchState struct {
	// Enables users access control for OpenSearch service. User access control rules will only be enforced if this attribute
	// is enabled.
	AccessControl *bool `pulumi:"accessControl"`
	// Service component information
	Components []ManagedDatabaseOpensearchComponent `pulumi:"components"`
	// Grant access to top-level `_mget`, `_msearch` and `_bulk` APIs. Users are limited to perform operations on indices based
	// on the user-specific access control rules.
	ExtendedAccessControl *bool `pulumi:"extendedAccessControl"`
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `pulumi:"name"`
	// Private networks attached to the managed database
	Networks []ManagedDatabaseOpensearchNetwork `pulumi:"networks"`
	// Information about nodes providing the managed service
	NodeStates []ManagedDatabaseOpensearchNodeState `pulumi:"nodeStates"`
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
	// database plans <type>`.
	Plan *string `pulumi:"plan"`
	// The administrative power state of the service
	Powered *bool `pulumi:"powered"`
	// Primary database name
	PrimaryDatabase *string `pulumi:"primaryDatabase"`
	// Database Engine properties for OpenSearch
	Properties *ManagedDatabaseOpensearchProperties `pulumi:"properties"`
	// Hostname to the service instance
	ServiceHost *string `pulumi:"serviceHost"`
	// Primary username's password to the service instance
	ServicePassword *string `pulumi:"servicePassword"`
	// Port to the service instance
	ServicePort *string `pulumi:"servicePort"`
	// URI to the service instance
	ServiceUri *string `pulumi:"serviceUri"`
	// Primary username to the service instance
	ServiceUsername *string `pulumi:"serviceUsername"`
	// State of the service
	State *string `pulumi:"state"`
	// Title of a managed database instance
	Title *string `pulumi:"title"`
	// Type of the service
	Type *string `pulumi:"type"`
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `pulumi:"zone"`
}

type ManagedDatabaseOpensearchState struct {
	// Enables users access control for OpenSearch service. User access control rules will only be enforced if this attribute
	// is enabled.
	AccessControl pulumi.BoolPtrInput
	// Service component information
	Components ManagedDatabaseOpensearchComponentArrayInput
	// Grant access to top-level `_mget`, `_msearch` and `_bulk` APIs. Users are limited to perform operations on indices based
	// on the user-specific access control rules.
	ExtendedAccessControl pulumi.BoolPtrInput
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow pulumi.StringPtrInput
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime pulumi.StringPtrInput
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name pulumi.StringPtrInput
	// Private networks attached to the managed database
	Networks ManagedDatabaseOpensearchNetworkArrayInput
	// Information about nodes providing the managed service
	NodeStates ManagedDatabaseOpensearchNodeStateArrayInput
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
	// database plans <type>`.
	Plan pulumi.StringPtrInput
	// The administrative power state of the service
	Powered pulumi.BoolPtrInput
	// Primary database name
	PrimaryDatabase pulumi.StringPtrInput
	// Database Engine properties for OpenSearch
	Properties ManagedDatabaseOpensearchPropertiesPtrInput
	// Hostname to the service instance
	ServiceHost pulumi.StringPtrInput
	// Primary username's password to the service instance
	ServicePassword pulumi.StringPtrInput
	// Port to the service instance
	ServicePort pulumi.StringPtrInput
	// URI to the service instance
	ServiceUri pulumi.StringPtrInput
	// Primary username to the service instance
	ServiceUsername pulumi.StringPtrInput
	// State of the service
	State pulumi.StringPtrInput
	// Title of a managed database instance
	Title pulumi.StringPtrInput
	// Type of the service
	Type pulumi.StringPtrInput
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringPtrInput
}

func (ManagedDatabaseOpensearchState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseOpensearchState)(nil)).Elem()
}

type managedDatabaseOpensearchArgs struct {
	// Enables users access control for OpenSearch service. User access control rules will only be enforced if this attribute
	// is enabled.
	AccessControl *bool `pulumi:"accessControl"`
	// Grant access to top-level `_mget`, `_msearch` and `_bulk` APIs. Users are limited to perform operations on indices based
	// on the user-specific access control rules.
	ExtendedAccessControl *bool `pulumi:"extendedAccessControl"`
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `pulumi:"name"`
	// Private networks attached to the managed database
	Networks []ManagedDatabaseOpensearchNetwork `pulumi:"networks"`
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
	// database plans <type>`.
	Plan string `pulumi:"plan"`
	// The administrative power state of the service
	Powered *bool `pulumi:"powered"`
	// Database Engine properties for OpenSearch
	Properties *ManagedDatabaseOpensearchProperties `pulumi:"properties"`
	// Title of a managed database instance
	Title string `pulumi:"title"`
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a ManagedDatabaseOpensearch resource.
type ManagedDatabaseOpensearchArgs struct {
	// Enables users access control for OpenSearch service. User access control rules will only be enforced if this attribute
	// is enabled.
	AccessControl pulumi.BoolPtrInput
	// Grant access to top-level `_mget`, `_msearch` and `_bulk` APIs. Users are limited to perform operations on indices based
	// on the user-specific access control rules.
	ExtendedAccessControl pulumi.BoolPtrInput
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow pulumi.StringPtrInput
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime pulumi.StringPtrInput
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name pulumi.StringPtrInput
	// Private networks attached to the managed database
	Networks ManagedDatabaseOpensearchNetworkArrayInput
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
	// database plans <type>`.
	Plan pulumi.StringInput
	// The administrative power state of the service
	Powered pulumi.BoolPtrInput
	// Database Engine properties for OpenSearch
	Properties ManagedDatabaseOpensearchPropertiesPtrInput
	// Title of a managed database instance
	Title pulumi.StringInput
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringInput
}

func (ManagedDatabaseOpensearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseOpensearchArgs)(nil)).Elem()
}

type ManagedDatabaseOpensearchInput interface {
	pulumi.Input

	ToManagedDatabaseOpensearchOutput() ManagedDatabaseOpensearchOutput
	ToManagedDatabaseOpensearchOutputWithContext(ctx context.Context) ManagedDatabaseOpensearchOutput
}

func (*ManagedDatabaseOpensearch) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDatabaseOpensearch)(nil)).Elem()
}

func (i *ManagedDatabaseOpensearch) ToManagedDatabaseOpensearchOutput() ManagedDatabaseOpensearchOutput {
	return i.ToManagedDatabaseOpensearchOutputWithContext(context.Background())
}

func (i *ManagedDatabaseOpensearch) ToManagedDatabaseOpensearchOutputWithContext(ctx context.Context) ManagedDatabaseOpensearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseOpensearchOutput)
}

// ManagedDatabaseOpensearchArrayInput is an input type that accepts ManagedDatabaseOpensearchArray and ManagedDatabaseOpensearchArrayOutput values.
// You can construct a concrete instance of `ManagedDatabaseOpensearchArrayInput` via:
//
//	ManagedDatabaseOpensearchArray{ ManagedDatabaseOpensearchArgs{...} }
type ManagedDatabaseOpensearchArrayInput interface {
	pulumi.Input

	ToManagedDatabaseOpensearchArrayOutput() ManagedDatabaseOpensearchArrayOutput
	ToManagedDatabaseOpensearchArrayOutputWithContext(context.Context) ManagedDatabaseOpensearchArrayOutput
}

type ManagedDatabaseOpensearchArray []ManagedDatabaseOpensearchInput

func (ManagedDatabaseOpensearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedDatabaseOpensearch)(nil)).Elem()
}

func (i ManagedDatabaseOpensearchArray) ToManagedDatabaseOpensearchArrayOutput() ManagedDatabaseOpensearchArrayOutput {
	return i.ToManagedDatabaseOpensearchArrayOutputWithContext(context.Background())
}

func (i ManagedDatabaseOpensearchArray) ToManagedDatabaseOpensearchArrayOutputWithContext(ctx context.Context) ManagedDatabaseOpensearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseOpensearchArrayOutput)
}

// ManagedDatabaseOpensearchMapInput is an input type that accepts ManagedDatabaseOpensearchMap and ManagedDatabaseOpensearchMapOutput values.
// You can construct a concrete instance of `ManagedDatabaseOpensearchMapInput` via:
//
//	ManagedDatabaseOpensearchMap{ "key": ManagedDatabaseOpensearchArgs{...} }
type ManagedDatabaseOpensearchMapInput interface {
	pulumi.Input

	ToManagedDatabaseOpensearchMapOutput() ManagedDatabaseOpensearchMapOutput
	ToManagedDatabaseOpensearchMapOutputWithContext(context.Context) ManagedDatabaseOpensearchMapOutput
}

type ManagedDatabaseOpensearchMap map[string]ManagedDatabaseOpensearchInput

func (ManagedDatabaseOpensearchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedDatabaseOpensearch)(nil)).Elem()
}

func (i ManagedDatabaseOpensearchMap) ToManagedDatabaseOpensearchMapOutput() ManagedDatabaseOpensearchMapOutput {
	return i.ToManagedDatabaseOpensearchMapOutputWithContext(context.Background())
}

func (i ManagedDatabaseOpensearchMap) ToManagedDatabaseOpensearchMapOutputWithContext(ctx context.Context) ManagedDatabaseOpensearchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseOpensearchMapOutput)
}

type ManagedDatabaseOpensearchOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseOpensearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDatabaseOpensearch)(nil)).Elem()
}

func (o ManagedDatabaseOpensearchOutput) ToManagedDatabaseOpensearchOutput() ManagedDatabaseOpensearchOutput {
	return o
}

func (o ManagedDatabaseOpensearchOutput) ToManagedDatabaseOpensearchOutputWithContext(ctx context.Context) ManagedDatabaseOpensearchOutput {
	return o
}

// Enables users access control for OpenSearch service. User access control rules will only be enforced if this attribute
// is enabled.
func (o ManagedDatabaseOpensearchOutput) AccessControl() pulumi.BoolOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.BoolOutput { return v.AccessControl }).(pulumi.BoolOutput)
}

// Service component information
func (o ManagedDatabaseOpensearchOutput) Components() ManagedDatabaseOpensearchComponentArrayOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) ManagedDatabaseOpensearchComponentArrayOutput { return v.Components }).(ManagedDatabaseOpensearchComponentArrayOutput)
}

// Grant access to top-level `_mget`, `_msearch` and `_bulk` APIs. Users are limited to perform operations on indices based
// on the user-specific access control rules.
func (o ManagedDatabaseOpensearchOutput) ExtendedAccessControl() pulumi.BoolOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.BoolOutput { return v.ExtendedAccessControl }).(pulumi.BoolOutput)
}

// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
func (o ManagedDatabaseOpensearchOutput) MaintenanceWindowDow() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.MaintenanceWindowDow }).(pulumi.StringOutput)
}

// Maintenance window UTC time in hh:mm:ss format
func (o ManagedDatabaseOpensearchOutput) MaintenanceWindowTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.MaintenanceWindowTime }).(pulumi.StringOutput)
}

// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
func (o ManagedDatabaseOpensearchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Private networks attached to the managed database
func (o ManagedDatabaseOpensearchOutput) Networks() ManagedDatabaseOpensearchNetworkArrayOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) ManagedDatabaseOpensearchNetworkArrayOutput { return v.Networks }).(ManagedDatabaseOpensearchNetworkArrayOutput)
}

// Information about nodes providing the managed service
func (o ManagedDatabaseOpensearchOutput) NodeStates() ManagedDatabaseOpensearchNodeStateArrayOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) ManagedDatabaseOpensearchNodeStateArrayOutput { return v.NodeStates }).(ManagedDatabaseOpensearchNodeStateArrayOutput)
}

// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
// database plans <type>`.
func (o ManagedDatabaseOpensearchOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// The administrative power state of the service
func (o ManagedDatabaseOpensearchOutput) Powered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.BoolPtrOutput { return v.Powered }).(pulumi.BoolPtrOutput)
}

// Primary database name
func (o ManagedDatabaseOpensearchOutput) PrimaryDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.PrimaryDatabase }).(pulumi.StringOutput)
}

// Database Engine properties for OpenSearch
func (o ManagedDatabaseOpensearchOutput) Properties() ManagedDatabaseOpensearchPropertiesOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) ManagedDatabaseOpensearchPropertiesOutput { return v.Properties }).(ManagedDatabaseOpensearchPropertiesOutput)
}

// Hostname to the service instance
func (o ManagedDatabaseOpensearchOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.ServiceHost }).(pulumi.StringOutput)
}

// Primary username's password to the service instance
func (o ManagedDatabaseOpensearchOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

// Port to the service instance
func (o ManagedDatabaseOpensearchOutput) ServicePort() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.ServicePort }).(pulumi.StringOutput)
}

// URI to the service instance
func (o ManagedDatabaseOpensearchOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.ServiceUri }).(pulumi.StringOutput)
}

// Primary username to the service instance
func (o ManagedDatabaseOpensearchOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.ServiceUsername }).(pulumi.StringOutput)
}

// State of the service
func (o ManagedDatabaseOpensearchOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Title of a managed database instance
func (o ManagedDatabaseOpensearchOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Type of the service
func (o ManagedDatabaseOpensearchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
func (o ManagedDatabaseOpensearchOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseOpensearch) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ManagedDatabaseOpensearchArrayOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseOpensearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedDatabaseOpensearch)(nil)).Elem()
}

func (o ManagedDatabaseOpensearchArrayOutput) ToManagedDatabaseOpensearchArrayOutput() ManagedDatabaseOpensearchArrayOutput {
	return o
}

func (o ManagedDatabaseOpensearchArrayOutput) ToManagedDatabaseOpensearchArrayOutputWithContext(ctx context.Context) ManagedDatabaseOpensearchArrayOutput {
	return o
}

func (o ManagedDatabaseOpensearchArrayOutput) Index(i pulumi.IntInput) ManagedDatabaseOpensearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedDatabaseOpensearch {
		return vs[0].([]*ManagedDatabaseOpensearch)[vs[1].(int)]
	}).(ManagedDatabaseOpensearchOutput)
}

type ManagedDatabaseOpensearchMapOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseOpensearchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedDatabaseOpensearch)(nil)).Elem()
}

func (o ManagedDatabaseOpensearchMapOutput) ToManagedDatabaseOpensearchMapOutput() ManagedDatabaseOpensearchMapOutput {
	return o
}

func (o ManagedDatabaseOpensearchMapOutput) ToManagedDatabaseOpensearchMapOutputWithContext(ctx context.Context) ManagedDatabaseOpensearchMapOutput {
	return o
}

func (o ManagedDatabaseOpensearchMapOutput) MapIndex(k pulumi.StringInput) ManagedDatabaseOpensearchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedDatabaseOpensearch {
		return vs[0].(map[string]*ManagedDatabaseOpensearch)[vs[1].(string)]
	}).(ManagedDatabaseOpensearchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseOpensearchInput)(nil)).Elem(), &ManagedDatabaseOpensearch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseOpensearchArrayInput)(nil)).Elem(), ManagedDatabaseOpensearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseOpensearchMapInput)(nil)).Elem(), ManagedDatabaseOpensearchMap{})
	pulumi.RegisterOutputType(ManagedDatabaseOpensearchOutput{})
	pulumi.RegisterOutputType(ManagedDatabaseOpensearchArrayOutput{})
	pulumi.RegisterOutputType(ManagedDatabaseOpensearchMapOutput{})
}
