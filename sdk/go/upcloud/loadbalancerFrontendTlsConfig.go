// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents frontend TLS config
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := upcloud.NewLoadbalancerFrontendTlsConfig(ctx, "lb_fe_1_tls1", &upcloud.LoadbalancerFrontendTlsConfigArgs{
//				Frontend:          pulumi.Any(upcloudLoadbalancerFrontend.LbFe1.Id),
//				Name:              pulumi.String("lb-fe-1-tls1-test"),
//				CertificateBundle: pulumi.Any(upcloudLoadbalancerManualCertificateBundle.LbCbM1.Id),
//			})
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			lbZone := "fi-hel2"
//			if param := cfg.Get("lbZone"); param != "" {
//				lbZone = param
//			}
//			_, err = upcloud.NewNetwork(ctx, "lb_network", &upcloud.NetworkArgs{
//				Name: pulumi.String("lb-test-net"),
//				Zone: pulumi.String(lbZone),
//				IpNetwork: &upcloud.NetworkIpNetworkArgs{
//					Address: pulumi.String("10.0.0.0/24"),
//					Dhcp:    pulumi.Bool(true),
//					Family:  pulumi.String("IPv4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerManualCertificateBundle(ctx, "lb-cb-m1", &upcloud.LoadbalancerManualCertificateBundleArgs{
//				Name:        pulumi.String("lb-cb-m1-test"),
//				Certificate: pulumi.String("LS0tLS1CRUdJTiBDRVJ..."),
//				PrivateKey:  pulumi.String("LS0tLS1CRUdJTiBQUkl..."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerFrontend(ctx, "lb_fe_1", &upcloud.LoadbalancerFrontendArgs{
//				Loadbalancer:       pulumi.Any(upcloudLoadbalancer.Lb.Id),
//				Name:               pulumi.String("lb-fe-1-test"),
//				Mode:               pulumi.String("http"),
//				Port:               pulumi.Int(8080),
//				DefaultBackendName: pulumi.Any(upcloudLoadbalancerBackend.LbBe1.Name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancer(ctx, "lb", &upcloud.LoadbalancerArgs{
//				ConfiguredStatus: pulumi.String("started"),
//				Name:             pulumi.String("lb-test"),
//				Plan:             pulumi.String("development"),
//				Zone:             pulumi.String(lbZone),
//				Network:          pulumi.Any(upcloudNetwork.LbNetwork.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerBackend(ctx, "lb_be_1", &upcloud.LoadbalancerBackendArgs{
//				Loadbalancer: pulumi.Any(upcloudLoadbalancer.Lb.Id),
//				Name:         pulumi.String("lb-be-1-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LoadbalancerFrontendTlsConfig struct {
	pulumi.CustomResourceState

	// Reference to certificate bundle ID.
	CertificateBundle pulumi.StringOutput `pulumi:"certificateBundle"`
	// ID of the load balancer frontend to which the TLS config is connected.
	Frontend pulumi.StringOutput `pulumi:"frontend"`
	// The name of the TLS config. Must be unique within customer account.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewLoadbalancerFrontendTlsConfig registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerFrontendTlsConfig(ctx *pulumi.Context,
	name string, args *LoadbalancerFrontendTlsConfigArgs, opts ...pulumi.ResourceOption) (*LoadbalancerFrontendTlsConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateBundle == nil {
		return nil, errors.New("invalid value for required argument 'CertificateBundle'")
	}
	if args.Frontend == nil {
		return nil, errors.New("invalid value for required argument 'Frontend'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerFrontendTlsConfig
	err := ctx.RegisterResource("upcloud:index/loadbalancerFrontendTlsConfig:LoadbalancerFrontendTlsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerFrontendTlsConfig gets an existing LoadbalancerFrontendTlsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerFrontendTlsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerFrontendTlsConfigState, opts ...pulumi.ResourceOption) (*LoadbalancerFrontendTlsConfig, error) {
	var resource LoadbalancerFrontendTlsConfig
	err := ctx.ReadResource("upcloud:index/loadbalancerFrontendTlsConfig:LoadbalancerFrontendTlsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerFrontendTlsConfig resources.
type loadbalancerFrontendTlsConfigState struct {
	// Reference to certificate bundle ID.
	CertificateBundle *string `pulumi:"certificateBundle"`
	// ID of the load balancer frontend to which the TLS config is connected.
	Frontend *string `pulumi:"frontend"`
	// The name of the TLS config. Must be unique within customer account.
	Name *string `pulumi:"name"`
}

type LoadbalancerFrontendTlsConfigState struct {
	// Reference to certificate bundle ID.
	CertificateBundle pulumi.StringPtrInput
	// ID of the load balancer frontend to which the TLS config is connected.
	Frontend pulumi.StringPtrInput
	// The name of the TLS config. Must be unique within customer account.
	Name pulumi.StringPtrInput
}

func (LoadbalancerFrontendTlsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendTlsConfigState)(nil)).Elem()
}

type loadbalancerFrontendTlsConfigArgs struct {
	// Reference to certificate bundle ID.
	CertificateBundle string `pulumi:"certificateBundle"`
	// ID of the load balancer frontend to which the TLS config is connected.
	Frontend string `pulumi:"frontend"`
	// The name of the TLS config. Must be unique within customer account.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LoadbalancerFrontendTlsConfig resource.
type LoadbalancerFrontendTlsConfigArgs struct {
	// Reference to certificate bundle ID.
	CertificateBundle pulumi.StringInput
	// ID of the load balancer frontend to which the TLS config is connected.
	Frontend pulumi.StringInput
	// The name of the TLS config. Must be unique within customer account.
	Name pulumi.StringPtrInput
}

func (LoadbalancerFrontendTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendTlsConfigArgs)(nil)).Elem()
}

type LoadbalancerFrontendTlsConfigInput interface {
	pulumi.Input

	ToLoadbalancerFrontendTlsConfigOutput() LoadbalancerFrontendTlsConfigOutput
	ToLoadbalancerFrontendTlsConfigOutputWithContext(ctx context.Context) LoadbalancerFrontendTlsConfigOutput
}

func (*LoadbalancerFrontendTlsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontendTlsConfig)(nil)).Elem()
}

func (i *LoadbalancerFrontendTlsConfig) ToLoadbalancerFrontendTlsConfigOutput() LoadbalancerFrontendTlsConfigOutput {
	return i.ToLoadbalancerFrontendTlsConfigOutputWithContext(context.Background())
}

func (i *LoadbalancerFrontendTlsConfig) ToLoadbalancerFrontendTlsConfigOutputWithContext(ctx context.Context) LoadbalancerFrontendTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendTlsConfigOutput)
}

// LoadbalancerFrontendTlsConfigArrayInput is an input type that accepts LoadbalancerFrontendTlsConfigArray and LoadbalancerFrontendTlsConfigArrayOutput values.
// You can construct a concrete instance of `LoadbalancerFrontendTlsConfigArrayInput` via:
//
//	LoadbalancerFrontendTlsConfigArray{ LoadbalancerFrontendTlsConfigArgs{...} }
type LoadbalancerFrontendTlsConfigArrayInput interface {
	pulumi.Input

	ToLoadbalancerFrontendTlsConfigArrayOutput() LoadbalancerFrontendTlsConfigArrayOutput
	ToLoadbalancerFrontendTlsConfigArrayOutputWithContext(context.Context) LoadbalancerFrontendTlsConfigArrayOutput
}

type LoadbalancerFrontendTlsConfigArray []LoadbalancerFrontendTlsConfigInput

func (LoadbalancerFrontendTlsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerFrontendTlsConfig)(nil)).Elem()
}

func (i LoadbalancerFrontendTlsConfigArray) ToLoadbalancerFrontendTlsConfigArrayOutput() LoadbalancerFrontendTlsConfigArrayOutput {
	return i.ToLoadbalancerFrontendTlsConfigArrayOutputWithContext(context.Background())
}

func (i LoadbalancerFrontendTlsConfigArray) ToLoadbalancerFrontendTlsConfigArrayOutputWithContext(ctx context.Context) LoadbalancerFrontendTlsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendTlsConfigArrayOutput)
}

// LoadbalancerFrontendTlsConfigMapInput is an input type that accepts LoadbalancerFrontendTlsConfigMap and LoadbalancerFrontendTlsConfigMapOutput values.
// You can construct a concrete instance of `LoadbalancerFrontendTlsConfigMapInput` via:
//
//	LoadbalancerFrontendTlsConfigMap{ "key": LoadbalancerFrontendTlsConfigArgs{...} }
type LoadbalancerFrontendTlsConfigMapInput interface {
	pulumi.Input

	ToLoadbalancerFrontendTlsConfigMapOutput() LoadbalancerFrontendTlsConfigMapOutput
	ToLoadbalancerFrontendTlsConfigMapOutputWithContext(context.Context) LoadbalancerFrontendTlsConfigMapOutput
}

type LoadbalancerFrontendTlsConfigMap map[string]LoadbalancerFrontendTlsConfigInput

func (LoadbalancerFrontendTlsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerFrontendTlsConfig)(nil)).Elem()
}

func (i LoadbalancerFrontendTlsConfigMap) ToLoadbalancerFrontendTlsConfigMapOutput() LoadbalancerFrontendTlsConfigMapOutput {
	return i.ToLoadbalancerFrontendTlsConfigMapOutputWithContext(context.Background())
}

func (i LoadbalancerFrontendTlsConfigMap) ToLoadbalancerFrontendTlsConfigMapOutputWithContext(ctx context.Context) LoadbalancerFrontendTlsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendTlsConfigMapOutput)
}

type LoadbalancerFrontendTlsConfigOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontendTlsConfig)(nil)).Elem()
}

func (o LoadbalancerFrontendTlsConfigOutput) ToLoadbalancerFrontendTlsConfigOutput() LoadbalancerFrontendTlsConfigOutput {
	return o
}

func (o LoadbalancerFrontendTlsConfigOutput) ToLoadbalancerFrontendTlsConfigOutputWithContext(ctx context.Context) LoadbalancerFrontendTlsConfigOutput {
	return o
}

// Reference to certificate bundle ID.
func (o LoadbalancerFrontendTlsConfigOutput) CertificateBundle() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontendTlsConfig) pulumi.StringOutput { return v.CertificateBundle }).(pulumi.StringOutput)
}

// ID of the load balancer frontend to which the TLS config is connected.
func (o LoadbalancerFrontendTlsConfigOutput) Frontend() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontendTlsConfig) pulumi.StringOutput { return v.Frontend }).(pulumi.StringOutput)
}

// The name of the TLS config. Must be unique within customer account.
func (o LoadbalancerFrontendTlsConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontendTlsConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type LoadbalancerFrontendTlsConfigArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendTlsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerFrontendTlsConfig)(nil)).Elem()
}

func (o LoadbalancerFrontendTlsConfigArrayOutput) ToLoadbalancerFrontendTlsConfigArrayOutput() LoadbalancerFrontendTlsConfigArrayOutput {
	return o
}

func (o LoadbalancerFrontendTlsConfigArrayOutput) ToLoadbalancerFrontendTlsConfigArrayOutputWithContext(ctx context.Context) LoadbalancerFrontendTlsConfigArrayOutput {
	return o
}

func (o LoadbalancerFrontendTlsConfigArrayOutput) Index(i pulumi.IntInput) LoadbalancerFrontendTlsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerFrontendTlsConfig {
		return vs[0].([]*LoadbalancerFrontendTlsConfig)[vs[1].(int)]
	}).(LoadbalancerFrontendTlsConfigOutput)
}

type LoadbalancerFrontendTlsConfigMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendTlsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerFrontendTlsConfig)(nil)).Elem()
}

func (o LoadbalancerFrontendTlsConfigMapOutput) ToLoadbalancerFrontendTlsConfigMapOutput() LoadbalancerFrontendTlsConfigMapOutput {
	return o
}

func (o LoadbalancerFrontendTlsConfigMapOutput) ToLoadbalancerFrontendTlsConfigMapOutputWithContext(ctx context.Context) LoadbalancerFrontendTlsConfigMapOutput {
	return o
}

func (o LoadbalancerFrontendTlsConfigMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerFrontendTlsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerFrontendTlsConfig {
		return vs[0].(map[string]*LoadbalancerFrontendTlsConfig)[vs[1].(string)]
	}).(LoadbalancerFrontendTlsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendTlsConfigInput)(nil)).Elem(), &LoadbalancerFrontendTlsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendTlsConfigArrayInput)(nil)).Elem(), LoadbalancerFrontendTlsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendTlsConfigMapInput)(nil)).Elem(), LoadbalancerFrontendTlsConfigMap{})
	pulumi.RegisterOutputType(LoadbalancerFrontendTlsConfigOutput{})
	pulumi.RegisterOutputType(LoadbalancerFrontendTlsConfigArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerFrontendTlsConfigMapOutput{})
}
