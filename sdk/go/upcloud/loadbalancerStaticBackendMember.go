// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents load balancer's static backend member
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			lbZone := "fi-hel2"
//			if param := cfg.Get("lbZone"); param != "" {
//				lbZone = param
//			}
//			_, err := upcloud.NewNetwork(ctx, "lbNetwork", &upcloud.NetworkArgs{
//				Zone: pulumi.String(lbZone),
//				IpNetwork: &upcloud.NetworkIpNetworkArgs{
//					Address: pulumi.String("10.0.0.0/24"),
//					Dhcp:    pulumi.Bool(true),
//					Family:  pulumi.String("IPv4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancer(ctx, "lb", &upcloud.LoadbalancerArgs{
//				ConfiguredStatus: pulumi.String("started"),
//				Plan:             pulumi.String("development"),
//				Zone:             pulumi.String(lbZone),
//				Network:          pulumi.Any(resource.Upcloud_network.Lb_network.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerBackend(ctx, "lbBe1", &upcloud.LoadbalancerBackendArgs{
//				Loadbalancer: pulumi.Any(resource.Upcloud_loadbalancer.Lb.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerStaticBackendMember(ctx, "lbBe1Sm1", &upcloud.LoadbalancerStaticBackendMemberArgs{
//				Backend:     pulumi.Any(resource.Upcloud_loadbalancer_backend.Lb_be_1.Id),
//				Ip:          pulumi.String("10.0.0.10"),
//				Port:        pulumi.Int(8000),
//				Weight:      pulumi.Int(0),
//				MaxSessions: pulumi.Int(0),
//				Enabled:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LoadbalancerStaticBackendMember struct {
	pulumi.CustomResourceState

	// ID of the load balancer backend to which the member is connected.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Indicates if the member is enabled. Disabled members are excluded from load balancing.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Server IP address in the customer private network.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Maximum number of sessions before queueing.
	MaxSessions pulumi.IntOutput `pulumi:"maxSessions"`
	// The name of the member must be unique within the load balancer backend service.
	Name pulumi.StringOutput `pulumi:"name"`
	// Server port.
	Port pulumi.IntOutput `pulumi:"port"`
	// Used to adjust the server's weight relative to other servers. All servers will receive a load proportional to their
	// weight relative to the sum of all weights, so the higher the weight, the higher the load. A value of 0 means the server
	// will not participate in load balancing but will still accept persistent connections.
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewLoadbalancerStaticBackendMember registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerStaticBackendMember(ctx *pulumi.Context,
	name string, args *LoadbalancerStaticBackendMemberArgs, opts ...pulumi.ResourceOption) (*LoadbalancerStaticBackendMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.MaxSessions == nil {
		return nil, errors.New("invalid value for required argument 'MaxSessions'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Weight == nil {
		return nil, errors.New("invalid value for required argument 'Weight'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerStaticBackendMember
	err := ctx.RegisterResource("upcloud:index/loadbalancerStaticBackendMember:LoadbalancerStaticBackendMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerStaticBackendMember gets an existing LoadbalancerStaticBackendMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerStaticBackendMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerStaticBackendMemberState, opts ...pulumi.ResourceOption) (*LoadbalancerStaticBackendMember, error) {
	var resource LoadbalancerStaticBackendMember
	err := ctx.ReadResource("upcloud:index/loadbalancerStaticBackendMember:LoadbalancerStaticBackendMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerStaticBackendMember resources.
type loadbalancerStaticBackendMemberState struct {
	// ID of the load balancer backend to which the member is connected.
	Backend *string `pulumi:"backend"`
	// Indicates if the member is enabled. Disabled members are excluded from load balancing.
	Enabled *bool `pulumi:"enabled"`
	// Server IP address in the customer private network.
	Ip *string `pulumi:"ip"`
	// Maximum number of sessions before queueing.
	MaxSessions *int `pulumi:"maxSessions"`
	// The name of the member must be unique within the load balancer backend service.
	Name *string `pulumi:"name"`
	// Server port.
	Port *int `pulumi:"port"`
	// Used to adjust the server's weight relative to other servers. All servers will receive a load proportional to their
	// weight relative to the sum of all weights, so the higher the weight, the higher the load. A value of 0 means the server
	// will not participate in load balancing but will still accept persistent connections.
	Weight *int `pulumi:"weight"`
}

type LoadbalancerStaticBackendMemberState struct {
	// ID of the load balancer backend to which the member is connected.
	Backend pulumi.StringPtrInput
	// Indicates if the member is enabled. Disabled members are excluded from load balancing.
	Enabled pulumi.BoolPtrInput
	// Server IP address in the customer private network.
	Ip pulumi.StringPtrInput
	// Maximum number of sessions before queueing.
	MaxSessions pulumi.IntPtrInput
	// The name of the member must be unique within the load balancer backend service.
	Name pulumi.StringPtrInput
	// Server port.
	Port pulumi.IntPtrInput
	// Used to adjust the server's weight relative to other servers. All servers will receive a load proportional to their
	// weight relative to the sum of all weights, so the higher the weight, the higher the load. A value of 0 means the server
	// will not participate in load balancing but will still accept persistent connections.
	Weight pulumi.IntPtrInput
}

func (LoadbalancerStaticBackendMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerStaticBackendMemberState)(nil)).Elem()
}

type loadbalancerStaticBackendMemberArgs struct {
	// ID of the load balancer backend to which the member is connected.
	Backend string `pulumi:"backend"`
	// Indicates if the member is enabled. Disabled members are excluded from load balancing.
	Enabled *bool `pulumi:"enabled"`
	// Server IP address in the customer private network.
	Ip string `pulumi:"ip"`
	// Maximum number of sessions before queueing.
	MaxSessions int `pulumi:"maxSessions"`
	// The name of the member must be unique within the load balancer backend service.
	Name *string `pulumi:"name"`
	// Server port.
	Port int `pulumi:"port"`
	// Used to adjust the server's weight relative to other servers. All servers will receive a load proportional to their
	// weight relative to the sum of all weights, so the higher the weight, the higher the load. A value of 0 means the server
	// will not participate in load balancing but will still accept persistent connections.
	Weight int `pulumi:"weight"`
}

// The set of arguments for constructing a LoadbalancerStaticBackendMember resource.
type LoadbalancerStaticBackendMemberArgs struct {
	// ID of the load balancer backend to which the member is connected.
	Backend pulumi.StringInput
	// Indicates if the member is enabled. Disabled members are excluded from load balancing.
	Enabled pulumi.BoolPtrInput
	// Server IP address in the customer private network.
	Ip pulumi.StringInput
	// Maximum number of sessions before queueing.
	MaxSessions pulumi.IntInput
	// The name of the member must be unique within the load balancer backend service.
	Name pulumi.StringPtrInput
	// Server port.
	Port pulumi.IntInput
	// Used to adjust the server's weight relative to other servers. All servers will receive a load proportional to their
	// weight relative to the sum of all weights, so the higher the weight, the higher the load. A value of 0 means the server
	// will not participate in load balancing but will still accept persistent connections.
	Weight pulumi.IntInput
}

func (LoadbalancerStaticBackendMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerStaticBackendMemberArgs)(nil)).Elem()
}

type LoadbalancerStaticBackendMemberInput interface {
	pulumi.Input

	ToLoadbalancerStaticBackendMemberOutput() LoadbalancerStaticBackendMemberOutput
	ToLoadbalancerStaticBackendMemberOutputWithContext(ctx context.Context) LoadbalancerStaticBackendMemberOutput
}

func (*LoadbalancerStaticBackendMember) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerStaticBackendMember)(nil)).Elem()
}

func (i *LoadbalancerStaticBackendMember) ToLoadbalancerStaticBackendMemberOutput() LoadbalancerStaticBackendMemberOutput {
	return i.ToLoadbalancerStaticBackendMemberOutputWithContext(context.Background())
}

func (i *LoadbalancerStaticBackendMember) ToLoadbalancerStaticBackendMemberOutputWithContext(ctx context.Context) LoadbalancerStaticBackendMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerStaticBackendMemberOutput)
}

// LoadbalancerStaticBackendMemberArrayInput is an input type that accepts LoadbalancerStaticBackendMemberArray and LoadbalancerStaticBackendMemberArrayOutput values.
// You can construct a concrete instance of `LoadbalancerStaticBackendMemberArrayInput` via:
//
//	LoadbalancerStaticBackendMemberArray{ LoadbalancerStaticBackendMemberArgs{...} }
type LoadbalancerStaticBackendMemberArrayInput interface {
	pulumi.Input

	ToLoadbalancerStaticBackendMemberArrayOutput() LoadbalancerStaticBackendMemberArrayOutput
	ToLoadbalancerStaticBackendMemberArrayOutputWithContext(context.Context) LoadbalancerStaticBackendMemberArrayOutput
}

type LoadbalancerStaticBackendMemberArray []LoadbalancerStaticBackendMemberInput

func (LoadbalancerStaticBackendMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerStaticBackendMember)(nil)).Elem()
}

func (i LoadbalancerStaticBackendMemberArray) ToLoadbalancerStaticBackendMemberArrayOutput() LoadbalancerStaticBackendMemberArrayOutput {
	return i.ToLoadbalancerStaticBackendMemberArrayOutputWithContext(context.Background())
}

func (i LoadbalancerStaticBackendMemberArray) ToLoadbalancerStaticBackendMemberArrayOutputWithContext(ctx context.Context) LoadbalancerStaticBackendMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerStaticBackendMemberArrayOutput)
}

// LoadbalancerStaticBackendMemberMapInput is an input type that accepts LoadbalancerStaticBackendMemberMap and LoadbalancerStaticBackendMemberMapOutput values.
// You can construct a concrete instance of `LoadbalancerStaticBackendMemberMapInput` via:
//
//	LoadbalancerStaticBackendMemberMap{ "key": LoadbalancerStaticBackendMemberArgs{...} }
type LoadbalancerStaticBackendMemberMapInput interface {
	pulumi.Input

	ToLoadbalancerStaticBackendMemberMapOutput() LoadbalancerStaticBackendMemberMapOutput
	ToLoadbalancerStaticBackendMemberMapOutputWithContext(context.Context) LoadbalancerStaticBackendMemberMapOutput
}

type LoadbalancerStaticBackendMemberMap map[string]LoadbalancerStaticBackendMemberInput

func (LoadbalancerStaticBackendMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerStaticBackendMember)(nil)).Elem()
}

func (i LoadbalancerStaticBackendMemberMap) ToLoadbalancerStaticBackendMemberMapOutput() LoadbalancerStaticBackendMemberMapOutput {
	return i.ToLoadbalancerStaticBackendMemberMapOutputWithContext(context.Background())
}

func (i LoadbalancerStaticBackendMemberMap) ToLoadbalancerStaticBackendMemberMapOutputWithContext(ctx context.Context) LoadbalancerStaticBackendMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerStaticBackendMemberMapOutput)
}

type LoadbalancerStaticBackendMemberOutput struct{ *pulumi.OutputState }

func (LoadbalancerStaticBackendMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerStaticBackendMember)(nil)).Elem()
}

func (o LoadbalancerStaticBackendMemberOutput) ToLoadbalancerStaticBackendMemberOutput() LoadbalancerStaticBackendMemberOutput {
	return o
}

func (o LoadbalancerStaticBackendMemberOutput) ToLoadbalancerStaticBackendMemberOutputWithContext(ctx context.Context) LoadbalancerStaticBackendMemberOutput {
	return o
}

// ID of the load balancer backend to which the member is connected.
func (o LoadbalancerStaticBackendMemberOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerStaticBackendMember) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// Indicates if the member is enabled. Disabled members are excluded from load balancing.
func (o LoadbalancerStaticBackendMemberOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadbalancerStaticBackendMember) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Server IP address in the customer private network.
func (o LoadbalancerStaticBackendMemberOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerStaticBackendMember) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Maximum number of sessions before queueing.
func (o LoadbalancerStaticBackendMemberOutput) MaxSessions() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerStaticBackendMember) pulumi.IntOutput { return v.MaxSessions }).(pulumi.IntOutput)
}

// The name of the member must be unique within the load balancer backend service.
func (o LoadbalancerStaticBackendMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerStaticBackendMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Server port.
func (o LoadbalancerStaticBackendMemberOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerStaticBackendMember) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Used to adjust the server's weight relative to other servers. All servers will receive a load proportional to their
// weight relative to the sum of all weights, so the higher the weight, the higher the load. A value of 0 means the server
// will not participate in load balancing but will still accept persistent connections.
func (o LoadbalancerStaticBackendMemberOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerStaticBackendMember) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type LoadbalancerStaticBackendMemberArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerStaticBackendMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerStaticBackendMember)(nil)).Elem()
}

func (o LoadbalancerStaticBackendMemberArrayOutput) ToLoadbalancerStaticBackendMemberArrayOutput() LoadbalancerStaticBackendMemberArrayOutput {
	return o
}

func (o LoadbalancerStaticBackendMemberArrayOutput) ToLoadbalancerStaticBackendMemberArrayOutputWithContext(ctx context.Context) LoadbalancerStaticBackendMemberArrayOutput {
	return o
}

func (o LoadbalancerStaticBackendMemberArrayOutput) Index(i pulumi.IntInput) LoadbalancerStaticBackendMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerStaticBackendMember {
		return vs[0].([]*LoadbalancerStaticBackendMember)[vs[1].(int)]
	}).(LoadbalancerStaticBackendMemberOutput)
}

type LoadbalancerStaticBackendMemberMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerStaticBackendMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerStaticBackendMember)(nil)).Elem()
}

func (o LoadbalancerStaticBackendMemberMapOutput) ToLoadbalancerStaticBackendMemberMapOutput() LoadbalancerStaticBackendMemberMapOutput {
	return o
}

func (o LoadbalancerStaticBackendMemberMapOutput) ToLoadbalancerStaticBackendMemberMapOutputWithContext(ctx context.Context) LoadbalancerStaticBackendMemberMapOutput {
	return o
}

func (o LoadbalancerStaticBackendMemberMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerStaticBackendMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerStaticBackendMember {
		return vs[0].(map[string]*LoadbalancerStaticBackendMember)[vs[1].(string)]
	}).(LoadbalancerStaticBackendMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerStaticBackendMemberInput)(nil)).Elem(), &LoadbalancerStaticBackendMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerStaticBackendMemberArrayInput)(nil)).Elem(), LoadbalancerStaticBackendMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerStaticBackendMemberMapInput)(nil)).Elem(), LoadbalancerStaticBackendMemberMap{})
	pulumi.RegisterOutputType(LoadbalancerStaticBackendMemberOutput{})
	pulumi.RegisterOutputType(LoadbalancerStaticBackendMemberArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerStaticBackendMemberMapOutput{})
}
