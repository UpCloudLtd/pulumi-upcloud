// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The UpCloud server resource allows the creation, update and deletion of [cloud servers](https://upcloud.com/products/cloud-servers).
//
// > To deploy a GPU server, select a plan with `GPU-` prefix, e.g., `GPU-8xCPU-64GB-1xL40S`. Use `upctl zone devices` command to list per zone GPU availability.
//
// ## Import
//
// ```sh
// $ pulumi import upcloud:index/server:Server example_server ead4544f-10bf-42a3-b98a-a0fea2e2ad14
// ```
type Server struct {
	pulumi.CustomResourceState

	// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
	BootOrder pulumi.StringOutput `pulumi:"bootOrder"`
	// The number of CPU cores for the server
	Cpu pulumi.IntOutput `pulumi:"cpu"`
	// Are firewall rules active for the server
	Firewall pulumi.BoolOutput `pulumi:"firewall"`
	// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud
	// hosts
	Host pulumi.IntOutput `pulumi:"host"`
	// The hostname of the server.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If
	// hot resizing fails, the apply operation will fail.
	HotResize pulumi.BoolOutput `pulumi:"hotResize"`
	// User defined key-value pairs to classify the server.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Configure access credentials to the server
	Login ServerLoginPtrOutput `pulumi:"login"`
	// The amount of memory for the server (in megabytes)
	Mem pulumi.IntOutput `pulumi:"mem"`
	// Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based
	// templates.
	Metadata pulumi.BoolPtrOutput `pulumi:"metadata"`
	// One or more blocks describing the network interfaces of the server. In addition to list order, the configured network
	// interfaces are matched to the server's actual network interfaces by `index` and `ipAddress` fields. This is to avoid
	// public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate
	// diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list. We recommend
	// explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from
	// middle of the list.
	NetworkInterfaces ServerNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// The model of the server's network interfaces
	NicModel pulumi.StringOutput `pulumi:"nicModel"`
	// The pricing plan used for the server. You can list available server plans with `upctl server plans`
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the
	// `members` property of `ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it
	// has been set to non-zero value.
	ServerGroup  pulumi.StringPtrOutput      `pulumi:"serverGroup"`
	SimpleBackup ServerSimpleBackupPtrOutput `pulumi:"simpleBackup"`
	// A set of storage devices associated with the server
	StorageDevices ServerStorageDeviceArrayOutput `pulumi:"storageDevices"`
	// The server related tags
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Block describing the preconfigured operating system
	Template ServerTemplatePtrOutput `pulumi:"template"`
	// The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
	Timezone pulumi.StringOutput `pulumi:"timezone"`
	// A short, informational description of the server.
	Title pulumi.StringOutput `pulumi:"title"`
	// Defines URL for a server setup script, or the script body itself
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// The model of the server's video interface
	VideoModel pulumi.StringOutput `pulumi:"videoModel"`
	// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("upcloud:index/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("upcloud:index/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
	BootOrder *string `pulumi:"bootOrder"`
	// The number of CPU cores for the server
	Cpu *int `pulumi:"cpu"`
	// Are firewall rules active for the server
	Firewall *bool `pulumi:"firewall"`
	// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud
	// hosts
	Host *int `pulumi:"host"`
	// The hostname of the server.
	Hostname *string `pulumi:"hostname"`
	// If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If
	// hot resizing fails, the apply operation will fail.
	HotResize *bool `pulumi:"hotResize"`
	// User defined key-value pairs to classify the server.
	Labels map[string]string `pulumi:"labels"`
	// Configure access credentials to the server
	Login *ServerLogin `pulumi:"login"`
	// The amount of memory for the server (in megabytes)
	Mem *int `pulumi:"mem"`
	// Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based
	// templates.
	Metadata *bool `pulumi:"metadata"`
	// One or more blocks describing the network interfaces of the server. In addition to list order, the configured network
	// interfaces are matched to the server's actual network interfaces by `index` and `ipAddress` fields. This is to avoid
	// public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate
	// diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list. We recommend
	// explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from
	// middle of the list.
	NetworkInterfaces []ServerNetworkInterface `pulumi:"networkInterfaces"`
	// The model of the server's network interfaces
	NicModel *string `pulumi:"nicModel"`
	// The pricing plan used for the server. You can list available server plans with `upctl server plans`
	Plan *string `pulumi:"plan"`
	// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the
	// `members` property of `ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it
	// has been set to non-zero value.
	ServerGroup  *string             `pulumi:"serverGroup"`
	SimpleBackup *ServerSimpleBackup `pulumi:"simpleBackup"`
	// A set of storage devices associated with the server
	StorageDevices []ServerStorageDevice `pulumi:"storageDevices"`
	// The server related tags
	Tags []string `pulumi:"tags"`
	// Block describing the preconfigured operating system
	Template *ServerTemplate `pulumi:"template"`
	// The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
	Timezone *string `pulumi:"timezone"`
	// A short, informational description of the server.
	Title *string `pulumi:"title"`
	// Defines URL for a server setup script, or the script body itself
	UserData *string `pulumi:"userData"`
	// The model of the server's video interface
	VideoModel *string `pulumi:"videoModel"`
	// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `pulumi:"zone"`
}

type ServerState struct {
	// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
	BootOrder pulumi.StringPtrInput
	// The number of CPU cores for the server
	Cpu pulumi.IntPtrInput
	// Are firewall rules active for the server
	Firewall pulumi.BoolPtrInput
	// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud
	// hosts
	Host pulumi.IntPtrInput
	// The hostname of the server.
	Hostname pulumi.StringPtrInput
	// If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If
	// hot resizing fails, the apply operation will fail.
	HotResize pulumi.BoolPtrInput
	// User defined key-value pairs to classify the server.
	Labels pulumi.StringMapInput
	// Configure access credentials to the server
	Login ServerLoginPtrInput
	// The amount of memory for the server (in megabytes)
	Mem pulumi.IntPtrInput
	// Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based
	// templates.
	Metadata pulumi.BoolPtrInput
	// One or more blocks describing the network interfaces of the server. In addition to list order, the configured network
	// interfaces are matched to the server's actual network interfaces by `index` and `ipAddress` fields. This is to avoid
	// public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate
	// diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list. We recommend
	// explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from
	// middle of the list.
	NetworkInterfaces ServerNetworkInterfaceArrayInput
	// The model of the server's network interfaces
	NicModel pulumi.StringPtrInput
	// The pricing plan used for the server. You can list available server plans with `upctl server plans`
	Plan pulumi.StringPtrInput
	// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the
	// `members` property of `ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it
	// has been set to non-zero value.
	ServerGroup  pulumi.StringPtrInput
	SimpleBackup ServerSimpleBackupPtrInput
	// A set of storage devices associated with the server
	StorageDevices ServerStorageDeviceArrayInput
	// The server related tags
	Tags pulumi.StringArrayInput
	// Block describing the preconfigured operating system
	Template ServerTemplatePtrInput
	// The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
	Timezone pulumi.StringPtrInput
	// A short, informational description of the server.
	Title pulumi.StringPtrInput
	// Defines URL for a server setup script, or the script body itself
	UserData pulumi.StringPtrInput
	// The model of the server's video interface
	VideoModel pulumi.StringPtrInput
	// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
	BootOrder *string `pulumi:"bootOrder"`
	// The number of CPU cores for the server
	Cpu *int `pulumi:"cpu"`
	// Are firewall rules active for the server
	Firewall *bool `pulumi:"firewall"`
	// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud
	// hosts
	Host *int `pulumi:"host"`
	// The hostname of the server.
	Hostname string `pulumi:"hostname"`
	// If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If
	// hot resizing fails, the apply operation will fail.
	HotResize *bool `pulumi:"hotResize"`
	// User defined key-value pairs to classify the server.
	Labels map[string]string `pulumi:"labels"`
	// Configure access credentials to the server
	Login *ServerLogin `pulumi:"login"`
	// The amount of memory for the server (in megabytes)
	Mem *int `pulumi:"mem"`
	// Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based
	// templates.
	Metadata *bool `pulumi:"metadata"`
	// One or more blocks describing the network interfaces of the server. In addition to list order, the configured network
	// interfaces are matched to the server's actual network interfaces by `index` and `ipAddress` fields. This is to avoid
	// public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate
	// diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list. We recommend
	// explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from
	// middle of the list.
	NetworkInterfaces []ServerNetworkInterface `pulumi:"networkInterfaces"`
	// The model of the server's network interfaces
	NicModel *string `pulumi:"nicModel"`
	// The pricing plan used for the server. You can list available server plans with `upctl server plans`
	Plan *string `pulumi:"plan"`
	// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the
	// `members` property of `ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it
	// has been set to non-zero value.
	ServerGroup  *string             `pulumi:"serverGroup"`
	SimpleBackup *ServerSimpleBackup `pulumi:"simpleBackup"`
	// A set of storage devices associated with the server
	StorageDevices []ServerStorageDevice `pulumi:"storageDevices"`
	// The server related tags
	Tags []string `pulumi:"tags"`
	// Block describing the preconfigured operating system
	Template *ServerTemplate `pulumi:"template"`
	// The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
	Timezone *string `pulumi:"timezone"`
	// A short, informational description of the server.
	Title *string `pulumi:"title"`
	// Defines URL for a server setup script, or the script body itself
	UserData *string `pulumi:"userData"`
	// The model of the server's video interface
	VideoModel *string `pulumi:"videoModel"`
	// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
	BootOrder pulumi.StringPtrInput
	// The number of CPU cores for the server
	Cpu pulumi.IntPtrInput
	// Are firewall rules active for the server
	Firewall pulumi.BoolPtrInput
	// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud
	// hosts
	Host pulumi.IntPtrInput
	// The hostname of the server.
	Hostname pulumi.StringInput
	// If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If
	// hot resizing fails, the apply operation will fail.
	HotResize pulumi.BoolPtrInput
	// User defined key-value pairs to classify the server.
	Labels pulumi.StringMapInput
	// Configure access credentials to the server
	Login ServerLoginPtrInput
	// The amount of memory for the server (in megabytes)
	Mem pulumi.IntPtrInput
	// Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based
	// templates.
	Metadata pulumi.BoolPtrInput
	// One or more blocks describing the network interfaces of the server. In addition to list order, the configured network
	// interfaces are matched to the server's actual network interfaces by `index` and `ipAddress` fields. This is to avoid
	// public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate
	// diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list. We recommend
	// explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from
	// middle of the list.
	NetworkInterfaces ServerNetworkInterfaceArrayInput
	// The model of the server's network interfaces
	NicModel pulumi.StringPtrInput
	// The pricing plan used for the server. You can list available server plans with `upctl server plans`
	Plan pulumi.StringPtrInput
	// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the
	// `members` property of `ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it
	// has been set to non-zero value.
	ServerGroup  pulumi.StringPtrInput
	SimpleBackup ServerSimpleBackupPtrInput
	// A set of storage devices associated with the server
	StorageDevices ServerStorageDeviceArrayInput
	// The server related tags
	Tags pulumi.StringArrayInput
	// Block describing the preconfigured operating system
	Template ServerTemplatePtrInput
	// The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
	Timezone pulumi.StringPtrInput
	// A short, informational description of the server.
	Title pulumi.StringPtrInput
	// Defines URL for a server setup script, or the script body itself
	UserData pulumi.StringPtrInput
	// The model of the server's video interface
	VideoModel pulumi.StringPtrInput
	// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// The boot device order, `cdrom`|`disk`|`network` or comma separated combination of those values. Defaults to `disk`
func (o ServerOutput) BootOrder() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.BootOrder }).(pulumi.StringOutput)
}

// The number of CPU cores for the server
func (o ServerOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.Cpu }).(pulumi.IntOutput)
}

// Are firewall rules active for the server
func (o ServerOutput) Firewall() pulumi.BoolOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolOutput { return v.Firewall }).(pulumi.BoolOutput)
}

// Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud
// hosts
func (o ServerOutput) Host() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.Host }).(pulumi.IntOutput)
}

// The hostname of the server.
func (o ServerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// If set to true, allows changing the server plan without requiring a reboot. This enables hot resizing of the server. If
// hot resizing fails, the apply operation will fail.
func (o ServerOutput) HotResize() pulumi.BoolOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolOutput { return v.HotResize }).(pulumi.BoolOutput)
}

// User defined key-value pairs to classify the server.
func (o ServerOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Server) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Configure access credentials to the server
func (o ServerOutput) Login() ServerLoginPtrOutput {
	return o.ApplyT(func(v *Server) ServerLoginPtrOutput { return v.Login }).(ServerLoginPtrOutput)
}

// The amount of memory for the server (in megabytes)
func (o ServerOutput) Mem() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.Mem }).(pulumi.IntOutput)
}

// Is metadata service active for the server. The metadata service must be enabled when using recent cloud-init based
// templates.
func (o ServerOutput) Metadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.Metadata }).(pulumi.BoolPtrOutput)
}

// One or more blocks describing the network interfaces of the server. In addition to list order, the configured network
// interfaces are matched to the server's actual network interfaces by `index` and `ipAddress` fields. This is to avoid
// public and utility network interfaces being re-assigned when the server is updated. This might result to inaccurate
// diffs in the plan, when interfaces are re-ordered or when interface is removed from the middle of the list. We recommend
// explicitly setting the value for `index` in configuration, when re-ordering interfaces or when removing interface from
// middle of the list.
func (o ServerOutput) NetworkInterfaces() ServerNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *Server) ServerNetworkInterfaceArrayOutput { return v.NetworkInterfaces }).(ServerNetworkInterfaceArrayOutput)
}

// The model of the server's network interfaces
func (o ServerOutput) NicModel() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.NicModel }).(pulumi.StringOutput)
}

// The pricing plan used for the server. You can list available server plans with `upctl server plans`
func (o ServerOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// The UUID of a server group to attach this server to. Note that the server can also be attached to a server group via the
// `members` property of `ServerGroup`. Only one of the these should be defined at a time. This value is only updated if it
// has been set to non-zero value.
func (o ServerOutput) ServerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.ServerGroup }).(pulumi.StringPtrOutput)
}

func (o ServerOutput) SimpleBackup() ServerSimpleBackupPtrOutput {
	return o.ApplyT(func(v *Server) ServerSimpleBackupPtrOutput { return v.SimpleBackup }).(ServerSimpleBackupPtrOutput)
}

// A set of storage devices associated with the server
func (o ServerOutput) StorageDevices() ServerStorageDeviceArrayOutput {
	return o.ApplyT(func(v *Server) ServerStorageDeviceArrayOutput { return v.StorageDevices }).(ServerStorageDeviceArrayOutput)
}

// The server related tags
func (o ServerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Block describing the preconfigured operating system
func (o ServerOutput) Template() ServerTemplatePtrOutput {
	return o.ApplyT(func(v *Server) ServerTemplatePtrOutput { return v.Template }).(ServerTemplatePtrOutput)
}

// The timezone of the server. The timezone must be a valid timezone string, e.g. `Europe/Helsinki`.
func (o ServerOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

// A short, informational description of the server.
func (o ServerOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Defines URL for a server setup script, or the script body itself
func (o ServerOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

// The model of the server's video interface
func (o ServerOutput) VideoModel() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.VideoModel }).(pulumi.StringOutput)
}

// The zone in which the server will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
func (o ServerOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
