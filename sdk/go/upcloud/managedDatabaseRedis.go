// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > Redis is deprecated in favor of Valkey. Please use Valkey for new key value store instances.
//
// This resource represents Redis managed database. See UpCloud [Managed Databases](https://upcloud.com/products/managed-databases) product page for more details about the service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Minimal config
//			_, err := upcloud.NewManagedDatabaseRedis(ctx, "example1", &upcloud.ManagedDatabaseRedisArgs{
//				Plan:  pulumi.String("1x1xCPU-2GB"),
//				Title: pulumi.String("redis-1-example-2"),
//				Zone:  pulumi.String("fi-hel2"),
//			})
//			if err != nil {
//				return err
//			}
//			// Service with custom properties
//			_, err = upcloud.NewManagedDatabaseRedis(ctx, "example2", &upcloud.ManagedDatabaseRedisArgs{
//				Plan: pulumi.String("1x1xCPU-2GB"),
//				Properties: &upcloud.ManagedDatabaseRedisPropertiesArgs{
//					PublicAccess: pulumi.Bool(false),
//				},
//				Title: pulumi.String("redis-2-example-2"),
//				Zone:  pulumi.String("fi-hel1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ManagedDatabaseRedis struct {
	pulumi.CustomResourceState

	// Service component information
	Components ManagedDatabaseRedisComponentArrayOutput `pulumi:"components"`
	// User defined key-value pairs to classify the managed database.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow pulumi.StringOutput `pulumi:"maintenanceWindowDow"`
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime pulumi.StringOutput `pulumi:"maintenanceWindowTime"`
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name pulumi.StringOutput `pulumi:"name"`
	// Private networks attached to the managed database
	Networks ManagedDatabaseRedisNetworkArrayOutput `pulumi:"networks"`
	// Information about nodes providing the managed service
	NodeStates ManagedDatabaseRedisNodeStateArrayOutput `pulumi:"nodeStates"`
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
	// database plans <type>`.
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The administrative power state of the service
	Powered pulumi.BoolPtrOutput `pulumi:"powered"`
	// Primary database name
	PrimaryDatabase pulumi.StringOutput `pulumi:"primaryDatabase"`
	// Database Engine properties for Redis
	Properties ManagedDatabaseRedisPropertiesOutput `pulumi:"properties"`
	// Hostname to the service instance
	ServiceHost pulumi.StringOutput `pulumi:"serviceHost"`
	// Primary username's password to the service instance
	ServicePassword pulumi.StringOutput `pulumi:"servicePassword"`
	// Port to the service instance
	ServicePort pulumi.StringOutput `pulumi:"servicePort"`
	// URI to the service instance
	ServiceUri pulumi.StringOutput `pulumi:"serviceUri"`
	// Primary username to the service instance
	ServiceUsername pulumi.StringOutput `pulumi:"serviceUsername"`
	// State of the service
	State pulumi.StringOutput `pulumi:"state"`
	// If set to true, prevents the managed service from being powered off, or deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// Title of a managed database instance
	Title pulumi.StringOutput `pulumi:"title"`
	// Type of the service
	Type pulumi.StringOutput `pulumi:"type"`
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewManagedDatabaseRedis registers a new resource with the given unique name, arguments, and options.
func NewManagedDatabaseRedis(ctx *pulumi.Context,
	name string, args *ManagedDatabaseRedisArgs, opts ...pulumi.ResourceOption) (*ManagedDatabaseRedis, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"servicePassword",
		"serviceUri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedDatabaseRedis
	err := ctx.RegisterResource("upcloud:index/managedDatabaseRedis:ManagedDatabaseRedis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedDatabaseRedis gets an existing ManagedDatabaseRedis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedDatabaseRedis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedDatabaseRedisState, opts ...pulumi.ResourceOption) (*ManagedDatabaseRedis, error) {
	var resource ManagedDatabaseRedis
	err := ctx.ReadResource("upcloud:index/managedDatabaseRedis:ManagedDatabaseRedis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedDatabaseRedis resources.
type managedDatabaseRedisState struct {
	// Service component information
	Components []ManagedDatabaseRedisComponent `pulumi:"components"`
	// User defined key-value pairs to classify the managed database.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `pulumi:"name"`
	// Private networks attached to the managed database
	Networks []ManagedDatabaseRedisNetwork `pulumi:"networks"`
	// Information about nodes providing the managed service
	NodeStates []ManagedDatabaseRedisNodeState `pulumi:"nodeStates"`
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
	// database plans <type>`.
	Plan *string `pulumi:"plan"`
	// The administrative power state of the service
	Powered *bool `pulumi:"powered"`
	// Primary database name
	PrimaryDatabase *string `pulumi:"primaryDatabase"`
	// Database Engine properties for Redis
	Properties *ManagedDatabaseRedisProperties `pulumi:"properties"`
	// Hostname to the service instance
	ServiceHost *string `pulumi:"serviceHost"`
	// Primary username's password to the service instance
	ServicePassword *string `pulumi:"servicePassword"`
	// Port to the service instance
	ServicePort *string `pulumi:"servicePort"`
	// URI to the service instance
	ServiceUri *string `pulumi:"serviceUri"`
	// Primary username to the service instance
	ServiceUsername *string `pulumi:"serviceUsername"`
	// State of the service
	State *string `pulumi:"state"`
	// If set to true, prevents the managed service from being powered off, or deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Title of a managed database instance
	Title *string `pulumi:"title"`
	// Type of the service
	Type *string `pulumi:"type"`
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone *string `pulumi:"zone"`
}

type ManagedDatabaseRedisState struct {
	// Service component information
	Components ManagedDatabaseRedisComponentArrayInput
	// User defined key-value pairs to classify the managed database.
	Labels pulumi.StringMapInput
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow pulumi.StringPtrInput
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime pulumi.StringPtrInput
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name pulumi.StringPtrInput
	// Private networks attached to the managed database
	Networks ManagedDatabaseRedisNetworkArrayInput
	// Information about nodes providing the managed service
	NodeStates ManagedDatabaseRedisNodeStateArrayInput
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
	// database plans <type>`.
	Plan pulumi.StringPtrInput
	// The administrative power state of the service
	Powered pulumi.BoolPtrInput
	// Primary database name
	PrimaryDatabase pulumi.StringPtrInput
	// Database Engine properties for Redis
	Properties ManagedDatabaseRedisPropertiesPtrInput
	// Hostname to the service instance
	ServiceHost pulumi.StringPtrInput
	// Primary username's password to the service instance
	ServicePassword pulumi.StringPtrInput
	// Port to the service instance
	ServicePort pulumi.StringPtrInput
	// URI to the service instance
	ServiceUri pulumi.StringPtrInput
	// Primary username to the service instance
	ServiceUsername pulumi.StringPtrInput
	// State of the service
	State pulumi.StringPtrInput
	// If set to true, prevents the managed service from being powered off, or deleted.
	TerminationProtection pulumi.BoolPtrInput
	// Title of a managed database instance
	Title pulumi.StringPtrInput
	// Type of the service
	Type pulumi.StringPtrInput
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringPtrInput
}

func (ManagedDatabaseRedisState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseRedisState)(nil)).Elem()
}

type managedDatabaseRedisArgs struct {
	// User defined key-value pairs to classify the managed database.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow *string `pulumi:"maintenanceWindowDow"`
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime *string `pulumi:"maintenanceWindowTime"`
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name *string `pulumi:"name"`
	// Private networks attached to the managed database
	Networks []ManagedDatabaseRedisNetwork `pulumi:"networks"`
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
	// database plans <type>`.
	Plan string `pulumi:"plan"`
	// The administrative power state of the service
	Powered *bool `pulumi:"powered"`
	// Database Engine properties for Redis
	Properties *ManagedDatabaseRedisProperties `pulumi:"properties"`
	// If set to true, prevents the managed service from being powered off, or deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Title of a managed database instance
	Title string `pulumi:"title"`
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a ManagedDatabaseRedis resource.
type ManagedDatabaseRedisArgs struct {
	// User defined key-value pairs to classify the managed database.
	Labels pulumi.StringMapInput
	// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
	MaintenanceWindowDow pulumi.StringPtrInput
	// Maintenance window UTC time in hh:mm:ss format
	MaintenanceWindowTime pulumi.StringPtrInput
	// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
	Name pulumi.StringPtrInput
	// Private networks attached to the managed database
	Networks ManagedDatabaseRedisNetworkArrayInput
	// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
	// database plans <type>`.
	Plan pulumi.StringInput
	// The administrative power state of the service
	Powered pulumi.BoolPtrInput
	// Database Engine properties for Redis
	Properties ManagedDatabaseRedisPropertiesPtrInput
	// If set to true, prevents the managed service from being powered off, or deleted.
	TerminationProtection pulumi.BoolPtrInput
	// Title of a managed database instance
	Title pulumi.StringInput
	// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringInput
}

func (ManagedDatabaseRedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseRedisArgs)(nil)).Elem()
}

type ManagedDatabaseRedisInput interface {
	pulumi.Input

	ToManagedDatabaseRedisOutput() ManagedDatabaseRedisOutput
	ToManagedDatabaseRedisOutputWithContext(ctx context.Context) ManagedDatabaseRedisOutput
}

func (*ManagedDatabaseRedis) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDatabaseRedis)(nil)).Elem()
}

func (i *ManagedDatabaseRedis) ToManagedDatabaseRedisOutput() ManagedDatabaseRedisOutput {
	return i.ToManagedDatabaseRedisOutputWithContext(context.Background())
}

func (i *ManagedDatabaseRedis) ToManagedDatabaseRedisOutputWithContext(ctx context.Context) ManagedDatabaseRedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseRedisOutput)
}

// ManagedDatabaseRedisArrayInput is an input type that accepts ManagedDatabaseRedisArray and ManagedDatabaseRedisArrayOutput values.
// You can construct a concrete instance of `ManagedDatabaseRedisArrayInput` via:
//
//	ManagedDatabaseRedisArray{ ManagedDatabaseRedisArgs{...} }
type ManagedDatabaseRedisArrayInput interface {
	pulumi.Input

	ToManagedDatabaseRedisArrayOutput() ManagedDatabaseRedisArrayOutput
	ToManagedDatabaseRedisArrayOutputWithContext(context.Context) ManagedDatabaseRedisArrayOutput
}

type ManagedDatabaseRedisArray []ManagedDatabaseRedisInput

func (ManagedDatabaseRedisArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedDatabaseRedis)(nil)).Elem()
}

func (i ManagedDatabaseRedisArray) ToManagedDatabaseRedisArrayOutput() ManagedDatabaseRedisArrayOutput {
	return i.ToManagedDatabaseRedisArrayOutputWithContext(context.Background())
}

func (i ManagedDatabaseRedisArray) ToManagedDatabaseRedisArrayOutputWithContext(ctx context.Context) ManagedDatabaseRedisArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseRedisArrayOutput)
}

// ManagedDatabaseRedisMapInput is an input type that accepts ManagedDatabaseRedisMap and ManagedDatabaseRedisMapOutput values.
// You can construct a concrete instance of `ManagedDatabaseRedisMapInput` via:
//
//	ManagedDatabaseRedisMap{ "key": ManagedDatabaseRedisArgs{...} }
type ManagedDatabaseRedisMapInput interface {
	pulumi.Input

	ToManagedDatabaseRedisMapOutput() ManagedDatabaseRedisMapOutput
	ToManagedDatabaseRedisMapOutputWithContext(context.Context) ManagedDatabaseRedisMapOutput
}

type ManagedDatabaseRedisMap map[string]ManagedDatabaseRedisInput

func (ManagedDatabaseRedisMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedDatabaseRedis)(nil)).Elem()
}

func (i ManagedDatabaseRedisMap) ToManagedDatabaseRedisMapOutput() ManagedDatabaseRedisMapOutput {
	return i.ToManagedDatabaseRedisMapOutputWithContext(context.Background())
}

func (i ManagedDatabaseRedisMap) ToManagedDatabaseRedisMapOutputWithContext(ctx context.Context) ManagedDatabaseRedisMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseRedisMapOutput)
}

type ManagedDatabaseRedisOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseRedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDatabaseRedis)(nil)).Elem()
}

func (o ManagedDatabaseRedisOutput) ToManagedDatabaseRedisOutput() ManagedDatabaseRedisOutput {
	return o
}

func (o ManagedDatabaseRedisOutput) ToManagedDatabaseRedisOutputWithContext(ctx context.Context) ManagedDatabaseRedisOutput {
	return o
}

// Service component information
func (o ManagedDatabaseRedisOutput) Components() ManagedDatabaseRedisComponentArrayOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) ManagedDatabaseRedisComponentArrayOutput { return v.Components }).(ManagedDatabaseRedisComponentArrayOutput)
}

// User defined key-value pairs to classify the managed database.
func (o ManagedDatabaseRedisOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
func (o ManagedDatabaseRedisOutput) MaintenanceWindowDow() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.MaintenanceWindowDow }).(pulumi.StringOutput)
}

// Maintenance window UTC time in hh:mm:ss format
func (o ManagedDatabaseRedisOutput) MaintenanceWindowTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.MaintenanceWindowTime }).(pulumi.StringOutput)
}

// Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
func (o ManagedDatabaseRedisOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Private networks attached to the managed database
func (o ManagedDatabaseRedisOutput) Networks() ManagedDatabaseRedisNetworkArrayOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) ManagedDatabaseRedisNetworkArrayOutput { return v.Networks }).(ManagedDatabaseRedisNetworkArrayOutput)
}

// Information about nodes providing the managed service
func (o ManagedDatabaseRedisOutput) NodeStates() ManagedDatabaseRedisNodeStateArrayOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) ManagedDatabaseRedisNodeStateArrayOutput { return v.NodeStates }).(ManagedDatabaseRedisNodeStateArrayOutput)
}

// Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl
// database plans <type>`.
func (o ManagedDatabaseRedisOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// The administrative power state of the service
func (o ManagedDatabaseRedisOutput) Powered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.BoolPtrOutput { return v.Powered }).(pulumi.BoolPtrOutput)
}

// Primary database name
func (o ManagedDatabaseRedisOutput) PrimaryDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.PrimaryDatabase }).(pulumi.StringOutput)
}

// Database Engine properties for Redis
func (o ManagedDatabaseRedisOutput) Properties() ManagedDatabaseRedisPropertiesOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) ManagedDatabaseRedisPropertiesOutput { return v.Properties }).(ManagedDatabaseRedisPropertiesOutput)
}

// Hostname to the service instance
func (o ManagedDatabaseRedisOutput) ServiceHost() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.ServiceHost }).(pulumi.StringOutput)
}

// Primary username's password to the service instance
func (o ManagedDatabaseRedisOutput) ServicePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.ServicePassword }).(pulumi.StringOutput)
}

// Port to the service instance
func (o ManagedDatabaseRedisOutput) ServicePort() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.ServicePort }).(pulumi.StringOutput)
}

// URI to the service instance
func (o ManagedDatabaseRedisOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.ServiceUri }).(pulumi.StringOutput)
}

// Primary username to the service instance
func (o ManagedDatabaseRedisOutput) ServiceUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.ServiceUsername }).(pulumi.StringOutput)
}

// State of the service
func (o ManagedDatabaseRedisOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// If set to true, prevents the managed service from being powered off, or deleted.
func (o ManagedDatabaseRedisOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// Title of a managed database instance
func (o ManagedDatabaseRedisOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Type of the service
func (o ManagedDatabaseRedisOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
func (o ManagedDatabaseRedisOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseRedis) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ManagedDatabaseRedisArrayOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseRedisArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedDatabaseRedis)(nil)).Elem()
}

func (o ManagedDatabaseRedisArrayOutput) ToManagedDatabaseRedisArrayOutput() ManagedDatabaseRedisArrayOutput {
	return o
}

func (o ManagedDatabaseRedisArrayOutput) ToManagedDatabaseRedisArrayOutputWithContext(ctx context.Context) ManagedDatabaseRedisArrayOutput {
	return o
}

func (o ManagedDatabaseRedisArrayOutput) Index(i pulumi.IntInput) ManagedDatabaseRedisOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedDatabaseRedis {
		return vs[0].([]*ManagedDatabaseRedis)[vs[1].(int)]
	}).(ManagedDatabaseRedisOutput)
}

type ManagedDatabaseRedisMapOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseRedisMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedDatabaseRedis)(nil)).Elem()
}

func (o ManagedDatabaseRedisMapOutput) ToManagedDatabaseRedisMapOutput() ManagedDatabaseRedisMapOutput {
	return o
}

func (o ManagedDatabaseRedisMapOutput) ToManagedDatabaseRedisMapOutputWithContext(ctx context.Context) ManagedDatabaseRedisMapOutput {
	return o
}

func (o ManagedDatabaseRedisMapOutput) MapIndex(k pulumi.StringInput) ManagedDatabaseRedisOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedDatabaseRedis {
		return vs[0].(map[string]*ManagedDatabaseRedis)[vs[1].(string)]
	}).(ManagedDatabaseRedisOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseRedisInput)(nil)).Elem(), &ManagedDatabaseRedis{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseRedisArrayInput)(nil)).Elem(), ManagedDatabaseRedisArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseRedisMapInput)(nil)).Elem(), ManagedDatabaseRedisMap{})
	pulumi.RegisterOutputType(ManagedDatabaseRedisOutput{})
	pulumi.RegisterOutputType(ManagedDatabaseRedisArrayOutput{})
	pulumi.RegisterOutputType(ManagedDatabaseRedisMapOutput{})
}
