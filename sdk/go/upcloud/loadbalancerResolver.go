// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents service's domain name resolver
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			lbZone := "fi-hel2"
//			if param := cfg.Get("lbZone"); param != "" {
//				lbZone = param
//			}
//			_, err := upcloud.NewNetwork(ctx, "lbNetwork", &upcloud.NetworkArgs{
//				Zone: pulumi.String(lbZone),
//				IpNetwork: &upcloud.NetworkIpNetworkArgs{
//					Address: pulumi.String("10.0.0.0/24"),
//					Dhcp:    pulumi.Bool(true),
//					Family:  pulumi.String("IPv4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancer(ctx, "lb", &upcloud.LoadbalancerArgs{
//				ConfiguredStatus: pulumi.String("started"),
//				Plan:             pulumi.String("development"),
//				Zone:             pulumi.String(lbZone),
//				Network:          pulumi.Any(resource.Upcloud_network.Lb_network.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerResolver(ctx, "lbResolver1", &upcloud.LoadbalancerResolverArgs{
//				Loadbalancer: pulumi.Any(resource.Upcloud_loadbalancer.Lb.Id),
//				CacheInvalid: pulumi.Int(10),
//				CacheValid:   pulumi.Int(100),
//				Retries:      pulumi.Int(5),
//				Timeout:      pulumi.Int(10),
//				TimeoutRetry: pulumi.Int(10),
//				Nameservers: pulumi.StringArray{
//					pulumi.String("10.0.0.10:53"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LoadbalancerResolver struct {
	pulumi.CustomResourceState

	// Time in seconds to cache invalid results.
	CacheInvalid pulumi.IntOutput `pulumi:"cacheInvalid"`
	// Time in seconds to cache valid results.
	CacheValid pulumi.IntOutput `pulumi:"cacheValid"`
	// ID of the load balancer to which the resolver is connected.
	Loadbalancer pulumi.StringOutput `pulumi:"loadbalancer"`
	// The name of the resolver must be unique within the service.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
	// optional, if missing then default 53 will be used.
	Nameservers pulumi.StringArrayOutput `pulumi:"nameservers"`
	// Number of retries on failure.
	Retries pulumi.IntOutput `pulumi:"retries"`
	// Timeout for the query in seconds.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Timeout for the query retries in seconds.
	TimeoutRetry pulumi.IntOutput `pulumi:"timeoutRetry"`
}

// NewLoadbalancerResolver registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerResolver(ctx *pulumi.Context,
	name string, args *LoadbalancerResolverArgs, opts ...pulumi.ResourceOption) (*LoadbalancerResolver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CacheInvalid == nil {
		return nil, errors.New("invalid value for required argument 'CacheInvalid'")
	}
	if args.CacheValid == nil {
		return nil, errors.New("invalid value for required argument 'CacheValid'")
	}
	if args.Loadbalancer == nil {
		return nil, errors.New("invalid value for required argument 'Loadbalancer'")
	}
	if args.Nameservers == nil {
		return nil, errors.New("invalid value for required argument 'Nameservers'")
	}
	if args.Retries == nil {
		return nil, errors.New("invalid value for required argument 'Retries'")
	}
	if args.Timeout == nil {
		return nil, errors.New("invalid value for required argument 'Timeout'")
	}
	if args.TimeoutRetry == nil {
		return nil, errors.New("invalid value for required argument 'TimeoutRetry'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerResolver
	err := ctx.RegisterResource("upcloud:index/loadbalancerResolver:LoadbalancerResolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerResolver gets an existing LoadbalancerResolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerResolverState, opts ...pulumi.ResourceOption) (*LoadbalancerResolver, error) {
	var resource LoadbalancerResolver
	err := ctx.ReadResource("upcloud:index/loadbalancerResolver:LoadbalancerResolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerResolver resources.
type loadbalancerResolverState struct {
	// Time in seconds to cache invalid results.
	CacheInvalid *int `pulumi:"cacheInvalid"`
	// Time in seconds to cache valid results.
	CacheValid *int `pulumi:"cacheValid"`
	// ID of the load balancer to which the resolver is connected.
	Loadbalancer *string `pulumi:"loadbalancer"`
	// The name of the resolver must be unique within the service.
	Name *string `pulumi:"name"`
	// List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
	// optional, if missing then default 53 will be used.
	Nameservers []string `pulumi:"nameservers"`
	// Number of retries on failure.
	Retries *int `pulumi:"retries"`
	// Timeout for the query in seconds.
	Timeout *int `pulumi:"timeout"`
	// Timeout for the query retries in seconds.
	TimeoutRetry *int `pulumi:"timeoutRetry"`
}

type LoadbalancerResolverState struct {
	// Time in seconds to cache invalid results.
	CacheInvalid pulumi.IntPtrInput
	// Time in seconds to cache valid results.
	CacheValid pulumi.IntPtrInput
	// ID of the load balancer to which the resolver is connected.
	Loadbalancer pulumi.StringPtrInput
	// The name of the resolver must be unique within the service.
	Name pulumi.StringPtrInput
	// List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
	// optional, if missing then default 53 will be used.
	Nameservers pulumi.StringArrayInput
	// Number of retries on failure.
	Retries pulumi.IntPtrInput
	// Timeout for the query in seconds.
	Timeout pulumi.IntPtrInput
	// Timeout for the query retries in seconds.
	TimeoutRetry pulumi.IntPtrInput
}

func (LoadbalancerResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerResolverState)(nil)).Elem()
}

type loadbalancerResolverArgs struct {
	// Time in seconds to cache invalid results.
	CacheInvalid int `pulumi:"cacheInvalid"`
	// Time in seconds to cache valid results.
	CacheValid int `pulumi:"cacheValid"`
	// ID of the load balancer to which the resolver is connected.
	Loadbalancer string `pulumi:"loadbalancer"`
	// The name of the resolver must be unique within the service.
	Name *string `pulumi:"name"`
	// List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
	// optional, if missing then default 53 will be used.
	Nameservers []string `pulumi:"nameservers"`
	// Number of retries on failure.
	Retries int `pulumi:"retries"`
	// Timeout for the query in seconds.
	Timeout int `pulumi:"timeout"`
	// Timeout for the query retries in seconds.
	TimeoutRetry int `pulumi:"timeoutRetry"`
}

// The set of arguments for constructing a LoadbalancerResolver resource.
type LoadbalancerResolverArgs struct {
	// Time in seconds to cache invalid results.
	CacheInvalid pulumi.IntInput
	// Time in seconds to cache valid results.
	CacheValid pulumi.IntInput
	// ID of the load balancer to which the resolver is connected.
	Loadbalancer pulumi.StringInput
	// The name of the resolver must be unique within the service.
	Name pulumi.StringPtrInput
	// List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
	// optional, if missing then default 53 will be used.
	Nameservers pulumi.StringArrayInput
	// Number of retries on failure.
	Retries pulumi.IntInput
	// Timeout for the query in seconds.
	Timeout pulumi.IntInput
	// Timeout for the query retries in seconds.
	TimeoutRetry pulumi.IntInput
}

func (LoadbalancerResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerResolverArgs)(nil)).Elem()
}

type LoadbalancerResolverInput interface {
	pulumi.Input

	ToLoadbalancerResolverOutput() LoadbalancerResolverOutput
	ToLoadbalancerResolverOutputWithContext(ctx context.Context) LoadbalancerResolverOutput
}

func (*LoadbalancerResolver) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerResolver)(nil)).Elem()
}

func (i *LoadbalancerResolver) ToLoadbalancerResolverOutput() LoadbalancerResolverOutput {
	return i.ToLoadbalancerResolverOutputWithContext(context.Background())
}

func (i *LoadbalancerResolver) ToLoadbalancerResolverOutputWithContext(ctx context.Context) LoadbalancerResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerResolverOutput)
}

// LoadbalancerResolverArrayInput is an input type that accepts LoadbalancerResolverArray and LoadbalancerResolverArrayOutput values.
// You can construct a concrete instance of `LoadbalancerResolverArrayInput` via:
//
//	LoadbalancerResolverArray{ LoadbalancerResolverArgs{...} }
type LoadbalancerResolverArrayInput interface {
	pulumi.Input

	ToLoadbalancerResolverArrayOutput() LoadbalancerResolverArrayOutput
	ToLoadbalancerResolverArrayOutputWithContext(context.Context) LoadbalancerResolverArrayOutput
}

type LoadbalancerResolverArray []LoadbalancerResolverInput

func (LoadbalancerResolverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerResolver)(nil)).Elem()
}

func (i LoadbalancerResolverArray) ToLoadbalancerResolverArrayOutput() LoadbalancerResolverArrayOutput {
	return i.ToLoadbalancerResolverArrayOutputWithContext(context.Background())
}

func (i LoadbalancerResolverArray) ToLoadbalancerResolverArrayOutputWithContext(ctx context.Context) LoadbalancerResolverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerResolverArrayOutput)
}

// LoadbalancerResolverMapInput is an input type that accepts LoadbalancerResolverMap and LoadbalancerResolverMapOutput values.
// You can construct a concrete instance of `LoadbalancerResolverMapInput` via:
//
//	LoadbalancerResolverMap{ "key": LoadbalancerResolverArgs{...} }
type LoadbalancerResolverMapInput interface {
	pulumi.Input

	ToLoadbalancerResolverMapOutput() LoadbalancerResolverMapOutput
	ToLoadbalancerResolverMapOutputWithContext(context.Context) LoadbalancerResolverMapOutput
}

type LoadbalancerResolverMap map[string]LoadbalancerResolverInput

func (LoadbalancerResolverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerResolver)(nil)).Elem()
}

func (i LoadbalancerResolverMap) ToLoadbalancerResolverMapOutput() LoadbalancerResolverMapOutput {
	return i.ToLoadbalancerResolverMapOutputWithContext(context.Background())
}

func (i LoadbalancerResolverMap) ToLoadbalancerResolverMapOutputWithContext(ctx context.Context) LoadbalancerResolverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerResolverMapOutput)
}

type LoadbalancerResolverOutput struct{ *pulumi.OutputState }

func (LoadbalancerResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerResolver)(nil)).Elem()
}

func (o LoadbalancerResolverOutput) ToLoadbalancerResolverOutput() LoadbalancerResolverOutput {
	return o
}

func (o LoadbalancerResolverOutput) ToLoadbalancerResolverOutputWithContext(ctx context.Context) LoadbalancerResolverOutput {
	return o
}

// Time in seconds to cache invalid results.
func (o LoadbalancerResolverOutput) CacheInvalid() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerResolver) pulumi.IntOutput { return v.CacheInvalid }).(pulumi.IntOutput)
}

// Time in seconds to cache valid results.
func (o LoadbalancerResolverOutput) CacheValid() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerResolver) pulumi.IntOutput { return v.CacheValid }).(pulumi.IntOutput)
}

// ID of the load balancer to which the resolver is connected.
func (o LoadbalancerResolverOutput) Loadbalancer() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerResolver) pulumi.StringOutput { return v.Loadbalancer }).(pulumi.StringOutput)
}

// The name of the resolver must be unique within the service.
func (o LoadbalancerResolverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerResolver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
// optional, if missing then default 53 will be used.
func (o LoadbalancerResolverOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerResolver) pulumi.StringArrayOutput { return v.Nameservers }).(pulumi.StringArrayOutput)
}

// Number of retries on failure.
func (o LoadbalancerResolverOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerResolver) pulumi.IntOutput { return v.Retries }).(pulumi.IntOutput)
}

// Timeout for the query in seconds.
func (o LoadbalancerResolverOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerResolver) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// Timeout for the query retries in seconds.
func (o LoadbalancerResolverOutput) TimeoutRetry() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerResolver) pulumi.IntOutput { return v.TimeoutRetry }).(pulumi.IntOutput)
}

type LoadbalancerResolverArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerResolverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerResolver)(nil)).Elem()
}

func (o LoadbalancerResolverArrayOutput) ToLoadbalancerResolverArrayOutput() LoadbalancerResolverArrayOutput {
	return o
}

func (o LoadbalancerResolverArrayOutput) ToLoadbalancerResolverArrayOutputWithContext(ctx context.Context) LoadbalancerResolverArrayOutput {
	return o
}

func (o LoadbalancerResolverArrayOutput) Index(i pulumi.IntInput) LoadbalancerResolverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerResolver {
		return vs[0].([]*LoadbalancerResolver)[vs[1].(int)]
	}).(LoadbalancerResolverOutput)
}

type LoadbalancerResolverMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerResolverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerResolver)(nil)).Elem()
}

func (o LoadbalancerResolverMapOutput) ToLoadbalancerResolverMapOutput() LoadbalancerResolverMapOutput {
	return o
}

func (o LoadbalancerResolverMapOutput) ToLoadbalancerResolverMapOutputWithContext(ctx context.Context) LoadbalancerResolverMapOutput {
	return o
}

func (o LoadbalancerResolverMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerResolverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerResolver {
		return vs[0].(map[string]*LoadbalancerResolver)[vs[1].(string)]
	}).(LoadbalancerResolverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerResolverInput)(nil)).Elem(), &LoadbalancerResolver{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerResolverArrayInput)(nil)).Elem(), LoadbalancerResolverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerResolverMapInput)(nil)).Elem(), LoadbalancerResolverMap{})
	pulumi.RegisterOutputType(LoadbalancerResolverOutput{})
	pulumi.RegisterOutputType(LoadbalancerResolverArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerResolverMapOutput{})
}
