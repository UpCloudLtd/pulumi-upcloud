// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
//
// Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			appImage, err := upcloud.LookupStorage(ctx, &upcloud.LookupStorageArgs{
//				Type:       pulumi.StringRef("template"),
//				NameRegex:  pulumi.StringRef("^app_image.*"),
//				MostRecent: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewServer(ctx, "example", &upcloud.ServerArgs{
//				Hostname: pulumi.String("debian.example.tld"),
//				Zone:     pulumi.String("fi-hel1"),
//				NetworkInterfaces: upcloud.ServerNetworkInterfaceArray{
//					&upcloud.ServerNetworkInterfaceArgs{
//						Type: pulumi.String("public"),
//					},
//				},
//				Template: &upcloud.ServerTemplateArgs{
//					Storage: pulumi.String(appImage.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Build only new servers with your latest custom image
//			//
//			// Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
//			_, err = upcloud.NewServer(ctx, "example2", &upcloud.ServerArgs{
//				Hostname: pulumi.String("debian.example2.tld"),
//				Zone:     pulumi.String("fi-hel1"),
//				NetworkInterfaces: upcloud.ServerNetworkInterfaceArray{
//					&upcloud.ServerNetworkInterfaceArgs{
//						Type: pulumi.String("public"),
//					},
//				},
//				Template: &upcloud.ServerTemplateArgs{
//					Storage: pulumi.String(appImage.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStorage(ctx *pulumi.Context, args *LookupStorageArgs, opts ...pulumi.InvokeOption) (*LookupStorageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStorageResult
	err := ctx.Invoke("upcloud:index/getStorage:getStorage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStorage.
type LookupStorageArgs struct {
	AccessType *string `pulumi:"accessType"`
	Id         *string `pulumi:"id"`
	// Deprecated: Use exact title or UUID to limit the number of matching storages. Note that if you have multiple storages with the same title, you should use UUID to select the storage.
	MostRecent *bool `pulumi:"mostRecent"`
	// Deprecated: Contains the same value as `title`. Use `title` instead.
	Name *string `pulumi:"name"`
	// Deprecated: Use exact title or UUID instead.
	NameRegex *string `pulumi:"nameRegex"`
	Title     *string `pulumi:"title"`
	Type      *string `pulumi:"type"`
	Zone      *string `pulumi:"zone"`
}

// A collection of values returned by getStorage.
type LookupStorageResult struct {
	AccessType string            `pulumi:"accessType"`
	Encrypt    bool              `pulumi:"encrypt"`
	Id         string            `pulumi:"id"`
	Labels     map[string]string `pulumi:"labels"`
	// Deprecated: Use exact title or UUID to limit the number of matching storages. Note that if you have multiple storages with the same title, you should use UUID to select the storage.
	MostRecent *bool `pulumi:"mostRecent"`
	// Deprecated: Contains the same value as `title`. Use `title` instead.
	Name *string `pulumi:"name"`
	// Deprecated: Use exact title or UUID instead.
	NameRegex    *string           `pulumi:"nameRegex"`
	Size         int               `pulumi:"size"`
	State        string            `pulumi:"state"`
	SystemLabels map[string]string `pulumi:"systemLabels"`
	Tier         string            `pulumi:"tier"`
	Title        string            `pulumi:"title"`
	Type         string            `pulumi:"type"`
	Zone         string            `pulumi:"zone"`
}

func LookupStorageOutput(ctx *pulumi.Context, args LookupStorageOutputArgs, opts ...pulumi.InvokeOption) LookupStorageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStorageResultOutput, error) {
			args := v.(LookupStorageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("upcloud:index/getStorage:getStorage", args, LookupStorageResultOutput{}, options).(LookupStorageResultOutput), nil
		}).(LookupStorageResultOutput)
}

// A collection of arguments for invoking getStorage.
type LookupStorageOutputArgs struct {
	AccessType pulumi.StringPtrInput `pulumi:"accessType"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
	// Deprecated: Use exact title or UUID to limit the number of matching storages. Note that if you have multiple storages with the same title, you should use UUID to select the storage.
	MostRecent pulumi.BoolPtrInput `pulumi:"mostRecent"`
	// Deprecated: Contains the same value as `title`. Use `title` instead.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Deprecated: Use exact title or UUID instead.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	Title     pulumi.StringPtrInput `pulumi:"title"`
	Type      pulumi.StringPtrInput `pulumi:"type"`
	Zone      pulumi.StringPtrInput `pulumi:"zone"`
}

func (LookupStorageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStorageArgs)(nil)).Elem()
}

// A collection of values returned by getStorage.
type LookupStorageResultOutput struct{ *pulumi.OutputState }

func (LookupStorageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStorageResult)(nil)).Elem()
}

func (o LookupStorageResultOutput) ToLookupStorageResultOutput() LookupStorageResultOutput {
	return o
}

func (o LookupStorageResultOutput) ToLookupStorageResultOutputWithContext(ctx context.Context) LookupStorageResultOutput {
	return o
}

func (o LookupStorageResultOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageResult) string { return v.AccessType }).(pulumi.StringOutput)
}

func (o LookupStorageResultOutput) Encrypt() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStorageResult) bool { return v.Encrypt }).(pulumi.BoolOutput)
}

func (o LookupStorageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupStorageResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStorageResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Deprecated: Use exact title or UUID to limit the number of matching storages. Note that if you have multiple storages with the same title, you should use UUID to select the storage.
func (o LookupStorageResultOutput) MostRecent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupStorageResult) *bool { return v.MostRecent }).(pulumi.BoolPtrOutput)
}

// Deprecated: Contains the same value as `title`. Use `title` instead.
func (o LookupStorageResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStorageResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Deprecated: Use exact title or UUID instead.
func (o LookupStorageResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStorageResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o LookupStorageResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupStorageResult) int { return v.Size }).(pulumi.IntOutput)
}

func (o LookupStorageResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupStorageResultOutput) SystemLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStorageResult) map[string]string { return v.SystemLabels }).(pulumi.StringMapOutput)
}

func (o LookupStorageResultOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageResult) string { return v.Tier }).(pulumi.StringOutput)
}

func (o LookupStorageResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageResult) string { return v.Title }).(pulumi.StringOutput)
}

func (o LookupStorageResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupStorageResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStorageResultOutput{})
}
