// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents dynamic certificate bundle
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := upcloud.NewLoadbalancerDynamicCertificateBundle(ctx, "lbCbD1", &upcloud.LoadbalancerDynamicCertificateBundleArgs{
//				Hostnames: pulumi.StringArray{
//					pulumi.String("example.com"),
//					pulumi.String("app.example.net"),
//				},
//				KeyType: pulumi.String("rsa"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LoadbalancerDynamicCertificateBundle struct {
	pulumi.CustomResourceState

	// Certificate hostnames.
	Hostnames pulumi.StringArrayOutput `pulumi:"hostnames"`
	// Private key type (`rsa` / `ecdsa`).
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// The name of the certificate bundle. Must be unique within customer account.
	Name pulumi.StringOutput `pulumi:"name"`
	// The time after which a certificate is no longer valid.
	NotAfter pulumi.StringOutput `pulumi:"notAfter"`
	// The time on which a certificate becomes valid.
	NotBefore pulumi.StringOutput `pulumi:"notBefore"`
	// The service operational state indicates the service's current operational, effective state. Managed by the system.
	OperationalState pulumi.StringOutput `pulumi:"operationalState"`
}

// NewLoadbalancerDynamicCertificateBundle registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerDynamicCertificateBundle(ctx *pulumi.Context,
	name string, args *LoadbalancerDynamicCertificateBundleArgs, opts ...pulumi.ResourceOption) (*LoadbalancerDynamicCertificateBundle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostnames == nil {
		return nil, errors.New("invalid value for required argument 'Hostnames'")
	}
	if args.KeyType == nil {
		return nil, errors.New("invalid value for required argument 'KeyType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerDynamicCertificateBundle
	err := ctx.RegisterResource("upcloud:index/loadbalancerDynamicCertificateBundle:LoadbalancerDynamicCertificateBundle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerDynamicCertificateBundle gets an existing LoadbalancerDynamicCertificateBundle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerDynamicCertificateBundle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerDynamicCertificateBundleState, opts ...pulumi.ResourceOption) (*LoadbalancerDynamicCertificateBundle, error) {
	var resource LoadbalancerDynamicCertificateBundle
	err := ctx.ReadResource("upcloud:index/loadbalancerDynamicCertificateBundle:LoadbalancerDynamicCertificateBundle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerDynamicCertificateBundle resources.
type loadbalancerDynamicCertificateBundleState struct {
	// Certificate hostnames.
	Hostnames []string `pulumi:"hostnames"`
	// Private key type (`rsa` / `ecdsa`).
	KeyType *string `pulumi:"keyType"`
	// The name of the certificate bundle. Must be unique within customer account.
	Name *string `pulumi:"name"`
	// The time after which a certificate is no longer valid.
	NotAfter *string `pulumi:"notAfter"`
	// The time on which a certificate becomes valid.
	NotBefore *string `pulumi:"notBefore"`
	// The service operational state indicates the service's current operational, effective state. Managed by the system.
	OperationalState *string `pulumi:"operationalState"`
}

type LoadbalancerDynamicCertificateBundleState struct {
	// Certificate hostnames.
	Hostnames pulumi.StringArrayInput
	// Private key type (`rsa` / `ecdsa`).
	KeyType pulumi.StringPtrInput
	// The name of the certificate bundle. Must be unique within customer account.
	Name pulumi.StringPtrInput
	// The time after which a certificate is no longer valid.
	NotAfter pulumi.StringPtrInput
	// The time on which a certificate becomes valid.
	NotBefore pulumi.StringPtrInput
	// The service operational state indicates the service's current operational, effective state. Managed by the system.
	OperationalState pulumi.StringPtrInput
}

func (LoadbalancerDynamicCertificateBundleState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerDynamicCertificateBundleState)(nil)).Elem()
}

type loadbalancerDynamicCertificateBundleArgs struct {
	// Certificate hostnames.
	Hostnames []string `pulumi:"hostnames"`
	// Private key type (`rsa` / `ecdsa`).
	KeyType string `pulumi:"keyType"`
	// The name of the certificate bundle. Must be unique within customer account.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LoadbalancerDynamicCertificateBundle resource.
type LoadbalancerDynamicCertificateBundleArgs struct {
	// Certificate hostnames.
	Hostnames pulumi.StringArrayInput
	// Private key type (`rsa` / `ecdsa`).
	KeyType pulumi.StringInput
	// The name of the certificate bundle. Must be unique within customer account.
	Name pulumi.StringPtrInput
}

func (LoadbalancerDynamicCertificateBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerDynamicCertificateBundleArgs)(nil)).Elem()
}

type LoadbalancerDynamicCertificateBundleInput interface {
	pulumi.Input

	ToLoadbalancerDynamicCertificateBundleOutput() LoadbalancerDynamicCertificateBundleOutput
	ToLoadbalancerDynamicCertificateBundleOutputWithContext(ctx context.Context) LoadbalancerDynamicCertificateBundleOutput
}

func (*LoadbalancerDynamicCertificateBundle) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerDynamicCertificateBundle)(nil)).Elem()
}

func (i *LoadbalancerDynamicCertificateBundle) ToLoadbalancerDynamicCertificateBundleOutput() LoadbalancerDynamicCertificateBundleOutput {
	return i.ToLoadbalancerDynamicCertificateBundleOutputWithContext(context.Background())
}

func (i *LoadbalancerDynamicCertificateBundle) ToLoadbalancerDynamicCertificateBundleOutputWithContext(ctx context.Context) LoadbalancerDynamicCertificateBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerDynamicCertificateBundleOutput)
}

// LoadbalancerDynamicCertificateBundleArrayInput is an input type that accepts LoadbalancerDynamicCertificateBundleArray and LoadbalancerDynamicCertificateBundleArrayOutput values.
// You can construct a concrete instance of `LoadbalancerDynamicCertificateBundleArrayInput` via:
//
//	LoadbalancerDynamicCertificateBundleArray{ LoadbalancerDynamicCertificateBundleArgs{...} }
type LoadbalancerDynamicCertificateBundleArrayInput interface {
	pulumi.Input

	ToLoadbalancerDynamicCertificateBundleArrayOutput() LoadbalancerDynamicCertificateBundleArrayOutput
	ToLoadbalancerDynamicCertificateBundleArrayOutputWithContext(context.Context) LoadbalancerDynamicCertificateBundleArrayOutput
}

type LoadbalancerDynamicCertificateBundleArray []LoadbalancerDynamicCertificateBundleInput

func (LoadbalancerDynamicCertificateBundleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerDynamicCertificateBundle)(nil)).Elem()
}

func (i LoadbalancerDynamicCertificateBundleArray) ToLoadbalancerDynamicCertificateBundleArrayOutput() LoadbalancerDynamicCertificateBundleArrayOutput {
	return i.ToLoadbalancerDynamicCertificateBundleArrayOutputWithContext(context.Background())
}

func (i LoadbalancerDynamicCertificateBundleArray) ToLoadbalancerDynamicCertificateBundleArrayOutputWithContext(ctx context.Context) LoadbalancerDynamicCertificateBundleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerDynamicCertificateBundleArrayOutput)
}

// LoadbalancerDynamicCertificateBundleMapInput is an input type that accepts LoadbalancerDynamicCertificateBundleMap and LoadbalancerDynamicCertificateBundleMapOutput values.
// You can construct a concrete instance of `LoadbalancerDynamicCertificateBundleMapInput` via:
//
//	LoadbalancerDynamicCertificateBundleMap{ "key": LoadbalancerDynamicCertificateBundleArgs{...} }
type LoadbalancerDynamicCertificateBundleMapInput interface {
	pulumi.Input

	ToLoadbalancerDynamicCertificateBundleMapOutput() LoadbalancerDynamicCertificateBundleMapOutput
	ToLoadbalancerDynamicCertificateBundleMapOutputWithContext(context.Context) LoadbalancerDynamicCertificateBundleMapOutput
}

type LoadbalancerDynamicCertificateBundleMap map[string]LoadbalancerDynamicCertificateBundleInput

func (LoadbalancerDynamicCertificateBundleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerDynamicCertificateBundle)(nil)).Elem()
}

func (i LoadbalancerDynamicCertificateBundleMap) ToLoadbalancerDynamicCertificateBundleMapOutput() LoadbalancerDynamicCertificateBundleMapOutput {
	return i.ToLoadbalancerDynamicCertificateBundleMapOutputWithContext(context.Background())
}

func (i LoadbalancerDynamicCertificateBundleMap) ToLoadbalancerDynamicCertificateBundleMapOutputWithContext(ctx context.Context) LoadbalancerDynamicCertificateBundleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerDynamicCertificateBundleMapOutput)
}

type LoadbalancerDynamicCertificateBundleOutput struct{ *pulumi.OutputState }

func (LoadbalancerDynamicCertificateBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerDynamicCertificateBundle)(nil)).Elem()
}

func (o LoadbalancerDynamicCertificateBundleOutput) ToLoadbalancerDynamicCertificateBundleOutput() LoadbalancerDynamicCertificateBundleOutput {
	return o
}

func (o LoadbalancerDynamicCertificateBundleOutput) ToLoadbalancerDynamicCertificateBundleOutputWithContext(ctx context.Context) LoadbalancerDynamicCertificateBundleOutput {
	return o
}

// Certificate hostnames.
func (o LoadbalancerDynamicCertificateBundleOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicCertificateBundle) pulumi.StringArrayOutput { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// Private key type (`rsa` / `ecdsa`).
func (o LoadbalancerDynamicCertificateBundleOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicCertificateBundle) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

// The name of the certificate bundle. Must be unique within customer account.
func (o LoadbalancerDynamicCertificateBundleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicCertificateBundle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The time after which a certificate is no longer valid.
func (o LoadbalancerDynamicCertificateBundleOutput) NotAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicCertificateBundle) pulumi.StringOutput { return v.NotAfter }).(pulumi.StringOutput)
}

// The time on which a certificate becomes valid.
func (o LoadbalancerDynamicCertificateBundleOutput) NotBefore() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicCertificateBundle) pulumi.StringOutput { return v.NotBefore }).(pulumi.StringOutput)
}

// The service operational state indicates the service's current operational, effective state. Managed by the system.
func (o LoadbalancerDynamicCertificateBundleOutput) OperationalState() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicCertificateBundle) pulumi.StringOutput { return v.OperationalState }).(pulumi.StringOutput)
}

type LoadbalancerDynamicCertificateBundleArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerDynamicCertificateBundleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerDynamicCertificateBundle)(nil)).Elem()
}

func (o LoadbalancerDynamicCertificateBundleArrayOutput) ToLoadbalancerDynamicCertificateBundleArrayOutput() LoadbalancerDynamicCertificateBundleArrayOutput {
	return o
}

func (o LoadbalancerDynamicCertificateBundleArrayOutput) ToLoadbalancerDynamicCertificateBundleArrayOutputWithContext(ctx context.Context) LoadbalancerDynamicCertificateBundleArrayOutput {
	return o
}

func (o LoadbalancerDynamicCertificateBundleArrayOutput) Index(i pulumi.IntInput) LoadbalancerDynamicCertificateBundleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerDynamicCertificateBundle {
		return vs[0].([]*LoadbalancerDynamicCertificateBundle)[vs[1].(int)]
	}).(LoadbalancerDynamicCertificateBundleOutput)
}

type LoadbalancerDynamicCertificateBundleMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerDynamicCertificateBundleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerDynamicCertificateBundle)(nil)).Elem()
}

func (o LoadbalancerDynamicCertificateBundleMapOutput) ToLoadbalancerDynamicCertificateBundleMapOutput() LoadbalancerDynamicCertificateBundleMapOutput {
	return o
}

func (o LoadbalancerDynamicCertificateBundleMapOutput) ToLoadbalancerDynamicCertificateBundleMapOutputWithContext(ctx context.Context) LoadbalancerDynamicCertificateBundleMapOutput {
	return o
}

func (o LoadbalancerDynamicCertificateBundleMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerDynamicCertificateBundleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerDynamicCertificateBundle {
		return vs[0].(map[string]*LoadbalancerDynamicCertificateBundle)[vs[1].(string)]
	}).(LoadbalancerDynamicCertificateBundleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerDynamicCertificateBundleInput)(nil)).Elem(), &LoadbalancerDynamicCertificateBundle{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerDynamicCertificateBundleArrayInput)(nil)).Elem(), LoadbalancerDynamicCertificateBundleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerDynamicCertificateBundleMapInput)(nil)).Elem(), LoadbalancerDynamicCertificateBundleMap{})
	pulumi.RegisterOutputType(LoadbalancerDynamicCertificateBundleOutput{})
	pulumi.RegisterOutputType(LoadbalancerDynamicCertificateBundleArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerDynamicCertificateBundleMapOutput{})
}
