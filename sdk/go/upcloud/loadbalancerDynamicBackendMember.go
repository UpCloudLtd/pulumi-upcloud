// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents load balancer dynamic backend member
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			lbZone := "fi-hel2"
//			if param := cfg.Get("lbZone"); param != "" {
//				lbZone = param
//			}
//			_, err := upcloud.NewNetwork(ctx, "lb_network", &upcloud.NetworkArgs{
//				Name: pulumi.String("lb-test-net"),
//				Zone: pulumi.String(lbZone),
//				IpNetwork: &upcloud.NetworkIpNetworkArgs{
//					Address: pulumi.String("10.0.0.0/24"),
//					Dhcp:    pulumi.Bool(true),
//					Family:  pulumi.String("IPv4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancer(ctx, "lb", &upcloud.LoadbalancerArgs{
//				ConfiguredStatus: pulumi.String("started"),
//				Name:             pulumi.String("lb-test"),
//				Plan:             pulumi.String("development"),
//				Zone:             pulumi.String(lbZone),
//				Network:          pulumi.Any(upcloudNetwork.LbNetwork.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerResolver(ctx, "lb_dns_1", &upcloud.LoadbalancerResolverArgs{
//				Loadbalancer: pulumi.Any(upcloudLoadbalancer.Lb.Id),
//				Name:         pulumi.String("lb-resolver-1-test"),
//				CacheInvalid: pulumi.Int(10),
//				CacheValid:   pulumi.Int(100),
//				Retries:      pulumi.Int(5),
//				Timeout:      pulumi.Int(10),
//				TimeoutRetry: pulumi.Int(10),
//				Nameservers: pulumi.StringArray{
//					pulumi.String("94.237.127.9:53"),
//					pulumi.String("94.237.40.9:53"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerBackend(ctx, "lb_be_1", &upcloud.LoadbalancerBackendArgs{
//				Loadbalancer: pulumi.Any(upcloudLoadbalancer.Lb.Id),
//				ResolverName: pulumi.Any(upcloudLoadbalancerResolver.LbDns1.Name),
//				Name:         pulumi.String("lb-be-1-test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerDynamicBackendMember(ctx, "lb_be_1_dm_1", &upcloud.LoadbalancerDynamicBackendMemberArgs{
//				Backend:     pulumi.Any(upcloudLoadbalancerBackend.LbBe1.Id),
//				Name:        pulumi.String("lb-be-1-dm-1-test"),
//				Weight:      pulumi.Int(10),
//				MaxSessions: pulumi.Int(10),
//				Enabled:     pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LoadbalancerDynamicBackendMember struct {
	pulumi.CustomResourceState

	// ID of the load balancer backend to which the member is connected.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Indicates if the member is enabled. Disabled members are excluded from load balancing.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Optional fallback IP address in case of failure on DNS resolving.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Maximum number of sessions before queueing.
	MaxSessions pulumi.IntOutput `pulumi:"maxSessions"`
	// The name of the member. Must be unique within within the load balancer backend.
	Name pulumi.StringOutput `pulumi:"name"`
	// Server port. Port is optional and can be specified in DNS SRV record.
	Port pulumi.IntOutput `pulumi:"port"`
	// Weight of the member. The higher the weight, the more traffic the member receives.
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewLoadbalancerDynamicBackendMember registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerDynamicBackendMember(ctx *pulumi.Context,
	name string, args *LoadbalancerDynamicBackendMemberArgs, opts ...pulumi.ResourceOption) (*LoadbalancerDynamicBackendMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	if args.MaxSessions == nil {
		return nil, errors.New("invalid value for required argument 'MaxSessions'")
	}
	if args.Weight == nil {
		return nil, errors.New("invalid value for required argument 'Weight'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerDynamicBackendMember
	err := ctx.RegisterResource("upcloud:index/loadbalancerDynamicBackendMember:LoadbalancerDynamicBackendMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerDynamicBackendMember gets an existing LoadbalancerDynamicBackendMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerDynamicBackendMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerDynamicBackendMemberState, opts ...pulumi.ResourceOption) (*LoadbalancerDynamicBackendMember, error) {
	var resource LoadbalancerDynamicBackendMember
	err := ctx.ReadResource("upcloud:index/loadbalancerDynamicBackendMember:LoadbalancerDynamicBackendMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerDynamicBackendMember resources.
type loadbalancerDynamicBackendMemberState struct {
	// ID of the load balancer backend to which the member is connected.
	Backend *string `pulumi:"backend"`
	// Indicates if the member is enabled. Disabled members are excluded from load balancing.
	Enabled *bool `pulumi:"enabled"`
	// Optional fallback IP address in case of failure on DNS resolving.
	Ip *string `pulumi:"ip"`
	// Maximum number of sessions before queueing.
	MaxSessions *int `pulumi:"maxSessions"`
	// The name of the member. Must be unique within within the load balancer backend.
	Name *string `pulumi:"name"`
	// Server port. Port is optional and can be specified in DNS SRV record.
	Port *int `pulumi:"port"`
	// Weight of the member. The higher the weight, the more traffic the member receives.
	Weight *int `pulumi:"weight"`
}

type LoadbalancerDynamicBackendMemberState struct {
	// ID of the load balancer backend to which the member is connected.
	Backend pulumi.StringPtrInput
	// Indicates if the member is enabled. Disabled members are excluded from load balancing.
	Enabled pulumi.BoolPtrInput
	// Optional fallback IP address in case of failure on DNS resolving.
	Ip pulumi.StringPtrInput
	// Maximum number of sessions before queueing.
	MaxSessions pulumi.IntPtrInput
	// The name of the member. Must be unique within within the load balancer backend.
	Name pulumi.StringPtrInput
	// Server port. Port is optional and can be specified in DNS SRV record.
	Port pulumi.IntPtrInput
	// Weight of the member. The higher the weight, the more traffic the member receives.
	Weight pulumi.IntPtrInput
}

func (LoadbalancerDynamicBackendMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerDynamicBackendMemberState)(nil)).Elem()
}

type loadbalancerDynamicBackendMemberArgs struct {
	// ID of the load balancer backend to which the member is connected.
	Backend string `pulumi:"backend"`
	// Indicates if the member is enabled. Disabled members are excluded from load balancing.
	Enabled *bool `pulumi:"enabled"`
	// Optional fallback IP address in case of failure on DNS resolving.
	Ip *string `pulumi:"ip"`
	// Maximum number of sessions before queueing.
	MaxSessions int `pulumi:"maxSessions"`
	// The name of the member. Must be unique within within the load balancer backend.
	Name *string `pulumi:"name"`
	// Server port. Port is optional and can be specified in DNS SRV record.
	Port *int `pulumi:"port"`
	// Weight of the member. The higher the weight, the more traffic the member receives.
	Weight int `pulumi:"weight"`
}

// The set of arguments for constructing a LoadbalancerDynamicBackendMember resource.
type LoadbalancerDynamicBackendMemberArgs struct {
	// ID of the load balancer backend to which the member is connected.
	Backend pulumi.StringInput
	// Indicates if the member is enabled. Disabled members are excluded from load balancing.
	Enabled pulumi.BoolPtrInput
	// Optional fallback IP address in case of failure on DNS resolving.
	Ip pulumi.StringPtrInput
	// Maximum number of sessions before queueing.
	MaxSessions pulumi.IntInput
	// The name of the member. Must be unique within within the load balancer backend.
	Name pulumi.StringPtrInput
	// Server port. Port is optional and can be specified in DNS SRV record.
	Port pulumi.IntPtrInput
	// Weight of the member. The higher the weight, the more traffic the member receives.
	Weight pulumi.IntInput
}

func (LoadbalancerDynamicBackendMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerDynamicBackendMemberArgs)(nil)).Elem()
}

type LoadbalancerDynamicBackendMemberInput interface {
	pulumi.Input

	ToLoadbalancerDynamicBackendMemberOutput() LoadbalancerDynamicBackendMemberOutput
	ToLoadbalancerDynamicBackendMemberOutputWithContext(ctx context.Context) LoadbalancerDynamicBackendMemberOutput
}

func (*LoadbalancerDynamicBackendMember) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerDynamicBackendMember)(nil)).Elem()
}

func (i *LoadbalancerDynamicBackendMember) ToLoadbalancerDynamicBackendMemberOutput() LoadbalancerDynamicBackendMemberOutput {
	return i.ToLoadbalancerDynamicBackendMemberOutputWithContext(context.Background())
}

func (i *LoadbalancerDynamicBackendMember) ToLoadbalancerDynamicBackendMemberOutputWithContext(ctx context.Context) LoadbalancerDynamicBackendMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerDynamicBackendMemberOutput)
}

// LoadbalancerDynamicBackendMemberArrayInput is an input type that accepts LoadbalancerDynamicBackendMemberArray and LoadbalancerDynamicBackendMemberArrayOutput values.
// You can construct a concrete instance of `LoadbalancerDynamicBackendMemberArrayInput` via:
//
//	LoadbalancerDynamicBackendMemberArray{ LoadbalancerDynamicBackendMemberArgs{...} }
type LoadbalancerDynamicBackendMemberArrayInput interface {
	pulumi.Input

	ToLoadbalancerDynamicBackendMemberArrayOutput() LoadbalancerDynamicBackendMemberArrayOutput
	ToLoadbalancerDynamicBackendMemberArrayOutputWithContext(context.Context) LoadbalancerDynamicBackendMemberArrayOutput
}

type LoadbalancerDynamicBackendMemberArray []LoadbalancerDynamicBackendMemberInput

func (LoadbalancerDynamicBackendMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerDynamicBackendMember)(nil)).Elem()
}

func (i LoadbalancerDynamicBackendMemberArray) ToLoadbalancerDynamicBackendMemberArrayOutput() LoadbalancerDynamicBackendMemberArrayOutput {
	return i.ToLoadbalancerDynamicBackendMemberArrayOutputWithContext(context.Background())
}

func (i LoadbalancerDynamicBackendMemberArray) ToLoadbalancerDynamicBackendMemberArrayOutputWithContext(ctx context.Context) LoadbalancerDynamicBackendMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerDynamicBackendMemberArrayOutput)
}

// LoadbalancerDynamicBackendMemberMapInput is an input type that accepts LoadbalancerDynamicBackendMemberMap and LoadbalancerDynamicBackendMemberMapOutput values.
// You can construct a concrete instance of `LoadbalancerDynamicBackendMemberMapInput` via:
//
//	LoadbalancerDynamicBackendMemberMap{ "key": LoadbalancerDynamicBackendMemberArgs{...} }
type LoadbalancerDynamicBackendMemberMapInput interface {
	pulumi.Input

	ToLoadbalancerDynamicBackendMemberMapOutput() LoadbalancerDynamicBackendMemberMapOutput
	ToLoadbalancerDynamicBackendMemberMapOutputWithContext(context.Context) LoadbalancerDynamicBackendMemberMapOutput
}

type LoadbalancerDynamicBackendMemberMap map[string]LoadbalancerDynamicBackendMemberInput

func (LoadbalancerDynamicBackendMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerDynamicBackendMember)(nil)).Elem()
}

func (i LoadbalancerDynamicBackendMemberMap) ToLoadbalancerDynamicBackendMemberMapOutput() LoadbalancerDynamicBackendMemberMapOutput {
	return i.ToLoadbalancerDynamicBackendMemberMapOutputWithContext(context.Background())
}

func (i LoadbalancerDynamicBackendMemberMap) ToLoadbalancerDynamicBackendMemberMapOutputWithContext(ctx context.Context) LoadbalancerDynamicBackendMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerDynamicBackendMemberMapOutput)
}

type LoadbalancerDynamicBackendMemberOutput struct{ *pulumi.OutputState }

func (LoadbalancerDynamicBackendMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerDynamicBackendMember)(nil)).Elem()
}

func (o LoadbalancerDynamicBackendMemberOutput) ToLoadbalancerDynamicBackendMemberOutput() LoadbalancerDynamicBackendMemberOutput {
	return o
}

func (o LoadbalancerDynamicBackendMemberOutput) ToLoadbalancerDynamicBackendMemberOutputWithContext(ctx context.Context) LoadbalancerDynamicBackendMemberOutput {
	return o
}

// ID of the load balancer backend to which the member is connected.
func (o LoadbalancerDynamicBackendMemberOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicBackendMember) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// Indicates if the member is enabled. Disabled members are excluded from load balancing.
func (o LoadbalancerDynamicBackendMemberOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicBackendMember) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Optional fallback IP address in case of failure on DNS resolving.
func (o LoadbalancerDynamicBackendMemberOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicBackendMember) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Maximum number of sessions before queueing.
func (o LoadbalancerDynamicBackendMemberOutput) MaxSessions() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicBackendMember) pulumi.IntOutput { return v.MaxSessions }).(pulumi.IntOutput)
}

// The name of the member. Must be unique within within the load balancer backend.
func (o LoadbalancerDynamicBackendMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicBackendMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Server port. Port is optional and can be specified in DNS SRV record.
func (o LoadbalancerDynamicBackendMemberOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicBackendMember) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Weight of the member. The higher the weight, the more traffic the member receives.
func (o LoadbalancerDynamicBackendMemberOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerDynamicBackendMember) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type LoadbalancerDynamicBackendMemberArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerDynamicBackendMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerDynamicBackendMember)(nil)).Elem()
}

func (o LoadbalancerDynamicBackendMemberArrayOutput) ToLoadbalancerDynamicBackendMemberArrayOutput() LoadbalancerDynamicBackendMemberArrayOutput {
	return o
}

func (o LoadbalancerDynamicBackendMemberArrayOutput) ToLoadbalancerDynamicBackendMemberArrayOutputWithContext(ctx context.Context) LoadbalancerDynamicBackendMemberArrayOutput {
	return o
}

func (o LoadbalancerDynamicBackendMemberArrayOutput) Index(i pulumi.IntInput) LoadbalancerDynamicBackendMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerDynamicBackendMember {
		return vs[0].([]*LoadbalancerDynamicBackendMember)[vs[1].(int)]
	}).(LoadbalancerDynamicBackendMemberOutput)
}

type LoadbalancerDynamicBackendMemberMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerDynamicBackendMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerDynamicBackendMember)(nil)).Elem()
}

func (o LoadbalancerDynamicBackendMemberMapOutput) ToLoadbalancerDynamicBackendMemberMapOutput() LoadbalancerDynamicBackendMemberMapOutput {
	return o
}

func (o LoadbalancerDynamicBackendMemberMapOutput) ToLoadbalancerDynamicBackendMemberMapOutputWithContext(ctx context.Context) LoadbalancerDynamicBackendMemberMapOutput {
	return o
}

func (o LoadbalancerDynamicBackendMemberMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerDynamicBackendMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerDynamicBackendMember {
		return vs[0].(map[string]*LoadbalancerDynamicBackendMember)[vs[1].(string)]
	}).(LoadbalancerDynamicBackendMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerDynamicBackendMemberInput)(nil)).Elem(), &LoadbalancerDynamicBackendMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerDynamicBackendMemberArrayInput)(nil)).Elem(), LoadbalancerDynamicBackendMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerDynamicBackendMemberMapInput)(nil)).Elem(), LoadbalancerDynamicBackendMemberMap{})
	pulumi.RegisterOutputType(LoadbalancerDynamicBackendMemberOutput{})
	pulumi.RegisterOutputType(LoadbalancerDynamicBackendMemberArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerDynamicBackendMemberMapOutput{})
}
