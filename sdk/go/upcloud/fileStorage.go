// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for managing UpCloud file storages (EXPERIMENTAL)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create network for the File Storage
//			this, err := upcloud.NewNetwork(ctx, "this", &upcloud.NetworkArgs{
//				Name: pulumi.String("file-storage-net-test"),
//				Zone: pulumi.String("fi-hel2"),
//				IpNetwork: &upcloud.NetworkIpNetworkArgs{
//					Address: pulumi.String("172.16.8.0/24"),
//					Dhcp:    pulumi.Bool(true),
//					Family:  pulumi.String("IPv4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewFileStorage(ctx, "example", &upcloud.FileStorageArgs{
//				Name:             pulumi.String("example-file-storage-test"),
//				Size:             pulumi.Int(250),
//				Zone:             pulumi.String("fi-hel2"),
//				ConfiguredStatus: pulumi.String("stopped"),
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("staging"),
//					"customer":    pulumi.String("example-customer"),
//				},
//				Shares: upcloud.FileStorageShareArray{
//					&upcloud.FileStorageShareArgs{
//						Name: pulumi.String("write-to-project"),
//						Path: pulumi.String("/project"),
//						Acls: upcloud.FileStorageShareAclArray{
//							&upcloud.FileStorageShareAclArgs{
//								Target:     pulumi.String("172.16.8.12"),
//								Permission: pulumi.String("rw"),
//							},
//						},
//					},
//				},
//				Networks: upcloud.FileStorageNetworkArray{
//					&upcloud.FileStorageNetworkArgs{
//						Family:    pulumi.String("IPv4"),
//						Name:      pulumi.String("example-private-net"),
//						Uuid:      this.ID(),
//						IpAddress: pulumi.String("172.16.8.11"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FileStorage struct {
	pulumi.CustomResourceState

	// The service configured status indicates the service's current intended status. Managed by the customer.
	ConfiguredStatus pulumi.StringOutput `pulumi:"configuredStatus"`
	// User defined key-value pairs to classify the file storage.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the file storage service.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network attached to this file storage (currently supports at most one of these blocks).
	Networks FileStorageNetworkArrayOutput `pulumi:"networks"`
	// List of shares exported by this file storage.
	Shares FileStorageShareArrayOutput `pulumi:"shares"`
	// Size of the file storage in GB.
	Size pulumi.IntOutput `pulumi:"size"`
	// Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewFileStorage registers a new resource with the given unique name, arguments, and options.
func NewFileStorage(ctx *pulumi.Context,
	name string, args *FileStorageArgs, opts ...pulumi.ResourceOption) (*FileStorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfiguredStatus == nil {
		return nil, errors.New("invalid value for required argument 'ConfiguredStatus'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileStorage
	err := ctx.RegisterResource("upcloud:index/fileStorage:FileStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileStorage gets an existing FileStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileStorageState, opts ...pulumi.ResourceOption) (*FileStorage, error) {
	var resource FileStorage
	err := ctx.ReadResource("upcloud:index/fileStorage:FileStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileStorage resources.
type fileStorageState struct {
	// The service configured status indicates the service's current intended status. Managed by the customer.
	ConfiguredStatus *string `pulumi:"configuredStatus"`
	// User defined key-value pairs to classify the file storage.
	Labels map[string]string `pulumi:"labels"`
	// Name of the file storage service.
	Name *string `pulumi:"name"`
	// Network attached to this file storage (currently supports at most one of these blocks).
	Networks []FileStorageNetwork `pulumi:"networks"`
	// List of shares exported by this file storage.
	Shares []FileStorageShare `pulumi:"shares"`
	// Size of the file storage in GB.
	Size *int `pulumi:"size"`
	// Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
	Zone *string `pulumi:"zone"`
}

type FileStorageState struct {
	// The service configured status indicates the service's current intended status. Managed by the customer.
	ConfiguredStatus pulumi.StringPtrInput
	// User defined key-value pairs to classify the file storage.
	Labels pulumi.StringMapInput
	// Name of the file storage service.
	Name pulumi.StringPtrInput
	// Network attached to this file storage (currently supports at most one of these blocks).
	Networks FileStorageNetworkArrayInput
	// List of shares exported by this file storage.
	Shares FileStorageShareArrayInput
	// Size of the file storage in GB.
	Size pulumi.IntPtrInput
	// Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringPtrInput
}

func (FileStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileStorageState)(nil)).Elem()
}

type fileStorageArgs struct {
	// The service configured status indicates the service's current intended status. Managed by the customer.
	ConfiguredStatus string `pulumi:"configuredStatus"`
	// User defined key-value pairs to classify the file storage.
	Labels map[string]string `pulumi:"labels"`
	// Name of the file storage service.
	Name *string `pulumi:"name"`
	// Network attached to this file storage (currently supports at most one of these blocks).
	Networks []FileStorageNetwork `pulumi:"networks"`
	// List of shares exported by this file storage.
	Shares []FileStorageShare `pulumi:"shares"`
	// Size of the file storage in GB.
	Size int `pulumi:"size"`
	// Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a FileStorage resource.
type FileStorageArgs struct {
	// The service configured status indicates the service's current intended status. Managed by the customer.
	ConfiguredStatus pulumi.StringInput
	// User defined key-value pairs to classify the file storage.
	Labels pulumi.StringMapInput
	// Name of the file storage service.
	Name pulumi.StringPtrInput
	// Network attached to this file storage (currently supports at most one of these blocks).
	Networks FileStorageNetworkArrayInput
	// List of shares exported by this file storage.
	Shares FileStorageShareArrayInput
	// Size of the file storage in GB.
	Size pulumi.IntInput
	// Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
	Zone pulumi.StringInput
}

func (FileStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileStorageArgs)(nil)).Elem()
}

type FileStorageInput interface {
	pulumi.Input

	ToFileStorageOutput() FileStorageOutput
	ToFileStorageOutputWithContext(ctx context.Context) FileStorageOutput
}

func (*FileStorage) ElementType() reflect.Type {
	return reflect.TypeOf((**FileStorage)(nil)).Elem()
}

func (i *FileStorage) ToFileStorageOutput() FileStorageOutput {
	return i.ToFileStorageOutputWithContext(context.Background())
}

func (i *FileStorage) ToFileStorageOutputWithContext(ctx context.Context) FileStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileStorageOutput)
}

// FileStorageArrayInput is an input type that accepts FileStorageArray and FileStorageArrayOutput values.
// You can construct a concrete instance of `FileStorageArrayInput` via:
//
//	FileStorageArray{ FileStorageArgs{...} }
type FileStorageArrayInput interface {
	pulumi.Input

	ToFileStorageArrayOutput() FileStorageArrayOutput
	ToFileStorageArrayOutputWithContext(context.Context) FileStorageArrayOutput
}

type FileStorageArray []FileStorageInput

func (FileStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileStorage)(nil)).Elem()
}

func (i FileStorageArray) ToFileStorageArrayOutput() FileStorageArrayOutput {
	return i.ToFileStorageArrayOutputWithContext(context.Background())
}

func (i FileStorageArray) ToFileStorageArrayOutputWithContext(ctx context.Context) FileStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileStorageArrayOutput)
}

// FileStorageMapInput is an input type that accepts FileStorageMap and FileStorageMapOutput values.
// You can construct a concrete instance of `FileStorageMapInput` via:
//
//	FileStorageMap{ "key": FileStorageArgs{...} }
type FileStorageMapInput interface {
	pulumi.Input

	ToFileStorageMapOutput() FileStorageMapOutput
	ToFileStorageMapOutputWithContext(context.Context) FileStorageMapOutput
}

type FileStorageMap map[string]FileStorageInput

func (FileStorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileStorage)(nil)).Elem()
}

func (i FileStorageMap) ToFileStorageMapOutput() FileStorageMapOutput {
	return i.ToFileStorageMapOutputWithContext(context.Background())
}

func (i FileStorageMap) ToFileStorageMapOutputWithContext(ctx context.Context) FileStorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileStorageMapOutput)
}

type FileStorageOutput struct{ *pulumi.OutputState }

func (FileStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileStorage)(nil)).Elem()
}

func (o FileStorageOutput) ToFileStorageOutput() FileStorageOutput {
	return o
}

func (o FileStorageOutput) ToFileStorageOutputWithContext(ctx context.Context) FileStorageOutput {
	return o
}

// The service configured status indicates the service's current intended status. Managed by the customer.
func (o FileStorageOutput) ConfiguredStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FileStorage) pulumi.StringOutput { return v.ConfiguredStatus }).(pulumi.StringOutput)
}

// User defined key-value pairs to classify the file storage.
func (o FileStorageOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FileStorage) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the file storage service.
func (o FileStorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FileStorage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network attached to this file storage (currently supports at most one of these blocks).
func (o FileStorageOutput) Networks() FileStorageNetworkArrayOutput {
	return o.ApplyT(func(v *FileStorage) FileStorageNetworkArrayOutput { return v.Networks }).(FileStorageNetworkArrayOutput)
}

// List of shares exported by this file storage.
func (o FileStorageOutput) Shares() FileStorageShareArrayOutput {
	return o.ApplyT(func(v *FileStorage) FileStorageShareArrayOutput { return v.Shares }).(FileStorageShareArrayOutput)
}

// Size of the file storage in GB.
func (o FileStorageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *FileStorage) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
func (o FileStorageOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *FileStorage) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type FileStorageArrayOutput struct{ *pulumi.OutputState }

func (FileStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileStorage)(nil)).Elem()
}

func (o FileStorageArrayOutput) ToFileStorageArrayOutput() FileStorageArrayOutput {
	return o
}

func (o FileStorageArrayOutput) ToFileStorageArrayOutputWithContext(ctx context.Context) FileStorageArrayOutput {
	return o
}

func (o FileStorageArrayOutput) Index(i pulumi.IntInput) FileStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileStorage {
		return vs[0].([]*FileStorage)[vs[1].(int)]
	}).(FileStorageOutput)
}

type FileStorageMapOutput struct{ *pulumi.OutputState }

func (FileStorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileStorage)(nil)).Elem()
}

func (o FileStorageMapOutput) ToFileStorageMapOutput() FileStorageMapOutput {
	return o
}

func (o FileStorageMapOutput) ToFileStorageMapOutputWithContext(ctx context.Context) FileStorageMapOutput {
	return o
}

func (o FileStorageMapOutput) MapIndex(k pulumi.StringInput) FileStorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileStorage {
		return vs[0].(map[string]*FileStorage)[vs[1].(string)]
	}).(FileStorageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileStorageInput)(nil)).Elem(), &FileStorage{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileStorageArrayInput)(nil)).Elem(), FileStorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileStorageMapInput)(nil)).Elem(), FileStorageMap{})
	pulumi.RegisterOutputType(FileStorageOutput{})
	pulumi.RegisterOutputType(FileStorageArrayOutput{})
	pulumi.RegisterOutputType(FileStorageMapOutput{})
}
