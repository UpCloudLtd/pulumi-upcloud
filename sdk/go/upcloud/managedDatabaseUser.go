// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents a user in managed database
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := upcloud.NewManagedDatabasePostgresql(ctx, "example", &upcloud.ManagedDatabasePostgresqlArgs{
//				Plan:  pulumi.String("1x1xCPU-2GB-25GB"),
//				Title: pulumi.String("postgres"),
//				Zone:  pulumi.String("fi-hel1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewManagedDatabaseUser(ctx, "exampleUser", &upcloud.ManagedDatabaseUserArgs{
//				Service:  example.ID(),
//				Username: pulumi.String("example_user"),
//				Password: pulumi.String("<USER_PASSWORD>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ManagedDatabaseUser struct {
	pulumi.CustomResourceState

	// MySQL only, authentication type.
	Authentication pulumi.StringPtrOutput `pulumi:"authentication"`
	// OpenSearch access control object.
	OpensearchAccessControl ManagedDatabaseUserOpensearchAccessControlPtrOutput `pulumi:"opensearchAccessControl"`
	// Password for the database user. Defaults to a random value
	Password pulumi.StringOutput `pulumi:"password"`
	// PostgreSQL access control object.
	PgAccessControl ManagedDatabaseUserPgAccessControlPtrOutput `pulumi:"pgAccessControl"`
	// Redis access control object.
	RedisAccessControl ManagedDatabaseUserRedisAccessControlPtrOutput `pulumi:"redisAccessControl"`
	// Service's UUID for which this user belongs to
	Service pulumi.StringOutput `pulumi:"service"`
	// Type of the user. Only normal type users can be created
	Type pulumi.StringOutput `pulumi:"type"`
	// Name of the database user
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewManagedDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewManagedDatabaseUser(ctx *pulumi.Context,
	name string, args *ManagedDatabaseUserArgs, opts ...pulumi.ResourceOption) (*ManagedDatabaseUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedDatabaseUser
	err := ctx.RegisterResource("upcloud:index/managedDatabaseUser:ManagedDatabaseUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedDatabaseUser gets an existing ManagedDatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedDatabaseUserState, opts ...pulumi.ResourceOption) (*ManagedDatabaseUser, error) {
	var resource ManagedDatabaseUser
	err := ctx.ReadResource("upcloud:index/managedDatabaseUser:ManagedDatabaseUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedDatabaseUser resources.
type managedDatabaseUserState struct {
	// MySQL only, authentication type.
	Authentication *string `pulumi:"authentication"`
	// OpenSearch access control object.
	OpensearchAccessControl *ManagedDatabaseUserOpensearchAccessControl `pulumi:"opensearchAccessControl"`
	// Password for the database user. Defaults to a random value
	Password *string `pulumi:"password"`
	// PostgreSQL access control object.
	PgAccessControl *ManagedDatabaseUserPgAccessControl `pulumi:"pgAccessControl"`
	// Redis access control object.
	RedisAccessControl *ManagedDatabaseUserRedisAccessControl `pulumi:"redisAccessControl"`
	// Service's UUID for which this user belongs to
	Service *string `pulumi:"service"`
	// Type of the user. Only normal type users can be created
	Type *string `pulumi:"type"`
	// Name of the database user
	Username *string `pulumi:"username"`
}

type ManagedDatabaseUserState struct {
	// MySQL only, authentication type.
	Authentication pulumi.StringPtrInput
	// OpenSearch access control object.
	OpensearchAccessControl ManagedDatabaseUserOpensearchAccessControlPtrInput
	// Password for the database user. Defaults to a random value
	Password pulumi.StringPtrInput
	// PostgreSQL access control object.
	PgAccessControl ManagedDatabaseUserPgAccessControlPtrInput
	// Redis access control object.
	RedisAccessControl ManagedDatabaseUserRedisAccessControlPtrInput
	// Service's UUID for which this user belongs to
	Service pulumi.StringPtrInput
	// Type of the user. Only normal type users can be created
	Type pulumi.StringPtrInput
	// Name of the database user
	Username pulumi.StringPtrInput
}

func (ManagedDatabaseUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseUserState)(nil)).Elem()
}

type managedDatabaseUserArgs struct {
	// MySQL only, authentication type.
	Authentication *string `pulumi:"authentication"`
	// OpenSearch access control object.
	OpensearchAccessControl *ManagedDatabaseUserOpensearchAccessControl `pulumi:"opensearchAccessControl"`
	// Password for the database user. Defaults to a random value
	Password *string `pulumi:"password"`
	// PostgreSQL access control object.
	PgAccessControl *ManagedDatabaseUserPgAccessControl `pulumi:"pgAccessControl"`
	// Redis access control object.
	RedisAccessControl *ManagedDatabaseUserRedisAccessControl `pulumi:"redisAccessControl"`
	// Service's UUID for which this user belongs to
	Service string `pulumi:"service"`
	// Name of the database user
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ManagedDatabaseUser resource.
type ManagedDatabaseUserArgs struct {
	// MySQL only, authentication type.
	Authentication pulumi.StringPtrInput
	// OpenSearch access control object.
	OpensearchAccessControl ManagedDatabaseUserOpensearchAccessControlPtrInput
	// Password for the database user. Defaults to a random value
	Password pulumi.StringPtrInput
	// PostgreSQL access control object.
	PgAccessControl ManagedDatabaseUserPgAccessControlPtrInput
	// Redis access control object.
	RedisAccessControl ManagedDatabaseUserRedisAccessControlPtrInput
	// Service's UUID for which this user belongs to
	Service pulumi.StringInput
	// Name of the database user
	Username pulumi.StringInput
}

func (ManagedDatabaseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseUserArgs)(nil)).Elem()
}

type ManagedDatabaseUserInput interface {
	pulumi.Input

	ToManagedDatabaseUserOutput() ManagedDatabaseUserOutput
	ToManagedDatabaseUserOutputWithContext(ctx context.Context) ManagedDatabaseUserOutput
}

func (*ManagedDatabaseUser) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDatabaseUser)(nil)).Elem()
}

func (i *ManagedDatabaseUser) ToManagedDatabaseUserOutput() ManagedDatabaseUserOutput {
	return i.ToManagedDatabaseUserOutputWithContext(context.Background())
}

func (i *ManagedDatabaseUser) ToManagedDatabaseUserOutputWithContext(ctx context.Context) ManagedDatabaseUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseUserOutput)
}

// ManagedDatabaseUserArrayInput is an input type that accepts ManagedDatabaseUserArray and ManagedDatabaseUserArrayOutput values.
// You can construct a concrete instance of `ManagedDatabaseUserArrayInput` via:
//
//	ManagedDatabaseUserArray{ ManagedDatabaseUserArgs{...} }
type ManagedDatabaseUserArrayInput interface {
	pulumi.Input

	ToManagedDatabaseUserArrayOutput() ManagedDatabaseUserArrayOutput
	ToManagedDatabaseUserArrayOutputWithContext(context.Context) ManagedDatabaseUserArrayOutput
}

type ManagedDatabaseUserArray []ManagedDatabaseUserInput

func (ManagedDatabaseUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedDatabaseUser)(nil)).Elem()
}

func (i ManagedDatabaseUserArray) ToManagedDatabaseUserArrayOutput() ManagedDatabaseUserArrayOutput {
	return i.ToManagedDatabaseUserArrayOutputWithContext(context.Background())
}

func (i ManagedDatabaseUserArray) ToManagedDatabaseUserArrayOutputWithContext(ctx context.Context) ManagedDatabaseUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseUserArrayOutput)
}

// ManagedDatabaseUserMapInput is an input type that accepts ManagedDatabaseUserMap and ManagedDatabaseUserMapOutput values.
// You can construct a concrete instance of `ManagedDatabaseUserMapInput` via:
//
//	ManagedDatabaseUserMap{ "key": ManagedDatabaseUserArgs{...} }
type ManagedDatabaseUserMapInput interface {
	pulumi.Input

	ToManagedDatabaseUserMapOutput() ManagedDatabaseUserMapOutput
	ToManagedDatabaseUserMapOutputWithContext(context.Context) ManagedDatabaseUserMapOutput
}

type ManagedDatabaseUserMap map[string]ManagedDatabaseUserInput

func (ManagedDatabaseUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedDatabaseUser)(nil)).Elem()
}

func (i ManagedDatabaseUserMap) ToManagedDatabaseUserMapOutput() ManagedDatabaseUserMapOutput {
	return i.ToManagedDatabaseUserMapOutputWithContext(context.Background())
}

func (i ManagedDatabaseUserMap) ToManagedDatabaseUserMapOutputWithContext(ctx context.Context) ManagedDatabaseUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseUserMapOutput)
}

type ManagedDatabaseUserOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDatabaseUser)(nil)).Elem()
}

func (o ManagedDatabaseUserOutput) ToManagedDatabaseUserOutput() ManagedDatabaseUserOutput {
	return o
}

func (o ManagedDatabaseUserOutput) ToManagedDatabaseUserOutputWithContext(ctx context.Context) ManagedDatabaseUserOutput {
	return o
}

// MySQL only, authentication type.
func (o ManagedDatabaseUserOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDatabaseUser) pulumi.StringPtrOutput { return v.Authentication }).(pulumi.StringPtrOutput)
}

// OpenSearch access control object.
func (o ManagedDatabaseUserOutput) OpensearchAccessControl() ManagedDatabaseUserOpensearchAccessControlPtrOutput {
	return o.ApplyT(func(v *ManagedDatabaseUser) ManagedDatabaseUserOpensearchAccessControlPtrOutput {
		return v.OpensearchAccessControl
	}).(ManagedDatabaseUserOpensearchAccessControlPtrOutput)
}

// Password for the database user. Defaults to a random value
func (o ManagedDatabaseUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// PostgreSQL access control object.
func (o ManagedDatabaseUserOutput) PgAccessControl() ManagedDatabaseUserPgAccessControlPtrOutput {
	return o.ApplyT(func(v *ManagedDatabaseUser) ManagedDatabaseUserPgAccessControlPtrOutput { return v.PgAccessControl }).(ManagedDatabaseUserPgAccessControlPtrOutput)
}

// Redis access control object.
func (o ManagedDatabaseUserOutput) RedisAccessControl() ManagedDatabaseUserRedisAccessControlPtrOutput {
	return o.ApplyT(func(v *ManagedDatabaseUser) ManagedDatabaseUserRedisAccessControlPtrOutput {
		return v.RedisAccessControl
	}).(ManagedDatabaseUserRedisAccessControlPtrOutput)
}

// Service's UUID for which this user belongs to
func (o ManagedDatabaseUserOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseUser) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// Type of the user. Only normal type users can be created
func (o ManagedDatabaseUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Name of the database user
func (o ManagedDatabaseUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ManagedDatabaseUserArrayOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedDatabaseUser)(nil)).Elem()
}

func (o ManagedDatabaseUserArrayOutput) ToManagedDatabaseUserArrayOutput() ManagedDatabaseUserArrayOutput {
	return o
}

func (o ManagedDatabaseUserArrayOutput) ToManagedDatabaseUserArrayOutputWithContext(ctx context.Context) ManagedDatabaseUserArrayOutput {
	return o
}

func (o ManagedDatabaseUserArrayOutput) Index(i pulumi.IntInput) ManagedDatabaseUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedDatabaseUser {
		return vs[0].([]*ManagedDatabaseUser)[vs[1].(int)]
	}).(ManagedDatabaseUserOutput)
}

type ManagedDatabaseUserMapOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedDatabaseUser)(nil)).Elem()
}

func (o ManagedDatabaseUserMapOutput) ToManagedDatabaseUserMapOutput() ManagedDatabaseUserMapOutput {
	return o
}

func (o ManagedDatabaseUserMapOutput) ToManagedDatabaseUserMapOutputWithContext(ctx context.Context) ManagedDatabaseUserMapOutput {
	return o
}

func (o ManagedDatabaseUserMapOutput) MapIndex(k pulumi.StringInput) ManagedDatabaseUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedDatabaseUser {
		return vs[0].(map[string]*ManagedDatabaseUser)[vs[1].(string)]
	}).(ManagedDatabaseUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseUserInput)(nil)).Elem(), &ManagedDatabaseUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseUserArrayInput)(nil)).Elem(), ManagedDatabaseUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDatabaseUserMapInput)(nil)).Elem(), ManagedDatabaseUserMap{})
	pulumi.RegisterOutputType(ManagedDatabaseUserOutput{})
	pulumi.RegisterOutputType(ManagedDatabaseUserArrayOutput{})
	pulumi.RegisterOutputType(ManagedDatabaseUserMapOutput{})
}
