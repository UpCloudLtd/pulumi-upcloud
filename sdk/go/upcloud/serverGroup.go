// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Server groups allow grouping servers and defining anti-affinity for the servers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := upcloud.NewServerGroup(ctx, "main", &upcloud.ServerGroupArgs{
//				AntiAffinityPolicy: pulumi.String("yes"),
//				Labels: pulumi.StringMap{
//					"key1": pulumi.String("val1"),
//					"key2": pulumi.String("val2"),
//					"key3": pulumi.String("val3"),
//				},
//				Members: pulumi.StringArray{
//					pulumi.String("00b51165-fb58-4b77-bb8c-552277be1764"),
//					pulumi.String("00d56575-3821-3301-9de4-2b2bc7e35pqf"),
//					pulumi.String("000012dc-fe8c-a3y6-91f9-0db1215c36cf"),
//				},
//				Title: pulumi.String("main_group"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import upcloud:index/serverGroup:ServerGroup main ead4544f-10bf-42a3-b98a-a0fea2e2ad14
// ```
type ServerGroup struct {
	pulumi.CustomResourceState

	// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
	// group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn't allow
	// servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
	// different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
	// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
	// please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
	// server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
	// servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
	AntiAffinityPolicy pulumi.StringOutput `pulumi:"antiAffinityPolicy"`
	// User defined key-value pairs to classify the server group.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `serverGroup`
	// property of `Server`. See also `trackMembers` property.
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// Title of your server group
	Title pulumi.StringOutput `pulumi:"title"`
	// Controls if members of the server group are being tracked in this resource. Set to `false` when using `serverGroup`
	// property of `Server` to attach servers to the server group to avoid delayed state updates.
	TrackMembers pulumi.BoolOutput `pulumi:"trackMembers"`
}

// NewServerGroup registers a new resource with the given unique name, arguments, and options.
func NewServerGroup(ctx *pulumi.Context,
	name string, args *ServerGroupArgs, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerGroup
	err := ctx.RegisterResource("upcloud:index/serverGroup:ServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerGroup gets an existing ServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerGroupState, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	var resource ServerGroup
	err := ctx.ReadResource("upcloud:index/serverGroup:ServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerGroup resources.
type serverGroupState struct {
	// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
	// group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn't allow
	// servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
	// different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
	// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
	// please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
	// server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
	// servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
	AntiAffinityPolicy *string `pulumi:"antiAffinityPolicy"`
	// User defined key-value pairs to classify the server group.
	Labels map[string]string `pulumi:"labels"`
	// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `serverGroup`
	// property of `Server`. See also `trackMembers` property.
	Members []string `pulumi:"members"`
	// Title of your server group
	Title *string `pulumi:"title"`
	// Controls if members of the server group are being tracked in this resource. Set to `false` when using `serverGroup`
	// property of `Server` to attach servers to the server group to avoid delayed state updates.
	TrackMembers *bool `pulumi:"trackMembers"`
}

type ServerGroupState struct {
	// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
	// group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn't allow
	// servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
	// different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
	// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
	// please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
	// server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
	// servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
	AntiAffinityPolicy pulumi.StringPtrInput
	// User defined key-value pairs to classify the server group.
	Labels pulumi.StringMapInput
	// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `serverGroup`
	// property of `Server`. See also `trackMembers` property.
	Members pulumi.StringArrayInput
	// Title of your server group
	Title pulumi.StringPtrInput
	// Controls if members of the server group are being tracked in this resource. Set to `false` when using `serverGroup`
	// property of `Server` to attach servers to the server group to avoid delayed state updates.
	TrackMembers pulumi.BoolPtrInput
}

func (ServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupState)(nil)).Elem()
}

type serverGroupArgs struct {
	// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
	// group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn't allow
	// servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
	// different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
	// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
	// please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
	// server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
	// servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
	AntiAffinityPolicy *string `pulumi:"antiAffinityPolicy"`
	// User defined key-value pairs to classify the server group.
	Labels map[string]string `pulumi:"labels"`
	// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `serverGroup`
	// property of `Server`. See also `trackMembers` property.
	Members []string `pulumi:"members"`
	// Title of your server group
	Title string `pulumi:"title"`
	// Controls if members of the server group are being tracked in this resource. Set to `false` when using `serverGroup`
	// property of `Server` to attach servers to the server group to avoid delayed state updates.
	TrackMembers *bool `pulumi:"trackMembers"`
}

// The set of arguments for constructing a ServerGroup resource.
type ServerGroupArgs struct {
	// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
	// group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn't allow
	// servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
	// different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
	// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
	// please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
	// server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
	// servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
	AntiAffinityPolicy pulumi.StringPtrInput
	// User defined key-value pairs to classify the server group.
	Labels pulumi.StringMapInput
	// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `serverGroup`
	// property of `Server`. See also `trackMembers` property.
	Members pulumi.StringArrayInput
	// Title of your server group
	Title pulumi.StringInput
	// Controls if members of the server group are being tracked in this resource. Set to `false` when using `serverGroup`
	// property of `Server` to attach servers to the server group to avoid delayed state updates.
	TrackMembers pulumi.BoolPtrInput
}

func (ServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupArgs)(nil)).Elem()
}

type ServerGroupInput interface {
	pulumi.Input

	ToServerGroupOutput() ServerGroupOutput
	ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput
}

func (*ServerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (i *ServerGroup) ToServerGroupOutput() ServerGroupOutput {
	return i.ToServerGroupOutputWithContext(context.Background())
}

func (i *ServerGroup) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupOutput)
}

// ServerGroupArrayInput is an input type that accepts ServerGroupArray and ServerGroupArrayOutput values.
// You can construct a concrete instance of `ServerGroupArrayInput` via:
//
//	ServerGroupArray{ ServerGroupArgs{...} }
type ServerGroupArrayInput interface {
	pulumi.Input

	ToServerGroupArrayOutput() ServerGroupArrayOutput
	ToServerGroupArrayOutputWithContext(context.Context) ServerGroupArrayOutput
}

type ServerGroupArray []ServerGroupInput

func (ServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupArray) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return i.ToServerGroupArrayOutputWithContext(context.Background())
}

func (i ServerGroupArray) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupArrayOutput)
}

// ServerGroupMapInput is an input type that accepts ServerGroupMap and ServerGroupMapOutput values.
// You can construct a concrete instance of `ServerGroupMapInput` via:
//
//	ServerGroupMap{ "key": ServerGroupArgs{...} }
type ServerGroupMapInput interface {
	pulumi.Input

	ToServerGroupMapOutput() ServerGroupMapOutput
	ToServerGroupMapOutputWithContext(context.Context) ServerGroupMapOutput
}

type ServerGroupMap map[string]ServerGroupInput

func (ServerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupMap) ToServerGroupMapOutput() ServerGroupMapOutput {
	return i.ToServerGroupMapOutputWithContext(context.Background())
}

func (i ServerGroupMap) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupMapOutput)
}

type ServerGroupOutput struct{ *pulumi.OutputState }

func (ServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (o ServerGroupOutput) ToServerGroupOutput() ServerGroupOutput {
	return o
}

func (o ServerGroupOutput) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return o
}

// Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
// group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn't allow
// servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
// different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
// To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
// please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
// server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
// servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
func (o ServerGroupOutput) AntiAffinityPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.AntiAffinityPolicy }).(pulumi.StringOutput)
}

// User defined key-value pairs to classify the server group.
func (o ServerGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `serverGroup`
// property of `Server`. See also `trackMembers` property.
func (o ServerGroupOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// Title of your server group
func (o ServerGroupOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Controls if members of the server group are being tracked in this resource. Set to `false` when using `serverGroup`
// property of `Server` to attach servers to the server group to avoid delayed state updates.
func (o ServerGroupOutput) TrackMembers() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.BoolOutput { return v.TrackMembers }).(pulumi.BoolOutput)
}

type ServerGroupArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) Index(i pulumi.IntInput) ServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].([]*ServerGroup)[vs[1].(int)]
	}).(ServerGroupOutput)
}

type ServerGroupMapOutput struct{ *pulumi.OutputState }

func (ServerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupMapOutput) ToServerGroupMapOutput() ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) MapIndex(k pulumi.StringInput) ServerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].(map[string]*ServerGroup)[vs[1].(string)]
	}).(ServerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupInput)(nil)).Elem(), &ServerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupArrayInput)(nil)).Elem(), ServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupMapInput)(nil)).Elem(), ServerGroupMap{})
	pulumi.RegisterOutputType(ServerGroupOutput{})
	pulumi.RegisterOutputType(ServerGroupArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupMapOutput{})
}
