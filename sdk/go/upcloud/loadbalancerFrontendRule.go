// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents load balancer frontend rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			lbZone := "fi-hel2"
//			if param := cfg.Get("lbZone"); param != "" {
//				lbZone = param
//			}
//			_, err := upcloud.NewNetwork(ctx, "lb_network", &upcloud.NetworkArgs{
//				Name: pulumi.String("lb-test-net"),
//				Zone: pulumi.String(lbZone),
//				IpNetwork: &upcloud.NetworkIpNetworkArgs{
//					Address: pulumi.String("10.0.0.0/24"),
//					Dhcp:    pulumi.Bool(true),
//					Family:  pulumi.String("IPv4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerFrontendRule(ctx, "lb_fe_1_r1", &upcloud.LoadbalancerFrontendRuleArgs{
//				Frontend: pulumi.Any(upcloudLoadbalancerFrontend.LbFe1.Id),
//				Name:     pulumi.String("lb-fe-1-r1-test"),
//				Priority: pulumi.Int(10),
//				Matchers: &upcloud.LoadbalancerFrontendRuleMatchersArgs{
//					SrcIps: upcloud.LoadbalancerFrontendRuleMatchersSrcIpArray{
//						&upcloud.LoadbalancerFrontendRuleMatchersSrcIpArgs{
//							Value: pulumi.String("192.168.0.0/24"),
//						},
//					},
//				},
//				Actions: &upcloud.LoadbalancerFrontendRuleActionsArgs{
//					UseBackends: upcloud.LoadbalancerFrontendRuleActionsUseBackendArray{
//						&upcloud.LoadbalancerFrontendRuleActionsUseBackendArgs{
//							BackendName: pulumi.Any(upcloudLoadbalancerBackend.LbBe1.Name),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerFrontend(ctx, "lb_fe_1", &upcloud.LoadbalancerFrontendArgs{
//				Loadbalancer:       pulumi.Any(upcloudLoadbalancer.Lb.Id),
//				Name:               pulumi.String("lb-fe-1-test"),
//				Mode:               pulumi.String("http"),
//				Port:               pulumi.Int(8080),
//				DefaultBackendName: pulumi.Any(upcloudLoadbalancerBackend.LbBe1.Name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancer(ctx, "lb", &upcloud.LoadbalancerArgs{
//				ConfiguredStatus: pulumi.String("started"),
//				Name:             pulumi.String("lb-test"),
//				Plan:             pulumi.String("development"),
//				Zone:             pulumi.String(lbZone),
//				Networks: upcloud.LoadbalancerNetworkArray{
//					&upcloud.LoadbalancerNetworkArgs{
//						Type:   pulumi.String("public"),
//						Family: pulumi.String("IPv4"),
//						Name:   pulumi.String("public"),
//					},
//					&upcloud.LoadbalancerNetworkArgs{
//						Type:    pulumi.String("private"),
//						Family:  pulumi.String("IPv4"),
//						Name:    pulumi.String("private"),
//						Network: pulumi.Any(upcloudNetwork.LbNetwork.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerBackend(ctx, "lb_be_1", &upcloud.LoadbalancerBackendArgs{
//				Loadbalancer: pulumi.Any(upcloudLoadbalancer.Lb.Id),
//				Name:         pulumi.String("lb-be-1-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LoadbalancerFrontendRule struct {
	pulumi.CustomResourceState

	// Rule actions.
	Actions LoadbalancerFrontendRuleActionsPtrOutput `pulumi:"actions"`
	// ID of the load balancer frontend to which the frontend rule is connected.
	Frontend pulumi.StringOutput `pulumi:"frontend"`
	// Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
	Matchers LoadbalancerFrontendRuleMatchersPtrOutput `pulumi:"matchers"`
	// Defines boolean operator used to combine multiple matchers. Defaults to `and`.
	MatchingCondition pulumi.StringOutput `pulumi:"matchingCondition"`
	// The name of the frontend rule. Must be unique within the frontend.
	Name pulumi.StringOutput `pulumi:"name"`
	// Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
	Priority pulumi.IntOutput `pulumi:"priority"`
}

// NewLoadbalancerFrontendRule registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerFrontendRule(ctx *pulumi.Context,
	name string, args *LoadbalancerFrontendRuleArgs, opts ...pulumi.ResourceOption) (*LoadbalancerFrontendRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Frontend == nil {
		return nil, errors.New("invalid value for required argument 'Frontend'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerFrontendRule
	err := ctx.RegisterResource("upcloud:index/loadbalancerFrontendRule:LoadbalancerFrontendRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerFrontendRule gets an existing LoadbalancerFrontendRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerFrontendRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerFrontendRuleState, opts ...pulumi.ResourceOption) (*LoadbalancerFrontendRule, error) {
	var resource LoadbalancerFrontendRule
	err := ctx.ReadResource("upcloud:index/loadbalancerFrontendRule:LoadbalancerFrontendRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerFrontendRule resources.
type loadbalancerFrontendRuleState struct {
	// Rule actions.
	Actions *LoadbalancerFrontendRuleActions `pulumi:"actions"`
	// ID of the load balancer frontend to which the frontend rule is connected.
	Frontend *string `pulumi:"frontend"`
	// Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
	Matchers *LoadbalancerFrontendRuleMatchers `pulumi:"matchers"`
	// Defines boolean operator used to combine multiple matchers. Defaults to `and`.
	MatchingCondition *string `pulumi:"matchingCondition"`
	// The name of the frontend rule. Must be unique within the frontend.
	Name *string `pulumi:"name"`
	// Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
	Priority *int `pulumi:"priority"`
}

type LoadbalancerFrontendRuleState struct {
	// Rule actions.
	Actions LoadbalancerFrontendRuleActionsPtrInput
	// ID of the load balancer frontend to which the frontend rule is connected.
	Frontend pulumi.StringPtrInput
	// Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
	Matchers LoadbalancerFrontendRuleMatchersPtrInput
	// Defines boolean operator used to combine multiple matchers. Defaults to `and`.
	MatchingCondition pulumi.StringPtrInput
	// The name of the frontend rule. Must be unique within the frontend.
	Name pulumi.StringPtrInput
	// Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
	Priority pulumi.IntPtrInput
}

func (LoadbalancerFrontendRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendRuleState)(nil)).Elem()
}

type loadbalancerFrontendRuleArgs struct {
	// Rule actions.
	Actions *LoadbalancerFrontendRuleActions `pulumi:"actions"`
	// ID of the load balancer frontend to which the frontend rule is connected.
	Frontend string `pulumi:"frontend"`
	// Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
	Matchers *LoadbalancerFrontendRuleMatchers `pulumi:"matchers"`
	// Defines boolean operator used to combine multiple matchers. Defaults to `and`.
	MatchingCondition *string `pulumi:"matchingCondition"`
	// The name of the frontend rule. Must be unique within the frontend.
	Name *string `pulumi:"name"`
	// Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
	Priority int `pulumi:"priority"`
}

// The set of arguments for constructing a LoadbalancerFrontendRule resource.
type LoadbalancerFrontendRuleArgs struct {
	// Rule actions.
	Actions LoadbalancerFrontendRuleActionsPtrInput
	// ID of the load balancer frontend to which the frontend rule is connected.
	Frontend pulumi.StringInput
	// Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
	Matchers LoadbalancerFrontendRuleMatchersPtrInput
	// Defines boolean operator used to combine multiple matchers. Defaults to `and`.
	MatchingCondition pulumi.StringPtrInput
	// The name of the frontend rule. Must be unique within the frontend.
	Name pulumi.StringPtrInput
	// Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
	Priority pulumi.IntInput
}

func (LoadbalancerFrontendRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendRuleArgs)(nil)).Elem()
}

type LoadbalancerFrontendRuleInput interface {
	pulumi.Input

	ToLoadbalancerFrontendRuleOutput() LoadbalancerFrontendRuleOutput
	ToLoadbalancerFrontendRuleOutputWithContext(ctx context.Context) LoadbalancerFrontendRuleOutput
}

func (*LoadbalancerFrontendRule) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontendRule)(nil)).Elem()
}

func (i *LoadbalancerFrontendRule) ToLoadbalancerFrontendRuleOutput() LoadbalancerFrontendRuleOutput {
	return i.ToLoadbalancerFrontendRuleOutputWithContext(context.Background())
}

func (i *LoadbalancerFrontendRule) ToLoadbalancerFrontendRuleOutputWithContext(ctx context.Context) LoadbalancerFrontendRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendRuleOutput)
}

// LoadbalancerFrontendRuleArrayInput is an input type that accepts LoadbalancerFrontendRuleArray and LoadbalancerFrontendRuleArrayOutput values.
// You can construct a concrete instance of `LoadbalancerFrontendRuleArrayInput` via:
//
//	LoadbalancerFrontendRuleArray{ LoadbalancerFrontendRuleArgs{...} }
type LoadbalancerFrontendRuleArrayInput interface {
	pulumi.Input

	ToLoadbalancerFrontendRuleArrayOutput() LoadbalancerFrontendRuleArrayOutput
	ToLoadbalancerFrontendRuleArrayOutputWithContext(context.Context) LoadbalancerFrontendRuleArrayOutput
}

type LoadbalancerFrontendRuleArray []LoadbalancerFrontendRuleInput

func (LoadbalancerFrontendRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerFrontendRule)(nil)).Elem()
}

func (i LoadbalancerFrontendRuleArray) ToLoadbalancerFrontendRuleArrayOutput() LoadbalancerFrontendRuleArrayOutput {
	return i.ToLoadbalancerFrontendRuleArrayOutputWithContext(context.Background())
}

func (i LoadbalancerFrontendRuleArray) ToLoadbalancerFrontendRuleArrayOutputWithContext(ctx context.Context) LoadbalancerFrontendRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendRuleArrayOutput)
}

// LoadbalancerFrontendRuleMapInput is an input type that accepts LoadbalancerFrontendRuleMap and LoadbalancerFrontendRuleMapOutput values.
// You can construct a concrete instance of `LoadbalancerFrontendRuleMapInput` via:
//
//	LoadbalancerFrontendRuleMap{ "key": LoadbalancerFrontendRuleArgs{...} }
type LoadbalancerFrontendRuleMapInput interface {
	pulumi.Input

	ToLoadbalancerFrontendRuleMapOutput() LoadbalancerFrontendRuleMapOutput
	ToLoadbalancerFrontendRuleMapOutputWithContext(context.Context) LoadbalancerFrontendRuleMapOutput
}

type LoadbalancerFrontendRuleMap map[string]LoadbalancerFrontendRuleInput

func (LoadbalancerFrontendRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerFrontendRule)(nil)).Elem()
}

func (i LoadbalancerFrontendRuleMap) ToLoadbalancerFrontendRuleMapOutput() LoadbalancerFrontendRuleMapOutput {
	return i.ToLoadbalancerFrontendRuleMapOutputWithContext(context.Background())
}

func (i LoadbalancerFrontendRuleMap) ToLoadbalancerFrontendRuleMapOutputWithContext(ctx context.Context) LoadbalancerFrontendRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendRuleMapOutput)
}

type LoadbalancerFrontendRuleOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontendRule)(nil)).Elem()
}

func (o LoadbalancerFrontendRuleOutput) ToLoadbalancerFrontendRuleOutput() LoadbalancerFrontendRuleOutput {
	return o
}

func (o LoadbalancerFrontendRuleOutput) ToLoadbalancerFrontendRuleOutputWithContext(ctx context.Context) LoadbalancerFrontendRuleOutput {
	return o
}

// Rule actions.
func (o LoadbalancerFrontendRuleOutput) Actions() LoadbalancerFrontendRuleActionsPtrOutput {
	return o.ApplyT(func(v *LoadbalancerFrontendRule) LoadbalancerFrontendRuleActionsPtrOutput { return v.Actions }).(LoadbalancerFrontendRuleActionsPtrOutput)
}

// ID of the load balancer frontend to which the frontend rule is connected.
func (o LoadbalancerFrontendRuleOutput) Frontend() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontendRule) pulumi.StringOutput { return v.Frontend }).(pulumi.StringOutput)
}

// Set of rule matchers. If rule doesn't have matchers, then action applies to all incoming requests.
func (o LoadbalancerFrontendRuleOutput) Matchers() LoadbalancerFrontendRuleMatchersPtrOutput {
	return o.ApplyT(func(v *LoadbalancerFrontendRule) LoadbalancerFrontendRuleMatchersPtrOutput { return v.Matchers }).(LoadbalancerFrontendRuleMatchersPtrOutput)
}

// Defines boolean operator used to combine multiple matchers. Defaults to `and`.
func (o LoadbalancerFrontendRuleOutput) MatchingCondition() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontendRule) pulumi.StringOutput { return v.MatchingCondition }).(pulumi.StringOutput)
}

// The name of the frontend rule. Must be unique within the frontend.
func (o LoadbalancerFrontendRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontendRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
func (o LoadbalancerFrontendRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerFrontendRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

type LoadbalancerFrontendRuleArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerFrontendRule)(nil)).Elem()
}

func (o LoadbalancerFrontendRuleArrayOutput) ToLoadbalancerFrontendRuleArrayOutput() LoadbalancerFrontendRuleArrayOutput {
	return o
}

func (o LoadbalancerFrontendRuleArrayOutput) ToLoadbalancerFrontendRuleArrayOutputWithContext(ctx context.Context) LoadbalancerFrontendRuleArrayOutput {
	return o
}

func (o LoadbalancerFrontendRuleArrayOutput) Index(i pulumi.IntInput) LoadbalancerFrontendRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerFrontendRule {
		return vs[0].([]*LoadbalancerFrontendRule)[vs[1].(int)]
	}).(LoadbalancerFrontendRuleOutput)
}

type LoadbalancerFrontendRuleMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerFrontendRule)(nil)).Elem()
}

func (o LoadbalancerFrontendRuleMapOutput) ToLoadbalancerFrontendRuleMapOutput() LoadbalancerFrontendRuleMapOutput {
	return o
}

func (o LoadbalancerFrontendRuleMapOutput) ToLoadbalancerFrontendRuleMapOutputWithContext(ctx context.Context) LoadbalancerFrontendRuleMapOutput {
	return o
}

func (o LoadbalancerFrontendRuleMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerFrontendRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerFrontendRule {
		return vs[0].(map[string]*LoadbalancerFrontendRule)[vs[1].(string)]
	}).(LoadbalancerFrontendRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendRuleInput)(nil)).Elem(), &LoadbalancerFrontendRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendRuleArrayInput)(nil)).Elem(), LoadbalancerFrontendRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendRuleMapInput)(nil)).Elem(), LoadbalancerFrontendRuleMap{})
	pulumi.RegisterOutputType(LoadbalancerFrontendRuleOutput{})
	pulumi.RegisterOutputType(LoadbalancerFrontendRuleArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerFrontendRuleMapOutput{})
}
