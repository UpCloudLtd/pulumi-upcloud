// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents load balancer frontend service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			lbZone := "fi-hel2"
//			if param := cfg.Get("lbZone"); param != "" {
//				lbZone = param
//			}
//			_, err := upcloud.NewNetwork(ctx, "lbNetwork", &upcloud.NetworkArgs{
//				Zone: pulumi.String(lbZone),
//				IpNetwork: &upcloud.NetworkIpNetworkArgs{
//					Address: pulumi.String("10.0.0.0/24"),
//					Dhcp:    pulumi.Bool(true),
//					Family:  pulumi.String("IPv4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerFrontend(ctx, "lbFe1", &upcloud.LoadbalancerFrontendArgs{
//				Loadbalancer:       pulumi.Any(resource.Upcloud_loadbalancer.Lb.Id),
//				Mode:               pulumi.String("http"),
//				Port:               pulumi.Int(8080),
//				DefaultBackendName: pulumi.Any(resource.Upcloud_loadbalancer_backend.Lb_be_1.Name),
//				Networks: upcloud.LoadbalancerFrontendNetworkArray{
//					&upcloud.LoadbalancerFrontendNetworkArgs{
//						Name: pulumi.Any(resource.Upcloud_loadbalancer.Lb.Networks[1].Name),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancer(ctx, "lb", &upcloud.LoadbalancerArgs{
//				ConfiguredStatus: pulumi.String("started"),
//				Plan:             pulumi.String("development"),
//				Zone:             pulumi.String(lbZone),
//				Networks: upcloud.LoadbalancerNetworkArray{
//					&upcloud.LoadbalancerNetworkArgs{
//						Name:    pulumi.String("Private-Net"),
//						Type:    pulumi.String("private"),
//						Family:  pulumi.String("IPv4"),
//						Network: pulumi.Any(resource.Upcloud_network.Lb_network.Id),
//					},
//					&upcloud.LoadbalancerNetworkArgs{
//						Name:   pulumi.String("Public-Net"),
//						Type:   pulumi.String("public"),
//						Family: pulumi.String("IPv4"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = upcloud.NewLoadbalancerBackend(ctx, "lbBe1", &upcloud.LoadbalancerBackendArgs{
//				Loadbalancer: pulumi.Any(resource.Upcloud_loadbalancer.Lb.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LoadbalancerFrontend struct {
	pulumi.CustomResourceState

	// The name of the default backend where traffic will be routed. Note, default backend can be overwritten in frontend
	// rules.
	DefaultBackendName pulumi.StringOutput `pulumi:"defaultBackendName"`
	// ID of the load balancer to which the frontend is connected.
	Loadbalancer pulumi.StringOutput `pulumi:"loadbalancer"`
	// When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The name of the frontend must be unique within the load balancer service.
	Name pulumi.StringOutput `pulumi:"name"`
	// Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will
	// be required when deprecated field `network` is removed from load balancer resource.
	Networks LoadbalancerFrontendNetworkArrayOutput `pulumi:"networks"`
	// Port to listen incoming requests
	Port pulumi.IntOutput `pulumi:"port"`
	// Frontend properties. Properties can set back to defaults by defining empty `properties {}` block.
	Properties LoadbalancerFrontendPropertiesOutput `pulumi:"properties"`
	// Set of frontend rule names
	Rules pulumi.StringArrayOutput `pulumi:"rules"`
	// Set of TLS config names
	TlsConfigs pulumi.StringArrayOutput `pulumi:"tlsConfigs"`
}

// NewLoadbalancerFrontend registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerFrontend(ctx *pulumi.Context,
	name string, args *LoadbalancerFrontendArgs, opts ...pulumi.ResourceOption) (*LoadbalancerFrontend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultBackendName == nil {
		return nil, errors.New("invalid value for required argument 'DefaultBackendName'")
	}
	if args.Loadbalancer == nil {
		return nil, errors.New("invalid value for required argument 'Loadbalancer'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerFrontend
	err := ctx.RegisterResource("upcloud:index/loadbalancerFrontend:LoadbalancerFrontend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerFrontend gets an existing LoadbalancerFrontend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerFrontend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerFrontendState, opts ...pulumi.ResourceOption) (*LoadbalancerFrontend, error) {
	var resource LoadbalancerFrontend
	err := ctx.ReadResource("upcloud:index/loadbalancerFrontend:LoadbalancerFrontend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerFrontend resources.
type loadbalancerFrontendState struct {
	// The name of the default backend where traffic will be routed. Note, default backend can be overwritten in frontend
	// rules.
	DefaultBackendName *string `pulumi:"defaultBackendName"`
	// ID of the load balancer to which the frontend is connected.
	Loadbalancer *string `pulumi:"loadbalancer"`
	// When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
	Mode *string `pulumi:"mode"`
	// The name of the frontend must be unique within the load balancer service.
	Name *string `pulumi:"name"`
	// Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will
	// be required when deprecated field `network` is removed from load balancer resource.
	Networks []LoadbalancerFrontendNetwork `pulumi:"networks"`
	// Port to listen incoming requests
	Port *int `pulumi:"port"`
	// Frontend properties. Properties can set back to defaults by defining empty `properties {}` block.
	Properties *LoadbalancerFrontendProperties `pulumi:"properties"`
	// Set of frontend rule names
	Rules []string `pulumi:"rules"`
	// Set of TLS config names
	TlsConfigs []string `pulumi:"tlsConfigs"`
}

type LoadbalancerFrontendState struct {
	// The name of the default backend where traffic will be routed. Note, default backend can be overwritten in frontend
	// rules.
	DefaultBackendName pulumi.StringPtrInput
	// ID of the load balancer to which the frontend is connected.
	Loadbalancer pulumi.StringPtrInput
	// When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
	Mode pulumi.StringPtrInput
	// The name of the frontend must be unique within the load balancer service.
	Name pulumi.StringPtrInput
	// Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will
	// be required when deprecated field `network` is removed from load balancer resource.
	Networks LoadbalancerFrontendNetworkArrayInput
	// Port to listen incoming requests
	Port pulumi.IntPtrInput
	// Frontend properties. Properties can set back to defaults by defining empty `properties {}` block.
	Properties LoadbalancerFrontendPropertiesPtrInput
	// Set of frontend rule names
	Rules pulumi.StringArrayInput
	// Set of TLS config names
	TlsConfigs pulumi.StringArrayInput
}

func (LoadbalancerFrontendState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendState)(nil)).Elem()
}

type loadbalancerFrontendArgs struct {
	// The name of the default backend where traffic will be routed. Note, default backend can be overwritten in frontend
	// rules.
	DefaultBackendName string `pulumi:"defaultBackendName"`
	// ID of the load balancer to which the frontend is connected.
	Loadbalancer string `pulumi:"loadbalancer"`
	// When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
	Mode string `pulumi:"mode"`
	// The name of the frontend must be unique within the load balancer service.
	Name *string `pulumi:"name"`
	// Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will
	// be required when deprecated field `network` is removed from load balancer resource.
	Networks []LoadbalancerFrontendNetwork `pulumi:"networks"`
	// Port to listen incoming requests
	Port int `pulumi:"port"`
	// Frontend properties. Properties can set back to defaults by defining empty `properties {}` block.
	Properties *LoadbalancerFrontendProperties `pulumi:"properties"`
}

// The set of arguments for constructing a LoadbalancerFrontend resource.
type LoadbalancerFrontendArgs struct {
	// The name of the default backend where traffic will be routed. Note, default backend can be overwritten in frontend
	// rules.
	DefaultBackendName pulumi.StringInput
	// ID of the load balancer to which the frontend is connected.
	Loadbalancer pulumi.StringInput
	// When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
	Mode pulumi.StringInput
	// The name of the frontend must be unique within the load balancer service.
	Name pulumi.StringPtrInput
	// Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will
	// be required when deprecated field `network` is removed from load balancer resource.
	Networks LoadbalancerFrontendNetworkArrayInput
	// Port to listen incoming requests
	Port pulumi.IntInput
	// Frontend properties. Properties can set back to defaults by defining empty `properties {}` block.
	Properties LoadbalancerFrontendPropertiesPtrInput
}

func (LoadbalancerFrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendArgs)(nil)).Elem()
}

type LoadbalancerFrontendInput interface {
	pulumi.Input

	ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput
	ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput
}

func (*LoadbalancerFrontend) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontend)(nil)).Elem()
}

func (i *LoadbalancerFrontend) ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput {
	return i.ToLoadbalancerFrontendOutputWithContext(context.Background())
}

func (i *LoadbalancerFrontend) ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendOutput)
}

// LoadbalancerFrontendArrayInput is an input type that accepts LoadbalancerFrontendArray and LoadbalancerFrontendArrayOutput values.
// You can construct a concrete instance of `LoadbalancerFrontendArrayInput` via:
//
//	LoadbalancerFrontendArray{ LoadbalancerFrontendArgs{...} }
type LoadbalancerFrontendArrayInput interface {
	pulumi.Input

	ToLoadbalancerFrontendArrayOutput() LoadbalancerFrontendArrayOutput
	ToLoadbalancerFrontendArrayOutputWithContext(context.Context) LoadbalancerFrontendArrayOutput
}

type LoadbalancerFrontendArray []LoadbalancerFrontendInput

func (LoadbalancerFrontendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerFrontend)(nil)).Elem()
}

func (i LoadbalancerFrontendArray) ToLoadbalancerFrontendArrayOutput() LoadbalancerFrontendArrayOutput {
	return i.ToLoadbalancerFrontendArrayOutputWithContext(context.Background())
}

func (i LoadbalancerFrontendArray) ToLoadbalancerFrontendArrayOutputWithContext(ctx context.Context) LoadbalancerFrontendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendArrayOutput)
}

// LoadbalancerFrontendMapInput is an input type that accepts LoadbalancerFrontendMap and LoadbalancerFrontendMapOutput values.
// You can construct a concrete instance of `LoadbalancerFrontendMapInput` via:
//
//	LoadbalancerFrontendMap{ "key": LoadbalancerFrontendArgs{...} }
type LoadbalancerFrontendMapInput interface {
	pulumi.Input

	ToLoadbalancerFrontendMapOutput() LoadbalancerFrontendMapOutput
	ToLoadbalancerFrontendMapOutputWithContext(context.Context) LoadbalancerFrontendMapOutput
}

type LoadbalancerFrontendMap map[string]LoadbalancerFrontendInput

func (LoadbalancerFrontendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerFrontend)(nil)).Elem()
}

func (i LoadbalancerFrontendMap) ToLoadbalancerFrontendMapOutput() LoadbalancerFrontendMapOutput {
	return i.ToLoadbalancerFrontendMapOutputWithContext(context.Background())
}

func (i LoadbalancerFrontendMap) ToLoadbalancerFrontendMapOutputWithContext(ctx context.Context) LoadbalancerFrontendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendMapOutput)
}

type LoadbalancerFrontendOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontend)(nil)).Elem()
}

func (o LoadbalancerFrontendOutput) ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput {
	return o
}

func (o LoadbalancerFrontendOutput) ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput {
	return o
}

// The name of the default backend where traffic will be routed. Note, default backend can be overwritten in frontend
// rules.
func (o LoadbalancerFrontendOutput) DefaultBackendName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringOutput { return v.DefaultBackendName }).(pulumi.StringOutput)
}

// ID of the load balancer to which the frontend is connected.
func (o LoadbalancerFrontendOutput) Loadbalancer() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringOutput { return v.Loadbalancer }).(pulumi.StringOutput)
}

// When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
func (o LoadbalancerFrontendOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The name of the frontend must be unique within the load balancer service.
func (o LoadbalancerFrontendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will
// be required when deprecated field `network` is removed from load balancer resource.
func (o LoadbalancerFrontendOutput) Networks() LoadbalancerFrontendNetworkArrayOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) LoadbalancerFrontendNetworkArrayOutput { return v.Networks }).(LoadbalancerFrontendNetworkArrayOutput)
}

// Port to listen incoming requests
func (o LoadbalancerFrontendOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Frontend properties. Properties can set back to defaults by defining empty `properties {}` block.
func (o LoadbalancerFrontendOutput) Properties() LoadbalancerFrontendPropertiesOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) LoadbalancerFrontendPropertiesOutput { return v.Properties }).(LoadbalancerFrontendPropertiesOutput)
}

// Set of frontend rule names
func (o LoadbalancerFrontendOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringArrayOutput { return v.Rules }).(pulumi.StringArrayOutput)
}

// Set of TLS config names
func (o LoadbalancerFrontendOutput) TlsConfigs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringArrayOutput { return v.TlsConfigs }).(pulumi.StringArrayOutput)
}

type LoadbalancerFrontendArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerFrontend)(nil)).Elem()
}

func (o LoadbalancerFrontendArrayOutput) ToLoadbalancerFrontendArrayOutput() LoadbalancerFrontendArrayOutput {
	return o
}

func (o LoadbalancerFrontendArrayOutput) ToLoadbalancerFrontendArrayOutputWithContext(ctx context.Context) LoadbalancerFrontendArrayOutput {
	return o
}

func (o LoadbalancerFrontendArrayOutput) Index(i pulumi.IntInput) LoadbalancerFrontendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerFrontend {
		return vs[0].([]*LoadbalancerFrontend)[vs[1].(int)]
	}).(LoadbalancerFrontendOutput)
}

type LoadbalancerFrontendMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerFrontend)(nil)).Elem()
}

func (o LoadbalancerFrontendMapOutput) ToLoadbalancerFrontendMapOutput() LoadbalancerFrontendMapOutput {
	return o
}

func (o LoadbalancerFrontendMapOutput) ToLoadbalancerFrontendMapOutputWithContext(ctx context.Context) LoadbalancerFrontendMapOutput {
	return o
}

func (o LoadbalancerFrontendMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerFrontendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerFrontend {
		return vs[0].(map[string]*LoadbalancerFrontend)[vs[1].(string)]
	}).(LoadbalancerFrontendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendInput)(nil)).Elem(), &LoadbalancerFrontend{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendArrayInput)(nil)).Elem(), LoadbalancerFrontendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendMapInput)(nil)).Elem(), LoadbalancerFrontendMap{})
	pulumi.RegisterOutputType(LoadbalancerFrontendOutput{})
	pulumi.RegisterOutputType(LoadbalancerFrontendArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerFrontendMapOutput{})
}
