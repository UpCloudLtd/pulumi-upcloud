// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upcloud

import (
	"context"
	"reflect"

	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Routers can be used to connect multiple Private Networks. UpCloud Servers on any attached network can communicate directly with each other.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/UpCloudLtd/pulumi-upcloud/sdk/go/upcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := upcloud.NewRouter(ctx, "my_example_router", &upcloud.RouterArgs{
//				Name: pulumi.String("My Example Router"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import upcloud:index/router:Router my_example_router 049d7ca2-757e-4fb1-a833-f87ee056547a
// ```
type Router struct {
	pulumi.CustomResourceState

	// List of UUIDs representing networks attached to this router.
	AttachedNetworks pulumi.StringArrayOutput `pulumi:"attachedNetworks"`
	// User defined key-value pairs to classify the router.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the router.
	Name pulumi.StringOutput `pulumi:"name"`
	// A collection of user managed static routes for this router.
	StaticRoute RouterStaticRouteArrayOutput `pulumi:"staticRoute"`
	// A collection of static routes for this router. This set includes both user and service defined static routes. The
	// objects in this set use the same schema as `staticRoute` blocks.
	StaticRoutes RouterStaticRouteArrayOutput `pulumi:"staticRoutes"`
	// Type of the router
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRouter registers a new resource with the given unique name, arguments, and options.
func NewRouter(ctx *pulumi.Context,
	name string, args *RouterArgs, opts ...pulumi.ResourceOption) (*Router, error) {
	if args == nil {
		args = &RouterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Router
	err := ctx.RegisterResource("upcloud:index/router:Router", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouter gets an existing Router resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterState, opts ...pulumi.ResourceOption) (*Router, error) {
	var resource Router
	err := ctx.ReadResource("upcloud:index/router:Router", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Router resources.
type routerState struct {
	// List of UUIDs representing networks attached to this router.
	AttachedNetworks []string `pulumi:"attachedNetworks"`
	// User defined key-value pairs to classify the router.
	Labels map[string]string `pulumi:"labels"`
	// Name of the router.
	Name *string `pulumi:"name"`
	// A collection of user managed static routes for this router.
	StaticRoute []RouterStaticRoute `pulumi:"staticRoute"`
	// A collection of static routes for this router. This set includes both user and service defined static routes. The
	// objects in this set use the same schema as `staticRoute` blocks.
	StaticRoutes []RouterStaticRoute `pulumi:"staticRoutes"`
	// Type of the router
	Type *string `pulumi:"type"`
}

type RouterState struct {
	// List of UUIDs representing networks attached to this router.
	AttachedNetworks pulumi.StringArrayInput
	// User defined key-value pairs to classify the router.
	Labels pulumi.StringMapInput
	// Name of the router.
	Name pulumi.StringPtrInput
	// A collection of user managed static routes for this router.
	StaticRoute RouterStaticRouteArrayInput
	// A collection of static routes for this router. This set includes both user and service defined static routes. The
	// objects in this set use the same schema as `staticRoute` blocks.
	StaticRoutes RouterStaticRouteArrayInput
	// Type of the router
	Type pulumi.StringPtrInput
}

func (RouterState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerState)(nil)).Elem()
}

type routerArgs struct {
	// User defined key-value pairs to classify the router.
	Labels map[string]string `pulumi:"labels"`
	// Name of the router.
	Name *string `pulumi:"name"`
	// A collection of user managed static routes for this router.
	StaticRoute []RouterStaticRoute `pulumi:"staticRoute"`
}

// The set of arguments for constructing a Router resource.
type RouterArgs struct {
	// User defined key-value pairs to classify the router.
	Labels pulumi.StringMapInput
	// Name of the router.
	Name pulumi.StringPtrInput
	// A collection of user managed static routes for this router.
	StaticRoute RouterStaticRouteArrayInput
}

func (RouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerArgs)(nil)).Elem()
}

type RouterInput interface {
	pulumi.Input

	ToRouterOutput() RouterOutput
	ToRouterOutputWithContext(ctx context.Context) RouterOutput
}

func (*Router) ElementType() reflect.Type {
	return reflect.TypeOf((**Router)(nil)).Elem()
}

func (i *Router) ToRouterOutput() RouterOutput {
	return i.ToRouterOutputWithContext(context.Background())
}

func (i *Router) ToRouterOutputWithContext(ctx context.Context) RouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterOutput)
}

// RouterArrayInput is an input type that accepts RouterArray and RouterArrayOutput values.
// You can construct a concrete instance of `RouterArrayInput` via:
//
//	RouterArray{ RouterArgs{...} }
type RouterArrayInput interface {
	pulumi.Input

	ToRouterArrayOutput() RouterArrayOutput
	ToRouterArrayOutputWithContext(context.Context) RouterArrayOutput
}

type RouterArray []RouterInput

func (RouterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Router)(nil)).Elem()
}

func (i RouterArray) ToRouterArrayOutput() RouterArrayOutput {
	return i.ToRouterArrayOutputWithContext(context.Background())
}

func (i RouterArray) ToRouterArrayOutputWithContext(ctx context.Context) RouterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterArrayOutput)
}

// RouterMapInput is an input type that accepts RouterMap and RouterMapOutput values.
// You can construct a concrete instance of `RouterMapInput` via:
//
//	RouterMap{ "key": RouterArgs{...} }
type RouterMapInput interface {
	pulumi.Input

	ToRouterMapOutput() RouterMapOutput
	ToRouterMapOutputWithContext(context.Context) RouterMapOutput
}

type RouterMap map[string]RouterInput

func (RouterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Router)(nil)).Elem()
}

func (i RouterMap) ToRouterMapOutput() RouterMapOutput {
	return i.ToRouterMapOutputWithContext(context.Background())
}

func (i RouterMap) ToRouterMapOutputWithContext(ctx context.Context) RouterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMapOutput)
}

type RouterOutput struct{ *pulumi.OutputState }

func (RouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Router)(nil)).Elem()
}

func (o RouterOutput) ToRouterOutput() RouterOutput {
	return o
}

func (o RouterOutput) ToRouterOutputWithContext(ctx context.Context) RouterOutput {
	return o
}

// List of UUIDs representing networks attached to this router.
func (o RouterOutput) AttachedNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Router) pulumi.StringArrayOutput { return v.AttachedNetworks }).(pulumi.StringArrayOutput)
}

// User defined key-value pairs to classify the router.
func (o RouterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Router) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the router.
func (o RouterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Router) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A collection of user managed static routes for this router.
func (o RouterOutput) StaticRoute() RouterStaticRouteArrayOutput {
	return o.ApplyT(func(v *Router) RouterStaticRouteArrayOutput { return v.StaticRoute }).(RouterStaticRouteArrayOutput)
}

// A collection of static routes for this router. This set includes both user and service defined static routes. The
// objects in this set use the same schema as `staticRoute` blocks.
func (o RouterOutput) StaticRoutes() RouterStaticRouteArrayOutput {
	return o.ApplyT(func(v *Router) RouterStaticRouteArrayOutput { return v.StaticRoutes }).(RouterStaticRouteArrayOutput)
}

// Type of the router
func (o RouterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Router) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type RouterArrayOutput struct{ *pulumi.OutputState }

func (RouterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Router)(nil)).Elem()
}

func (o RouterArrayOutput) ToRouterArrayOutput() RouterArrayOutput {
	return o
}

func (o RouterArrayOutput) ToRouterArrayOutputWithContext(ctx context.Context) RouterArrayOutput {
	return o
}

func (o RouterArrayOutput) Index(i pulumi.IntInput) RouterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Router {
		return vs[0].([]*Router)[vs[1].(int)]
	}).(RouterOutput)
}

type RouterMapOutput struct{ *pulumi.OutputState }

func (RouterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Router)(nil)).Elem()
}

func (o RouterMapOutput) ToRouterMapOutput() RouterMapOutput {
	return o
}

func (o RouterMapOutput) ToRouterMapOutputWithContext(ctx context.Context) RouterMapOutput {
	return o
}

func (o RouterMapOutput) MapIndex(k pulumi.StringInput) RouterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Router {
		return vs[0].(map[string]*Router)[vs[1].(string)]
	}).(RouterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterInput)(nil)).Elem(), &Router{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterArrayInput)(nil)).Elem(), RouterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMapInput)(nil)).Elem(), RouterMap{})
	pulumi.RegisterOutputType(RouterOutput{})
	pulumi.RegisterOutputType(RouterArrayOutput{})
	pulumi.RegisterOutputType(RouterMapOutput{})
}
