// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.LoadbalancerFrontendRuleArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleState;
import com.pulumi.upcloud.outputs.LoadbalancerFrontendRuleActions;
import com.pulumi.upcloud.outputs.LoadbalancerFrontendRuleMatchers;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource represents load balancer frontend rule.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.upcloud.Network;
 * import com.pulumi.upcloud.NetworkArgs;
 * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
 * import com.pulumi.upcloud.LoadbalancerFrontendRule;
 * import com.pulumi.upcloud.LoadbalancerFrontendRuleArgs;
 * import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersArgs;
 * import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleActionsArgs;
 * import com.pulumi.upcloud.LoadbalancerFrontend;
 * import com.pulumi.upcloud.LoadbalancerFrontendArgs;
 * import com.pulumi.upcloud.Loadbalancer;
 * import com.pulumi.upcloud.LoadbalancerArgs;
 * import com.pulumi.upcloud.inputs.LoadbalancerNetworkArgs;
 * import com.pulumi.upcloud.LoadbalancerBackend;
 * import com.pulumi.upcloud.LoadbalancerBackendArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var lbZone = config.get("lbZone").orElse("fi-hel2");
 *         var lbNetwork = new Network("lbNetwork", NetworkArgs.builder()
 *             .zone(lbZone)
 *             .ipNetwork(NetworkIpNetworkArgs.builder()
 *                 .address("10.0.0.0/24")
 *                 .dhcp(true)
 *                 .family("IPv4")
 *                 .build())
 *             .build());
 * 
 *         var lbFe1R1 = new LoadbalancerFrontendRule("lbFe1R1", LoadbalancerFrontendRuleArgs.builder()
 *             .frontend(resource.upcloud_loadbalancer_frontend().lb_fe_1().id())
 *             .priority(10)
 *             .matchers(LoadbalancerFrontendRuleMatchersArgs.builder()
 *                 .srcIps(LoadbalancerFrontendRuleMatchersSrcIpArgs.builder()
 *                     .value("192.168.0.0/24")
 *                     .build())
 *                 .build())
 *             .actions(LoadbalancerFrontendRuleActionsArgs.builder()
 *                 .useBackends(LoadbalancerFrontendRuleActionsUseBackendArgs.builder()
 *                     .backendName(resource.upcloud_loadbalancer_backend().lb_be_1().name())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var lbFe1 = new LoadbalancerFrontend("lbFe1", LoadbalancerFrontendArgs.builder()
 *             .loadbalancer(resource.upcloud_loadbalancer().lb().id())
 *             .mode("http")
 *             .port(8080)
 *             .defaultBackendName(resource.upcloud_loadbalancer_backend().lb_be_1().name())
 *             .build());
 * 
 *         var lb = new Loadbalancer("lb", LoadbalancerArgs.builder()
 *             .configuredStatus("started")
 *             .plan("development")
 *             .zone(lbZone)
 *             .networks(            
 *                 LoadbalancerNetworkArgs.builder()
 *                     .type("public")
 *                     .family("IPv4")
 *                     .name("public")
 *                     .build(),
 *                 LoadbalancerNetworkArgs.builder()
 *                     .type("private")
 *                     .family("IPv4")
 *                     .name("private")
 *                     .network(resource.upcloud_network().lb_network().id())
 *                     .build())
 *             .build());
 * 
 *         var lbBe1 = new LoadbalancerBackend("lbBe1", LoadbalancerBackendArgs.builder()
 *             .loadbalancer(resource.upcloud_loadbalancer().lb().id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="upcloud:index/loadbalancerFrontendRule:LoadbalancerFrontendRule")
public class LoadbalancerFrontendRule extends com.pulumi.resources.CustomResource {
    /**
     * Rule actions.
     * 
     */
    @Export(name="actions", refs={LoadbalancerFrontendRuleActions.class}, tree="[0]")
    private Output</* @Nullable */ LoadbalancerFrontendRuleActions> actions;

    /**
     * @return Rule actions.
     * 
     */
    public Output<Optional<LoadbalancerFrontendRuleActions>> actions() {
        return Codegen.optional(this.actions);
    }
    /**
     * ID of the load balancer frontend to which the frontend rule is connected.
     * 
     */
    @Export(name="frontend", refs={String.class}, tree="[0]")
    private Output<String> frontend;

    /**
     * @return ID of the load balancer frontend to which the frontend rule is connected.
     * 
     */
    public Output<String> frontend() {
        return this.frontend;
    }
    /**
     * Set of rule matchers. If rule doesn&#39;t have matchers, then action applies to all incoming requests.
     * 
     */
    @Export(name="matchers", refs={LoadbalancerFrontendRuleMatchers.class}, tree="[0]")
    private Output</* @Nullable */ LoadbalancerFrontendRuleMatchers> matchers;

    /**
     * @return Set of rule matchers. If rule doesn&#39;t have matchers, then action applies to all incoming requests.
     * 
     */
    public Output<Optional<LoadbalancerFrontendRuleMatchers>> matchers() {
        return Codegen.optional(this.matchers);
    }
    /**
     * Defines boolean operator used to combine multiple matchers. Defaults to `and`.
     * 
     */
    @Export(name="matchingCondition", refs={String.class}, tree="[0]")
    private Output<String> matchingCondition;

    /**
     * @return Defines boolean operator used to combine multiple matchers. Defaults to `and`.
     * 
     */
    public Output<String> matchingCondition() {
        return this.matchingCondition;
    }
    /**
     * The name of the frontend rule. Must be unique within the frontend.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the frontend rule. Must be unique within the frontend.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
     * 
     */
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output<Integer> priority;

    /**
     * @return Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LoadbalancerFrontendRule(java.lang.String name) {
        this(name, LoadbalancerFrontendRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LoadbalancerFrontendRule(java.lang.String name, LoadbalancerFrontendRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LoadbalancerFrontendRule(java.lang.String name, LoadbalancerFrontendRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/loadbalancerFrontendRule:LoadbalancerFrontendRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LoadbalancerFrontendRule(java.lang.String name, Output<java.lang.String> id, @Nullable LoadbalancerFrontendRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/loadbalancerFrontendRule:LoadbalancerFrontendRule", name, state, makeResourceOptions(options, id), false);
    }

    private static LoadbalancerFrontendRuleArgs makeArgs(LoadbalancerFrontendRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LoadbalancerFrontendRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LoadbalancerFrontendRule get(java.lang.String name, Output<java.lang.String> id, @Nullable LoadbalancerFrontendRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LoadbalancerFrontendRule(name, id, state, options);
    }
}
