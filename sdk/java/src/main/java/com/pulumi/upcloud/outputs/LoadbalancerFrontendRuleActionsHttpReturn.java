// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class LoadbalancerFrontendRuleActionsHttpReturn {
    /**
     * @return Content type.
     * 
     */
    private String contentType;
    /**
     * @return The payload.
     * 
     */
    private String payload;
    /**
     * @return HTTP status code.
     * 
     */
    private Integer status;

    private LoadbalancerFrontendRuleActionsHttpReturn() {}
    /**
     * @return Content type.
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return The payload.
     * 
     */
    public String payload() {
        return this.payload;
    }
    /**
     * @return HTTP status code.
     * 
     */
    public Integer status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadbalancerFrontendRuleActionsHttpReturn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String contentType;
        private String payload;
        private Integer status;
        public Builder() {}
        public Builder(LoadbalancerFrontendRuleActionsHttpReturn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentType = defaults.contentType;
    	      this.payload = defaults.payload;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder contentType(String contentType) {
            if (contentType == null) {
              throw new MissingRequiredPropertyException("LoadbalancerFrontendRuleActionsHttpReturn", "contentType");
            }
            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder payload(String payload) {
            if (payload == null) {
              throw new MissingRequiredPropertyException("LoadbalancerFrontendRuleActionsHttpReturn", "payload");
            }
            this.payload = payload;
            return this;
        }
        @CustomType.Setter
        public Builder status(Integer status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("LoadbalancerFrontendRuleActionsHttpReturn", "status");
            }
            this.status = status;
            return this;
        }
        public LoadbalancerFrontendRuleActionsHttpReturn build() {
            final var _resultValue = new LoadbalancerFrontendRuleActionsHttpReturn();
            _resultValue.contentType = contentType;
            _resultValue.payload = payload;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
