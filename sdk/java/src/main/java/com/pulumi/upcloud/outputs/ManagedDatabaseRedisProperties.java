// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.upcloud.outputs.ManagedDatabaseRedisPropertiesMigration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedDatabaseRedisProperties {
    /**
     * @return Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    private @Nullable Boolean automaticUtilityNetworkIpFilter;
    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    private @Nullable Integer backupHour;
    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    private @Nullable Integer backupMinute;
    /**
     * @return IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    private @Nullable List<String> ipFilters;
    /**
     * @return Migrate data from existing server.
     * 
     */
    private @Nullable ManagedDatabaseRedisPropertiesMigration migration;
    /**
     * @return Public Access. Allow access to the service from the public Internet.
     * 
     */
    private @Nullable Boolean publicAccess;
    /**
     * @return Default ACL for pub/sub channels used when Redis user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
     * 
     */
    private @Nullable String redisAclChannelsDefault;
    /**
     * @return Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
     * 
     */
    private @Nullable Integer redisIoThreads;
    /**
     * @return LFU maxmemory-policy counter decay time in minutes.
     * 
     */
    private @Nullable Integer redisLfuDecayTime;
    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
     * 
     */
    private @Nullable Integer redisLfuLogFactor;
    /**
     * @return Redis maxmemory-policy.
     * 
     */
    private @Nullable String redisMaxmemoryPolicy;
    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    private @Nullable String redisNotifyKeyspaceEvents;
    /**
     * @return Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
     * 
     */
    private @Nullable Integer redisNumberOfDatabases;
    /**
     * @return Redis persistence. When persistence is &#39;rdb&#39;, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
     * 
     */
    private @Nullable String redisPersistence;
    /**
     * @return Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    private @Nullable Integer redisPubsubClientOutputBufferLimit;
    /**
     * @return Require SSL to access Redis.
     * 
     */
    private @Nullable Boolean redisSsl;
    /**
     * @return Redis idle connection timeout in seconds.
     * 
     */
    private @Nullable Integer redisTimeout;
    /**
     * @return Redis major version.
     * 
     */
    private @Nullable String redisVersion;
    /**
     * @return Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;

    private ManagedDatabaseRedisProperties() {}
    /**
     * @return Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    public Optional<Boolean> automaticUtilityNetworkIpFilter() {
        return Optional.ofNullable(this.automaticUtilityNetworkIpFilter);
    }
    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Integer> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }
    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Integer> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }
    /**
     * @return IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Migrate data from existing server.
     * 
     */
    public Optional<ManagedDatabaseRedisPropertiesMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    /**
     * @return Public Access. Allow access to the service from the public Internet.
     * 
     */
    public Optional<Boolean> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Default ACL for pub/sub channels used when Redis user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
     * 
     */
    public Optional<String> redisAclChannelsDefault() {
        return Optional.ofNullable(this.redisAclChannelsDefault);
    }
    /**
     * @return Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
     * 
     */
    public Optional<Integer> redisIoThreads() {
        return Optional.ofNullable(this.redisIoThreads);
    }
    /**
     * @return LFU maxmemory-policy counter decay time in minutes.
     * 
     */
    public Optional<Integer> redisLfuDecayTime() {
        return Optional.ofNullable(this.redisLfuDecayTime);
    }
    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
     * 
     */
    public Optional<Integer> redisLfuLogFactor() {
        return Optional.ofNullable(this.redisLfuLogFactor);
    }
    /**
     * @return Redis maxmemory-policy.
     * 
     */
    public Optional<String> redisMaxmemoryPolicy() {
        return Optional.ofNullable(this.redisMaxmemoryPolicy);
    }
    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    public Optional<String> redisNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.redisNotifyKeyspaceEvents);
    }
    /**
     * @return Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
     * 
     */
    public Optional<Integer> redisNumberOfDatabases() {
        return Optional.ofNullable(this.redisNumberOfDatabases);
    }
    /**
     * @return Redis persistence. When persistence is &#39;rdb&#39;, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
     * 
     */
    public Optional<String> redisPersistence() {
        return Optional.ofNullable(this.redisPersistence);
    }
    /**
     * @return Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    public Optional<Integer> redisPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.redisPubsubClientOutputBufferLimit);
    }
    /**
     * @return Require SSL to access Redis.
     * 
     */
    public Optional<Boolean> redisSsl() {
        return Optional.ofNullable(this.redisSsl);
    }
    /**
     * @return Redis idle connection timeout in seconds.
     * 
     */
    public Optional<Integer> redisTimeout() {
        return Optional.ofNullable(this.redisTimeout);
    }
    /**
     * @return Redis major version.
     * 
     */
    public Optional<String> redisVersion() {
        return Optional.ofNullable(this.redisVersion);
    }
    /**
     * @return Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedDatabaseRedisProperties defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean automaticUtilityNetworkIpFilter;
        private @Nullable Integer backupHour;
        private @Nullable Integer backupMinute;
        private @Nullable List<String> ipFilters;
        private @Nullable ManagedDatabaseRedisPropertiesMigration migration;
        private @Nullable Boolean publicAccess;
        private @Nullable String redisAclChannelsDefault;
        private @Nullable Integer redisIoThreads;
        private @Nullable Integer redisLfuDecayTime;
        private @Nullable Integer redisLfuLogFactor;
        private @Nullable String redisMaxmemoryPolicy;
        private @Nullable String redisNotifyKeyspaceEvents;
        private @Nullable Integer redisNumberOfDatabases;
        private @Nullable String redisPersistence;
        private @Nullable Integer redisPubsubClientOutputBufferLimit;
        private @Nullable Boolean redisSsl;
        private @Nullable Integer redisTimeout;
        private @Nullable String redisVersion;
        private @Nullable Boolean serviceLog;
        public Builder() {}
        public Builder(ManagedDatabaseRedisProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticUtilityNetworkIpFilter = defaults.automaticUtilityNetworkIpFilter;
    	      this.backupHour = defaults.backupHour;
    	      this.backupMinute = defaults.backupMinute;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.publicAccess = defaults.publicAccess;
    	      this.redisAclChannelsDefault = defaults.redisAclChannelsDefault;
    	      this.redisIoThreads = defaults.redisIoThreads;
    	      this.redisLfuDecayTime = defaults.redisLfuDecayTime;
    	      this.redisLfuLogFactor = defaults.redisLfuLogFactor;
    	      this.redisMaxmemoryPolicy = defaults.redisMaxmemoryPolicy;
    	      this.redisNotifyKeyspaceEvents = defaults.redisNotifyKeyspaceEvents;
    	      this.redisNumberOfDatabases = defaults.redisNumberOfDatabases;
    	      this.redisPersistence = defaults.redisPersistence;
    	      this.redisPubsubClientOutputBufferLimit = defaults.redisPubsubClientOutputBufferLimit;
    	      this.redisSsl = defaults.redisSsl;
    	      this.redisTimeout = defaults.redisTimeout;
    	      this.redisVersion = defaults.redisVersion;
    	      this.serviceLog = defaults.serviceLog;
        }

        @CustomType.Setter
        public Builder automaticUtilityNetworkIpFilter(@Nullable Boolean automaticUtilityNetworkIpFilter) {

            this.automaticUtilityNetworkIpFilter = automaticUtilityNetworkIpFilter;
            return this;
        }
        @CustomType.Setter
        public Builder backupHour(@Nullable Integer backupHour) {

            this.backupHour = backupHour;
            return this;
        }
        @CustomType.Setter
        public Builder backupMinute(@Nullable Integer backupMinute) {

            this.backupMinute = backupMinute;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder migration(@Nullable ManagedDatabaseRedisPropertiesMigration migration) {

            this.migration = migration;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable Boolean publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder redisAclChannelsDefault(@Nullable String redisAclChannelsDefault) {

            this.redisAclChannelsDefault = redisAclChannelsDefault;
            return this;
        }
        @CustomType.Setter
        public Builder redisIoThreads(@Nullable Integer redisIoThreads) {

            this.redisIoThreads = redisIoThreads;
            return this;
        }
        @CustomType.Setter
        public Builder redisLfuDecayTime(@Nullable Integer redisLfuDecayTime) {

            this.redisLfuDecayTime = redisLfuDecayTime;
            return this;
        }
        @CustomType.Setter
        public Builder redisLfuLogFactor(@Nullable Integer redisLfuLogFactor) {

            this.redisLfuLogFactor = redisLfuLogFactor;
            return this;
        }
        @CustomType.Setter
        public Builder redisMaxmemoryPolicy(@Nullable String redisMaxmemoryPolicy) {

            this.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder redisNotifyKeyspaceEvents(@Nullable String redisNotifyKeyspaceEvents) {

            this.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            return this;
        }
        @CustomType.Setter
        public Builder redisNumberOfDatabases(@Nullable Integer redisNumberOfDatabases) {

            this.redisNumberOfDatabases = redisNumberOfDatabases;
            return this;
        }
        @CustomType.Setter
        public Builder redisPersistence(@Nullable String redisPersistence) {

            this.redisPersistence = redisPersistence;
            return this;
        }
        @CustomType.Setter
        public Builder redisPubsubClientOutputBufferLimit(@Nullable Integer redisPubsubClientOutputBufferLimit) {

            this.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            return this;
        }
        @CustomType.Setter
        public Builder redisSsl(@Nullable Boolean redisSsl) {

            this.redisSsl = redisSsl;
            return this;
        }
        @CustomType.Setter
        public Builder redisTimeout(@Nullable Integer redisTimeout) {

            this.redisTimeout = redisTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder redisVersion(@Nullable String redisVersion) {

            this.redisVersion = redisVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        public ManagedDatabaseRedisProperties build() {
            final var _resultValue = new ManagedDatabaseRedisProperties();
            _resultValue.automaticUtilityNetworkIpFilter = automaticUtilityNetworkIpFilter;
            _resultValue.backupHour = backupHour;
            _resultValue.backupMinute = backupMinute;
            _resultValue.ipFilters = ipFilters;
            _resultValue.migration = migration;
            _resultValue.publicAccess = publicAccess;
            _resultValue.redisAclChannelsDefault = redisAclChannelsDefault;
            _resultValue.redisIoThreads = redisIoThreads;
            _resultValue.redisLfuDecayTime = redisLfuDecayTime;
            _resultValue.redisLfuLogFactor = redisLfuLogFactor;
            _resultValue.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            _resultValue.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            _resultValue.redisNumberOfDatabases = redisNumberOfDatabases;
            _resultValue.redisPersistence = redisPersistence;
            _resultValue.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            _resultValue.redisSsl = redisSsl;
            _resultValue.redisTimeout = redisTimeout;
            _resultValue.redisVersion = redisVersion;
            _resultValue.serviceLog = serviceLog;
            return _resultValue;
        }
    }
}
