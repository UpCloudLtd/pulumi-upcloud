// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleActionsHttpRedirectArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleActionsHttpReturnArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleActionsSetForwardedHeaderArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleActionsSetRequestHeaderArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleActionsSetResponseHeaderArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleActionsTcpRejectArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleActionsUseBackendArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerFrontendRuleActionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerFrontendRuleActionsArgs Empty = new LoadbalancerFrontendRuleActionsArgs();

    /**
     * Redirects HTTP requests to specified location or URL scheme. Only either location or scheme can be defined at a time.
     * 
     */
    @Import(name="httpRedirects")
    private @Nullable Output<List<LoadbalancerFrontendRuleActionsHttpRedirectArgs>> httpRedirects;

    /**
     * @return Redirects HTTP requests to specified location or URL scheme. Only either location or scheme can be defined at a time.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleActionsHttpRedirectArgs>>> httpRedirects() {
        return Optional.ofNullable(this.httpRedirects);
    }

    /**
     * Returns HTTP response with specified HTTP status.
     * 
     */
    @Import(name="httpReturns")
    private @Nullable Output<List<LoadbalancerFrontendRuleActionsHttpReturnArgs>> httpReturns;

    /**
     * @return Returns HTTP response with specified HTTP status.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleActionsHttpReturnArgs>>> httpReturns() {
        return Optional.ofNullable(this.httpReturns);
    }

    /**
     * Adds &#39;X-Forwarded-For / -Proto / -Port&#39; headers in your forwarded requests
     * 
     */
    @Import(name="setForwardedHeaders")
    private @Nullable Output<List<LoadbalancerFrontendRuleActionsSetForwardedHeaderArgs>> setForwardedHeaders;

    /**
     * @return Adds &#39;X-Forwarded-For / -Proto / -Port&#39; headers in your forwarded requests
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleActionsSetForwardedHeaderArgs>>> setForwardedHeaders() {
        return Optional.ofNullable(this.setForwardedHeaders);
    }

    /**
     * Set request header
     * 
     */
    @Import(name="setRequestHeaders")
    private @Nullable Output<List<LoadbalancerFrontendRuleActionsSetRequestHeaderArgs>> setRequestHeaders;

    /**
     * @return Set request header
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleActionsSetRequestHeaderArgs>>> setRequestHeaders() {
        return Optional.ofNullable(this.setRequestHeaders);
    }

    /**
     * Set response header
     * 
     */
    @Import(name="setResponseHeaders")
    private @Nullable Output<List<LoadbalancerFrontendRuleActionsSetResponseHeaderArgs>> setResponseHeaders;

    /**
     * @return Set response header
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleActionsSetResponseHeaderArgs>>> setResponseHeaders() {
        return Optional.ofNullable(this.setResponseHeaders);
    }

    /**
     * Terminates a connection.
     * 
     */
    @Import(name="tcpRejects")
    private @Nullable Output<List<LoadbalancerFrontendRuleActionsTcpRejectArgs>> tcpRejects;

    /**
     * @return Terminates a connection.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleActionsTcpRejectArgs>>> tcpRejects() {
        return Optional.ofNullable(this.tcpRejects);
    }

    /**
     * Routes traffic to specified `backend`.
     * 
     */
    @Import(name="useBackends")
    private @Nullable Output<List<LoadbalancerFrontendRuleActionsUseBackendArgs>> useBackends;

    /**
     * @return Routes traffic to specified `backend`.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleActionsUseBackendArgs>>> useBackends() {
        return Optional.ofNullable(this.useBackends);
    }

    private LoadbalancerFrontendRuleActionsArgs() {}

    private LoadbalancerFrontendRuleActionsArgs(LoadbalancerFrontendRuleActionsArgs $) {
        this.httpRedirects = $.httpRedirects;
        this.httpReturns = $.httpReturns;
        this.setForwardedHeaders = $.setForwardedHeaders;
        this.setRequestHeaders = $.setRequestHeaders;
        this.setResponseHeaders = $.setResponseHeaders;
        this.tcpRejects = $.tcpRejects;
        this.useBackends = $.useBackends;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerFrontendRuleActionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerFrontendRuleActionsArgs $;

        public Builder() {
            $ = new LoadbalancerFrontendRuleActionsArgs();
        }

        public Builder(LoadbalancerFrontendRuleActionsArgs defaults) {
            $ = new LoadbalancerFrontendRuleActionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpRedirects Redirects HTTP requests to specified location or URL scheme. Only either location or scheme can be defined at a time.
         * 
         * @return builder
         * 
         */
        public Builder httpRedirects(@Nullable Output<List<LoadbalancerFrontendRuleActionsHttpRedirectArgs>> httpRedirects) {
            $.httpRedirects = httpRedirects;
            return this;
        }

        /**
         * @param httpRedirects Redirects HTTP requests to specified location or URL scheme. Only either location or scheme can be defined at a time.
         * 
         * @return builder
         * 
         */
        public Builder httpRedirects(List<LoadbalancerFrontendRuleActionsHttpRedirectArgs> httpRedirects) {
            return httpRedirects(Output.of(httpRedirects));
        }

        /**
         * @param httpRedirects Redirects HTTP requests to specified location or URL scheme. Only either location or scheme can be defined at a time.
         * 
         * @return builder
         * 
         */
        public Builder httpRedirects(LoadbalancerFrontendRuleActionsHttpRedirectArgs... httpRedirects) {
            return httpRedirects(List.of(httpRedirects));
        }

        /**
         * @param httpReturns Returns HTTP response with specified HTTP status.
         * 
         * @return builder
         * 
         */
        public Builder httpReturns(@Nullable Output<List<LoadbalancerFrontendRuleActionsHttpReturnArgs>> httpReturns) {
            $.httpReturns = httpReturns;
            return this;
        }

        /**
         * @param httpReturns Returns HTTP response with specified HTTP status.
         * 
         * @return builder
         * 
         */
        public Builder httpReturns(List<LoadbalancerFrontendRuleActionsHttpReturnArgs> httpReturns) {
            return httpReturns(Output.of(httpReturns));
        }

        /**
         * @param httpReturns Returns HTTP response with specified HTTP status.
         * 
         * @return builder
         * 
         */
        public Builder httpReturns(LoadbalancerFrontendRuleActionsHttpReturnArgs... httpReturns) {
            return httpReturns(List.of(httpReturns));
        }

        /**
         * @param setForwardedHeaders Adds &#39;X-Forwarded-For / -Proto / -Port&#39; headers in your forwarded requests
         * 
         * @return builder
         * 
         */
        public Builder setForwardedHeaders(@Nullable Output<List<LoadbalancerFrontendRuleActionsSetForwardedHeaderArgs>> setForwardedHeaders) {
            $.setForwardedHeaders = setForwardedHeaders;
            return this;
        }

        /**
         * @param setForwardedHeaders Adds &#39;X-Forwarded-For / -Proto / -Port&#39; headers in your forwarded requests
         * 
         * @return builder
         * 
         */
        public Builder setForwardedHeaders(List<LoadbalancerFrontendRuleActionsSetForwardedHeaderArgs> setForwardedHeaders) {
            return setForwardedHeaders(Output.of(setForwardedHeaders));
        }

        /**
         * @param setForwardedHeaders Adds &#39;X-Forwarded-For / -Proto / -Port&#39; headers in your forwarded requests
         * 
         * @return builder
         * 
         */
        public Builder setForwardedHeaders(LoadbalancerFrontendRuleActionsSetForwardedHeaderArgs... setForwardedHeaders) {
            return setForwardedHeaders(List.of(setForwardedHeaders));
        }

        /**
         * @param setRequestHeaders Set request header
         * 
         * @return builder
         * 
         */
        public Builder setRequestHeaders(@Nullable Output<List<LoadbalancerFrontendRuleActionsSetRequestHeaderArgs>> setRequestHeaders) {
            $.setRequestHeaders = setRequestHeaders;
            return this;
        }

        /**
         * @param setRequestHeaders Set request header
         * 
         * @return builder
         * 
         */
        public Builder setRequestHeaders(List<LoadbalancerFrontendRuleActionsSetRequestHeaderArgs> setRequestHeaders) {
            return setRequestHeaders(Output.of(setRequestHeaders));
        }

        /**
         * @param setRequestHeaders Set request header
         * 
         * @return builder
         * 
         */
        public Builder setRequestHeaders(LoadbalancerFrontendRuleActionsSetRequestHeaderArgs... setRequestHeaders) {
            return setRequestHeaders(List.of(setRequestHeaders));
        }

        /**
         * @param setResponseHeaders Set response header
         * 
         * @return builder
         * 
         */
        public Builder setResponseHeaders(@Nullable Output<List<LoadbalancerFrontendRuleActionsSetResponseHeaderArgs>> setResponseHeaders) {
            $.setResponseHeaders = setResponseHeaders;
            return this;
        }

        /**
         * @param setResponseHeaders Set response header
         * 
         * @return builder
         * 
         */
        public Builder setResponseHeaders(List<LoadbalancerFrontendRuleActionsSetResponseHeaderArgs> setResponseHeaders) {
            return setResponseHeaders(Output.of(setResponseHeaders));
        }

        /**
         * @param setResponseHeaders Set response header
         * 
         * @return builder
         * 
         */
        public Builder setResponseHeaders(LoadbalancerFrontendRuleActionsSetResponseHeaderArgs... setResponseHeaders) {
            return setResponseHeaders(List.of(setResponseHeaders));
        }

        /**
         * @param tcpRejects Terminates a connection.
         * 
         * @return builder
         * 
         */
        public Builder tcpRejects(@Nullable Output<List<LoadbalancerFrontendRuleActionsTcpRejectArgs>> tcpRejects) {
            $.tcpRejects = tcpRejects;
            return this;
        }

        /**
         * @param tcpRejects Terminates a connection.
         * 
         * @return builder
         * 
         */
        public Builder tcpRejects(List<LoadbalancerFrontendRuleActionsTcpRejectArgs> tcpRejects) {
            return tcpRejects(Output.of(tcpRejects));
        }

        /**
         * @param tcpRejects Terminates a connection.
         * 
         * @return builder
         * 
         */
        public Builder tcpRejects(LoadbalancerFrontendRuleActionsTcpRejectArgs... tcpRejects) {
            return tcpRejects(List.of(tcpRejects));
        }

        /**
         * @param useBackends Routes traffic to specified `backend`.
         * 
         * @return builder
         * 
         */
        public Builder useBackends(@Nullable Output<List<LoadbalancerFrontendRuleActionsUseBackendArgs>> useBackends) {
            $.useBackends = useBackends;
            return this;
        }

        /**
         * @param useBackends Routes traffic to specified `backend`.
         * 
         * @return builder
         * 
         */
        public Builder useBackends(List<LoadbalancerFrontendRuleActionsUseBackendArgs> useBackends) {
            return useBackends(Output.of(useBackends));
        }

        /**
         * @param useBackends Routes traffic to specified `backend`.
         * 
         * @return builder
         * 
         */
        public Builder useBackends(LoadbalancerFrontendRuleActionsUseBackendArgs... useBackends) {
            return useBackends(List.of(useBackends));
        }

        public LoadbalancerFrontendRuleActionsArgs build() {
            return $;
        }
    }

}
