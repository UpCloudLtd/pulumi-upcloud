// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseOpensearchIndicesIndex {
    /**
     * @return Timestamp indicating the creation time of the index.
     * 
     */
    private String createTime;
    /**
     * @return Number of documents stored in the index.
     * 
     */
    private Integer docs;
    /**
     * @return Health status of the index e.g. `green`, `yellow`, or `red`.
     * 
     */
    private String health;
    /**
     * @return Name of the index.
     * 
     */
    private String indexName;
    /**
     * @return Number of replicas configured for the index.
     * 
     */
    private Integer numberOfReplicas;
    /**
     * @return Number of shards configured &amp; used by the index.
     * 
     */
    private Integer numberOfShards;
    /**
     * @return Indicates whether the index is in a read-only state that permits deletion of the entire index. This attribute can be automatically set to true in certain scenarios where the node disk space exceeds the flood stage.
     * 
     */
    private Boolean readOnlyAllowDelete;
    /**
     * @return Size of the index in bytes.
     * 
     */
    private Integer size;
    /**
     * @return Status of the index e.g. `open` or `closed`.
     * 
     */
    private String status;

    private GetManagedDatabaseOpensearchIndicesIndex() {}
    /**
     * @return Timestamp indicating the creation time of the index.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Number of documents stored in the index.
     * 
     */
    public Integer docs() {
        return this.docs;
    }
    /**
     * @return Health status of the index e.g. `green`, `yellow`, or `red`.
     * 
     */
    public String health() {
        return this.health;
    }
    /**
     * @return Name of the index.
     * 
     */
    public String indexName() {
        return this.indexName;
    }
    /**
     * @return Number of replicas configured for the index.
     * 
     */
    public Integer numberOfReplicas() {
        return this.numberOfReplicas;
    }
    /**
     * @return Number of shards configured &amp; used by the index.
     * 
     */
    public Integer numberOfShards() {
        return this.numberOfShards;
    }
    /**
     * @return Indicates whether the index is in a read-only state that permits deletion of the entire index. This attribute can be automatically set to true in certain scenarios where the node disk space exceeds the flood stage.
     * 
     */
    public Boolean readOnlyAllowDelete() {
        return this.readOnlyAllowDelete;
    }
    /**
     * @return Size of the index in bytes.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return Status of the index e.g. `open` or `closed`.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseOpensearchIndicesIndex defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private Integer docs;
        private String health;
        private String indexName;
        private Integer numberOfReplicas;
        private Integer numberOfShards;
        private Boolean readOnlyAllowDelete;
        private Integer size;
        private String status;
        public Builder() {}
        public Builder(GetManagedDatabaseOpensearchIndicesIndex defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.docs = defaults.docs;
    	      this.health = defaults.health;
    	      this.indexName = defaults.indexName;
    	      this.numberOfReplicas = defaults.numberOfReplicas;
    	      this.numberOfShards = defaults.numberOfShards;
    	      this.readOnlyAllowDelete = defaults.readOnlyAllowDelete;
    	      this.size = defaults.size;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndex", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder docs(Integer docs) {
            if (docs == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndex", "docs");
            }
            this.docs = docs;
            return this;
        }
        @CustomType.Setter
        public Builder health(String health) {
            if (health == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndex", "health");
            }
            this.health = health;
            return this;
        }
        @CustomType.Setter
        public Builder indexName(String indexName) {
            if (indexName == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndex", "indexName");
            }
            this.indexName = indexName;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfReplicas(Integer numberOfReplicas) {
            if (numberOfReplicas == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndex", "numberOfReplicas");
            }
            this.numberOfReplicas = numberOfReplicas;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfShards(Integer numberOfShards) {
            if (numberOfShards == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndex", "numberOfShards");
            }
            this.numberOfShards = numberOfShards;
            return this;
        }
        @CustomType.Setter
        public Builder readOnlyAllowDelete(Boolean readOnlyAllowDelete) {
            if (readOnlyAllowDelete == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndex", "readOnlyAllowDelete");
            }
            this.readOnlyAllowDelete = readOnlyAllowDelete;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndex", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndex", "status");
            }
            this.status = status;
            return this;
        }
        public GetManagedDatabaseOpensearchIndicesIndex build() {
            final var _resultValue = new GetManagedDatabaseOpensearchIndicesIndex();
            _resultValue.createTime = createTime;
            _resultValue.docs = docs;
            _resultValue.health = health;
            _resultValue.indexName = indexName;
            _resultValue.numberOfReplicas = numberOfReplicas;
            _resultValue.numberOfShards = numberOfShards;
            _resultValue.readOnlyAllowDelete = readOnlyAllowDelete;
            _resultValue.size = size;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
