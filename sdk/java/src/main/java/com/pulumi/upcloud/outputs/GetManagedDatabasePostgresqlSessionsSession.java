// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabasePostgresqlSessionsSession {
    /**
     * @return Name of the application that is connected to this service.
     * 
     */
    private String applicationName;
    /**
     * @return Time when this process was started, i.e., when the client connected to the server.
     * 
     */
    private String backendStart;
    /**
     * @return Type of current service.
     * 
     */
    private String backendType;
    /**
     * @return Top-level transaction identifier of this service, if any.
     * 
     */
    private Integer backendXid;
    /**
     * @return The current service&#39;s xmin horizon.
     * 
     */
    private Integer backendXmin;
    /**
     * @return IP address of the client connected to this service. If this field is null, it indicates either that the client is connected via a Unix socket on the server machine or that this is an internal process such as autovacuum.
     * 
     */
    private String clientAddr;
    /**
     * @return Host name of the connected client, as reported by a reverse DNS lookup of `clientAddr`.
     * 
     */
    private String clientHostname;
    /**
     * @return TCP port number that the client is using for communication with this service, or -1 if a Unix socket is used.
     * 
     */
    private Integer clientPort;
    /**
     * @return OID of the database this service is connected to.
     * 
     */
    private Integer datid;
    /**
     * @return Name of the database this service is connected to.
     * 
     */
    private String datname;
    /**
     * @return Process ID of this service.
     * 
     */
    private String id;
    /**
     * @return Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows the last query that was executed.
     * 
     */
    private String query;
    /**
     * @return The active query current duration.
     * 
     */
    private String queryDuration;
    /**
     * @return Time when the currently active query was started, or if state is not active, when the last query was started.
     * 
     */
    private String queryStart;
    /**
     * @return Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
     * 
     */
    private String state;
    /**
     * @return Time when the state was last changed.
     * 
     */
    private String stateChange;
    /**
     * @return Name of the user logged into this service.
     * 
     */
    private String usename;
    /**
     * @return OID of the user logged into this service.
     * 
     */
    private Integer usesysid;
    /**
     * @return Wait event name if service is currently waiting.
     * 
     */
    private String waitEvent;
    /**
     * @return The type of event for which the service is waiting, if any; otherwise NULL.
     * 
     */
    private String waitEventType;
    /**
     * @return Time when this process&#39; current transaction was started, or null if no transaction is active.
     * 
     */
    private String xactStart;

    private GetManagedDatabasePostgresqlSessionsSession() {}
    /**
     * @return Name of the application that is connected to this service.
     * 
     */
    public String applicationName() {
        return this.applicationName;
    }
    /**
     * @return Time when this process was started, i.e., when the client connected to the server.
     * 
     */
    public String backendStart() {
        return this.backendStart;
    }
    /**
     * @return Type of current service.
     * 
     */
    public String backendType() {
        return this.backendType;
    }
    /**
     * @return Top-level transaction identifier of this service, if any.
     * 
     */
    public Integer backendXid() {
        return this.backendXid;
    }
    /**
     * @return The current service&#39;s xmin horizon.
     * 
     */
    public Integer backendXmin() {
        return this.backendXmin;
    }
    /**
     * @return IP address of the client connected to this service. If this field is null, it indicates either that the client is connected via a Unix socket on the server machine or that this is an internal process such as autovacuum.
     * 
     */
    public String clientAddr() {
        return this.clientAddr;
    }
    /**
     * @return Host name of the connected client, as reported by a reverse DNS lookup of `clientAddr`.
     * 
     */
    public String clientHostname() {
        return this.clientHostname;
    }
    /**
     * @return TCP port number that the client is using for communication with this service, or -1 if a Unix socket is used.
     * 
     */
    public Integer clientPort() {
        return this.clientPort;
    }
    /**
     * @return OID of the database this service is connected to.
     * 
     */
    public Integer datid() {
        return this.datid;
    }
    /**
     * @return Name of the database this service is connected to.
     * 
     */
    public String datname() {
        return this.datname;
    }
    /**
     * @return Process ID of this service.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows the last query that was executed.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return The active query current duration.
     * 
     */
    public String queryDuration() {
        return this.queryDuration;
    }
    /**
     * @return Time when the currently active query was started, or if state is not active, when the last query was started.
     * 
     */
    public String queryStart() {
        return this.queryStart;
    }
    /**
     * @return Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Time when the state was last changed.
     * 
     */
    public String stateChange() {
        return this.stateChange;
    }
    /**
     * @return Name of the user logged into this service.
     * 
     */
    public String usename() {
        return this.usename;
    }
    /**
     * @return OID of the user logged into this service.
     * 
     */
    public Integer usesysid() {
        return this.usesysid;
    }
    /**
     * @return Wait event name if service is currently waiting.
     * 
     */
    public String waitEvent() {
        return this.waitEvent;
    }
    /**
     * @return The type of event for which the service is waiting, if any; otherwise NULL.
     * 
     */
    public String waitEventType() {
        return this.waitEventType;
    }
    /**
     * @return Time when this process&#39; current transaction was started, or null if no transaction is active.
     * 
     */
    public String xactStart() {
        return this.xactStart;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabasePostgresqlSessionsSession defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationName;
        private String backendStart;
        private String backendType;
        private Integer backendXid;
        private Integer backendXmin;
        private String clientAddr;
        private String clientHostname;
        private Integer clientPort;
        private Integer datid;
        private String datname;
        private String id;
        private String query;
        private String queryDuration;
        private String queryStart;
        private String state;
        private String stateChange;
        private String usename;
        private Integer usesysid;
        private String waitEvent;
        private String waitEventType;
        private String xactStart;
        public Builder() {}
        public Builder(GetManagedDatabasePostgresqlSessionsSession defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationName = defaults.applicationName;
    	      this.backendStart = defaults.backendStart;
    	      this.backendType = defaults.backendType;
    	      this.backendXid = defaults.backendXid;
    	      this.backendXmin = defaults.backendXmin;
    	      this.clientAddr = defaults.clientAddr;
    	      this.clientHostname = defaults.clientHostname;
    	      this.clientPort = defaults.clientPort;
    	      this.datid = defaults.datid;
    	      this.datname = defaults.datname;
    	      this.id = defaults.id;
    	      this.query = defaults.query;
    	      this.queryDuration = defaults.queryDuration;
    	      this.queryStart = defaults.queryStart;
    	      this.state = defaults.state;
    	      this.stateChange = defaults.stateChange;
    	      this.usename = defaults.usename;
    	      this.usesysid = defaults.usesysid;
    	      this.waitEvent = defaults.waitEvent;
    	      this.waitEventType = defaults.waitEventType;
    	      this.xactStart = defaults.xactStart;
        }

        @CustomType.Setter
        public Builder applicationName(String applicationName) {
            if (applicationName == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "applicationName");
            }
            this.applicationName = applicationName;
            return this;
        }
        @CustomType.Setter
        public Builder backendStart(String backendStart) {
            if (backendStart == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "backendStart");
            }
            this.backendStart = backendStart;
            return this;
        }
        @CustomType.Setter
        public Builder backendType(String backendType) {
            if (backendType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "backendType");
            }
            this.backendType = backendType;
            return this;
        }
        @CustomType.Setter
        public Builder backendXid(Integer backendXid) {
            if (backendXid == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "backendXid");
            }
            this.backendXid = backendXid;
            return this;
        }
        @CustomType.Setter
        public Builder backendXmin(Integer backendXmin) {
            if (backendXmin == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "backendXmin");
            }
            this.backendXmin = backendXmin;
            return this;
        }
        @CustomType.Setter
        public Builder clientAddr(String clientAddr) {
            if (clientAddr == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "clientAddr");
            }
            this.clientAddr = clientAddr;
            return this;
        }
        @CustomType.Setter
        public Builder clientHostname(String clientHostname) {
            if (clientHostname == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "clientHostname");
            }
            this.clientHostname = clientHostname;
            return this;
        }
        @CustomType.Setter
        public Builder clientPort(Integer clientPort) {
            if (clientPort == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "clientPort");
            }
            this.clientPort = clientPort;
            return this;
        }
        @CustomType.Setter
        public Builder datid(Integer datid) {
            if (datid == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "datid");
            }
            this.datid = datid;
            return this;
        }
        @CustomType.Setter
        public Builder datname(String datname) {
            if (datname == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "datname");
            }
            this.datname = datname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder queryDuration(String queryDuration) {
            if (queryDuration == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "queryDuration");
            }
            this.queryDuration = queryDuration;
            return this;
        }
        @CustomType.Setter
        public Builder queryStart(String queryStart) {
            if (queryStart == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "queryStart");
            }
            this.queryStart = queryStart;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder stateChange(String stateChange) {
            if (stateChange == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "stateChange");
            }
            this.stateChange = stateChange;
            return this;
        }
        @CustomType.Setter
        public Builder usename(String usename) {
            if (usename == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "usename");
            }
            this.usename = usename;
            return this;
        }
        @CustomType.Setter
        public Builder usesysid(Integer usesysid) {
            if (usesysid == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "usesysid");
            }
            this.usesysid = usesysid;
            return this;
        }
        @CustomType.Setter
        public Builder waitEvent(String waitEvent) {
            if (waitEvent == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "waitEvent");
            }
            this.waitEvent = waitEvent;
            return this;
        }
        @CustomType.Setter
        public Builder waitEventType(String waitEventType) {
            if (waitEventType == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "waitEventType");
            }
            this.waitEventType = waitEventType;
            return this;
        }
        @CustomType.Setter
        public Builder xactStart(String xactStart) {
            if (xactStart == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "xactStart");
            }
            this.xactStart = xactStart;
            return this;
        }
        public GetManagedDatabasePostgresqlSessionsSession build() {
            final var _resultValue = new GetManagedDatabasePostgresqlSessionsSession();
            _resultValue.applicationName = applicationName;
            _resultValue.backendStart = backendStart;
            _resultValue.backendType = backendType;
            _resultValue.backendXid = backendXid;
            _resultValue.backendXmin = backendXmin;
            _resultValue.clientAddr = clientAddr;
            _resultValue.clientHostname = clientHostname;
            _resultValue.clientPort = clientPort;
            _resultValue.datid = datid;
            _resultValue.datname = datname;
            _resultValue.id = id;
            _resultValue.query = query;
            _resultValue.queryDuration = queryDuration;
            _resultValue.queryStart = queryStart;
            _resultValue.state = state;
            _resultValue.stateChange = stateChange;
            _resultValue.usename = usename;
            _resultValue.usesysid = usesysid;
            _resultValue.waitEvent = waitEvent;
            _resultValue.waitEventType = waitEventType;
            _resultValue.xactStart = xactStart;
            return _resultValue;
        }
    }
}
