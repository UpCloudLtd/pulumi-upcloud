// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetManagedDatabaseValkeySessionsSessionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetManagedDatabaseValkeySessionsSessionArgs Empty = new GetManagedDatabaseValkeySessionsSessionArgs();

    /**
     * Number of active channel subscriptions
     * 
     */
    @Import(name="activeChannelSubscriptions", required=true)
    private Output<Integer> activeChannelSubscriptions;

    /**
     * @return Number of active channel subscriptions
     * 
     */
    public Output<Integer> activeChannelSubscriptions() {
        return this.activeChannelSubscriptions;
    }

    /**
     * Current database ID
     * 
     */
    @Import(name="activeDatabase", required=true)
    private Output<String> activeDatabase;

    /**
     * @return Current database ID
     * 
     */
    public Output<String> activeDatabase() {
        return this.activeDatabase;
    }

    /**
     * Number of pattern matching subscriptions.
     * 
     */
    @Import(name="activePatternMatchingChannelSubscriptions", required=true)
    private Output<Integer> activePatternMatchingChannelSubscriptions;

    /**
     * @return Number of pattern matching subscriptions.
     * 
     */
    public Output<Integer> activePatternMatchingChannelSubscriptions() {
        return this.activePatternMatchingChannelSubscriptions;
    }

    /**
     * Name of the application that is connected to this service.
     * 
     */
    @Import(name="applicationName", required=true)
    private Output<String> applicationName;

    /**
     * @return Name of the application that is connected to this service.
     * 
     */
    public Output<String> applicationName() {
        return this.applicationName;
    }

    /**
     * Number of pattern matching subscriptions.
     * 
     */
    @Import(name="clientAddr", required=true)
    private Output<String> clientAddr;

    /**
     * @return Number of pattern matching subscriptions.
     * 
     */
    public Output<String> clientAddr() {
        return this.clientAddr;
    }

    /**
     * Total duration of the connection in nanoseconds.
     * 
     */
    @Import(name="connectionAge", required=true)
    private Output<Integer> connectionAge;

    /**
     * @return Total duration of the connection in nanoseconds.
     * 
     */
    public Output<Integer> connectionAge() {
        return this.connectionAge;
    }

    /**
     * Idle time of the connection in nanoseconds.
     * 
     */
    @Import(name="connectionIdle", required=true)
    private Output<Integer> connectionIdle;

    /**
     * @return Idle time of the connection in nanoseconds.
     * 
     */
    public Output<Integer> connectionIdle() {
        return this.connectionIdle;
    }

    /**
     * A set containing flags&#39; descriptions.
     * 
     */
    @Import(name="flags", required=true)
    private Output<List<String>> flags;

    /**
     * @return A set containing flags&#39; descriptions.
     * 
     */
    public Output<List<String>> flags() {
        return this.flags;
    }

    /**
     * Client connection flags in raw string format.
     * 
     */
    @Import(name="flagsRaw", required=true)
    private Output<String> flagsRaw;

    /**
     * @return Client connection flags in raw string format.
     * 
     */
    public Output<String> flagsRaw() {
        return this.flagsRaw;
    }

    /**
     * Process ID of this session.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Process ID of this session.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Number of commands in a MULTI/EXEC context.
     * 
     */
    @Import(name="multiExecCommands", required=true)
    private Output<Integer> multiExecCommands;

    /**
     * @return Number of commands in a MULTI/EXEC context.
     * 
     */
    public Output<Integer> multiExecCommands() {
        return this.multiExecCommands;
    }

    /**
     * Output buffer length.
     * 
     */
    @Import(name="outputBuffer", required=true)
    private Output<Integer> outputBuffer;

    /**
     * @return Output buffer length.
     * 
     */
    public Output<Integer> outputBuffer() {
        return this.outputBuffer;
    }

    /**
     * Output buffer memory usage.
     * 
     */
    @Import(name="outputBufferMemory", required=true)
    private Output<Integer> outputBufferMemory;

    /**
     * @return Output buffer memory usage.
     * 
     */
    public Output<Integer> outputBufferMemory() {
        return this.outputBufferMemory;
    }

    /**
     * Output list length (replies are queued in this list when the buffer is full).
     * 
     */
    @Import(name="outputListLength", required=true)
    private Output<Integer> outputListLength;

    /**
     * @return Output list length (replies are queued in this list when the buffer is full).
     * 
     */
    public Output<Integer> outputListLength() {
        return this.outputListLength;
    }

    /**
     * The last executed command.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return The last executed command.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * Query buffer length (0 means no query pending).
     * 
     */
    @Import(name="queryBuffer", required=true)
    private Output<Integer> queryBuffer;

    /**
     * @return Query buffer length (0 means no query pending).
     * 
     */
    public Output<Integer> queryBuffer() {
        return this.queryBuffer;
    }

    /**
     * Free space of the query buffer (0 means the buffer is full).
     * 
     */
    @Import(name="queryBufferFree", required=true)
    private Output<Integer> queryBufferFree;

    /**
     * @return Free space of the query buffer (0 means the buffer is full).
     * 
     */
    public Output<Integer> queryBufferFree() {
        return this.queryBufferFree;
    }

    private GetManagedDatabaseValkeySessionsSessionArgs() {}

    private GetManagedDatabaseValkeySessionsSessionArgs(GetManagedDatabaseValkeySessionsSessionArgs $) {
        this.activeChannelSubscriptions = $.activeChannelSubscriptions;
        this.activeDatabase = $.activeDatabase;
        this.activePatternMatchingChannelSubscriptions = $.activePatternMatchingChannelSubscriptions;
        this.applicationName = $.applicationName;
        this.clientAddr = $.clientAddr;
        this.connectionAge = $.connectionAge;
        this.connectionIdle = $.connectionIdle;
        this.flags = $.flags;
        this.flagsRaw = $.flagsRaw;
        this.id = $.id;
        this.multiExecCommands = $.multiExecCommands;
        this.outputBuffer = $.outputBuffer;
        this.outputBufferMemory = $.outputBufferMemory;
        this.outputListLength = $.outputListLength;
        this.query = $.query;
        this.queryBuffer = $.queryBuffer;
        this.queryBufferFree = $.queryBufferFree;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedDatabaseValkeySessionsSessionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedDatabaseValkeySessionsSessionArgs $;

        public Builder() {
            $ = new GetManagedDatabaseValkeySessionsSessionArgs();
        }

        public Builder(GetManagedDatabaseValkeySessionsSessionArgs defaults) {
            $ = new GetManagedDatabaseValkeySessionsSessionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeChannelSubscriptions Number of active channel subscriptions
         * 
         * @return builder
         * 
         */
        public Builder activeChannelSubscriptions(Output<Integer> activeChannelSubscriptions) {
            $.activeChannelSubscriptions = activeChannelSubscriptions;
            return this;
        }

        /**
         * @param activeChannelSubscriptions Number of active channel subscriptions
         * 
         * @return builder
         * 
         */
        public Builder activeChannelSubscriptions(Integer activeChannelSubscriptions) {
            return activeChannelSubscriptions(Output.of(activeChannelSubscriptions));
        }

        /**
         * @param activeDatabase Current database ID
         * 
         * @return builder
         * 
         */
        public Builder activeDatabase(Output<String> activeDatabase) {
            $.activeDatabase = activeDatabase;
            return this;
        }

        /**
         * @param activeDatabase Current database ID
         * 
         * @return builder
         * 
         */
        public Builder activeDatabase(String activeDatabase) {
            return activeDatabase(Output.of(activeDatabase));
        }

        /**
         * @param activePatternMatchingChannelSubscriptions Number of pattern matching subscriptions.
         * 
         * @return builder
         * 
         */
        public Builder activePatternMatchingChannelSubscriptions(Output<Integer> activePatternMatchingChannelSubscriptions) {
            $.activePatternMatchingChannelSubscriptions = activePatternMatchingChannelSubscriptions;
            return this;
        }

        /**
         * @param activePatternMatchingChannelSubscriptions Number of pattern matching subscriptions.
         * 
         * @return builder
         * 
         */
        public Builder activePatternMatchingChannelSubscriptions(Integer activePatternMatchingChannelSubscriptions) {
            return activePatternMatchingChannelSubscriptions(Output.of(activePatternMatchingChannelSubscriptions));
        }

        /**
         * @param applicationName Name of the application that is connected to this service.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param applicationName Name of the application that is connected to this service.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        /**
         * @param clientAddr Number of pattern matching subscriptions.
         * 
         * @return builder
         * 
         */
        public Builder clientAddr(Output<String> clientAddr) {
            $.clientAddr = clientAddr;
            return this;
        }

        /**
         * @param clientAddr Number of pattern matching subscriptions.
         * 
         * @return builder
         * 
         */
        public Builder clientAddr(String clientAddr) {
            return clientAddr(Output.of(clientAddr));
        }

        /**
         * @param connectionAge Total duration of the connection in nanoseconds.
         * 
         * @return builder
         * 
         */
        public Builder connectionAge(Output<Integer> connectionAge) {
            $.connectionAge = connectionAge;
            return this;
        }

        /**
         * @param connectionAge Total duration of the connection in nanoseconds.
         * 
         * @return builder
         * 
         */
        public Builder connectionAge(Integer connectionAge) {
            return connectionAge(Output.of(connectionAge));
        }

        /**
         * @param connectionIdle Idle time of the connection in nanoseconds.
         * 
         * @return builder
         * 
         */
        public Builder connectionIdle(Output<Integer> connectionIdle) {
            $.connectionIdle = connectionIdle;
            return this;
        }

        /**
         * @param connectionIdle Idle time of the connection in nanoseconds.
         * 
         * @return builder
         * 
         */
        public Builder connectionIdle(Integer connectionIdle) {
            return connectionIdle(Output.of(connectionIdle));
        }

        /**
         * @param flags A set containing flags&#39; descriptions.
         * 
         * @return builder
         * 
         */
        public Builder flags(Output<List<String>> flags) {
            $.flags = flags;
            return this;
        }

        /**
         * @param flags A set containing flags&#39; descriptions.
         * 
         * @return builder
         * 
         */
        public Builder flags(List<String> flags) {
            return flags(Output.of(flags));
        }

        /**
         * @param flags A set containing flags&#39; descriptions.
         * 
         * @return builder
         * 
         */
        public Builder flags(String... flags) {
            return flags(List.of(flags));
        }

        /**
         * @param flagsRaw Client connection flags in raw string format.
         * 
         * @return builder
         * 
         */
        public Builder flagsRaw(Output<String> flagsRaw) {
            $.flagsRaw = flagsRaw;
            return this;
        }

        /**
         * @param flagsRaw Client connection flags in raw string format.
         * 
         * @return builder
         * 
         */
        public Builder flagsRaw(String flagsRaw) {
            return flagsRaw(Output.of(flagsRaw));
        }

        /**
         * @param id Process ID of this session.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Process ID of this session.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param multiExecCommands Number of commands in a MULTI/EXEC context.
         * 
         * @return builder
         * 
         */
        public Builder multiExecCommands(Output<Integer> multiExecCommands) {
            $.multiExecCommands = multiExecCommands;
            return this;
        }

        /**
         * @param multiExecCommands Number of commands in a MULTI/EXEC context.
         * 
         * @return builder
         * 
         */
        public Builder multiExecCommands(Integer multiExecCommands) {
            return multiExecCommands(Output.of(multiExecCommands));
        }

        /**
         * @param outputBuffer Output buffer length.
         * 
         * @return builder
         * 
         */
        public Builder outputBuffer(Output<Integer> outputBuffer) {
            $.outputBuffer = outputBuffer;
            return this;
        }

        /**
         * @param outputBuffer Output buffer length.
         * 
         * @return builder
         * 
         */
        public Builder outputBuffer(Integer outputBuffer) {
            return outputBuffer(Output.of(outputBuffer));
        }

        /**
         * @param outputBufferMemory Output buffer memory usage.
         * 
         * @return builder
         * 
         */
        public Builder outputBufferMemory(Output<Integer> outputBufferMemory) {
            $.outputBufferMemory = outputBufferMemory;
            return this;
        }

        /**
         * @param outputBufferMemory Output buffer memory usage.
         * 
         * @return builder
         * 
         */
        public Builder outputBufferMemory(Integer outputBufferMemory) {
            return outputBufferMemory(Output.of(outputBufferMemory));
        }

        /**
         * @param outputListLength Output list length (replies are queued in this list when the buffer is full).
         * 
         * @return builder
         * 
         */
        public Builder outputListLength(Output<Integer> outputListLength) {
            $.outputListLength = outputListLength;
            return this;
        }

        /**
         * @param outputListLength Output list length (replies are queued in this list when the buffer is full).
         * 
         * @return builder
         * 
         */
        public Builder outputListLength(Integer outputListLength) {
            return outputListLength(Output.of(outputListLength));
        }

        /**
         * @param query The last executed command.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The last executed command.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param queryBuffer Query buffer length (0 means no query pending).
         * 
         * @return builder
         * 
         */
        public Builder queryBuffer(Output<Integer> queryBuffer) {
            $.queryBuffer = queryBuffer;
            return this;
        }

        /**
         * @param queryBuffer Query buffer length (0 means no query pending).
         * 
         * @return builder
         * 
         */
        public Builder queryBuffer(Integer queryBuffer) {
            return queryBuffer(Output.of(queryBuffer));
        }

        /**
         * @param queryBufferFree Free space of the query buffer (0 means the buffer is full).
         * 
         * @return builder
         * 
         */
        public Builder queryBufferFree(Output<Integer> queryBufferFree) {
            $.queryBufferFree = queryBufferFree;
            return this;
        }

        /**
         * @param queryBufferFree Free space of the query buffer (0 means the buffer is full).
         * 
         * @return builder
         * 
         */
        public Builder queryBufferFree(Integer queryBufferFree) {
            return queryBufferFree(Output.of(queryBufferFree));
        }

        public GetManagedDatabaseValkeySessionsSessionArgs build() {
            if ($.activeChannelSubscriptions == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "activeChannelSubscriptions");
            }
            if ($.activeDatabase == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "activeDatabase");
            }
            if ($.activePatternMatchingChannelSubscriptions == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "activePatternMatchingChannelSubscriptions");
            }
            if ($.applicationName == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "applicationName");
            }
            if ($.clientAddr == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "clientAddr");
            }
            if ($.connectionAge == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "connectionAge");
            }
            if ($.connectionIdle == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "connectionIdle");
            }
            if ($.flags == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "flags");
            }
            if ($.flagsRaw == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "flagsRaw");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "id");
            }
            if ($.multiExecCommands == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "multiExecCommands");
            }
            if ($.outputBuffer == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "outputBuffer");
            }
            if ($.outputBufferMemory == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "outputBufferMemory");
            }
            if ($.outputListLength == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "outputListLength");
            }
            if ($.query == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "query");
            }
            if ($.queryBuffer == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "queryBuffer");
            }
            if ($.queryBufferFree == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseValkeySessionsSessionArgs", "queryBufferFree");
            }
            return $;
        }
    }

}
