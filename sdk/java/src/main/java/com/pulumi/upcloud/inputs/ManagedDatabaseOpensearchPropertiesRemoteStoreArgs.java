// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabaseOpensearchPropertiesRemoteStoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabaseOpensearchPropertiesRemoteStoreArgs Empty = new ManagedDatabaseOpensearchPropertiesRemoteStoreArgs();

    /**
     * The variance factor that is used to calculate the dynamic bytes lag threshold. The variance factor that is used together with the moving average to calculate the dynamic bytes lag threshold for activating remote segment backpressure. Defaults to 10.
     * 
     */
    @Import(name="segmentPressureBytesLagVarianceFactor")
    private @Nullable Output<Double> segmentPressureBytesLagVarianceFactor;

    /**
     * @return The variance factor that is used to calculate the dynamic bytes lag threshold. The variance factor that is used together with the moving average to calculate the dynamic bytes lag threshold for activating remote segment backpressure. Defaults to 10.
     * 
     */
    public Optional<Output<Double>> segmentPressureBytesLagVarianceFactor() {
        return Optional.ofNullable(this.segmentPressureBytesLagVarianceFactor);
    }

    /**
     * The minimum consecutive failure count for activating remote segment backpressure. The minimum consecutive failure count for activating remote segment backpressure. Defaults to 5.
     * 
     */
    @Import(name="segmentPressureConsecutiveFailuresLimit")
    private @Nullable Output<Integer> segmentPressureConsecutiveFailuresLimit;

    /**
     * @return The minimum consecutive failure count for activating remote segment backpressure. The minimum consecutive failure count for activating remote segment backpressure. Defaults to 5.
     * 
     */
    public Optional<Output<Integer>> segmentPressureConsecutiveFailuresLimit() {
        return Optional.ofNullable(this.segmentPressureConsecutiveFailuresLimit);
    }

    /**
     * Enables remote segment backpressure. Enables remote segment backpressure. Default is `true`.
     * 
     */
    @Import(name="segmentPressureEnabled")
    private @Nullable Output<Boolean> segmentPressureEnabled;

    /**
     * @return Enables remote segment backpressure. Enables remote segment backpressure. Default is `true`.
     * 
     */
    public Optional<Output<Boolean>> segmentPressureEnabled() {
        return Optional.ofNullable(this.segmentPressureEnabled);
    }

    /**
     * The variance factor that is used to calculate the dynamic bytes lag threshold. The variance factor that is used together with the moving average to calculate the dynamic time lag threshold for activating remote segment backpressure. Defaults to 10.
     * 
     */
    @Import(name="segmentPressureTimeLagVarianceFactor")
    private @Nullable Output<Double> segmentPressureTimeLagVarianceFactor;

    /**
     * @return The variance factor that is used to calculate the dynamic bytes lag threshold. The variance factor that is used together with the moving average to calculate the dynamic time lag threshold for activating remote segment backpressure. Defaults to 10.
     * 
     */
    public Optional<Output<Double>> segmentPressureTimeLagVarianceFactor() {
        return Optional.ofNullable(this.segmentPressureTimeLagVarianceFactor);
    }

    private ManagedDatabaseOpensearchPropertiesRemoteStoreArgs() {}

    private ManagedDatabaseOpensearchPropertiesRemoteStoreArgs(ManagedDatabaseOpensearchPropertiesRemoteStoreArgs $) {
        this.segmentPressureBytesLagVarianceFactor = $.segmentPressureBytesLagVarianceFactor;
        this.segmentPressureConsecutiveFailuresLimit = $.segmentPressureConsecutiveFailuresLimit;
        this.segmentPressureEnabled = $.segmentPressureEnabled;
        this.segmentPressureTimeLagVarianceFactor = $.segmentPressureTimeLagVarianceFactor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabaseOpensearchPropertiesRemoteStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabaseOpensearchPropertiesRemoteStoreArgs $;

        public Builder() {
            $ = new ManagedDatabaseOpensearchPropertiesRemoteStoreArgs();
        }

        public Builder(ManagedDatabaseOpensearchPropertiesRemoteStoreArgs defaults) {
            $ = new ManagedDatabaseOpensearchPropertiesRemoteStoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param segmentPressureBytesLagVarianceFactor The variance factor that is used to calculate the dynamic bytes lag threshold. The variance factor that is used together with the moving average to calculate the dynamic bytes lag threshold for activating remote segment backpressure. Defaults to 10.
         * 
         * @return builder
         * 
         */
        public Builder segmentPressureBytesLagVarianceFactor(@Nullable Output<Double> segmentPressureBytesLagVarianceFactor) {
            $.segmentPressureBytesLagVarianceFactor = segmentPressureBytesLagVarianceFactor;
            return this;
        }

        /**
         * @param segmentPressureBytesLagVarianceFactor The variance factor that is used to calculate the dynamic bytes lag threshold. The variance factor that is used together with the moving average to calculate the dynamic bytes lag threshold for activating remote segment backpressure. Defaults to 10.
         * 
         * @return builder
         * 
         */
        public Builder segmentPressureBytesLagVarianceFactor(Double segmentPressureBytesLagVarianceFactor) {
            return segmentPressureBytesLagVarianceFactor(Output.of(segmentPressureBytesLagVarianceFactor));
        }

        /**
         * @param segmentPressureConsecutiveFailuresLimit The minimum consecutive failure count for activating remote segment backpressure. The minimum consecutive failure count for activating remote segment backpressure. Defaults to 5.
         * 
         * @return builder
         * 
         */
        public Builder segmentPressureConsecutiveFailuresLimit(@Nullable Output<Integer> segmentPressureConsecutiveFailuresLimit) {
            $.segmentPressureConsecutiveFailuresLimit = segmentPressureConsecutiveFailuresLimit;
            return this;
        }

        /**
         * @param segmentPressureConsecutiveFailuresLimit The minimum consecutive failure count for activating remote segment backpressure. The minimum consecutive failure count for activating remote segment backpressure. Defaults to 5.
         * 
         * @return builder
         * 
         */
        public Builder segmentPressureConsecutiveFailuresLimit(Integer segmentPressureConsecutiveFailuresLimit) {
            return segmentPressureConsecutiveFailuresLimit(Output.of(segmentPressureConsecutiveFailuresLimit));
        }

        /**
         * @param segmentPressureEnabled Enables remote segment backpressure. Enables remote segment backpressure. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder segmentPressureEnabled(@Nullable Output<Boolean> segmentPressureEnabled) {
            $.segmentPressureEnabled = segmentPressureEnabled;
            return this;
        }

        /**
         * @param segmentPressureEnabled Enables remote segment backpressure. Enables remote segment backpressure. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder segmentPressureEnabled(Boolean segmentPressureEnabled) {
            return segmentPressureEnabled(Output.of(segmentPressureEnabled));
        }

        /**
         * @param segmentPressureTimeLagVarianceFactor The variance factor that is used to calculate the dynamic bytes lag threshold. The variance factor that is used together with the moving average to calculate the dynamic time lag threshold for activating remote segment backpressure. Defaults to 10.
         * 
         * @return builder
         * 
         */
        public Builder segmentPressureTimeLagVarianceFactor(@Nullable Output<Double> segmentPressureTimeLagVarianceFactor) {
            $.segmentPressureTimeLagVarianceFactor = segmentPressureTimeLagVarianceFactor;
            return this;
        }

        /**
         * @param segmentPressureTimeLagVarianceFactor The variance factor that is used to calculate the dynamic bytes lag threshold. The variance factor that is used together with the moving average to calculate the dynamic time lag threshold for activating remote segment backpressure. Defaults to 10.
         * 
         * @return builder
         * 
         */
        public Builder segmentPressureTimeLagVarianceFactor(Double segmentPressureTimeLagVarianceFactor) {
            return segmentPressureTimeLagVarianceFactor(Output.of(segmentPressureTimeLagVarianceFactor));
        }

        public ManagedDatabaseOpensearchPropertiesRemoteStoreArgs build() {
            return $;
        }
    }

}
