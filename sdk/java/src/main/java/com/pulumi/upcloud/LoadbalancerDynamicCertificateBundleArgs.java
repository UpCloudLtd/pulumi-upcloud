// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerDynamicCertificateBundleArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerDynamicCertificateBundleArgs Empty = new LoadbalancerDynamicCertificateBundleArgs();

    /**
     * Certificate hostnames.
     * 
     */
    @Import(name="hostnames", required=true)
    private Output<List<String>> hostnames;

    /**
     * @return Certificate hostnames.
     * 
     */
    public Output<List<String>> hostnames() {
        return this.hostnames;
    }

    /**
     * Private key type (`rsa` / `ecdsa`).
     * 
     */
    @Import(name="keyType", required=true)
    private Output<String> keyType;

    /**
     * @return Private key type (`rsa` / `ecdsa`).
     * 
     */
    public Output<String> keyType() {
        return this.keyType;
    }

    /**
     * The name of the certificate bundle. Must be unique within customer account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the certificate bundle. Must be unique within customer account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private LoadbalancerDynamicCertificateBundleArgs() {}

    private LoadbalancerDynamicCertificateBundleArgs(LoadbalancerDynamicCertificateBundleArgs $) {
        this.hostnames = $.hostnames;
        this.keyType = $.keyType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerDynamicCertificateBundleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerDynamicCertificateBundleArgs $;

        public Builder() {
            $ = new LoadbalancerDynamicCertificateBundleArgs();
        }

        public Builder(LoadbalancerDynamicCertificateBundleArgs defaults) {
            $ = new LoadbalancerDynamicCertificateBundleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostnames Certificate hostnames.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(Output<List<String>> hostnames) {
            $.hostnames = hostnames;
            return this;
        }

        /**
         * @param hostnames Certificate hostnames.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(List<String> hostnames) {
            return hostnames(Output.of(hostnames));
        }

        /**
         * @param hostnames Certificate hostnames.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(String... hostnames) {
            return hostnames(List.of(hostnames));
        }

        /**
         * @param keyType Private key type (`rsa` / `ecdsa`).
         * 
         * @return builder
         * 
         */
        public Builder keyType(Output<String> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType Private key type (`rsa` / `ecdsa`).
         * 
         * @return builder
         * 
         */
        public Builder keyType(String keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param name The name of the certificate bundle. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the certificate bundle. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public LoadbalancerDynamicCertificateBundleArgs build() {
            if ($.hostnames == null) {
                throw new MissingRequiredPropertyException("LoadbalancerDynamicCertificateBundleArgs", "hostnames");
            }
            if ($.keyType == null) {
                throw new MissingRequiredPropertyException("LoadbalancerDynamicCertificateBundleArgs", "keyType");
            }
            return $;
        }
    }

}
