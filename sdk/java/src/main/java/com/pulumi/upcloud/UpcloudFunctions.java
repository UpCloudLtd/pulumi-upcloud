// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.resources.InvokeArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.GetHostsArgs;
import com.pulumi.upcloud.inputs.GetHostsPlainArgs;
import com.pulumi.upcloud.inputs.GetIpAddressesArgs;
import com.pulumi.upcloud.inputs.GetIpAddressesPlainArgs;
import com.pulumi.upcloud.inputs.GetKubernetesClusterArgs;
import com.pulumi.upcloud.inputs.GetKubernetesClusterPlainArgs;
import com.pulumi.upcloud.inputs.GetManagedDatabaseMysqlSessionsArgs;
import com.pulumi.upcloud.inputs.GetManagedDatabaseMysqlSessionsPlainArgs;
import com.pulumi.upcloud.inputs.GetManagedDatabaseOpensearchIndicesArgs;
import com.pulumi.upcloud.inputs.GetManagedDatabaseOpensearchIndicesPlainArgs;
import com.pulumi.upcloud.inputs.GetManagedDatabasePostgresqlSessionsArgs;
import com.pulumi.upcloud.inputs.GetManagedDatabasePostgresqlSessionsPlainArgs;
import com.pulumi.upcloud.inputs.GetManagedDatabaseRedisSessionsArgs;
import com.pulumi.upcloud.inputs.GetManagedDatabaseRedisSessionsPlainArgs;
import com.pulumi.upcloud.inputs.GetManagedDatabaseValkeySessionsArgs;
import com.pulumi.upcloud.inputs.GetManagedDatabaseValkeySessionsPlainArgs;
import com.pulumi.upcloud.inputs.GetManagedObjectStoragePoliciesArgs;
import com.pulumi.upcloud.inputs.GetManagedObjectStoragePoliciesPlainArgs;
import com.pulumi.upcloud.inputs.GetManagedObjectStorageRegionsArgs;
import com.pulumi.upcloud.inputs.GetManagedObjectStorageRegionsPlainArgs;
import com.pulumi.upcloud.inputs.GetNetworksArgs;
import com.pulumi.upcloud.inputs.GetNetworksPlainArgs;
import com.pulumi.upcloud.inputs.GetStorageArgs;
import com.pulumi.upcloud.inputs.GetStoragePlainArgs;
import com.pulumi.upcloud.inputs.GetZoneArgs;
import com.pulumi.upcloud.inputs.GetZonePlainArgs;
import com.pulumi.upcloud.inputs.GetZonesArgs;
import com.pulumi.upcloud.inputs.GetZonesPlainArgs;
import com.pulumi.upcloud.outputs.GetHostsResult;
import com.pulumi.upcloud.outputs.GetIpAddressesResult;
import com.pulumi.upcloud.outputs.GetKubernetesClusterResult;
import com.pulumi.upcloud.outputs.GetLoadBalancerDnsChallengeDomainResult;
import com.pulumi.upcloud.outputs.GetManagedDatabaseMysqlSessionsResult;
import com.pulumi.upcloud.outputs.GetManagedDatabaseOpensearchIndicesResult;
import com.pulumi.upcloud.outputs.GetManagedDatabasePostgresqlSessionsResult;
import com.pulumi.upcloud.outputs.GetManagedDatabaseRedisSessionsResult;
import com.pulumi.upcloud.outputs.GetManagedDatabaseValkeySessionsResult;
import com.pulumi.upcloud.outputs.GetManagedObjectStoragePoliciesResult;
import com.pulumi.upcloud.outputs.GetManagedObjectStorageRegionsResult;
import com.pulumi.upcloud.outputs.GetNetworksResult;
import com.pulumi.upcloud.outputs.GetStorageResult;
import com.pulumi.upcloud.outputs.GetTagsResult;
import com.pulumi.upcloud.outputs.GetZoneResult;
import com.pulumi.upcloud.outputs.GetZonesResult;
import java.util.concurrent.CompletableFuture;

public final class UpcloudFunctions {
    /**
     * Returns a list of available UpCloud hosts.
     * 		A host identifies the host server that virtual machines are run on.
     * 		Only hosts on private cloud to which the calling account has access to are available through this resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetHostsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allHosts = UpcloudFunctions.getHosts(GetHostsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHostsResult> getHosts() {
        return getHosts(GetHostsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available UpCloud hosts.
     * 		A host identifies the host server that virtual machines are run on.
     * 		Only hosts on private cloud to which the calling account has access to are available through this resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetHostsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allHosts = UpcloudFunctions.getHosts(GetHostsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHostsResult> getHostsPlain() {
        return getHostsPlain(GetHostsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available UpCloud hosts.
     * 		A host identifies the host server that virtual machines are run on.
     * 		Only hosts on private cloud to which the calling account has access to are available through this resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetHostsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allHosts = UpcloudFunctions.getHosts(GetHostsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHostsResult> getHosts(GetHostsArgs args) {
        return getHosts(args, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available UpCloud hosts.
     * 		A host identifies the host server that virtual machines are run on.
     * 		Only hosts on private cloud to which the calling account has access to are available through this resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetHostsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allHosts = UpcloudFunctions.getHosts(GetHostsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHostsResult> getHostsPlain(GetHostsPlainArgs args) {
        return getHostsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available UpCloud hosts.
     * 		A host identifies the host server that virtual machines are run on.
     * 		Only hosts on private cloud to which the calling account has access to are available through this resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetHostsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allHosts = UpcloudFunctions.getHosts(GetHostsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHostsResult> getHosts(GetHostsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getHosts:getHosts", TypeShape.of(GetHostsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of available UpCloud hosts.
     * 		A host identifies the host server that virtual machines are run on.
     * 		Only hosts on private cloud to which the calling account has access to are available through this resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetHostsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allHosts = UpcloudFunctions.getHosts(GetHostsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHostsResult> getHosts(GetHostsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getHosts:getHosts", TypeShape.of(GetHostsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of available UpCloud hosts.
     * 		A host identifies the host server that virtual machines are run on.
     * 		Only hosts on private cloud to which the calling account has access to are available through this resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetHostsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allHosts = UpcloudFunctions.getHosts(GetHostsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHostsResult> getHostsPlain(GetHostsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getHosts:getHosts", TypeShape.of(GetHostsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a set of IP Addresses that are associated with the UpCloud account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetIpAddressesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allIpAddresses = UpcloudFunctions.getIpAddresses(GetIpAddressesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIpAddressesResult> getIpAddresses() {
        return getIpAddresses(GetIpAddressesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns a set of IP Addresses that are associated with the UpCloud account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetIpAddressesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allIpAddresses = UpcloudFunctions.getIpAddresses(GetIpAddressesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIpAddressesResult> getIpAddressesPlain() {
        return getIpAddressesPlain(GetIpAddressesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns a set of IP Addresses that are associated with the UpCloud account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetIpAddressesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allIpAddresses = UpcloudFunctions.getIpAddresses(GetIpAddressesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIpAddressesResult> getIpAddresses(GetIpAddressesArgs args) {
        return getIpAddresses(args, InvokeOptions.Empty);
    }
    /**
     * Returns a set of IP Addresses that are associated with the UpCloud account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetIpAddressesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allIpAddresses = UpcloudFunctions.getIpAddresses(GetIpAddressesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIpAddressesResult> getIpAddressesPlain(GetIpAddressesPlainArgs args) {
        return getIpAddressesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Returns a set of IP Addresses that are associated with the UpCloud account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetIpAddressesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allIpAddresses = UpcloudFunctions.getIpAddresses(GetIpAddressesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIpAddressesResult> getIpAddresses(GetIpAddressesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getIpAddresses:getIpAddresses", TypeShape.of(GetIpAddressesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a set of IP Addresses that are associated with the UpCloud account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetIpAddressesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allIpAddresses = UpcloudFunctions.getIpAddresses(GetIpAddressesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIpAddressesResult> getIpAddresses(GetIpAddressesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getIpAddresses:getIpAddresses", TypeShape.of(GetIpAddressesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a set of IP Addresses that are associated with the UpCloud account.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetIpAddressesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var allIpAddresses = UpcloudFunctions.getIpAddresses(GetIpAddressesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIpAddressesResult> getIpAddressesPlain(GetIpAddressesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getIpAddresses:getIpAddresses", TypeShape.of(GetIpAddressesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.Network;
     * import com.pulumi.upcloud.NetworkArgs;
     * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
     * import com.pulumi.upcloud.KubernetesCluster;
     * import com.pulumi.upcloud.KubernetesClusterArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetKubernetesClusterArgs;
     * import com.pulumi.kubernetes.Namespace;
     * import com.pulumi.kubernetes.NamespaceArgs;
     * import com.pulumi.local.File;
     * import com.pulumi.local.FileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use Kubernetes provider to access your Kubernetes cluster
     *         // Create a network for the Kubernetes cluster
     *         var exampleNetwork = new Network("exampleNetwork", NetworkArgs.builder()
     *             .name("example-network")
     *             .zone("de-fra1")
     *             .ipNetwork(NetworkIpNetworkArgs.builder()
     *                 .address("172.16.1.0/24")
     *                 .dhcp(true)
     *                 .family("IPv4")
     *                 .build())
     *             .build());
     * 
     *         // Create a Kubernetes cluster
     *         var exampleKubernetesCluster = new KubernetesCluster("exampleKubernetesCluster", KubernetesClusterArgs.builder()
     *             .controlPlaneIpFilters("0.0.0.0/0")
     *             .name("exampleapp")
     *             .network(exampleNetwork.id())
     *             .zone("de-fra1")
     *             .build());
     * 
     *         // Read the details of the newly created cluster
     *         final var example = UpcloudFunctions.getKubernetesCluster(GetKubernetesClusterArgs.builder()
     *             .id(exampleKubernetesCluster.id())
     *             .build());
     * 
     *         // Use the Kubernetes provider resources to interact with the cluster
     *         var exampleNamespace = new Namespace("exampleNamespace", NamespaceArgs.builder()
     *             .metadata(List.of(Map.of("name", "example-namespace")))
     *             .build());
     * 
     *         // In addition, write the kubeconfig to a file to interact with the cluster with `kubectl` or other clients
     *         var exampleFile = new File("exampleFile", FileArgs.builder()
     *             .content(example.kubeconfig())
     *             .filename("example.conf")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKubernetesClusterResult> getKubernetesCluster(GetKubernetesClusterArgs args) {
        return getKubernetesCluster(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.Network;
     * import com.pulumi.upcloud.NetworkArgs;
     * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
     * import com.pulumi.upcloud.KubernetesCluster;
     * import com.pulumi.upcloud.KubernetesClusterArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetKubernetesClusterArgs;
     * import com.pulumi.kubernetes.Namespace;
     * import com.pulumi.kubernetes.NamespaceArgs;
     * import com.pulumi.local.File;
     * import com.pulumi.local.FileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use Kubernetes provider to access your Kubernetes cluster
     *         // Create a network for the Kubernetes cluster
     *         var exampleNetwork = new Network("exampleNetwork", NetworkArgs.builder()
     *             .name("example-network")
     *             .zone("de-fra1")
     *             .ipNetwork(NetworkIpNetworkArgs.builder()
     *                 .address("172.16.1.0/24")
     *                 .dhcp(true)
     *                 .family("IPv4")
     *                 .build())
     *             .build());
     * 
     *         // Create a Kubernetes cluster
     *         var exampleKubernetesCluster = new KubernetesCluster("exampleKubernetesCluster", KubernetesClusterArgs.builder()
     *             .controlPlaneIpFilters("0.0.0.0/0")
     *             .name("exampleapp")
     *             .network(exampleNetwork.id())
     *             .zone("de-fra1")
     *             .build());
     * 
     *         // Read the details of the newly created cluster
     *         final var example = UpcloudFunctions.getKubernetesCluster(GetKubernetesClusterArgs.builder()
     *             .id(exampleKubernetesCluster.id())
     *             .build());
     * 
     *         // Use the Kubernetes provider resources to interact with the cluster
     *         var exampleNamespace = new Namespace("exampleNamespace", NamespaceArgs.builder()
     *             .metadata(List.of(Map.of("name", "example-namespace")))
     *             .build());
     * 
     *         // In addition, write the kubeconfig to a file to interact with the cluster with `kubectl` or other clients
     *         var exampleFile = new File("exampleFile", FileArgs.builder()
     *             .content(example.kubeconfig())
     *             .filename("example.conf")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKubernetesClusterResult> getKubernetesClusterPlain(GetKubernetesClusterPlainArgs args) {
        return getKubernetesClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.Network;
     * import com.pulumi.upcloud.NetworkArgs;
     * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
     * import com.pulumi.upcloud.KubernetesCluster;
     * import com.pulumi.upcloud.KubernetesClusterArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetKubernetesClusterArgs;
     * import com.pulumi.kubernetes.Namespace;
     * import com.pulumi.kubernetes.NamespaceArgs;
     * import com.pulumi.local.File;
     * import com.pulumi.local.FileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use Kubernetes provider to access your Kubernetes cluster
     *         // Create a network for the Kubernetes cluster
     *         var exampleNetwork = new Network("exampleNetwork", NetworkArgs.builder()
     *             .name("example-network")
     *             .zone("de-fra1")
     *             .ipNetwork(NetworkIpNetworkArgs.builder()
     *                 .address("172.16.1.0/24")
     *                 .dhcp(true)
     *                 .family("IPv4")
     *                 .build())
     *             .build());
     * 
     *         // Create a Kubernetes cluster
     *         var exampleKubernetesCluster = new KubernetesCluster("exampleKubernetesCluster", KubernetesClusterArgs.builder()
     *             .controlPlaneIpFilters("0.0.0.0/0")
     *             .name("exampleapp")
     *             .network(exampleNetwork.id())
     *             .zone("de-fra1")
     *             .build());
     * 
     *         // Read the details of the newly created cluster
     *         final var example = UpcloudFunctions.getKubernetesCluster(GetKubernetesClusterArgs.builder()
     *             .id(exampleKubernetesCluster.id())
     *             .build());
     * 
     *         // Use the Kubernetes provider resources to interact with the cluster
     *         var exampleNamespace = new Namespace("exampleNamespace", NamespaceArgs.builder()
     *             .metadata(List.of(Map.of("name", "example-namespace")))
     *             .build());
     * 
     *         // In addition, write the kubeconfig to a file to interact with the cluster with `kubectl` or other clients
     *         var exampleFile = new File("exampleFile", FileArgs.builder()
     *             .content(example.kubeconfig())
     *             .filename("example.conf")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKubernetesClusterResult> getKubernetesCluster(GetKubernetesClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getKubernetesCluster:getKubernetesCluster", TypeShape.of(GetKubernetesClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.Network;
     * import com.pulumi.upcloud.NetworkArgs;
     * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
     * import com.pulumi.upcloud.KubernetesCluster;
     * import com.pulumi.upcloud.KubernetesClusterArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetKubernetesClusterArgs;
     * import com.pulumi.kubernetes.Namespace;
     * import com.pulumi.kubernetes.NamespaceArgs;
     * import com.pulumi.local.File;
     * import com.pulumi.local.FileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use Kubernetes provider to access your Kubernetes cluster
     *         // Create a network for the Kubernetes cluster
     *         var exampleNetwork = new Network("exampleNetwork", NetworkArgs.builder()
     *             .name("example-network")
     *             .zone("de-fra1")
     *             .ipNetwork(NetworkIpNetworkArgs.builder()
     *                 .address("172.16.1.0/24")
     *                 .dhcp(true)
     *                 .family("IPv4")
     *                 .build())
     *             .build());
     * 
     *         // Create a Kubernetes cluster
     *         var exampleKubernetesCluster = new KubernetesCluster("exampleKubernetesCluster", KubernetesClusterArgs.builder()
     *             .controlPlaneIpFilters("0.0.0.0/0")
     *             .name("exampleapp")
     *             .network(exampleNetwork.id())
     *             .zone("de-fra1")
     *             .build());
     * 
     *         // Read the details of the newly created cluster
     *         final var example = UpcloudFunctions.getKubernetesCluster(GetKubernetesClusterArgs.builder()
     *             .id(exampleKubernetesCluster.id())
     *             .build());
     * 
     *         // Use the Kubernetes provider resources to interact with the cluster
     *         var exampleNamespace = new Namespace("exampleNamespace", NamespaceArgs.builder()
     *             .metadata(List.of(Map.of("name", "example-namespace")))
     *             .build());
     * 
     *         // In addition, write the kubeconfig to a file to interact with the cluster with `kubectl` or other clients
     *         var exampleFile = new File("exampleFile", FileArgs.builder()
     *             .content(example.kubeconfig())
     *             .filename("example.conf")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKubernetesClusterResult> getKubernetesCluster(GetKubernetesClusterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getKubernetesCluster:getKubernetesCluster", TypeShape.of(GetKubernetesClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.Network;
     * import com.pulumi.upcloud.NetworkArgs;
     * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
     * import com.pulumi.upcloud.KubernetesCluster;
     * import com.pulumi.upcloud.KubernetesClusterArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetKubernetesClusterArgs;
     * import com.pulumi.kubernetes.Namespace;
     * import com.pulumi.kubernetes.NamespaceArgs;
     * import com.pulumi.local.File;
     * import com.pulumi.local.FileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use Kubernetes provider to access your Kubernetes cluster
     *         // Create a network for the Kubernetes cluster
     *         var exampleNetwork = new Network("exampleNetwork", NetworkArgs.builder()
     *             .name("example-network")
     *             .zone("de-fra1")
     *             .ipNetwork(NetworkIpNetworkArgs.builder()
     *                 .address("172.16.1.0/24")
     *                 .dhcp(true)
     *                 .family("IPv4")
     *                 .build())
     *             .build());
     * 
     *         // Create a Kubernetes cluster
     *         var exampleKubernetesCluster = new KubernetesCluster("exampleKubernetesCluster", KubernetesClusterArgs.builder()
     *             .controlPlaneIpFilters("0.0.0.0/0")
     *             .name("exampleapp")
     *             .network(exampleNetwork.id())
     *             .zone("de-fra1")
     *             .build());
     * 
     *         // Read the details of the newly created cluster
     *         final var example = UpcloudFunctions.getKubernetesCluster(GetKubernetesClusterArgs.builder()
     *             .id(exampleKubernetesCluster.id())
     *             .build());
     * 
     *         // Use the Kubernetes provider resources to interact with the cluster
     *         var exampleNamespace = new Namespace("exampleNamespace", NamespaceArgs.builder()
     *             .metadata(List.of(Map.of("name", "example-namespace")))
     *             .build());
     * 
     *         // In addition, write the kubeconfig to a file to interact with the cluster with `kubectl` or other clients
     *         var exampleFile = new File("exampleFile", FileArgs.builder()
     *             .content(example.kubeconfig())
     *             .filename("example.conf")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKubernetesClusterResult> getKubernetesClusterPlain(GetKubernetesClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getKubernetesCluster:getKubernetesCluster", TypeShape.of(GetKubernetesClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns DNS challenge domain to use when validating domain ownership using ACME challenge method.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = UpcloudFunctions.getLoadBalancerDnsChallengeDomain(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerDnsChallengeDomainResult> getLoadBalancerDnsChallengeDomain() {
        return getLoadBalancerDnsChallengeDomain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns DNS challenge domain to use when validating domain ownership using ACME challenge method.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = UpcloudFunctions.getLoadBalancerDnsChallengeDomain(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerDnsChallengeDomainResult> getLoadBalancerDnsChallengeDomainPlain() {
        return getLoadBalancerDnsChallengeDomainPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns DNS challenge domain to use when validating domain ownership using ACME challenge method.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = UpcloudFunctions.getLoadBalancerDnsChallengeDomain(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerDnsChallengeDomainResult> getLoadBalancerDnsChallengeDomain(InvokeArgs args) {
        return getLoadBalancerDnsChallengeDomain(args, InvokeOptions.Empty);
    }
    /**
     * Returns DNS challenge domain to use when validating domain ownership using ACME challenge method.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = UpcloudFunctions.getLoadBalancerDnsChallengeDomain(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerDnsChallengeDomainResult> getLoadBalancerDnsChallengeDomainPlain(InvokeArgs args) {
        return getLoadBalancerDnsChallengeDomainPlain(args, InvokeOptions.Empty);
    }
    /**
     * Returns DNS challenge domain to use when validating domain ownership using ACME challenge method.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = UpcloudFunctions.getLoadBalancerDnsChallengeDomain(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerDnsChallengeDomainResult> getLoadBalancerDnsChallengeDomain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getLoadBalancerDnsChallengeDomain:getLoadBalancerDnsChallengeDomain", TypeShape.of(GetLoadBalancerDnsChallengeDomainResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns DNS challenge domain to use when validating domain ownership using ACME challenge method.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = UpcloudFunctions.getLoadBalancerDnsChallengeDomain(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerDnsChallengeDomainResult> getLoadBalancerDnsChallengeDomain(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getLoadBalancerDnsChallengeDomain:getLoadBalancerDnsChallengeDomain", TypeShape.of(GetLoadBalancerDnsChallengeDomainResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns DNS challenge domain to use when validating domain ownership using ACME challenge method.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = UpcloudFunctions.getLoadBalancerDnsChallengeDomain(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerDnsChallengeDomainResult> getLoadBalancerDnsChallengeDomainPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getLoadBalancerDnsChallengeDomain:getLoadBalancerDnsChallengeDomain", TypeShape.of(GetLoadBalancerDnsChallengeDomainResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Current sessions of a MySQL managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseMysql;
     * import com.pulumi.upcloud.ManagedDatabaseMysqlArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseMysqlSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed MySQL Database
     *         // Create a Managed MySQL resource
     *         var exampleManagedDatabaseMysql = new ManagedDatabaseMysql("exampleManagedDatabaseMysql", ManagedDatabaseMysqlArgs.builder()
     *             .name("mysql-example1")
     *             .title("mysql-example1")
     *             .plan("1x1xCPU-2GB-25GB")
     *             .zone("fi-hel1")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseMysqlSessions(GetManagedDatabaseMysqlSessionsArgs.builder()
     *             .service(exampleManagedDatabaseMysql.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseMysqlSessionsResult> getManagedDatabaseMysqlSessions(GetManagedDatabaseMysqlSessionsArgs args) {
        return getManagedDatabaseMysqlSessions(args, InvokeOptions.Empty);
    }
    /**
     * Current sessions of a MySQL managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseMysql;
     * import com.pulumi.upcloud.ManagedDatabaseMysqlArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseMysqlSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed MySQL Database
     *         // Create a Managed MySQL resource
     *         var exampleManagedDatabaseMysql = new ManagedDatabaseMysql("exampleManagedDatabaseMysql", ManagedDatabaseMysqlArgs.builder()
     *             .name("mysql-example1")
     *             .title("mysql-example1")
     *             .plan("1x1xCPU-2GB-25GB")
     *             .zone("fi-hel1")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseMysqlSessions(GetManagedDatabaseMysqlSessionsArgs.builder()
     *             .service(exampleManagedDatabaseMysql.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagedDatabaseMysqlSessionsResult> getManagedDatabaseMysqlSessionsPlain(GetManagedDatabaseMysqlSessionsPlainArgs args) {
        return getManagedDatabaseMysqlSessionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Current sessions of a MySQL managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseMysql;
     * import com.pulumi.upcloud.ManagedDatabaseMysqlArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseMysqlSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed MySQL Database
     *         // Create a Managed MySQL resource
     *         var exampleManagedDatabaseMysql = new ManagedDatabaseMysql("exampleManagedDatabaseMysql", ManagedDatabaseMysqlArgs.builder()
     *             .name("mysql-example1")
     *             .title("mysql-example1")
     *             .plan("1x1xCPU-2GB-25GB")
     *             .zone("fi-hel1")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseMysqlSessions(GetManagedDatabaseMysqlSessionsArgs.builder()
     *             .service(exampleManagedDatabaseMysql.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseMysqlSessionsResult> getManagedDatabaseMysqlSessions(GetManagedDatabaseMysqlSessionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedDatabaseMysqlSessions:getManagedDatabaseMysqlSessions", TypeShape.of(GetManagedDatabaseMysqlSessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Current sessions of a MySQL managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseMysql;
     * import com.pulumi.upcloud.ManagedDatabaseMysqlArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseMysqlSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed MySQL Database
     *         // Create a Managed MySQL resource
     *         var exampleManagedDatabaseMysql = new ManagedDatabaseMysql("exampleManagedDatabaseMysql", ManagedDatabaseMysqlArgs.builder()
     *             .name("mysql-example1")
     *             .title("mysql-example1")
     *             .plan("1x1xCPU-2GB-25GB")
     *             .zone("fi-hel1")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseMysqlSessions(GetManagedDatabaseMysqlSessionsArgs.builder()
     *             .service(exampleManagedDatabaseMysql.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseMysqlSessionsResult> getManagedDatabaseMysqlSessions(GetManagedDatabaseMysqlSessionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedDatabaseMysqlSessions:getManagedDatabaseMysqlSessions", TypeShape.of(GetManagedDatabaseMysqlSessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Current sessions of a MySQL managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseMysql;
     * import com.pulumi.upcloud.ManagedDatabaseMysqlArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseMysqlSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed MySQL Database
     *         // Create a Managed MySQL resource
     *         var exampleManagedDatabaseMysql = new ManagedDatabaseMysql("exampleManagedDatabaseMysql", ManagedDatabaseMysqlArgs.builder()
     *             .name("mysql-example1")
     *             .title("mysql-example1")
     *             .plan("1x1xCPU-2GB-25GB")
     *             .zone("fi-hel1")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseMysqlSessions(GetManagedDatabaseMysqlSessionsArgs.builder()
     *             .service(exampleManagedDatabaseMysql.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagedDatabaseMysqlSessionsResult> getManagedDatabaseMysqlSessionsPlain(GetManagedDatabaseMysqlSessionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getManagedDatabaseMysqlSessions:getManagedDatabaseMysqlSessions", TypeShape.of(GetManagedDatabaseMysqlSessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * OpenSearch indices
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseOpensearch;
     * import com.pulumi.upcloud.ManagedDatabaseOpensearchArgs;
     * import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseOpensearchIndicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the indices for a Managed OpenSearch Database
     *         // Create a Managed OpenSearch resource
     *         var exampleManagedDatabaseOpensearch = new ManagedDatabaseOpensearch("exampleManagedDatabaseOpensearch", ManagedDatabaseOpensearchArgs.builder()
     *             .name("opensearch-example")
     *             .title("opensearch-example")
     *             .plan("1x2xCPU-4GB-80GB-1D")
     *             .zone("fi-hel1")
     *             .properties(ManagedDatabaseOpensearchPropertiesArgs.builder()
     *                 .automaticUtilityNetworkIpFilter(false)
     *                 .publicAccess(false)
     *                 .build())
     *             .build());
     * 
     *         // Read the available indices of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseOpensearchIndices(GetManagedDatabaseOpensearchIndicesArgs.builder()
     *             .service(exampleManagedDatabaseOpensearch.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseOpensearchIndicesResult> getManagedDatabaseOpensearchIndices(GetManagedDatabaseOpensearchIndicesArgs args) {
        return getManagedDatabaseOpensearchIndices(args, InvokeOptions.Empty);
    }
    /**
     * OpenSearch indices
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseOpensearch;
     * import com.pulumi.upcloud.ManagedDatabaseOpensearchArgs;
     * import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseOpensearchIndicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the indices for a Managed OpenSearch Database
     *         // Create a Managed OpenSearch resource
     *         var exampleManagedDatabaseOpensearch = new ManagedDatabaseOpensearch("exampleManagedDatabaseOpensearch", ManagedDatabaseOpensearchArgs.builder()
     *             .name("opensearch-example")
     *             .title("opensearch-example")
     *             .plan("1x2xCPU-4GB-80GB-1D")
     *             .zone("fi-hel1")
     *             .properties(ManagedDatabaseOpensearchPropertiesArgs.builder()
     *                 .automaticUtilityNetworkIpFilter(false)
     *                 .publicAccess(false)
     *                 .build())
     *             .build());
     * 
     *         // Read the available indices of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseOpensearchIndices(GetManagedDatabaseOpensearchIndicesArgs.builder()
     *             .service(exampleManagedDatabaseOpensearch.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagedDatabaseOpensearchIndicesResult> getManagedDatabaseOpensearchIndicesPlain(GetManagedDatabaseOpensearchIndicesPlainArgs args) {
        return getManagedDatabaseOpensearchIndicesPlain(args, InvokeOptions.Empty);
    }
    /**
     * OpenSearch indices
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseOpensearch;
     * import com.pulumi.upcloud.ManagedDatabaseOpensearchArgs;
     * import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseOpensearchIndicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the indices for a Managed OpenSearch Database
     *         // Create a Managed OpenSearch resource
     *         var exampleManagedDatabaseOpensearch = new ManagedDatabaseOpensearch("exampleManagedDatabaseOpensearch", ManagedDatabaseOpensearchArgs.builder()
     *             .name("opensearch-example")
     *             .title("opensearch-example")
     *             .plan("1x2xCPU-4GB-80GB-1D")
     *             .zone("fi-hel1")
     *             .properties(ManagedDatabaseOpensearchPropertiesArgs.builder()
     *                 .automaticUtilityNetworkIpFilter(false)
     *                 .publicAccess(false)
     *                 .build())
     *             .build());
     * 
     *         // Read the available indices of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseOpensearchIndices(GetManagedDatabaseOpensearchIndicesArgs.builder()
     *             .service(exampleManagedDatabaseOpensearch.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseOpensearchIndicesResult> getManagedDatabaseOpensearchIndices(GetManagedDatabaseOpensearchIndicesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedDatabaseOpensearchIndices:getManagedDatabaseOpensearchIndices", TypeShape.of(GetManagedDatabaseOpensearchIndicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * OpenSearch indices
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseOpensearch;
     * import com.pulumi.upcloud.ManagedDatabaseOpensearchArgs;
     * import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseOpensearchIndicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the indices for a Managed OpenSearch Database
     *         // Create a Managed OpenSearch resource
     *         var exampleManagedDatabaseOpensearch = new ManagedDatabaseOpensearch("exampleManagedDatabaseOpensearch", ManagedDatabaseOpensearchArgs.builder()
     *             .name("opensearch-example")
     *             .title("opensearch-example")
     *             .plan("1x2xCPU-4GB-80GB-1D")
     *             .zone("fi-hel1")
     *             .properties(ManagedDatabaseOpensearchPropertiesArgs.builder()
     *                 .automaticUtilityNetworkIpFilter(false)
     *                 .publicAccess(false)
     *                 .build())
     *             .build());
     * 
     *         // Read the available indices of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseOpensearchIndices(GetManagedDatabaseOpensearchIndicesArgs.builder()
     *             .service(exampleManagedDatabaseOpensearch.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseOpensearchIndicesResult> getManagedDatabaseOpensearchIndices(GetManagedDatabaseOpensearchIndicesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedDatabaseOpensearchIndices:getManagedDatabaseOpensearchIndices", TypeShape.of(GetManagedDatabaseOpensearchIndicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * OpenSearch indices
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseOpensearch;
     * import com.pulumi.upcloud.ManagedDatabaseOpensearchArgs;
     * import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseOpensearchIndicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the indices for a Managed OpenSearch Database
     *         // Create a Managed OpenSearch resource
     *         var exampleManagedDatabaseOpensearch = new ManagedDatabaseOpensearch("exampleManagedDatabaseOpensearch", ManagedDatabaseOpensearchArgs.builder()
     *             .name("opensearch-example")
     *             .title("opensearch-example")
     *             .plan("1x2xCPU-4GB-80GB-1D")
     *             .zone("fi-hel1")
     *             .properties(ManagedDatabaseOpensearchPropertiesArgs.builder()
     *                 .automaticUtilityNetworkIpFilter(false)
     *                 .publicAccess(false)
     *                 .build())
     *             .build());
     * 
     *         // Read the available indices of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseOpensearchIndices(GetManagedDatabaseOpensearchIndicesArgs.builder()
     *             .service(exampleManagedDatabaseOpensearch.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagedDatabaseOpensearchIndicesResult> getManagedDatabaseOpensearchIndicesPlain(GetManagedDatabaseOpensearchIndicesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getManagedDatabaseOpensearchIndices:getManagedDatabaseOpensearchIndices", TypeShape.of(GetManagedDatabaseOpensearchIndicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Current sessions of a PostgreSQL managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabasePostgresql;
     * import com.pulumi.upcloud.ManagedDatabasePostgresqlArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabasePostgresqlSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed PostgreSQL Database
     *         // Create a Managed PostgreSQL resource
     *         var exampleManagedDatabasePostgresql = new ManagedDatabasePostgresql("exampleManagedDatabasePostgresql", ManagedDatabasePostgresqlArgs.builder()
     *             .name("mysql-example1")
     *             .title("mysql-example1")
     *             .plan("1x1xCPU-2GB-25GB")
     *             .zone("fi-hel1")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabasePostgresqlSessions(GetManagedDatabasePostgresqlSessionsArgs.builder()
     *             .service(exampleManagedDatabasePostgresql.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabasePostgresqlSessionsResult> getManagedDatabasePostgresqlSessions(GetManagedDatabasePostgresqlSessionsArgs args) {
        return getManagedDatabasePostgresqlSessions(args, InvokeOptions.Empty);
    }
    /**
     * Current sessions of a PostgreSQL managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabasePostgresql;
     * import com.pulumi.upcloud.ManagedDatabasePostgresqlArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabasePostgresqlSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed PostgreSQL Database
     *         // Create a Managed PostgreSQL resource
     *         var exampleManagedDatabasePostgresql = new ManagedDatabasePostgresql("exampleManagedDatabasePostgresql", ManagedDatabasePostgresqlArgs.builder()
     *             .name("mysql-example1")
     *             .title("mysql-example1")
     *             .plan("1x1xCPU-2GB-25GB")
     *             .zone("fi-hel1")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabasePostgresqlSessions(GetManagedDatabasePostgresqlSessionsArgs.builder()
     *             .service(exampleManagedDatabasePostgresql.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagedDatabasePostgresqlSessionsResult> getManagedDatabasePostgresqlSessionsPlain(GetManagedDatabasePostgresqlSessionsPlainArgs args) {
        return getManagedDatabasePostgresqlSessionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Current sessions of a PostgreSQL managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabasePostgresql;
     * import com.pulumi.upcloud.ManagedDatabasePostgresqlArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabasePostgresqlSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed PostgreSQL Database
     *         // Create a Managed PostgreSQL resource
     *         var exampleManagedDatabasePostgresql = new ManagedDatabasePostgresql("exampleManagedDatabasePostgresql", ManagedDatabasePostgresqlArgs.builder()
     *             .name("mysql-example1")
     *             .title("mysql-example1")
     *             .plan("1x1xCPU-2GB-25GB")
     *             .zone("fi-hel1")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabasePostgresqlSessions(GetManagedDatabasePostgresqlSessionsArgs.builder()
     *             .service(exampleManagedDatabasePostgresql.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabasePostgresqlSessionsResult> getManagedDatabasePostgresqlSessions(GetManagedDatabasePostgresqlSessionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedDatabasePostgresqlSessions:getManagedDatabasePostgresqlSessions", TypeShape.of(GetManagedDatabasePostgresqlSessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Current sessions of a PostgreSQL managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabasePostgresql;
     * import com.pulumi.upcloud.ManagedDatabasePostgresqlArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabasePostgresqlSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed PostgreSQL Database
     *         // Create a Managed PostgreSQL resource
     *         var exampleManagedDatabasePostgresql = new ManagedDatabasePostgresql("exampleManagedDatabasePostgresql", ManagedDatabasePostgresqlArgs.builder()
     *             .name("mysql-example1")
     *             .title("mysql-example1")
     *             .plan("1x1xCPU-2GB-25GB")
     *             .zone("fi-hel1")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabasePostgresqlSessions(GetManagedDatabasePostgresqlSessionsArgs.builder()
     *             .service(exampleManagedDatabasePostgresql.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabasePostgresqlSessionsResult> getManagedDatabasePostgresqlSessions(GetManagedDatabasePostgresqlSessionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedDatabasePostgresqlSessions:getManagedDatabasePostgresqlSessions", TypeShape.of(GetManagedDatabasePostgresqlSessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Current sessions of a PostgreSQL managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabasePostgresql;
     * import com.pulumi.upcloud.ManagedDatabasePostgresqlArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabasePostgresqlSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed PostgreSQL Database
     *         // Create a Managed PostgreSQL resource
     *         var exampleManagedDatabasePostgresql = new ManagedDatabasePostgresql("exampleManagedDatabasePostgresql", ManagedDatabasePostgresqlArgs.builder()
     *             .name("mysql-example1")
     *             .title("mysql-example1")
     *             .plan("1x1xCPU-2GB-25GB")
     *             .zone("fi-hel1")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabasePostgresqlSessions(GetManagedDatabasePostgresqlSessionsArgs.builder()
     *             .service(exampleManagedDatabasePostgresql.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagedDatabasePostgresqlSessionsResult> getManagedDatabasePostgresqlSessionsPlain(GetManagedDatabasePostgresqlSessionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getManagedDatabasePostgresqlSessions:getManagedDatabasePostgresqlSessions", TypeShape.of(GetManagedDatabasePostgresqlSessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; Redis is deprecated in favor of Valkey. Please use Valkey for new key value store instances.
     * 
     * Current sessions of a Redis managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseRedis;
     * import com.pulumi.upcloud.ManagedDatabaseRedisArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseRedisSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed Redis Database
     *         // Create a Managed Redis resource
     *         var exampleManagedDatabaseRedis = new ManagedDatabaseRedis("exampleManagedDatabaseRedis", ManagedDatabaseRedisArgs.builder()
     *             .name("example")
     *             .title("example")
     *             .plan("1x1xCPU-2GB")
     *             .zone("fi-hel2")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseRedisSessions(GetManagedDatabaseRedisSessionsArgs.builder()
     *             .service(exampleManagedDatabaseRedis.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseRedisSessionsResult> getManagedDatabaseRedisSessions(GetManagedDatabaseRedisSessionsArgs args) {
        return getManagedDatabaseRedisSessions(args, InvokeOptions.Empty);
    }
    /**
     * &gt; Redis is deprecated in favor of Valkey. Please use Valkey for new key value store instances.
     * 
     * Current sessions of a Redis managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseRedis;
     * import com.pulumi.upcloud.ManagedDatabaseRedisArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseRedisSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed Redis Database
     *         // Create a Managed Redis resource
     *         var exampleManagedDatabaseRedis = new ManagedDatabaseRedis("exampleManagedDatabaseRedis", ManagedDatabaseRedisArgs.builder()
     *             .name("example")
     *             .title("example")
     *             .plan("1x1xCPU-2GB")
     *             .zone("fi-hel2")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseRedisSessions(GetManagedDatabaseRedisSessionsArgs.builder()
     *             .service(exampleManagedDatabaseRedis.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagedDatabaseRedisSessionsResult> getManagedDatabaseRedisSessionsPlain(GetManagedDatabaseRedisSessionsPlainArgs args) {
        return getManagedDatabaseRedisSessionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * &gt; Redis is deprecated in favor of Valkey. Please use Valkey for new key value store instances.
     * 
     * Current sessions of a Redis managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseRedis;
     * import com.pulumi.upcloud.ManagedDatabaseRedisArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseRedisSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed Redis Database
     *         // Create a Managed Redis resource
     *         var exampleManagedDatabaseRedis = new ManagedDatabaseRedis("exampleManagedDatabaseRedis", ManagedDatabaseRedisArgs.builder()
     *             .name("example")
     *             .title("example")
     *             .plan("1x1xCPU-2GB")
     *             .zone("fi-hel2")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseRedisSessions(GetManagedDatabaseRedisSessionsArgs.builder()
     *             .service(exampleManagedDatabaseRedis.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseRedisSessionsResult> getManagedDatabaseRedisSessions(GetManagedDatabaseRedisSessionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedDatabaseRedisSessions:getManagedDatabaseRedisSessions", TypeShape.of(GetManagedDatabaseRedisSessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; Redis is deprecated in favor of Valkey. Please use Valkey for new key value store instances.
     * 
     * Current sessions of a Redis managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseRedis;
     * import com.pulumi.upcloud.ManagedDatabaseRedisArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseRedisSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed Redis Database
     *         // Create a Managed Redis resource
     *         var exampleManagedDatabaseRedis = new ManagedDatabaseRedis("exampleManagedDatabaseRedis", ManagedDatabaseRedisArgs.builder()
     *             .name("example")
     *             .title("example")
     *             .plan("1x1xCPU-2GB")
     *             .zone("fi-hel2")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseRedisSessions(GetManagedDatabaseRedisSessionsArgs.builder()
     *             .service(exampleManagedDatabaseRedis.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseRedisSessionsResult> getManagedDatabaseRedisSessions(GetManagedDatabaseRedisSessionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedDatabaseRedisSessions:getManagedDatabaseRedisSessions", TypeShape.of(GetManagedDatabaseRedisSessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; Redis is deprecated in favor of Valkey. Please use Valkey for new key value store instances.
     * 
     * Current sessions of a Redis managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseRedis;
     * import com.pulumi.upcloud.ManagedDatabaseRedisArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseRedisSessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed Redis Database
     *         // Create a Managed Redis resource
     *         var exampleManagedDatabaseRedis = new ManagedDatabaseRedis("exampleManagedDatabaseRedis", ManagedDatabaseRedisArgs.builder()
     *             .name("example")
     *             .title("example")
     *             .plan("1x1xCPU-2GB")
     *             .zone("fi-hel2")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseRedisSessions(GetManagedDatabaseRedisSessionsArgs.builder()
     *             .service(exampleManagedDatabaseRedis.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagedDatabaseRedisSessionsResult> getManagedDatabaseRedisSessionsPlain(GetManagedDatabaseRedisSessionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getManagedDatabaseRedisSessions:getManagedDatabaseRedisSessions", TypeShape.of(GetManagedDatabaseRedisSessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Current sessions of a Valkey managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseValkey;
     * import com.pulumi.upcloud.ManagedDatabaseValkeyArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseValkeySessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed Valkey Database
     *         // Create a Managed Valkey resource
     *         var exampleManagedDatabaseValkey = new ManagedDatabaseValkey("exampleManagedDatabaseValkey", ManagedDatabaseValkeyArgs.builder()
     *             .name("example")
     *             .title("example")
     *             .plan("1x1xCPU-2GB")
     *             .zone("fi-hel2")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseValkeySessions(GetManagedDatabaseValkeySessionsArgs.builder()
     *             .service(exampleManagedDatabaseValkey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseValkeySessionsResult> getManagedDatabaseValkeySessions(GetManagedDatabaseValkeySessionsArgs args) {
        return getManagedDatabaseValkeySessions(args, InvokeOptions.Empty);
    }
    /**
     * Current sessions of a Valkey managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseValkey;
     * import com.pulumi.upcloud.ManagedDatabaseValkeyArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseValkeySessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed Valkey Database
     *         // Create a Managed Valkey resource
     *         var exampleManagedDatabaseValkey = new ManagedDatabaseValkey("exampleManagedDatabaseValkey", ManagedDatabaseValkeyArgs.builder()
     *             .name("example")
     *             .title("example")
     *             .plan("1x1xCPU-2GB")
     *             .zone("fi-hel2")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseValkeySessions(GetManagedDatabaseValkeySessionsArgs.builder()
     *             .service(exampleManagedDatabaseValkey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagedDatabaseValkeySessionsResult> getManagedDatabaseValkeySessionsPlain(GetManagedDatabaseValkeySessionsPlainArgs args) {
        return getManagedDatabaseValkeySessionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Current sessions of a Valkey managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseValkey;
     * import com.pulumi.upcloud.ManagedDatabaseValkeyArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseValkeySessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed Valkey Database
     *         // Create a Managed Valkey resource
     *         var exampleManagedDatabaseValkey = new ManagedDatabaseValkey("exampleManagedDatabaseValkey", ManagedDatabaseValkeyArgs.builder()
     *             .name("example")
     *             .title("example")
     *             .plan("1x1xCPU-2GB")
     *             .zone("fi-hel2")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseValkeySessions(GetManagedDatabaseValkeySessionsArgs.builder()
     *             .service(exampleManagedDatabaseValkey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseValkeySessionsResult> getManagedDatabaseValkeySessions(GetManagedDatabaseValkeySessionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedDatabaseValkeySessions:getManagedDatabaseValkeySessions", TypeShape.of(GetManagedDatabaseValkeySessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Current sessions of a Valkey managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseValkey;
     * import com.pulumi.upcloud.ManagedDatabaseValkeyArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseValkeySessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed Valkey Database
     *         // Create a Managed Valkey resource
     *         var exampleManagedDatabaseValkey = new ManagedDatabaseValkey("exampleManagedDatabaseValkey", ManagedDatabaseValkeyArgs.builder()
     *             .name("example")
     *             .title("example")
     *             .plan("1x1xCPU-2GB")
     *             .zone("fi-hel2")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseValkeySessions(GetManagedDatabaseValkeySessionsArgs.builder()
     *             .service(exampleManagedDatabaseValkey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagedDatabaseValkeySessionsResult> getManagedDatabaseValkeySessions(GetManagedDatabaseValkeySessionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedDatabaseValkeySessions:getManagedDatabaseValkeySessions", TypeShape.of(GetManagedDatabaseValkeySessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Current sessions of a Valkey managed database
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.ManagedDatabaseValkey;
     * import com.pulumi.upcloud.ManagedDatabaseValkeyArgs;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetManagedDatabaseValkeySessionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Use data source to gather a list of the active sessions for a Managed Valkey Database
     *         // Create a Managed Valkey resource
     *         var exampleManagedDatabaseValkey = new ManagedDatabaseValkey("exampleManagedDatabaseValkey", ManagedDatabaseValkeyArgs.builder()
     *             .name("example")
     *             .title("example")
     *             .plan("1x1xCPU-2GB")
     *             .zone("fi-hel2")
     *             .build());
     * 
     *         // Read the active sessions of the newly created service
     *         final var example = UpcloudFunctions.getManagedDatabaseValkeySessions(GetManagedDatabaseValkeySessionsArgs.builder()
     *             .service(exampleManagedDatabaseValkey.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagedDatabaseValkeySessionsResult> getManagedDatabaseValkeySessionsPlain(GetManagedDatabaseValkeySessionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getManagedDatabaseValkeySessions:getManagedDatabaseValkeySessions", TypeShape.of(GetManagedDatabaseValkeySessionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Policies available for a Managed Object Storage resource. See `managed_object_storage_user_policy` for attaching to a user.
     * 
     */
    public static Output<GetManagedObjectStoragePoliciesResult> getManagedObjectStoragePolicies(GetManagedObjectStoragePoliciesArgs args) {
        return getManagedObjectStoragePolicies(args, InvokeOptions.Empty);
    }
    /**
     * Policies available for a Managed Object Storage resource. See `managed_object_storage_user_policy` for attaching to a user.
     * 
     */
    public static CompletableFuture<GetManagedObjectStoragePoliciesResult> getManagedObjectStoragePoliciesPlain(GetManagedObjectStoragePoliciesPlainArgs args) {
        return getManagedObjectStoragePoliciesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Policies available for a Managed Object Storage resource. See `managed_object_storage_user_policy` for attaching to a user.
     * 
     */
    public static Output<GetManagedObjectStoragePoliciesResult> getManagedObjectStoragePolicies(GetManagedObjectStoragePoliciesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedObjectStoragePolicies:getManagedObjectStoragePolicies", TypeShape.of(GetManagedObjectStoragePoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Policies available for a Managed Object Storage resource. See `managed_object_storage_user_policy` for attaching to a user.
     * 
     */
    public static Output<GetManagedObjectStoragePoliciesResult> getManagedObjectStoragePolicies(GetManagedObjectStoragePoliciesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedObjectStoragePolicies:getManagedObjectStoragePolicies", TypeShape.of(GetManagedObjectStoragePoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Policies available for a Managed Object Storage resource. See `managed_object_storage_user_policy` for attaching to a user.
     * 
     */
    public static CompletableFuture<GetManagedObjectStoragePoliciesResult> getManagedObjectStoragePoliciesPlain(GetManagedObjectStoragePoliciesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getManagedObjectStoragePolicies:getManagedObjectStoragePolicies", TypeShape.of(GetManagedObjectStoragePoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of available Managed Object Storage regions.
     * 
     */
    public static Output<GetManagedObjectStorageRegionsResult> getManagedObjectStorageRegions() {
        return getManagedObjectStorageRegions(GetManagedObjectStorageRegionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available Managed Object Storage regions.
     * 
     */
    public static CompletableFuture<GetManagedObjectStorageRegionsResult> getManagedObjectStorageRegionsPlain() {
        return getManagedObjectStorageRegionsPlain(GetManagedObjectStorageRegionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available Managed Object Storage regions.
     * 
     */
    public static Output<GetManagedObjectStorageRegionsResult> getManagedObjectStorageRegions(GetManagedObjectStorageRegionsArgs args) {
        return getManagedObjectStorageRegions(args, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available Managed Object Storage regions.
     * 
     */
    public static CompletableFuture<GetManagedObjectStorageRegionsResult> getManagedObjectStorageRegionsPlain(GetManagedObjectStorageRegionsPlainArgs args) {
        return getManagedObjectStorageRegionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available Managed Object Storage regions.
     * 
     */
    public static Output<GetManagedObjectStorageRegionsResult> getManagedObjectStorageRegions(GetManagedObjectStorageRegionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedObjectStorageRegions:getManagedObjectStorageRegions", TypeShape.of(GetManagedObjectStorageRegionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of available Managed Object Storage regions.
     * 
     */
    public static Output<GetManagedObjectStorageRegionsResult> getManagedObjectStorageRegions(GetManagedObjectStorageRegionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getManagedObjectStorageRegions:getManagedObjectStorageRegions", TypeShape.of(GetManagedObjectStorageRegionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of available Managed Object Storage regions.
     * 
     */
    public static CompletableFuture<GetManagedObjectStorageRegionsResult> getManagedObjectStorageRegionsPlain(GetManagedObjectStorageRegionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getManagedObjectStorageRegions:getManagedObjectStorageRegions", TypeShape.of(GetManagedObjectStorageRegionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the available UpCloud networks.
     * 
     */
    public static Output<GetNetworksResult> getNetworks() {
        return getNetworks(GetNetworksArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the available UpCloud networks.
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain() {
        return getNetworksPlain(GetNetworksPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the available UpCloud networks.
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args) {
        return getNetworks(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the available UpCloud networks.
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain(GetNetworksPlainArgs args) {
        return getNetworksPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the available UpCloud networks.
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the available UpCloud networks.
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the available UpCloud networks.
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain(GetNetworksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
     * 
     * Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetStorageArgs;
     * import com.pulumi.upcloud.Server;
     * import com.pulumi.upcloud.ServerArgs;
     * import com.pulumi.upcloud.inputs.ServerNetworkInterfaceArgs;
     * import com.pulumi.upcloud.inputs.ServerTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Build server with your latest custom image 
     *         //
     *         // Note that when applied new updated image will cause replacement of the old server (debian.example.tld) 
     *         // with the new server created based on the updated image.This can cause posible data loss 
     *         // if it hasn't been taken into account when planning the service.
     *         final var appImage = UpcloudFunctions.getStorage(GetStorageArgs.builder()
     *             .type("template")
     *             .nameRegex("^app_image.*")
     *             .mostRecent(true)
     *             .build());
     * 
     *         var example = new Server("example", ServerArgs.builder()
     *             .hostname("debian.example.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *         // Build only new servers with your latest custom image 
     *         //
     *         // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
     *         var example2 = new Server("example2", ServerArgs.builder()
     *             .hostname("debian.example2.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStorageResult> getStorage() {
        return getStorage(GetStorageArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
     * 
     * Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetStorageArgs;
     * import com.pulumi.upcloud.Server;
     * import com.pulumi.upcloud.ServerArgs;
     * import com.pulumi.upcloud.inputs.ServerNetworkInterfaceArgs;
     * import com.pulumi.upcloud.inputs.ServerTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Build server with your latest custom image 
     *         //
     *         // Note that when applied new updated image will cause replacement of the old server (debian.example.tld) 
     *         // with the new server created based on the updated image.This can cause posible data loss 
     *         // if it hasn't been taken into account when planning the service.
     *         final var appImage = UpcloudFunctions.getStorage(GetStorageArgs.builder()
     *             .type("template")
     *             .nameRegex("^app_image.*")
     *             .mostRecent(true)
     *             .build());
     * 
     *         var example = new Server("example", ServerArgs.builder()
     *             .hostname("debian.example.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *         // Build only new servers with your latest custom image 
     *         //
     *         // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
     *         var example2 = new Server("example2", ServerArgs.builder()
     *             .hostname("debian.example2.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStorageResult> getStoragePlain() {
        return getStoragePlain(GetStoragePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
     * 
     * Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetStorageArgs;
     * import com.pulumi.upcloud.Server;
     * import com.pulumi.upcloud.ServerArgs;
     * import com.pulumi.upcloud.inputs.ServerNetworkInterfaceArgs;
     * import com.pulumi.upcloud.inputs.ServerTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Build server with your latest custom image 
     *         //
     *         // Note that when applied new updated image will cause replacement of the old server (debian.example.tld) 
     *         // with the new server created based on the updated image.This can cause posible data loss 
     *         // if it hasn't been taken into account when planning the service.
     *         final var appImage = UpcloudFunctions.getStorage(GetStorageArgs.builder()
     *             .type("template")
     *             .nameRegex("^app_image.*")
     *             .mostRecent(true)
     *             .build());
     * 
     *         var example = new Server("example", ServerArgs.builder()
     *             .hostname("debian.example.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *         // Build only new servers with your latest custom image 
     *         //
     *         // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
     *         var example2 = new Server("example2", ServerArgs.builder()
     *             .hostname("debian.example2.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStorageResult> getStorage(GetStorageArgs args) {
        return getStorage(args, InvokeOptions.Empty);
    }
    /**
     * Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
     * 
     * Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetStorageArgs;
     * import com.pulumi.upcloud.Server;
     * import com.pulumi.upcloud.ServerArgs;
     * import com.pulumi.upcloud.inputs.ServerNetworkInterfaceArgs;
     * import com.pulumi.upcloud.inputs.ServerTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Build server with your latest custom image 
     *         //
     *         // Note that when applied new updated image will cause replacement of the old server (debian.example.tld) 
     *         // with the new server created based on the updated image.This can cause posible data loss 
     *         // if it hasn't been taken into account when planning the service.
     *         final var appImage = UpcloudFunctions.getStorage(GetStorageArgs.builder()
     *             .type("template")
     *             .nameRegex("^app_image.*")
     *             .mostRecent(true)
     *             .build());
     * 
     *         var example = new Server("example", ServerArgs.builder()
     *             .hostname("debian.example.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *         // Build only new servers with your latest custom image 
     *         //
     *         // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
     *         var example2 = new Server("example2", ServerArgs.builder()
     *             .hostname("debian.example2.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStorageResult> getStoragePlain(GetStoragePlainArgs args) {
        return getStoragePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
     * 
     * Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetStorageArgs;
     * import com.pulumi.upcloud.Server;
     * import com.pulumi.upcloud.ServerArgs;
     * import com.pulumi.upcloud.inputs.ServerNetworkInterfaceArgs;
     * import com.pulumi.upcloud.inputs.ServerTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Build server with your latest custom image 
     *         //
     *         // Note that when applied new updated image will cause replacement of the old server (debian.example.tld) 
     *         // with the new server created based on the updated image.This can cause posible data loss 
     *         // if it hasn't been taken into account when planning the service.
     *         final var appImage = UpcloudFunctions.getStorage(GetStorageArgs.builder()
     *             .type("template")
     *             .nameRegex("^app_image.*")
     *             .mostRecent(true)
     *             .build());
     * 
     *         var example = new Server("example", ServerArgs.builder()
     *             .hostname("debian.example.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *         // Build only new servers with your latest custom image 
     *         //
     *         // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
     *         var example2 = new Server("example2", ServerArgs.builder()
     *             .hostname("debian.example2.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStorageResult> getStorage(GetStorageArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getStorage:getStorage", TypeShape.of(GetStorageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
     * 
     * Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetStorageArgs;
     * import com.pulumi.upcloud.Server;
     * import com.pulumi.upcloud.ServerArgs;
     * import com.pulumi.upcloud.inputs.ServerNetworkInterfaceArgs;
     * import com.pulumi.upcloud.inputs.ServerTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Build server with your latest custom image 
     *         //
     *         // Note that when applied new updated image will cause replacement of the old server (debian.example.tld) 
     *         // with the new server created based on the updated image.This can cause posible data loss 
     *         // if it hasn't been taken into account when planning the service.
     *         final var appImage = UpcloudFunctions.getStorage(GetStorageArgs.builder()
     *             .type("template")
     *             .nameRegex("^app_image.*")
     *             .mostRecent(true)
     *             .build());
     * 
     *         var example = new Server("example", ServerArgs.builder()
     *             .hostname("debian.example.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *         // Build only new servers with your latest custom image 
     *         //
     *         // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
     *         var example2 = new Server("example2", ServerArgs.builder()
     *             .hostname("debian.example2.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStorageResult> getStorage(GetStorageArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getStorage:getStorage", TypeShape.of(GetStorageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information on UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
     * 
     * Data source can be used to map storage to other resource based on the ID or just to read some other storage property like zone information. Storage types are: `normal`, `backup`, `cdrom`, and `template`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.upcloud.UpcloudFunctions;
     * import com.pulumi.upcloud.inputs.GetStorageArgs;
     * import com.pulumi.upcloud.Server;
     * import com.pulumi.upcloud.ServerArgs;
     * import com.pulumi.upcloud.inputs.ServerNetworkInterfaceArgs;
     * import com.pulumi.upcloud.inputs.ServerTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         // Build server with your latest custom image 
     *         //
     *         // Note that when applied new updated image will cause replacement of the old server (debian.example.tld) 
     *         // with the new server created based on the updated image.This can cause posible data loss 
     *         // if it hasn't been taken into account when planning the service.
     *         final var appImage = UpcloudFunctions.getStorage(GetStorageArgs.builder()
     *             .type("template")
     *             .nameRegex("^app_image.*")
     *             .mostRecent(true)
     *             .build());
     * 
     *         var example = new Server("example", ServerArgs.builder()
     *             .hostname("debian.example.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *         // Build only new servers with your latest custom image 
     *         //
     *         // Use the lifecycle meta-argument to ignore changes in server's template triggered by new image version
     *         var example2 = new Server("example2", ServerArgs.builder()
     *             .hostname("debian.example2.tld")
     *             .zone("fi-hel1")
     *             .networkInterfaces(ServerNetworkInterfaceArgs.builder()
     *                 .type("public")
     *                 .build())
     *             .template(ServerTemplateArgs.builder()
     *                 .storage(appImage.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStorageResult> getStoragePlain(GetStoragePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getStorage:getStorage", TypeShape.of(GetStorageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data-source is deprecated.
     * 
     */
    public static Output<GetTagsResult> getTags() {
        return getTags(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data-source is deprecated.
     * 
     */
    public static CompletableFuture<GetTagsResult> getTagsPlain() {
        return getTagsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Data-source is deprecated.
     * 
     */
    public static Output<GetTagsResult> getTags(InvokeArgs args) {
        return getTags(args, InvokeOptions.Empty);
    }
    /**
     * Data-source is deprecated.
     * 
     */
    public static CompletableFuture<GetTagsResult> getTagsPlain(InvokeArgs args) {
        return getTagsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Data-source is deprecated.
     * 
     */
    public static Output<GetTagsResult> getTags(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getTags:getTags", TypeShape.of(GetTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data-source is deprecated.
     * 
     */
    public static Output<GetTagsResult> getTags(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getTags:getTags", TypeShape.of(GetTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Data-source is deprecated.
     * 
     */
    public static CompletableFuture<GetTagsResult> getTagsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getTags:getTags", TypeShape.of(GetTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details on given zone.
     * 
     */
    public static Output<GetZoneResult> getZone() {
        return getZone(GetZoneArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details on given zone.
     * 
     */
    public static CompletableFuture<GetZoneResult> getZonePlain() {
        return getZonePlain(GetZonePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details on given zone.
     * 
     */
    public static Output<GetZoneResult> getZone(GetZoneArgs args) {
        return getZone(args, InvokeOptions.Empty);
    }
    /**
     * Provides details on given zone.
     * 
     */
    public static CompletableFuture<GetZoneResult> getZonePlain(GetZonePlainArgs args) {
        return getZonePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details on given zone.
     * 
     */
    public static Output<GetZoneResult> getZone(GetZoneArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getZone:getZone", TypeShape.of(GetZoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details on given zone.
     * 
     */
    public static Output<GetZoneResult> getZone(GetZoneArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getZone:getZone", TypeShape.of(GetZoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details on given zone.
     * 
     */
    public static CompletableFuture<GetZoneResult> getZonePlain(GetZonePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getZone:getZone", TypeShape.of(GetZoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of available UpCloud zones.
     * 
     */
    public static Output<GetZonesResult> getZones() {
        return getZones(GetZonesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available UpCloud zones.
     * 
     */
    public static CompletableFuture<GetZonesResult> getZonesPlain() {
        return getZonesPlain(GetZonesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available UpCloud zones.
     * 
     */
    public static Output<GetZonesResult> getZones(GetZonesArgs args) {
        return getZones(args, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available UpCloud zones.
     * 
     */
    public static CompletableFuture<GetZonesResult> getZonesPlain(GetZonesPlainArgs args) {
        return getZonesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Returns a list of available UpCloud zones.
     * 
     */
    public static Output<GetZonesResult> getZones(GetZonesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getZones:getZones", TypeShape.of(GetZonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of available UpCloud zones.
     * 
     */
    public static Output<GetZonesResult> getZones(GetZonesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("upcloud:index/getZones:getZones", TypeShape.of(GetZonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of available UpCloud zones.
     * 
     */
    public static CompletableFuture<GetZonesResult> getZonesPlain(GetZonesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("upcloud:index/getZones:getZones", TypeShape.of(GetZonesResult.class), args, Utilities.withVersion(options));
    }
}
