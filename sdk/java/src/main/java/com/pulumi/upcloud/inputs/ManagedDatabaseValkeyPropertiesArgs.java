// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.ManagedDatabaseValkeyPropertiesMigrationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabaseValkeyPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabaseValkeyPropertiesArgs Empty = new ManagedDatabaseValkeyPropertiesArgs();

    /**
     * Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    @Import(name="automaticUtilityNetworkIpFilter")
    private @Nullable Output<Boolean> automaticUtilityNetworkIpFilter;

    /**
     * @return Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    public Optional<Output<Boolean>> automaticUtilityNetworkIpFilter() {
        return Optional.ofNullable(this.automaticUtilityNetworkIpFilter);
    }

    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    @Import(name="backupHour")
    private @Nullable Output<Integer> backupHour;

    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Output<Integer>> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }

    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    @Import(name="backupMinute")
    private @Nullable Output<Integer> backupMinute;

    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Output<Integer>> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }

    /**
     * Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkeyPersistence` is set to `off`.
     * 
     */
    @Import(name="frequentSnapshots")
    private @Nullable Output<Boolean> frequentSnapshots;

    /**
     * @return Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkeyPersistence` is set to `off`.
     * 
     */
    public Optional<Output<Boolean>> frequentSnapshots() {
        return Optional.ofNullable(this.frequentSnapshots);
    }

    /**
     * IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Migrate data from existing server.
     * 
     */
    @Import(name="migration")
    private @Nullable Output<ManagedDatabaseValkeyPropertiesMigrationArgs> migration;

    /**
     * @return Migrate data from existing server.
     * 
     */
    public Optional<Output<ManagedDatabaseValkeyPropertiesMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    /**
     * Public Access. Allow access to the service from the public Internet.
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<Boolean> publicAccess;

    /**
     * @return Public Access. Allow access to the service from the public Internet.
     * 
     */
    public Optional<Output<Boolean>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Default ACL for pub/sub channels used when a Valkey user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
     * 
     */
    @Import(name="valkeyAclChannelsDefault")
    private @Nullable Output<String> valkeyAclChannelsDefault;

    /**
     * @return Default ACL for pub/sub channels used when a Valkey user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
     * 
     */
    public Optional<Output<String>> valkeyAclChannelsDefault() {
        return Optional.ofNullable(this.valkeyAclChannelsDefault);
    }

    /**
     * Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
     * 
     */
    @Import(name="valkeyActiveExpireEffort")
    private @Nullable Output<Integer> valkeyActiveExpireEffort;

    /**
     * @return Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
     * 
     */
    public Optional<Output<Integer>> valkeyActiveExpireEffort() {
        return Optional.ofNullable(this.valkeyActiveExpireEffort);
    }

    /**
     * Valkey IO thread count. Set Valkey IO thread count. Changing this will cause a restart of the Valkey service.
     * 
     */
    @Import(name="valkeyIoThreads")
    private @Nullable Output<Integer> valkeyIoThreads;

    /**
     * @return Valkey IO thread count. Set Valkey IO thread count. Changing this will cause a restart of the Valkey service.
     * 
     */
    public Optional<Output<Integer>> valkeyIoThreads() {
        return Optional.ofNullable(this.valkeyIoThreads);
    }

    /**
     * LFU maxmemory-policy counter decay time in minutes.
     * 
     */
    @Import(name="valkeyLfuDecayTime")
    private @Nullable Output<Integer> valkeyLfuDecayTime;

    /**
     * @return LFU maxmemory-policy counter decay time in minutes.
     * 
     */
    public Optional<Output<Integer>> valkeyLfuDecayTime() {
        return Optional.ofNullable(this.valkeyLfuDecayTime);
    }

    /**
     * Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
     * 
     */
    @Import(name="valkeyLfuLogFactor")
    private @Nullable Output<Integer> valkeyLfuLogFactor;

    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
     * 
     */
    public Optional<Output<Integer>> valkeyLfuLogFactor() {
        return Optional.ofNullable(this.valkeyLfuLogFactor);
    }

    /**
     * Valkey maxmemory-policy.
     * 
     */
    @Import(name="valkeyMaxmemoryPolicy")
    private @Nullable Output<String> valkeyMaxmemoryPolicy;

    /**
     * @return Valkey maxmemory-policy.
     * 
     */
    public Optional<Output<String>> valkeyMaxmemoryPolicy() {
        return Optional.ofNullable(this.valkeyMaxmemoryPolicy);
    }

    /**
     * Set notify-keyspace-events option.
     * 
     */
    @Import(name="valkeyNotifyKeyspaceEvents")
    private @Nullable Output<String> valkeyNotifyKeyspaceEvents;

    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    public Optional<Output<String>> valkeyNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.valkeyNotifyKeyspaceEvents);
    }

    /**
     * Number of Valkey databases. Set number of Valkey databases. Changing this will cause a restart of the Valkey service.
     * 
     */
    @Import(name="valkeyNumberOfDatabases")
    private @Nullable Output<Integer> valkeyNumberOfDatabases;

    /**
     * @return Number of Valkey databases. Set number of Valkey databases. Changing this will cause a restart of the Valkey service.
     * 
     */
    public Optional<Output<Integer>> valkeyNumberOfDatabases() {
        return Optional.ofNullable(this.valkeyNumberOfDatabases);
    }

    /**
     * Valkey persistence. When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    @Import(name="valkeyPersistence")
    private @Nullable Output<String> valkeyPersistence;

    /**
     * @return Valkey persistence. When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    public Optional<Output<String>> valkeyPersistence() {
        return Optional.ofNullable(this.valkeyPersistence);
    }

    /**
     * Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    @Import(name="valkeyPubsubClientOutputBufferLimit")
    private @Nullable Output<Integer> valkeyPubsubClientOutputBufferLimit;

    /**
     * @return Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    public Optional<Output<Integer>> valkeyPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.valkeyPubsubClientOutputBufferLimit);
    }

    /**
     * Require SSL to access Valkey.
     * 
     */
    @Import(name="valkeySsl")
    private @Nullable Output<Boolean> valkeySsl;

    /**
     * @return Require SSL to access Valkey.
     * 
     */
    public Optional<Output<Boolean>> valkeySsl() {
        return Optional.ofNullable(this.valkeySsl);
    }

    /**
     * Valkey idle connection timeout in seconds.
     * 
     */
    @Import(name="valkeyTimeout")
    private @Nullable Output<Integer> valkeyTimeout;

    /**
     * @return Valkey idle connection timeout in seconds.
     * 
     */
    public Optional<Output<Integer>> valkeyTimeout() {
        return Optional.ofNullable(this.valkeyTimeout);
    }

    private ManagedDatabaseValkeyPropertiesArgs() {}

    private ManagedDatabaseValkeyPropertiesArgs(ManagedDatabaseValkeyPropertiesArgs $) {
        this.automaticUtilityNetworkIpFilter = $.automaticUtilityNetworkIpFilter;
        this.backupHour = $.backupHour;
        this.backupMinute = $.backupMinute;
        this.frequentSnapshots = $.frequentSnapshots;
        this.ipFilters = $.ipFilters;
        this.migration = $.migration;
        this.publicAccess = $.publicAccess;
        this.serviceLog = $.serviceLog;
        this.valkeyAclChannelsDefault = $.valkeyAclChannelsDefault;
        this.valkeyActiveExpireEffort = $.valkeyActiveExpireEffort;
        this.valkeyIoThreads = $.valkeyIoThreads;
        this.valkeyLfuDecayTime = $.valkeyLfuDecayTime;
        this.valkeyLfuLogFactor = $.valkeyLfuLogFactor;
        this.valkeyMaxmemoryPolicy = $.valkeyMaxmemoryPolicy;
        this.valkeyNotifyKeyspaceEvents = $.valkeyNotifyKeyspaceEvents;
        this.valkeyNumberOfDatabases = $.valkeyNumberOfDatabases;
        this.valkeyPersistence = $.valkeyPersistence;
        this.valkeyPubsubClientOutputBufferLimit = $.valkeyPubsubClientOutputBufferLimit;
        this.valkeySsl = $.valkeySsl;
        this.valkeyTimeout = $.valkeyTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabaseValkeyPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabaseValkeyPropertiesArgs $;

        public Builder() {
            $ = new ManagedDatabaseValkeyPropertiesArgs();
        }

        public Builder(ManagedDatabaseValkeyPropertiesArgs defaults) {
            $ = new ManagedDatabaseValkeyPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automaticUtilityNetworkIpFilter Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
         * 
         * @return builder
         * 
         */
        public Builder automaticUtilityNetworkIpFilter(@Nullable Output<Boolean> automaticUtilityNetworkIpFilter) {
            $.automaticUtilityNetworkIpFilter = automaticUtilityNetworkIpFilter;
            return this;
        }

        /**
         * @param automaticUtilityNetworkIpFilter Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
         * 
         * @return builder
         * 
         */
        public Builder automaticUtilityNetworkIpFilter(Boolean automaticUtilityNetworkIpFilter) {
            return automaticUtilityNetworkIpFilter(Output.of(automaticUtilityNetworkIpFilter));
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(@Nullable Output<Integer> backupHour) {
            $.backupHour = backupHour;
            return this;
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(Integer backupHour) {
            return backupHour(Output.of(backupHour));
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(@Nullable Output<Integer> backupMinute) {
            $.backupMinute = backupMinute;
            return this;
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(Integer backupMinute) {
            return backupMinute(Output.of(backupMinute));
        }

        /**
         * @param frequentSnapshots Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkeyPersistence` is set to `off`.
         * 
         * @return builder
         * 
         */
        public Builder frequentSnapshots(@Nullable Output<Boolean> frequentSnapshots) {
            $.frequentSnapshots = frequentSnapshots;
            return this;
        }

        /**
         * @param frequentSnapshots Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkeyPersistence` is set to `off`.
         * 
         * @return builder
         * 
         */
        public Builder frequentSnapshots(Boolean frequentSnapshots) {
            return frequentSnapshots(Output.of(frequentSnapshots));
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param migration Migrate data from existing server.
         * 
         * @return builder
         * 
         */
        public Builder migration(@Nullable Output<ManagedDatabaseValkeyPropertiesMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        /**
         * @param migration Migrate data from existing server.
         * 
         * @return builder
         * 
         */
        public Builder migration(ManagedDatabaseValkeyPropertiesMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        /**
         * @param publicAccess Public Access. Allow access to the service from the public Internet.
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<Boolean> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Public Access. Allow access to the service from the public Internet.
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(Boolean publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param serviceLog Service logging. Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Service logging. Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param valkeyAclChannelsDefault Default ACL for pub/sub channels used when a Valkey user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
         * 
         * @return builder
         * 
         */
        public Builder valkeyAclChannelsDefault(@Nullable Output<String> valkeyAclChannelsDefault) {
            $.valkeyAclChannelsDefault = valkeyAclChannelsDefault;
            return this;
        }

        /**
         * @param valkeyAclChannelsDefault Default ACL for pub/sub channels used when a Valkey user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
         * 
         * @return builder
         * 
         */
        public Builder valkeyAclChannelsDefault(String valkeyAclChannelsDefault) {
            return valkeyAclChannelsDefault(Output.of(valkeyAclChannelsDefault));
        }

        /**
         * @param valkeyActiveExpireEffort Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
         * 
         * @return builder
         * 
         */
        public Builder valkeyActiveExpireEffort(@Nullable Output<Integer> valkeyActiveExpireEffort) {
            $.valkeyActiveExpireEffort = valkeyActiveExpireEffort;
            return this;
        }

        /**
         * @param valkeyActiveExpireEffort Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
         * 
         * @return builder
         * 
         */
        public Builder valkeyActiveExpireEffort(Integer valkeyActiveExpireEffort) {
            return valkeyActiveExpireEffort(Output.of(valkeyActiveExpireEffort));
        }

        /**
         * @param valkeyIoThreads Valkey IO thread count. Set Valkey IO thread count. Changing this will cause a restart of the Valkey service.
         * 
         * @return builder
         * 
         */
        public Builder valkeyIoThreads(@Nullable Output<Integer> valkeyIoThreads) {
            $.valkeyIoThreads = valkeyIoThreads;
            return this;
        }

        /**
         * @param valkeyIoThreads Valkey IO thread count. Set Valkey IO thread count. Changing this will cause a restart of the Valkey service.
         * 
         * @return builder
         * 
         */
        public Builder valkeyIoThreads(Integer valkeyIoThreads) {
            return valkeyIoThreads(Output.of(valkeyIoThreads));
        }

        /**
         * @param valkeyLfuDecayTime LFU maxmemory-policy counter decay time in minutes.
         * 
         * @return builder
         * 
         */
        public Builder valkeyLfuDecayTime(@Nullable Output<Integer> valkeyLfuDecayTime) {
            $.valkeyLfuDecayTime = valkeyLfuDecayTime;
            return this;
        }

        /**
         * @param valkeyLfuDecayTime LFU maxmemory-policy counter decay time in minutes.
         * 
         * @return builder
         * 
         */
        public Builder valkeyLfuDecayTime(Integer valkeyLfuDecayTime) {
            return valkeyLfuDecayTime(Output.of(valkeyLfuDecayTime));
        }

        /**
         * @param valkeyLfuLogFactor Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
         * 
         * @return builder
         * 
         */
        public Builder valkeyLfuLogFactor(@Nullable Output<Integer> valkeyLfuLogFactor) {
            $.valkeyLfuLogFactor = valkeyLfuLogFactor;
            return this;
        }

        /**
         * @param valkeyLfuLogFactor Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
         * 
         * @return builder
         * 
         */
        public Builder valkeyLfuLogFactor(Integer valkeyLfuLogFactor) {
            return valkeyLfuLogFactor(Output.of(valkeyLfuLogFactor));
        }

        /**
         * @param valkeyMaxmemoryPolicy Valkey maxmemory-policy.
         * 
         * @return builder
         * 
         */
        public Builder valkeyMaxmemoryPolicy(@Nullable Output<String> valkeyMaxmemoryPolicy) {
            $.valkeyMaxmemoryPolicy = valkeyMaxmemoryPolicy;
            return this;
        }

        /**
         * @param valkeyMaxmemoryPolicy Valkey maxmemory-policy.
         * 
         * @return builder
         * 
         */
        public Builder valkeyMaxmemoryPolicy(String valkeyMaxmemoryPolicy) {
            return valkeyMaxmemoryPolicy(Output.of(valkeyMaxmemoryPolicy));
        }

        /**
         * @param valkeyNotifyKeyspaceEvents Set notify-keyspace-events option.
         * 
         * @return builder
         * 
         */
        public Builder valkeyNotifyKeyspaceEvents(@Nullable Output<String> valkeyNotifyKeyspaceEvents) {
            $.valkeyNotifyKeyspaceEvents = valkeyNotifyKeyspaceEvents;
            return this;
        }

        /**
         * @param valkeyNotifyKeyspaceEvents Set notify-keyspace-events option.
         * 
         * @return builder
         * 
         */
        public Builder valkeyNotifyKeyspaceEvents(String valkeyNotifyKeyspaceEvents) {
            return valkeyNotifyKeyspaceEvents(Output.of(valkeyNotifyKeyspaceEvents));
        }

        /**
         * @param valkeyNumberOfDatabases Number of Valkey databases. Set number of Valkey databases. Changing this will cause a restart of the Valkey service.
         * 
         * @return builder
         * 
         */
        public Builder valkeyNumberOfDatabases(@Nullable Output<Integer> valkeyNumberOfDatabases) {
            $.valkeyNumberOfDatabases = valkeyNumberOfDatabases;
            return this;
        }

        /**
         * @param valkeyNumberOfDatabases Number of Valkey databases. Set number of Valkey databases. Changing this will cause a restart of the Valkey service.
         * 
         * @return builder
         * 
         */
        public Builder valkeyNumberOfDatabases(Integer valkeyNumberOfDatabases) {
            return valkeyNumberOfDatabases(Output.of(valkeyNumberOfDatabases));
        }

        /**
         * @param valkeyPersistence Valkey persistence. When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder valkeyPersistence(@Nullable Output<String> valkeyPersistence) {
            $.valkeyPersistence = valkeyPersistence;
            return this;
        }

        /**
         * @param valkeyPersistence Valkey persistence. When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder valkeyPersistence(String valkeyPersistence) {
            return valkeyPersistence(Output.of(valkeyPersistence));
        }

        /**
         * @param valkeyPubsubClientOutputBufferLimit Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
         * 
         * @return builder
         * 
         */
        public Builder valkeyPubsubClientOutputBufferLimit(@Nullable Output<Integer> valkeyPubsubClientOutputBufferLimit) {
            $.valkeyPubsubClientOutputBufferLimit = valkeyPubsubClientOutputBufferLimit;
            return this;
        }

        /**
         * @param valkeyPubsubClientOutputBufferLimit Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
         * 
         * @return builder
         * 
         */
        public Builder valkeyPubsubClientOutputBufferLimit(Integer valkeyPubsubClientOutputBufferLimit) {
            return valkeyPubsubClientOutputBufferLimit(Output.of(valkeyPubsubClientOutputBufferLimit));
        }

        /**
         * @param valkeySsl Require SSL to access Valkey.
         * 
         * @return builder
         * 
         */
        public Builder valkeySsl(@Nullable Output<Boolean> valkeySsl) {
            $.valkeySsl = valkeySsl;
            return this;
        }

        /**
         * @param valkeySsl Require SSL to access Valkey.
         * 
         * @return builder
         * 
         */
        public Builder valkeySsl(Boolean valkeySsl) {
            return valkeySsl(Output.of(valkeySsl));
        }

        /**
         * @param valkeyTimeout Valkey idle connection timeout in seconds.
         * 
         * @return builder
         * 
         */
        public Builder valkeyTimeout(@Nullable Output<Integer> valkeyTimeout) {
            $.valkeyTimeout = valkeyTimeout;
            return this;
        }

        /**
         * @param valkeyTimeout Valkey idle connection timeout in seconds.
         * 
         * @return builder
         * 
         */
        public Builder valkeyTimeout(Integer valkeyTimeout) {
            return valkeyTimeout(Output.of(valkeyTimeout));
        }

        public ManagedDatabaseValkeyPropertiesArgs build() {
            return $;
        }
    }

}
