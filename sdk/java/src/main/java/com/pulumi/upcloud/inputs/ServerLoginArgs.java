// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerLoginArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerLoginArgs Empty = new ServerLoginArgs();

    /**
     * Indicates a password should be create to allow access
     * 
     */
    @Import(name="createPassword")
    private @Nullable Output<Boolean> createPassword;

    /**
     * @return Indicates a password should be create to allow access
     * 
     */
    public Optional<Output<Boolean>> createPassword() {
        return Optional.ofNullable(this.createPassword);
    }

    /**
     * A list of ssh keys to access the server
     * 
     */
    @Import(name="keys")
    private @Nullable Output<List<String>> keys;

    /**
     * @return A list of ssh keys to access the server
     * 
     */
    public Optional<Output<List<String>>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * The delivery method for the server&#39;s root password (one of `none`, `email` or `sms`)
     * 
     */
    @Import(name="passwordDelivery")
    private @Nullable Output<String> passwordDelivery;

    /**
     * @return The delivery method for the server&#39;s root password (one of `none`, `email` or `sms`)
     * 
     */
    public Optional<Output<String>> passwordDelivery() {
        return Optional.ofNullable(this.passwordDelivery);
    }

    /**
     * Username to be create to access the server
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return Username to be create to access the server
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private ServerLoginArgs() {}

    private ServerLoginArgs(ServerLoginArgs $) {
        this.createPassword = $.createPassword;
        this.keys = $.keys;
        this.passwordDelivery = $.passwordDelivery;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerLoginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerLoginArgs $;

        public Builder() {
            $ = new ServerLoginArgs();
        }

        public Builder(ServerLoginArgs defaults) {
            $ = new ServerLoginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createPassword Indicates a password should be create to allow access
         * 
         * @return builder
         * 
         */
        public Builder createPassword(@Nullable Output<Boolean> createPassword) {
            $.createPassword = createPassword;
            return this;
        }

        /**
         * @param createPassword Indicates a password should be create to allow access
         * 
         * @return builder
         * 
         */
        public Builder createPassword(Boolean createPassword) {
            return createPassword(Output.of(createPassword));
        }

        /**
         * @param keys A list of ssh keys to access the server
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable Output<List<String>> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys A list of ssh keys to access the server
         * 
         * @return builder
         * 
         */
        public Builder keys(List<String> keys) {
            return keys(Output.of(keys));
        }

        /**
         * @param keys A list of ssh keys to access the server
         * 
         * @return builder
         * 
         */
        public Builder keys(String... keys) {
            return keys(List.of(keys));
        }

        /**
         * @param passwordDelivery The delivery method for the server&#39;s root password (one of `none`, `email` or `sms`)
         * 
         * @return builder
         * 
         */
        public Builder passwordDelivery(@Nullable Output<String> passwordDelivery) {
            $.passwordDelivery = passwordDelivery;
            return this;
        }

        /**
         * @param passwordDelivery The delivery method for the server&#39;s root password (one of `none`, `email` or `sms`)
         * 
         * @return builder
         * 
         */
        public Builder passwordDelivery(String passwordDelivery) {
            return passwordDelivery(Output.of(passwordDelivery));
        }

        /**
         * @param user Username to be create to access the server
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Username to be create to access the server
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public ServerLoginArgs build() {
            return $;
        }
    }

}
