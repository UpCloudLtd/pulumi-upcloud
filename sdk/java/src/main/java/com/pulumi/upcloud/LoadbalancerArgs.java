// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.inputs.LoadbalancerIpAddressArgs;
import com.pulumi.upcloud.inputs.LoadbalancerNetworkArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerArgs Empty = new LoadbalancerArgs();

    /**
     * The service configured status indicates the service&#39;s current intended status. Managed by the customer.
     * 
     */
    @Import(name="configuredStatus")
    private @Nullable Output<String> configuredStatus;

    /**
     * @return The service configured status indicates the service&#39;s current intended status. Managed by the customer.
     * 
     */
    public Optional<Output<String>> configuredStatus() {
        return Optional.ofNullable(this.configuredStatus);
    }

    /**
     * Floating IP addresses connected to the load balancer.
     * 
     */
    @Import(name="ipAddresses")
    private @Nullable Output<List<LoadbalancerIpAddressArgs>> ipAddresses;

    /**
     * @return Floating IP addresses connected to the load balancer.
     * 
     */
    public Optional<Output<List<LoadbalancerIpAddressArgs>>> ipAddresses() {
        return Optional.ofNullable(this.ipAddresses);
    }

    /**
     * User defined key-value pairs to classify the load balancer.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the load balancer.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day. Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
     * 
     */
    @Import(name="maintenanceDow")
    private @Nullable Output<String> maintenanceDow;

    /**
     * @return The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day. Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
     * 
     */
    public Optional<Output<String>> maintenanceDow() {
        return Optional.ofNullable(this.maintenanceDow);
    }

    /**
     * The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC HH:MM:SSZ, for example `20:01:01Z`.
     * 
     */
    @Import(name="maintenanceTime")
    private @Nullable Output<String> maintenanceTime;

    /**
     * @return The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC HH:MM:SSZ, for example `20:01:01Z`.
     * 
     */
    public Optional<Output<String>> maintenanceTime() {
        return Optional.ofNullable(this.maintenanceTime);
    }

    /**
     * The name of the service. Must be unique within customer account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the service. Must be unique within customer account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Private network UUID where traffic will be routed. Must reside in load balancer zone.
     * 
     * @deprecated
     * Use &#39;networks&#39; to define networks attached to load balancer
     * 
     */
    @Deprecated /* Use 'networks' to define networks attached to load balancer */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return Private network UUID where traffic will be routed. Must reside in load balancer zone.
     * 
     * @deprecated
     * Use &#39;networks&#39; to define networks attached to load balancer
     * 
     */
    @Deprecated /* Use 'networks' to define networks attached to load balancer */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<LoadbalancerNetworkArgs>> networks;

    /**
     * @return Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
     * 
     */
    public Optional<Output<List<LoadbalancerNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
     * 
     */
    @Import(name="plan", required=true)
    private Output<String> plan;

    /**
     * @return Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
     * 
     */
    public Output<String> plan() {
        return this.plan;
    }

    /**
     * Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private LoadbalancerArgs() {}

    private LoadbalancerArgs(LoadbalancerArgs $) {
        this.configuredStatus = $.configuredStatus;
        this.ipAddresses = $.ipAddresses;
        this.labels = $.labels;
        this.maintenanceDow = $.maintenanceDow;
        this.maintenanceTime = $.maintenanceTime;
        this.name = $.name;
        this.network = $.network;
        this.networks = $.networks;
        this.plan = $.plan;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerArgs $;

        public Builder() {
            $ = new LoadbalancerArgs();
        }

        public Builder(LoadbalancerArgs defaults) {
            $ = new LoadbalancerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuredStatus The service configured status indicates the service&#39;s current intended status. Managed by the customer.
         * 
         * @return builder
         * 
         */
        public Builder configuredStatus(@Nullable Output<String> configuredStatus) {
            $.configuredStatus = configuredStatus;
            return this;
        }

        /**
         * @param configuredStatus The service configured status indicates the service&#39;s current intended status. Managed by the customer.
         * 
         * @return builder
         * 
         */
        public Builder configuredStatus(String configuredStatus) {
            return configuredStatus(Output.of(configuredStatus));
        }

        /**
         * @param ipAddresses Floating IP addresses connected to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(@Nullable Output<List<LoadbalancerIpAddressArgs>> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        /**
         * @param ipAddresses Floating IP addresses connected to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(List<LoadbalancerIpAddressArgs> ipAddresses) {
            return ipAddresses(Output.of(ipAddresses));
        }

        /**
         * @param ipAddresses Floating IP addresses connected to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(LoadbalancerIpAddressArgs... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }

        /**
         * @param labels User defined key-value pairs to classify the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User defined key-value pairs to classify the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param maintenanceDow The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day. Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceDow(@Nullable Output<String> maintenanceDow) {
            $.maintenanceDow = maintenanceDow;
            return this;
        }

        /**
         * @param maintenanceDow The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day. Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceDow(String maintenanceDow) {
            return maintenanceDow(Output.of(maintenanceDow));
        }

        /**
         * @param maintenanceTime The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC HH:MM:SSZ, for example `20:01:01Z`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceTime(@Nullable Output<String> maintenanceTime) {
            $.maintenanceTime = maintenanceTime;
            return this;
        }

        /**
         * @param maintenanceTime The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC HH:MM:SSZ, for example `20:01:01Z`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceTime(String maintenanceTime) {
            return maintenanceTime(Output.of(maintenanceTime));
        }

        /**
         * @param name The name of the service. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the service. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network Private network UUID where traffic will be routed. Must reside in load balancer zone.
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;networks&#39; to define networks attached to load balancer
         * 
         */
        @Deprecated /* Use 'networks' to define networks attached to load balancer */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Private network UUID where traffic will be routed. Must reside in load balancer zone.
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;networks&#39; to define networks attached to load balancer
         * 
         */
        @Deprecated /* Use 'networks' to define networks attached to load balancer */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param networks Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<LoadbalancerNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<LoadbalancerNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
         * 
         * @return builder
         * 
         */
        public Builder networks(LoadbalancerNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param plan Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
         * 
         * @return builder
         * 
         */
        public Builder plan(Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param zone Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public LoadbalancerArgs build() {
            if ($.plan == null) {
                throw new MissingRequiredPropertyException("LoadbalancerArgs", "plan");
            }
            if ($.zone == null) {
                throw new MissingRequiredPropertyException("LoadbalancerArgs", "zone");
            }
            return $;
        }
    }

}
