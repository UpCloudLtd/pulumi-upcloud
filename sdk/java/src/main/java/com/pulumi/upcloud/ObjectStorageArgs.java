// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.inputs.ObjectStorageBucketArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObjectStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObjectStorageArgs Empty = new ObjectStorageArgs();

    /**
     * The access key used to identify user.
     * 				Can be set to an empty string, which will tell the provider to get the access key from environment variable.
     * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}&#34;.
     * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
     * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
     * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES&#34;.
     * 
     */
    @Import(name="accessKey", required=true)
    private Output<String> accessKey;

    /**
     * @return The access key used to identify user.
     * 				Can be set to an empty string, which will tell the provider to get the access key from environment variable.
     * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}&#34;.
     * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
     * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
     * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES&#34;.
     * 
     */
    public Output<String> accessKey() {
        return this.accessKey;
    }

    @Import(name="buckets")
    private @Nullable Output<List<ObjectStorageBucketArgs>> buckets;

    public Optional<Output<List<ObjectStorageBucketArgs>>> buckets() {
        return Optional.ofNullable(this.buckets);
    }

    /**
     * The description of the object storage instance to be created
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the object storage instance to be created
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the object storage instance to be created
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the object storage instance to be created
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The secret key used to authenticate user.
     * 				Can be set to an empty string, which will tell the provider to get the secret key from environment variable.
     * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}&#34;.
     * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
     * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
     * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES&#34;.
     * 
     */
    @Import(name="secretKey", required=true)
    private Output<String> secretKey;

    /**
     * @return The secret key used to authenticate user.
     * 				Can be set to an empty string, which will tell the provider to get the secret key from environment variable.
     * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}&#34;.
     * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
     * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
     * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES&#34;.
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }

    /**
     * The size of the object storage instance in gigabytes
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return The size of the object storage instance in gigabytes
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private ObjectStorageArgs() {}

    private ObjectStorageArgs(ObjectStorageArgs $) {
        this.accessKey = $.accessKey;
        this.buckets = $.buckets;
        this.description = $.description;
        this.name = $.name;
        this.secretKey = $.secretKey;
        this.size = $.size;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectStorageArgs $;

        public Builder() {
            $ = new ObjectStorageArgs();
        }

        public Builder(ObjectStorageArgs defaults) {
            $ = new ObjectStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The access key used to identify user.
         * 				Can be set to an empty string, which will tell the provider to get the access key from environment variable.
         * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}&#34;.
         * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
         * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
         * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES&#34;.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The access key used to identify user.
         * 				Can be set to an empty string, which will tell the provider to get the access key from environment variable.
         * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}&#34;.
         * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
         * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
         * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES&#34;.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        public Builder buckets(@Nullable Output<List<ObjectStorageBucketArgs>> buckets) {
            $.buckets = buckets;
            return this;
        }

        public Builder buckets(List<ObjectStorageBucketArgs> buckets) {
            return buckets(Output.of(buckets));
        }

        public Builder buckets(ObjectStorageBucketArgs... buckets) {
            return buckets(List.of(buckets));
        }

        /**
         * @param description The description of the object storage instance to be created
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the object storage instance to be created
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the object storage instance to be created
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the object storage instance to be created
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secretKey The secret key used to authenticate user.
         * 				Can be set to an empty string, which will tell the provider to get the secret key from environment variable.
         * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}&#34;.
         * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
         * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
         * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES&#34;.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The secret key used to authenticate user.
         * 				Can be set to an empty string, which will tell the provider to get the secret key from environment variable.
         * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}&#34;.
         * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
         * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
         * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES&#34;.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param size The size of the object storage instance in gigabytes
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the object storage instance in gigabytes
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param zone The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public ObjectStorageArgs build() {
            if ($.accessKey == null) {
                throw new MissingRequiredPropertyException("ObjectStorageArgs", "accessKey");
            }
            if ($.secretKey == null) {
                throw new MissingRequiredPropertyException("ObjectStorageArgs", "secretKey");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("ObjectStorageArgs", "size");
            }
            if ($.zone == null) {
                throw new MissingRequiredPropertyException("ObjectStorageArgs", "zone");
            }
            return $;
        }
    }

}
