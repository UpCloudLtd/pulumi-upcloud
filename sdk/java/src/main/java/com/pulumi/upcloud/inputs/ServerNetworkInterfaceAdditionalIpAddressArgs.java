// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerNetworkInterfaceAdditionalIpAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerNetworkInterfaceAdditionalIpAddressArgs Empty = new ServerNetworkInterfaceAdditionalIpAddressArgs();

    /**
     * An additional IP address for this interface.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return An additional IP address for this interface.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The type of the additional IP address of this interface (one of `IPv4` or `IPv6`).
     * 
     */
    @Import(name="ipAddressFamily")
    private @Nullable Output<String> ipAddressFamily;

    /**
     * @return The type of the additional IP address of this interface (one of `IPv4` or `IPv6`).
     * 
     */
    public Optional<Output<String>> ipAddressFamily() {
        return Optional.ofNullable(this.ipAddressFamily);
    }

    /**
     * `true` indicates that the additional IP address is a floating IP address.
     * 
     */
    @Import(name="ipAddressFloating")
    private @Nullable Output<Boolean> ipAddressFloating;

    /**
     * @return `true` indicates that the additional IP address is a floating IP address.
     * 
     */
    public Optional<Output<Boolean>> ipAddressFloating() {
        return Optional.ofNullable(this.ipAddressFloating);
    }

    private ServerNetworkInterfaceAdditionalIpAddressArgs() {}

    private ServerNetworkInterfaceAdditionalIpAddressArgs(ServerNetworkInterfaceAdditionalIpAddressArgs $) {
        this.ipAddress = $.ipAddress;
        this.ipAddressFamily = $.ipAddressFamily;
        this.ipAddressFloating = $.ipAddressFloating;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerNetworkInterfaceAdditionalIpAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerNetworkInterfaceAdditionalIpAddressArgs $;

        public Builder() {
            $ = new ServerNetworkInterfaceAdditionalIpAddressArgs();
        }

        public Builder(ServerNetworkInterfaceAdditionalIpAddressArgs defaults) {
            $ = new ServerNetworkInterfaceAdditionalIpAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipAddress An additional IP address for this interface.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress An additional IP address for this interface.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipAddressFamily The type of the additional IP address of this interface (one of `IPv4` or `IPv6`).
         * 
         * @return builder
         * 
         */
        public Builder ipAddressFamily(@Nullable Output<String> ipAddressFamily) {
            $.ipAddressFamily = ipAddressFamily;
            return this;
        }

        /**
         * @param ipAddressFamily The type of the additional IP address of this interface (one of `IPv4` or `IPv6`).
         * 
         * @return builder
         * 
         */
        public Builder ipAddressFamily(String ipAddressFamily) {
            return ipAddressFamily(Output.of(ipAddressFamily));
        }

        /**
         * @param ipAddressFloating `true` indicates that the additional IP address is a floating IP address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressFloating(@Nullable Output<Boolean> ipAddressFloating) {
            $.ipAddressFloating = ipAddressFloating;
            return this;
        }

        /**
         * @param ipAddressFloating `true` indicates that the additional IP address is a floating IP address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressFloating(Boolean ipAddressFloating) {
            return ipAddressFloating(Output.of(ipAddressFloating));
        }

        public ServerNetworkInterfaceAdditionalIpAddressArgs build() {
            return $;
        }
    }

}
