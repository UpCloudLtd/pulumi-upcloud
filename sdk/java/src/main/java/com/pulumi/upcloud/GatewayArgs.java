// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.inputs.GatewayAddressArgs;
import com.pulumi.upcloud.inputs.GatewayRouterArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayArgs Empty = new GatewayArgs();

    /**
     * IP addresses assigned to the gateway.
     * 
     */
    @Import(name="address")
    private @Nullable Output<GatewayAddressArgs> address;

    /**
     * @return IP addresses assigned to the gateway.
     * 
     */
    public Optional<Output<GatewayAddressArgs>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The service configured status indicates the service&#39;s current intended status. Managed by the customer.
     * 
     */
    @Import(name="configuredStatus")
    private @Nullable Output<String> configuredStatus;

    /**
     * @return The service configured status indicates the service&#39;s current intended status. Managed by the customer.
     * 
     */
    public Optional<Output<String>> configuredStatus() {
        return Optional.ofNullable(this.configuredStatus);
    }

    /**
     * Features enabled for the gateway. Note that VPN feature is currently in beta, for more details see https://upcloud.com/resources/docs/networking#nat-and-vpn-gateways.
     * 
     */
    @Import(name="features", required=true)
    private Output<List<String>> features;

    /**
     * @return Features enabled for the gateway. Note that VPN feature is currently in beta, for more details see https://upcloud.com/resources/docs/networking#nat-and-vpn-gateways.
     * 
     */
    public Output<List<String>> features() {
        return this.features;
    }

    /**
     * User defined key-value pairs to classify the network gateway.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the network gateway.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Gateway name. Needs to be unique within the account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Gateway name. Needs to be unique within the account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Gateway pricing plan.
     * 
     */
    @Import(name="plan")
    private @Nullable Output<String> plan;

    /**
     * @return Gateway pricing plan.
     * 
     */
    public Optional<Output<String>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * Attached Router from where traffic is routed towards the network gateway service.
     * 
     */
    @Import(name="router", required=true)
    private Output<GatewayRouterArgs> router;

    /**
     * @return Attached Router from where traffic is routed towards the network gateway service.
     * 
     */
    public Output<GatewayRouterArgs> router() {
        return this.router;
    }

    /**
     * Zone in which the gateway will be hosted, e.g. `de-fra1`.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return Zone in which the gateway will be hosted, e.g. `de-fra1`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private GatewayArgs() {}

    private GatewayArgs(GatewayArgs $) {
        this.address = $.address;
        this.configuredStatus = $.configuredStatus;
        this.features = $.features;
        this.labels = $.labels;
        this.name = $.name;
        this.plan = $.plan;
        this.router = $.router;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayArgs $;

        public Builder() {
            $ = new GatewayArgs();
        }

        public Builder(GatewayArgs defaults) {
            $ = new GatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address IP addresses assigned to the gateway.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<GatewayAddressArgs> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address IP addresses assigned to the gateway.
         * 
         * @return builder
         * 
         */
        public Builder address(GatewayAddressArgs address) {
            return address(Output.of(address));
        }

        /**
         * @param configuredStatus The service configured status indicates the service&#39;s current intended status. Managed by the customer.
         * 
         * @return builder
         * 
         */
        public Builder configuredStatus(@Nullable Output<String> configuredStatus) {
            $.configuredStatus = configuredStatus;
            return this;
        }

        /**
         * @param configuredStatus The service configured status indicates the service&#39;s current intended status. Managed by the customer.
         * 
         * @return builder
         * 
         */
        public Builder configuredStatus(String configuredStatus) {
            return configuredStatus(Output.of(configuredStatus));
        }

        /**
         * @param features Features enabled for the gateway. Note that VPN feature is currently in beta, for more details see https://upcloud.com/resources/docs/networking#nat-and-vpn-gateways.
         * 
         * @return builder
         * 
         */
        public Builder features(Output<List<String>> features) {
            $.features = features;
            return this;
        }

        /**
         * @param features Features enabled for the gateway. Note that VPN feature is currently in beta, for more details see https://upcloud.com/resources/docs/networking#nat-and-vpn-gateways.
         * 
         * @return builder
         * 
         */
        public Builder features(List<String> features) {
            return features(Output.of(features));
        }

        /**
         * @param features Features enabled for the gateway. Note that VPN feature is currently in beta, for more details see https://upcloud.com/resources/docs/networking#nat-and-vpn-gateways.
         * 
         * @return builder
         * 
         */
        public Builder features(String... features) {
            return features(List.of(features));
        }

        /**
         * @param labels User defined key-value pairs to classify the network gateway.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User defined key-value pairs to classify the network gateway.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Gateway name. Needs to be unique within the account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Gateway name. Needs to be unique within the account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param plan Gateway pricing plan.
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan Gateway pricing plan.
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param router Attached Router from where traffic is routed towards the network gateway service.
         * 
         * @return builder
         * 
         */
        public Builder router(Output<GatewayRouterArgs> router) {
            $.router = router;
            return this;
        }

        /**
         * @param router Attached Router from where traffic is routed towards the network gateway service.
         * 
         * @return builder
         * 
         */
        public Builder router(GatewayRouterArgs router) {
            return router(Output.of(router));
        }

        /**
         * @param zone Zone in which the gateway will be hosted, e.g. `de-fra1`.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone in which the gateway will be hosted, e.g. `de-fra1`.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public GatewayArgs build() {
            if ($.features == null) {
                throw new MissingRequiredPropertyException("GatewayArgs", "features");
            }
            if ($.router == null) {
                throw new MissingRequiredPropertyException("GatewayArgs", "router");
            }
            if ($.zone == null) {
                throw new MissingRequiredPropertyException("GatewayArgs", "zone");
            }
            return $;
        }
    }

}
