// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.KubernetesNodeGroupArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.KubernetesNodeGroupState;
import com.pulumi.upcloud.outputs.KubernetesNodeGroupCustomPlan;
import com.pulumi.upcloud.outputs.KubernetesNodeGroupKubeletArg;
import com.pulumi.upcloud.outputs.KubernetesNodeGroupTaint;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource represents a [Managed Kubernetes](https://upcloud.com/products/managed-kubernetes) cluster.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.upcloud.Network;
 * import com.pulumi.upcloud.NetworkArgs;
 * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
 * import com.pulumi.upcloud.KubernetesCluster;
 * import com.pulumi.upcloud.KubernetesClusterArgs;
 * import com.pulumi.upcloud.KubernetesNodeGroup;
 * import com.pulumi.upcloud.KubernetesNodeGroupArgs;
 * import com.pulumi.upcloud.inputs.KubernetesNodeGroupTaintArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a network for the Kubernetes cluster
 *         var example = new Network("example", NetworkArgs.builder()
 *             .name("example-network")
 *             .zone("de-fra1")
 *             .ipNetwork(NetworkIpNetworkArgs.builder()
 *                 .address("172.16.1.0/24")
 *                 .dhcp(true)
 *                 .family("IPv4")
 *                 .build())
 *             .build());
 * 
 *         // Create a Kubernetes cluster
 *         var exampleKubernetesCluster = new KubernetesCluster("exampleKubernetesCluster", KubernetesClusterArgs.builder()
 *             .controlPlaneIpFilters("0.0.0.0/0")
 *             .name("exampleapp")
 *             .network(example.id())
 *             .zone("de-fra1")
 *             .build());
 * 
 *         // Create a Kubernetes cluster node group
 *         var group = new KubernetesNodeGroup("group", KubernetesNodeGroupArgs.builder()
 *             .cluster(upcloudKubernetesCluster.example().id())
 *             .nodeCount(2)
 *             .name("medium")
 *             .plan("2xCPU-4GB")
 *             .labels(Map.of("managedBy", "terraform"))
 *             .taints(KubernetesNodeGroupTaintArgs.builder()
 *                 .effect("NoExecute")
 *                 .key("taintKey")
 *                 .value("taintValue")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="upcloud:index/kubernetesNodeGroup:KubernetesNodeGroup")
public class KubernetesNodeGroup extends com.pulumi.resources.CustomResource {
    /**
     * If set to true, nodes in this group will be placed on separate compute hosts. Please note that anti-affinity policy is
     * considered &#39;best effort&#39; and enabling it does not fully guarantee that the nodes will end up on different hardware.
     * 
     */
    @Export(name="antiAffinity", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> antiAffinity;

    /**
     * @return If set to true, nodes in this group will be placed on separate compute hosts. Please note that anti-affinity policy is
     * considered &#39;best effort&#39; and enabling it does not fully guarantee that the nodes will end up on different hardware.
     * 
     */
    public Output<Boolean> antiAffinity() {
        return this.antiAffinity;
    }
    /**
     * UUID of the cluster.
     * 
     */
    @Export(name="cluster", refs={String.class}, tree="[0]")
    private Output<String> cluster;

    /**
     * @return UUID of the cluster.
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }
    /**
     * Resource properties for custom plan
     * 
     */
    @Export(name="customPlan", refs={KubernetesNodeGroupCustomPlan.class}, tree="[0]")
    private Output</* @Nullable */ KubernetesNodeGroupCustomPlan> customPlan;

    /**
     * @return Resource properties for custom plan
     * 
     */
    public Output<Optional<KubernetesNodeGroupCustomPlan>> customPlan() {
        return Codegen.optional(this.customPlan);
    }
    /**
     * Additional arguments for kubelet for the nodes in this group. Configure the arguments without leading `--`. The API will
     * prefix the arguments with `--` when preparing kubelet call. Note that these arguments will be passed directly to kubelet
     * CLI on each worker node without any validation. Passing invalid arguments can break your whole cluster. Be extra careful
     * when adding kubelet args.
     * 
     */
    @Export(name="kubeletArgs", refs={List.class,KubernetesNodeGroupKubeletArg.class}, tree="[0,1]")
    private Output</* @Nullable */ List<KubernetesNodeGroupKubeletArg>> kubeletArgs;

    /**
     * @return Additional arguments for kubelet for the nodes in this group. Configure the arguments without leading `--`. The API will
     * prefix the arguments with `--` when preparing kubelet call. Note that these arguments will be passed directly to kubelet
     * CLI on each worker node without any validation. Passing invalid arguments can break your whole cluster. Be extra careful
     * when adding kubelet args.
     * 
     */
    public Output<Optional<List<KubernetesNodeGroupKubeletArg>>> kubeletArgs() {
        return Codegen.optional(this.kubeletArgs);
    }
    /**
     * User defined key-value pairs to classify the node_group.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the node_group.
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }
    /**
     * The name of the node group. Needs to be unique within a cluster.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the node group. Needs to be unique within a cluster.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Amount of nodes to provision in the node group.
     * 
     */
    @Export(name="nodeCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> nodeCount;

    /**
     * @return Amount of nodes to provision in the node group.
     * 
     */
    public Output<Integer> nodeCount() {
        return this.nodeCount;
    }
    /**
     * The server plan used for the node group. You can list available plans with `upctl server plans`
     * 
     */
    @Export(name="plan", refs={String.class}, tree="[0]")
    private Output<String> plan;

    /**
     * @return The server plan used for the node group. You can list available plans with `upctl server plans`
     * 
     */
    public Output<String> plan() {
        return this.plan;
    }
    /**
     * You can optionally select SSH keys to be added as authorized keys to the nodes in this node group. This allows you to
     * connect to the nodes via SSH once they are running.
     * 
     */
    @Export(name="sshKeys", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> sshKeys;

    /**
     * @return You can optionally select SSH keys to be added as authorized keys to the nodes in this node group. This allows you to
     * connect to the nodes via SSH once they are running.
     * 
     */
    public Output<List<String>> sshKeys() {
        return this.sshKeys;
    }
    /**
     * The storage encryption strategy to use for the nodes in this group. If not set, the cluster&#39;s storage encryption
     * strategy will be used, if applicable.
     * 
     */
    @Export(name="storageEncryption", refs={String.class}, tree="[0]")
    private Output<String> storageEncryption;

    /**
     * @return The storage encryption strategy to use for the nodes in this group. If not set, the cluster&#39;s storage encryption
     * strategy will be used, if applicable.
     * 
     */
    public Output<String> storageEncryption() {
        return this.storageEncryption;
    }
    /**
     * Taints for the nodes in this group.
     * 
     */
    @Export(name="taints", refs={List.class,KubernetesNodeGroupTaint.class}, tree="[0,1]")
    private Output</* @Nullable */ List<KubernetesNodeGroupTaint>> taints;

    /**
     * @return Taints for the nodes in this group.
     * 
     */
    public Output<Optional<List<KubernetesNodeGroupTaint>>> taints() {
        return Codegen.optional(this.taints);
    }
    /**
     * If set to false, nodes in this group will not have access to utility network.
     * 
     */
    @Export(name="utilityNetworkAccess", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> utilityNetworkAccess;

    /**
     * @return If set to false, nodes in this group will not have access to utility network.
     * 
     */
    public Output<Boolean> utilityNetworkAccess() {
        return this.utilityNetworkAccess;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KubernetesNodeGroup(java.lang.String name) {
        this(name, KubernetesNodeGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KubernetesNodeGroup(java.lang.String name, KubernetesNodeGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KubernetesNodeGroup(java.lang.String name, KubernetesNodeGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/kubernetesNodeGroup:KubernetesNodeGroup", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private KubernetesNodeGroup(java.lang.String name, Output<java.lang.String> id, @Nullable KubernetesNodeGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/kubernetesNodeGroup:KubernetesNodeGroup", name, state, makeResourceOptions(options, id), false);
    }

    private static KubernetesNodeGroupArgs makeArgs(KubernetesNodeGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? KubernetesNodeGroupArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KubernetesNodeGroup get(java.lang.String name, Output<java.lang.String> id, @Nullable KubernetesNodeGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KubernetesNodeGroup(name, id, state, options);
    }
}
