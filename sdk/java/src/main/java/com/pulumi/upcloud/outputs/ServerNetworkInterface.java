// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.outputs.ServerNetworkInterfaceAdditionalIpAddress;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerNetworkInterface {
    /**
     * @return 0-31 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
     * 
     */
    private @Nullable List<ServerNetworkInterfaceAdditionalIpAddress> additionalIpAddresses;
    /**
     * @return `true` if this interface should be used for network booting.
     * 
     */
    private @Nullable Boolean bootable;
    /**
     * @return The interface index.
     * 
     */
    private @Nullable Integer index;
    /**
     * @return The primary IP address of this interface.
     * 
     */
    private @Nullable String ipAddress;
    /**
     * @return The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
     * 
     */
    private @Nullable String ipAddressFamily;
    /**
     * @return `true` indicates that the primary IP address is a floating IP address.
     * 
     */
    private @Nullable Boolean ipAddressFloating;
    /**
     * @return The MAC address of the interface.
     * 
     */
    private @Nullable String macAddress;
    /**
     * @return The UUID of the network to attach this interface to. Required for private network interfaces.
     * 
     */
    private @Nullable String network;
    /**
     * @return `true` if source IP should be filtered.
     * 
     */
    private @Nullable Boolean sourceIpFiltering;
    /**
     * @return Network interface type. For private network interfaces, a network must be specified with an existing network id.
     * 
     */
    private String type;

    private ServerNetworkInterface() {}
    /**
     * @return 0-31 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
     * 
     */
    public List<ServerNetworkInterfaceAdditionalIpAddress> additionalIpAddresses() {
        return this.additionalIpAddresses == null ? List.of() : this.additionalIpAddresses;
    }
    /**
     * @return `true` if this interface should be used for network booting.
     * 
     */
    public Optional<Boolean> bootable() {
        return Optional.ofNullable(this.bootable);
    }
    /**
     * @return The interface index.
     * 
     */
    public Optional<Integer> index() {
        return Optional.ofNullable(this.index);
    }
    /**
     * @return The primary IP address of this interface.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
     * 
     */
    public Optional<String> ipAddressFamily() {
        return Optional.ofNullable(this.ipAddressFamily);
    }
    /**
     * @return `true` indicates that the primary IP address is a floating IP address.
     * 
     */
    public Optional<Boolean> ipAddressFloating() {
        return Optional.ofNullable(this.ipAddressFloating);
    }
    /**
     * @return The MAC address of the interface.
     * 
     */
    public Optional<String> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }
    /**
     * @return The UUID of the network to attach this interface to. Required for private network interfaces.
     * 
     */
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return `true` if source IP should be filtered.
     * 
     */
    public Optional<Boolean> sourceIpFiltering() {
        return Optional.ofNullable(this.sourceIpFiltering);
    }
    /**
     * @return Network interface type. For private network interfaces, a network must be specified with an existing network id.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerNetworkInterface defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ServerNetworkInterfaceAdditionalIpAddress> additionalIpAddresses;
        private @Nullable Boolean bootable;
        private @Nullable Integer index;
        private @Nullable String ipAddress;
        private @Nullable String ipAddressFamily;
        private @Nullable Boolean ipAddressFloating;
        private @Nullable String macAddress;
        private @Nullable String network;
        private @Nullable Boolean sourceIpFiltering;
        private String type;
        public Builder() {}
        public Builder(ServerNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalIpAddresses = defaults.additionalIpAddresses;
    	      this.bootable = defaults.bootable;
    	      this.index = defaults.index;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipAddressFamily = defaults.ipAddressFamily;
    	      this.ipAddressFloating = defaults.ipAddressFloating;
    	      this.macAddress = defaults.macAddress;
    	      this.network = defaults.network;
    	      this.sourceIpFiltering = defaults.sourceIpFiltering;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder additionalIpAddresses(@Nullable List<ServerNetworkInterfaceAdditionalIpAddress> additionalIpAddresses) {

            this.additionalIpAddresses = additionalIpAddresses;
            return this;
        }
        public Builder additionalIpAddresses(ServerNetworkInterfaceAdditionalIpAddress... additionalIpAddresses) {
            return additionalIpAddresses(List.of(additionalIpAddresses));
        }
        @CustomType.Setter
        public Builder bootable(@Nullable Boolean bootable) {

            this.bootable = bootable;
            return this;
        }
        @CustomType.Setter
        public Builder index(@Nullable Integer index) {

            this.index = index;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {

            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddressFamily(@Nullable String ipAddressFamily) {

            this.ipAddressFamily = ipAddressFamily;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddressFloating(@Nullable Boolean ipAddressFloating) {

            this.ipAddressFloating = ipAddressFloating;
            return this;
        }
        @CustomType.Setter
        public Builder macAddress(@Nullable String macAddress) {

            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable String network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpFiltering(@Nullable Boolean sourceIpFiltering) {

            this.sourceIpFiltering = sourceIpFiltering;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("ServerNetworkInterface", "type");
            }
            this.type = type;
            return this;
        }
        public ServerNetworkInterface build() {
            final var _resultValue = new ServerNetworkInterface();
            _resultValue.additionalIpAddresses = additionalIpAddresses;
            _resultValue.bootable = bootable;
            _resultValue.index = index;
            _resultValue.ipAddress = ipAddress;
            _resultValue.ipAddressFamily = ipAddressFamily;
            _resultValue.ipAddressFloating = ipAddressFloating;
            _resultValue.macAddress = macAddress;
            _resultValue.network = network;
            _resultValue.sourceIpFiltering = sourceIpFiltering;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
