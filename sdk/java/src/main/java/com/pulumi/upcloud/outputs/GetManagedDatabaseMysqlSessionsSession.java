// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagedDatabaseMysqlSessionsSession {
    /**
     * @return Name of the application that is connected to this service.
     * 
     */
    private String applicationName;
    /**
     * @return IP address of the client connected to this service.
     * 
     */
    private String clientAddr;
    /**
     * @return Name of the database this service is connected to.
     * 
     */
    private String datname;
    /**
     * @return Process ID of this service.
     * 
     */
    private String id;
    /**
     * @return Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows an empty string.
     * 
     */
    private String query;
    /**
     * @return The active query current duration.
     * 
     */
    private String queryDuration;
    /**
     * @return Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
     * 
     */
    private String state;
    /**
     * @return Name of the user logged into this service.
     * 
     */
    private String usename;

    private GetManagedDatabaseMysqlSessionsSession() {}
    /**
     * @return Name of the application that is connected to this service.
     * 
     */
    public String applicationName() {
        return this.applicationName;
    }
    /**
     * @return IP address of the client connected to this service.
     * 
     */
    public String clientAddr() {
        return this.clientAddr;
    }
    /**
     * @return Name of the database this service is connected to.
     * 
     */
    public String datname() {
        return this.datname;
    }
    /**
     * @return Process ID of this service.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows an empty string.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return The active query current duration.
     * 
     */
    public String queryDuration() {
        return this.queryDuration;
    }
    /**
     * @return Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Name of the user logged into this service.
     * 
     */
    public String usename() {
        return this.usename;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedDatabaseMysqlSessionsSession defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationName;
        private String clientAddr;
        private String datname;
        private String id;
        private String query;
        private String queryDuration;
        private String state;
        private String usename;
        public Builder() {}
        public Builder(GetManagedDatabaseMysqlSessionsSession defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationName = defaults.applicationName;
    	      this.clientAddr = defaults.clientAddr;
    	      this.datname = defaults.datname;
    	      this.id = defaults.id;
    	      this.query = defaults.query;
    	      this.queryDuration = defaults.queryDuration;
    	      this.state = defaults.state;
    	      this.usename = defaults.usename;
        }

        @CustomType.Setter
        public Builder applicationName(String applicationName) {
            if (applicationName == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSession", "applicationName");
            }
            this.applicationName = applicationName;
            return this;
        }
        @CustomType.Setter
        public Builder clientAddr(String clientAddr) {
            if (clientAddr == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSession", "clientAddr");
            }
            this.clientAddr = clientAddr;
            return this;
        }
        @CustomType.Setter
        public Builder datname(String datname) {
            if (datname == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSession", "datname");
            }
            this.datname = datname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSession", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSession", "query");
            }
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder queryDuration(String queryDuration) {
            if (queryDuration == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSession", "queryDuration");
            }
            this.queryDuration = queryDuration;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSession", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder usename(String usename) {
            if (usename == null) {
              throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSession", "usename");
            }
            this.usename = usename;
            return this;
        }
        public GetManagedDatabaseMysqlSessionsSession build() {
            final var _resultValue = new GetManagedDatabaseMysqlSessionsSession();
            _resultValue.applicationName = applicationName;
            _resultValue.clientAddr = clientAddr;
            _resultValue.datname = datname;
            _resultValue.id = id;
            _resultValue.query = query;
            _resultValue.queryDuration = queryDuration;
            _resultValue.state = state;
            _resultValue.usename = usename;
            return _resultValue;
        }
    }
}
