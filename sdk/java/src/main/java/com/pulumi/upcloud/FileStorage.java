// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.FileStorageArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.FileStorageState;
import com.pulumi.upcloud.outputs.FileStorageNetwork;
import com.pulumi.upcloud.outputs.FileStorageShare;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for managing UpCloud file storages (EXPERIMENTAL)
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.upcloud.Network;
 * import com.pulumi.upcloud.NetworkArgs;
 * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
 * import com.pulumi.upcloud.FileStorage;
 * import com.pulumi.upcloud.FileStorageArgs;
 * import com.pulumi.upcloud.inputs.FileStorageShareArgs;
 * import com.pulumi.upcloud.inputs.FileStorageNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create network for the File Storage
 *         var this_ = new Network("this", NetworkArgs.builder()
 *             .name("file-storage-net-test")
 *             .zone("fi-hel2")
 *             .ipNetwork(NetworkIpNetworkArgs.builder()
 *                 .address("172.16.8.0/24")
 *                 .dhcp(true)
 *                 .family("IPv4")
 *                 .build())
 *             .build());
 * 
 *         var example = new FileStorage("example", FileStorageArgs.builder()
 *             .name("example-file-storage-test")
 *             .size(250)
 *             .zone("fi-hel2")
 *             .configuredStatus("stopped")
 *             .labels(Map.ofEntries(
 *                 Map.entry("environment", "staging"),
 *                 Map.entry("customer", "example-customer")
 *             ))
 *             .shares(FileStorageShareArgs.builder()
 *                 .name("write-to-project")
 *                 .path("/project")
 *                 .acls(FileStorageShareAclArgs.builder()
 *                     .target("172.16.8.12")
 *                     .permission("rw")
 *                     .build())
 *                 .build())
 *             .networks(FileStorageNetworkArgs.builder()
 *                 .family("IPv4")
 *                 .name("example-private-net")
 *                 .uuid(this_.id())
 *                 .ipAddress("172.16.8.11")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="upcloud:index/fileStorage:FileStorage")
public class FileStorage extends com.pulumi.resources.CustomResource {
    /**
     * The service configured status indicates the service&#39;s current intended status. Managed by the customer.
     * 
     */
    @Export(name="configuredStatus", refs={String.class}, tree="[0]")
    private Output<String> configuredStatus;

    /**
     * @return The service configured status indicates the service&#39;s current intended status. Managed by the customer.
     * 
     */
    public Output<String> configuredStatus() {
        return this.configuredStatus;
    }
    /**
     * User defined key-value pairs to classify the file storage.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the file storage.
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }
    /**
     * Name of the file storage service.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the file storage service.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Network attached to this file storage (currently supports at most one of these blocks).
     * 
     */
    @Export(name="networks", refs={List.class,FileStorageNetwork.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FileStorageNetwork>> networks;

    /**
     * @return Network attached to this file storage (currently supports at most one of these blocks).
     * 
     */
    public Output<Optional<List<FileStorageNetwork>>> networks() {
        return Codegen.optional(this.networks);
    }
    /**
     * List of shares exported by this file storage.
     * 
     */
    @Export(name="shares", refs={List.class,FileStorageShare.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FileStorageShare>> shares;

    /**
     * @return List of shares exported by this file storage.
     * 
     */
    public Output<Optional<List<FileStorageShare>>> shares() {
        return Codegen.optional(this.shares);
    }
    /**
     * Size of the file storage in GB.
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return Size of the file storage in GB.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FileStorage(java.lang.String name) {
        this(name, FileStorageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FileStorage(java.lang.String name, FileStorageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FileStorage(java.lang.String name, FileStorageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/fileStorage:FileStorage", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private FileStorage(java.lang.String name, Output<java.lang.String> id, @Nullable FileStorageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/fileStorage:FileStorage", name, state, makeResourceOptions(options, id), false);
    }

    private static FileStorageArgs makeArgs(FileStorageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FileStorageArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FileStorage get(java.lang.String name, Output<java.lang.String> id, @Nullable FileStorageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FileStorage(name, id, state, options);
    }
}
