// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.GatewayConnectionTunnelIpsecAuthPskArgs;
import com.pulumi.upcloud.inputs.GatewayConnectionTunnelIpsecPropertiesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayConnectionTunnelState extends com.pulumi.resources.ResourceArgs {

    public static final GatewayConnectionTunnelState Empty = new GatewayConnectionTunnelState();

    /**
     * ID of the upcloud.GatewayConnection resource to which the tunnel belongs
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return ID of the upcloud.GatewayConnection resource to which the tunnel belongs
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * Configuration for authenticating with pre-shared key
     * 
     */
    @Import(name="ipsecAuthPsk")
    private @Nullable Output<GatewayConnectionTunnelIpsecAuthPskArgs> ipsecAuthPsk;

    /**
     * @return Configuration for authenticating with pre-shared key
     * 
     */
    public Optional<Output<GatewayConnectionTunnelIpsecAuthPskArgs>> ipsecAuthPsk() {
        return Optional.ofNullable(this.ipsecAuthPsk);
    }

    /**
     * IPsec configuration for the tunnel
     * 
     */
    @Import(name="ipsecProperties")
    private @Nullable Output<GatewayConnectionTunnelIpsecPropertiesArgs> ipsecProperties;

    /**
     * @return IPsec configuration for the tunnel
     * 
     */
    public Optional<Output<GatewayConnectionTunnelIpsecPropertiesArgs>> ipsecProperties() {
        return Optional.ofNullable(this.ipsecProperties);
    }

    /**
     * Public (UpCloud) endpoint address of this tunnel
     * 
     */
    @Import(name="localAddressName")
    private @Nullable Output<String> localAddressName;

    /**
     * @return Public (UpCloud) endpoint address of this tunnel
     * 
     */
    public Optional<Output<String>> localAddressName() {
        return Optional.ofNullable(this.localAddressName);
    }

    /**
     * The name of the tunnel, should be unique within the connection
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the tunnel, should be unique within the connection
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Tunnel&#39;s current operational, effective state
     * 
     */
    @Import(name="operationalState")
    private @Nullable Output<String> operationalState;

    /**
     * @return Tunnel&#39;s current operational, effective state
     * 
     */
    public Optional<Output<String>> operationalState() {
        return Optional.ofNullable(this.operationalState);
    }

    /**
     * Remote public IP address of the tunnel
     * 
     */
    @Import(name="remoteAddress")
    private @Nullable Output<String> remoteAddress;

    /**
     * @return Remote public IP address of the tunnel
     * 
     */
    public Optional<Output<String>> remoteAddress() {
        return Optional.ofNullable(this.remoteAddress);
    }

    /**
     * The UUID of the tunnel
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return The UUID of the tunnel
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GatewayConnectionTunnelState() {}

    private GatewayConnectionTunnelState(GatewayConnectionTunnelState $) {
        this.connectionId = $.connectionId;
        this.ipsecAuthPsk = $.ipsecAuthPsk;
        this.ipsecProperties = $.ipsecProperties;
        this.localAddressName = $.localAddressName;
        this.name = $.name;
        this.operationalState = $.operationalState;
        this.remoteAddress = $.remoteAddress;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayConnectionTunnelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayConnectionTunnelState $;

        public Builder() {
            $ = new GatewayConnectionTunnelState();
        }

        public Builder(GatewayConnectionTunnelState defaults) {
            $ = new GatewayConnectionTunnelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId ID of the upcloud.GatewayConnection resource to which the tunnel belongs
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId ID of the upcloud.GatewayConnection resource to which the tunnel belongs
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param ipsecAuthPsk Configuration for authenticating with pre-shared key
         * 
         * @return builder
         * 
         */
        public Builder ipsecAuthPsk(@Nullable Output<GatewayConnectionTunnelIpsecAuthPskArgs> ipsecAuthPsk) {
            $.ipsecAuthPsk = ipsecAuthPsk;
            return this;
        }

        /**
         * @param ipsecAuthPsk Configuration for authenticating with pre-shared key
         * 
         * @return builder
         * 
         */
        public Builder ipsecAuthPsk(GatewayConnectionTunnelIpsecAuthPskArgs ipsecAuthPsk) {
            return ipsecAuthPsk(Output.of(ipsecAuthPsk));
        }

        /**
         * @param ipsecProperties IPsec configuration for the tunnel
         * 
         * @return builder
         * 
         */
        public Builder ipsecProperties(@Nullable Output<GatewayConnectionTunnelIpsecPropertiesArgs> ipsecProperties) {
            $.ipsecProperties = ipsecProperties;
            return this;
        }

        /**
         * @param ipsecProperties IPsec configuration for the tunnel
         * 
         * @return builder
         * 
         */
        public Builder ipsecProperties(GatewayConnectionTunnelIpsecPropertiesArgs ipsecProperties) {
            return ipsecProperties(Output.of(ipsecProperties));
        }

        /**
         * @param localAddressName Public (UpCloud) endpoint address of this tunnel
         * 
         * @return builder
         * 
         */
        public Builder localAddressName(@Nullable Output<String> localAddressName) {
            $.localAddressName = localAddressName;
            return this;
        }

        /**
         * @param localAddressName Public (UpCloud) endpoint address of this tunnel
         * 
         * @return builder
         * 
         */
        public Builder localAddressName(String localAddressName) {
            return localAddressName(Output.of(localAddressName));
        }

        /**
         * @param name The name of the tunnel, should be unique within the connection
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the tunnel, should be unique within the connection
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param operationalState Tunnel&#39;s current operational, effective state
         * 
         * @return builder
         * 
         */
        public Builder operationalState(@Nullable Output<String> operationalState) {
            $.operationalState = operationalState;
            return this;
        }

        /**
         * @param operationalState Tunnel&#39;s current operational, effective state
         * 
         * @return builder
         * 
         */
        public Builder operationalState(String operationalState) {
            return operationalState(Output.of(operationalState));
        }

        /**
         * @param remoteAddress Remote public IP address of the tunnel
         * 
         * @return builder
         * 
         */
        public Builder remoteAddress(@Nullable Output<String> remoteAddress) {
            $.remoteAddress = remoteAddress;
            return this;
        }

        /**
         * @param remoteAddress Remote public IP address of the tunnel
         * 
         * @return builder
         * 
         */
        public Builder remoteAddress(String remoteAddress) {
            return remoteAddress(Output.of(remoteAddress));
        }

        /**
         * @param uuid The UUID of the tunnel
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid The UUID of the tunnel
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GatewayConnectionTunnelState build() {
            return $;
        }
    }

}
