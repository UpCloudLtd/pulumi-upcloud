// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.ManagedDatabasePostgresqlPropertiesMigrationArgs;
import com.pulumi.upcloud.inputs.ManagedDatabasePostgresqlPropertiesPgauditArgs;
import com.pulumi.upcloud.inputs.ManagedDatabasePostgresqlPropertiesPgbouncerArgs;
import com.pulumi.upcloud.inputs.ManagedDatabasePostgresqlPropertiesPglookoutArgs;
import com.pulumi.upcloud.inputs.ManagedDatabasePostgresqlPropertiesTimescaledbArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabasePostgresqlPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabasePostgresqlPropertiesArgs Empty = new ManagedDatabasePostgresqlPropertiesArgs();

    /**
     * Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     * 
     */
    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    /**
     * @return Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
     * 
     */
    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * Custom username for admin user. This must be set only when a new service is being created.
     * 
     */
    @Import(name="adminUsername")
    private @Nullable Output<String> adminUsername;

    /**
     * @return Custom username for admin user. This must be set only when a new service is being created.
     * 
     */
    public Optional<Output<String>> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    /**
     * Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    @Import(name="automaticUtilityNetworkIpFilter")
    private @Nullable Output<Boolean> automaticUtilityNetworkIpFilter;

    /**
     * @return Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    public Optional<Output<Boolean>> automaticUtilityNetworkIpFilter() {
        return Optional.ofNullable(this.automaticUtilityNetworkIpFilter);
    }

    /**
     * Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
     * 
     */
    @Import(name="autovacuumAnalyzeScaleFactor")
    private @Nullable Output<Double> autovacuumAnalyzeScaleFactor;

    /**
     * @return Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
     * 
     */
    public Optional<Output<Double>> autovacuumAnalyzeScaleFactor() {
        return Optional.ofNullable(this.autovacuumAnalyzeScaleFactor);
    }

    /**
     * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
     * 
     */
    @Import(name="autovacuumAnalyzeThreshold")
    private @Nullable Output<Integer> autovacuumAnalyzeThreshold;

    /**
     * @return Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
     * 
     */
    public Optional<Output<Integer>> autovacuumAnalyzeThreshold() {
        return Optional.ofNullable(this.autovacuumAnalyzeThreshold);
    }

    /**
     * Specifies the maximum age (in transactions) that a table&#39;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
     * 
     */
    @Import(name="autovacuumFreezeMaxAge")
    private @Nullable Output<Integer> autovacuumFreezeMaxAge;

    /**
     * @return Specifies the maximum age (in transactions) that a table&#39;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
     * 
     */
    public Optional<Output<Integer>> autovacuumFreezeMaxAge() {
        return Optional.ofNullable(this.autovacuumFreezeMaxAge);
    }

    /**
     * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
     * 
     */
    @Import(name="autovacuumMaxWorkers")
    private @Nullable Output<Integer> autovacuumMaxWorkers;

    /**
     * @return Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
     * 
     */
    public Optional<Output<Integer>> autovacuumMaxWorkers() {
        return Optional.ofNullable(this.autovacuumMaxWorkers);
    }

    /**
     * Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
     * 
     */
    @Import(name="autovacuumNaptime")
    private @Nullable Output<Integer> autovacuumNaptime;

    /**
     * @return Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
     * 
     */
    public Optional<Output<Integer>> autovacuumNaptime() {
        return Optional.ofNullable(this.autovacuumNaptime);
    }

    /**
     * Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds.
     * 
     */
    @Import(name="autovacuumVacuumCostDelay")
    private @Nullable Output<Integer> autovacuumVacuumCostDelay;

    /**
     * @return Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds.
     * 
     */
    public Optional<Output<Integer>> autovacuumVacuumCostDelay() {
        return Optional.ofNullable(this.autovacuumVacuumCostDelay);
    }

    /**
     * Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
     * 
     */
    @Import(name="autovacuumVacuumCostLimit")
    private @Nullable Output<Integer> autovacuumVacuumCostLimit;

    /**
     * @return Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
     * 
     */
    public Optional<Output<Integer>> autovacuumVacuumCostLimit() {
        return Optional.ofNullable(this.autovacuumVacuumCostLimit);
    }

    /**
     * Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
     * 
     */
    @Import(name="autovacuumVacuumScaleFactor")
    private @Nullable Output<Double> autovacuumVacuumScaleFactor;

    /**
     * @return Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
     * 
     */
    public Optional<Output<Double>> autovacuumVacuumScaleFactor() {
        return Optional.ofNullable(this.autovacuumVacuumScaleFactor);
    }

    /**
     * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
     * 
     */
    @Import(name="autovacuumVacuumThreshold")
    private @Nullable Output<Integer> autovacuumVacuumThreshold;

    /**
     * @return Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
     * 
     */
    public Optional<Output<Integer>> autovacuumVacuumThreshold() {
        return Optional.ofNullable(this.autovacuumVacuumThreshold);
    }

    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    @Import(name="backupHour")
    private @Nullable Output<Integer> backupHour;

    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Output<Integer>> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }

    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    @Import(name="backupMinute")
    private @Nullable Output<Integer> backupMinute;

    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Output<Integer>> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }

    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     * 
     */
    @Import(name="bgwriterDelay")
    private @Nullable Output<Integer> bgwriterDelay;

    /**
     * @return Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     * 
     */
    public Optional<Output<Integer>> bgwriterDelay() {
        return Optional.ofNullable(this.bgwriterDelay);
    }

    /**
     * Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     * 
     */
    @Import(name="bgwriterFlushAfter")
    private @Nullable Output<Integer> bgwriterFlushAfter;

    /**
     * @return Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     * 
     */
    public Optional<Output<Integer>> bgwriterFlushAfter() {
        return Optional.ofNullable(this.bgwriterFlushAfter);
    }

    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     * 
     */
    @Import(name="bgwriterLruMaxpages")
    private @Nullable Output<Integer> bgwriterLruMaxpages;

    /**
     * @return In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     * 
     */
    public Optional<Output<Integer>> bgwriterLruMaxpages() {
        return Optional.ofNullable(this.bgwriterLruMaxpages);
    }

    /**
     * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     * 
     */
    @Import(name="bgwriterLruMultiplier")
    private @Nullable Output<Double> bgwriterLruMultiplier;

    /**
     * @return The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     * 
     */
    public Optional<Output<Double>> bgwriterLruMultiplier() {
        return Optional.ofNullable(this.bgwriterLruMultiplier);
    }

    /**
     * This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
     * 
     */
    @Import(name="deadlockTimeout")
    private @Nullable Output<Integer> deadlockTimeout;

    /**
     * @return This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
     * 
     */
    public Optional<Output<Integer>> deadlockTimeout() {
        return Optional.ofNullable(this.deadlockTimeout);
    }

    /**
     * Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
     * 
     */
    @Import(name="defaultToastCompression")
    private @Nullable Output<String> defaultToastCompression;

    /**
     * @return Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
     * 
     */
    public Optional<Output<String>> defaultToastCompression() {
        return Optional.ofNullable(this.defaultToastCompression);
    }

    /**
     * Time out sessions with open transactions after this number of milliseconds.
     * 
     */
    @Import(name="idleInTransactionSessionTimeout")
    private @Nullable Output<Integer> idleInTransactionSessionTimeout;

    /**
     * @return Time out sessions with open transactions after this number of milliseconds.
     * 
     */
    public Optional<Output<Integer>> idleInTransactionSessionTimeout() {
        return Optional.ofNullable(this.idleInTransactionSessionTimeout);
    }

    /**
     * IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Controls system-wide use of Just-in-Time Compilation (JIT).
     * 
     */
    @Import(name="jit")
    private @Nullable Output<Boolean> jit;

    /**
     * @return Controls system-wide use of Just-in-Time Compilation (JIT).
     * 
     */
    public Optional<Output<Boolean>> jit() {
        return Optional.ofNullable(this.jit);
    }

    /**
     * Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
     * 
     */
    @Import(name="logAutovacuumMinDuration")
    private @Nullable Output<Integer> logAutovacuumMinDuration;

    /**
     * @return Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
     * 
     */
    public Optional<Output<Integer>> logAutovacuumMinDuration() {
        return Optional.ofNullable(this.logAutovacuumMinDuration);
    }

    /**
     * Controls the amount of detail written in the server log for each message that is logged.
     * 
     */
    @Import(name="logErrorVerbosity")
    private @Nullable Output<String> logErrorVerbosity;

    /**
     * @return Controls the amount of detail written in the server log for each message that is logged.
     * 
     */
    public Optional<Output<String>> logErrorVerbosity() {
        return Optional.ofNullable(this.logErrorVerbosity);
    }

    /**
     * Choose from one of the available log formats.
     * 
     */
    @Import(name="logLinePrefix")
    private @Nullable Output<String> logLinePrefix;

    /**
     * @return Choose from one of the available log formats.
     * 
     */
    public Optional<Output<String>> logLinePrefix() {
        return Optional.ofNullable(this.logLinePrefix);
    }

    /**
     * Log statements that take more than this number of milliseconds to run, -1 disables.
     * 
     */
    @Import(name="logMinDurationStatement")
    private @Nullable Output<Integer> logMinDurationStatement;

    /**
     * @return Log statements that take more than this number of milliseconds to run, -1 disables.
     * 
     */
    public Optional<Output<Integer>> logMinDurationStatement() {
        return Optional.ofNullable(this.logMinDurationStatement);
    }

    /**
     * Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
     * 
     */
    @Import(name="logTempFiles")
    private @Nullable Output<Integer> logTempFiles;

    /**
     * @return Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
     * 
     */
    public Optional<Output<Integer>> logTempFiles() {
        return Optional.ofNullable(this.logTempFiles);
    }

    /**
     * PostgreSQL maximum number of files that can be open per process.
     * 
     */
    @Import(name="maxFilesPerProcess")
    private @Nullable Output<Integer> maxFilesPerProcess;

    /**
     * @return PostgreSQL maximum number of files that can be open per process.
     * 
     */
    public Optional<Output<Integer>> maxFilesPerProcess() {
        return Optional.ofNullable(this.maxFilesPerProcess);
    }

    /**
     * PostgreSQL maximum locks per transaction.
     * 
     */
    @Import(name="maxLocksPerTransaction")
    private @Nullable Output<Integer> maxLocksPerTransaction;

    /**
     * @return PostgreSQL maximum locks per transaction.
     * 
     */
    public Optional<Output<Integer>> maxLocksPerTransaction() {
        return Optional.ofNullable(this.maxLocksPerTransaction);
    }

    /**
     * PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
     * 
     */
    @Import(name="maxLogicalReplicationWorkers")
    private @Nullable Output<Integer> maxLogicalReplicationWorkers;

    /**
     * @return PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
     * 
     */
    public Optional<Output<Integer>> maxLogicalReplicationWorkers() {
        return Optional.ofNullable(this.maxLogicalReplicationWorkers);
    }

    /**
     * Sets the maximum number of workers that the system can support for parallel queries.
     * 
     */
    @Import(name="maxParallelWorkers")
    private @Nullable Output<Integer> maxParallelWorkers;

    /**
     * @return Sets the maximum number of workers that the system can support for parallel queries.
     * 
     */
    public Optional<Output<Integer>> maxParallelWorkers() {
        return Optional.ofNullable(this.maxParallelWorkers);
    }

    /**
     * Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
     * 
     */
    @Import(name="maxParallelWorkersPerGather")
    private @Nullable Output<Integer> maxParallelWorkersPerGather;

    /**
     * @return Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
     * 
     */
    public Optional<Output<Integer>> maxParallelWorkersPerGather() {
        return Optional.ofNullable(this.maxParallelWorkersPerGather);
    }

    /**
     * PostgreSQL maximum predicate locks per transaction.
     * 
     */
    @Import(name="maxPredLocksPerTransaction")
    private @Nullable Output<Integer> maxPredLocksPerTransaction;

    /**
     * @return PostgreSQL maximum predicate locks per transaction.
     * 
     */
    public Optional<Output<Integer>> maxPredLocksPerTransaction() {
        return Optional.ofNullable(this.maxPredLocksPerTransaction);
    }

    /**
     * PostgreSQL maximum prepared transactions.
     * 
     */
    @Import(name="maxPreparedTransactions")
    private @Nullable Output<Integer> maxPreparedTransactions;

    /**
     * @return PostgreSQL maximum prepared transactions.
     * 
     */
    public Optional<Output<Integer>> maxPreparedTransactions() {
        return Optional.ofNullable(this.maxPreparedTransactions);
    }

    /**
     * PostgreSQL maximum replication slots.
     * 
     */
    @Import(name="maxReplicationSlots")
    private @Nullable Output<Integer> maxReplicationSlots;

    /**
     * @return PostgreSQL maximum replication slots.
     * 
     */
    public Optional<Output<Integer>> maxReplicationSlots() {
        return Optional.ofNullable(this.maxReplicationSlots);
    }

    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
     * 
     */
    @Import(name="maxSlotWalKeepSize")
    private @Nullable Output<Integer> maxSlotWalKeepSize;

    /**
     * @return PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
     * 
     */
    public Optional<Output<Integer>> maxSlotWalKeepSize() {
        return Optional.ofNullable(this.maxSlotWalKeepSize);
    }

    /**
     * Maximum depth of the stack in bytes.
     * 
     */
    @Import(name="maxStackDepth")
    private @Nullable Output<Integer> maxStackDepth;

    /**
     * @return Maximum depth of the stack in bytes.
     * 
     */
    public Optional<Output<Integer>> maxStackDepth() {
        return Optional.ofNullable(this.maxStackDepth);
    }

    /**
     * Max standby archive delay in milliseconds.
     * 
     */
    @Import(name="maxStandbyArchiveDelay")
    private @Nullable Output<Integer> maxStandbyArchiveDelay;

    /**
     * @return Max standby archive delay in milliseconds.
     * 
     */
    public Optional<Output<Integer>> maxStandbyArchiveDelay() {
        return Optional.ofNullable(this.maxStandbyArchiveDelay);
    }

    /**
     * Max standby streaming delay in milliseconds.
     * 
     */
    @Import(name="maxStandbyStreamingDelay")
    private @Nullable Output<Integer> maxStandbyStreamingDelay;

    /**
     * @return Max standby streaming delay in milliseconds.
     * 
     */
    public Optional<Output<Integer>> maxStandbyStreamingDelay() {
        return Optional.ofNullable(this.maxStandbyStreamingDelay);
    }

    /**
     * PostgreSQL maximum WAL senders.
     * 
     */
    @Import(name="maxWalSenders")
    private @Nullable Output<Integer> maxWalSenders;

    /**
     * @return PostgreSQL maximum WAL senders.
     * 
     */
    public Optional<Output<Integer>> maxWalSenders() {
        return Optional.ofNullable(this.maxWalSenders);
    }

    /**
     * Sets the maximum number of background processes that the system can support.
     * 
     */
    @Import(name="maxWorkerProcesses")
    private @Nullable Output<Integer> maxWorkerProcesses;

    /**
     * @return Sets the maximum number of background processes that the system can support.
     * 
     */
    public Optional<Output<Integer>> maxWorkerProcesses() {
        return Optional.ofNullable(this.maxWorkerProcesses);
    }

    /**
     * Migrate data from existing server.
     * 
     */
    @Import(name="migration")
    private @Nullable Output<ManagedDatabasePostgresqlPropertiesMigrationArgs> migration;

    /**
     * @return Migrate data from existing server.
     * 
     */
    public Optional<Output<ManagedDatabasePostgresqlPropertiesMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    /**
     * Chooses the algorithm for encrypting passwords.
     * 
     */
    @Import(name="passwordEncryption")
    private @Nullable Output<String> passwordEncryption;

    /**
     * @return Chooses the algorithm for encrypting passwords.
     * 
     */
    public Optional<Output<String>> passwordEncryption() {
        return Optional.ofNullable(this.passwordEncryption);
    }

    /**
     * Sets the time interval to run pg_partman&#39;s scheduled tasks.
     * 
     */
    @Import(name="pgPartmanBgwInterval")
    private @Nullable Output<Integer> pgPartmanBgwInterval;

    /**
     * @return Sets the time interval to run pg_partman&#39;s scheduled tasks.
     * 
     */
    public Optional<Output<Integer>> pgPartmanBgwInterval() {
        return Optional.ofNullable(this.pgPartmanBgwInterval);
    }

    /**
     * Controls which role to use for pg_partman&#39;s scheduled background tasks.
     * 
     */
    @Import(name="pgPartmanBgwRole")
    private @Nullable Output<String> pgPartmanBgwRole;

    /**
     * @return Controls which role to use for pg_partman&#39;s scheduled background tasks.
     * 
     */
    public Optional<Output<String>> pgPartmanBgwRole() {
        return Optional.ofNullable(this.pgPartmanBgwRole);
    }

    /**
     * Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
     * 
     */
    @Import(name="pgStatMonitorEnable")
    private @Nullable Output<Boolean> pgStatMonitorEnable;

    /**
     * @return Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
     * 
     */
    public Optional<Output<Boolean>> pgStatMonitorEnable() {
        return Optional.ofNullable(this.pgStatMonitorEnable);
    }

    /**
     * Enables or disables query plan monitoring.
     * 
     */
    @Import(name="pgStatMonitorPgsmEnableQueryPlan")
    private @Nullable Output<Boolean> pgStatMonitorPgsmEnableQueryPlan;

    /**
     * @return Enables or disables query plan monitoring.
     * 
     */
    public Optional<Output<Boolean>> pgStatMonitorPgsmEnableQueryPlan() {
        return Optional.ofNullable(this.pgStatMonitorPgsmEnableQueryPlan);
    }

    /**
     * Sets the maximum number of buckets.
     * 
     */
    @Import(name="pgStatMonitorPgsmMaxBuckets")
    private @Nullable Output<Integer> pgStatMonitorPgsmMaxBuckets;

    /**
     * @return Sets the maximum number of buckets.
     * 
     */
    public Optional<Output<Integer>> pgStatMonitorPgsmMaxBuckets() {
        return Optional.ofNullable(this.pgStatMonitorPgsmMaxBuckets);
    }

    /**
     * Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
     * 
     */
    @Import(name="pgStatStatementsTrack")
    private @Nullable Output<String> pgStatStatementsTrack;

    /**
     * @return Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
     * 
     */
    public Optional<Output<String>> pgStatStatementsTrack() {
        return Optional.ofNullable(this.pgStatStatementsTrack);
    }

    /**
     * PGAudit settings. System-wide settings for the pgaudit extension.
     * 
     */
    @Import(name="pgaudit")
    private @Nullable Output<ManagedDatabasePostgresqlPropertiesPgauditArgs> pgaudit;

    /**
     * @return PGAudit settings. System-wide settings for the pgaudit extension.
     * 
     */
    public Optional<Output<ManagedDatabasePostgresqlPropertiesPgauditArgs>> pgaudit() {
        return Optional.ofNullable(this.pgaudit);
    }

    /**
     * PGBouncer connection pooling settings. System-wide settings for pgbouncer.
     * 
     */
    @Import(name="pgbouncer")
    private @Nullable Output<ManagedDatabasePostgresqlPropertiesPgbouncerArgs> pgbouncer;

    /**
     * @return PGBouncer connection pooling settings. System-wide settings for pgbouncer.
     * 
     */
    public Optional<Output<ManagedDatabasePostgresqlPropertiesPgbouncerArgs>> pgbouncer() {
        return Optional.ofNullable(this.pgbouncer);
    }

    /**
     * PGLookout settings. System-wide settings for pglookout.
     * 
     */
    @Import(name="pglookout")
    private @Nullable Output<ManagedDatabasePostgresqlPropertiesPglookoutArgs> pglookout;

    /**
     * @return PGLookout settings. System-wide settings for pglookout.
     * 
     */
    public Optional<Output<ManagedDatabasePostgresqlPropertiesPglookoutArgs>> pglookout() {
        return Optional.ofNullable(this.pglookout);
    }

    /**
     * Public Access. Allow access to the service from the public Internet.
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<Boolean> publicAccess;

    /**
     * @return Public Access. Allow access to the service from the public Internet.
     * 
     */
    public Optional<Output<Boolean>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     * 
     */
    @Import(name="sharedBuffersPercentage")
    private @Nullable Output<Double> sharedBuffersPercentage;

    /**
     * @return Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     * 
     */
    public Optional<Output<Double>> sharedBuffersPercentage() {
        return Optional.ofNullable(this.sharedBuffersPercentage);
    }

    /**
     * Synchronous replication type. Note that the service plan also needs to support synchronous replication.
     * 
     */
    @Import(name="synchronousReplication")
    private @Nullable Output<String> synchronousReplication;

    /**
     * @return Synchronous replication type. Note that the service plan also needs to support synchronous replication.
     * 
     */
    public Optional<Output<String>> synchronousReplication() {
        return Optional.ofNullable(this.synchronousReplication);
    }

    /**
     * PostgreSQL temporary file limit in KiB, -1 for unlimited.
     * 
     */
    @Import(name="tempFileLimit")
    private @Nullable Output<Integer> tempFileLimit;

    /**
     * @return PostgreSQL temporary file limit in KiB, -1 for unlimited.
     * 
     */
    public Optional<Output<Integer>> tempFileLimit() {
        return Optional.ofNullable(this.tempFileLimit);
    }

    /**
     * TimescaleDB extension configuration values. System-wide settings for the timescaledb extension.
     * 
     */
    @Import(name="timescaledb")
    private @Nullable Output<ManagedDatabasePostgresqlPropertiesTimescaledbArgs> timescaledb;

    /**
     * @return TimescaleDB extension configuration values. System-wide settings for the timescaledb extension.
     * 
     */
    public Optional<Output<ManagedDatabasePostgresqlPropertiesTimescaledbArgs>> timescaledb() {
        return Optional.ofNullable(this.timescaledb);
    }

    /**
     * PostgreSQL service timezone.
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return PostgreSQL service timezone.
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    /**
     * Specifies the number of bytes reserved to track the currently executing command for each active session.
     * 
     */
    @Import(name="trackActivityQuerySize")
    private @Nullable Output<Integer> trackActivityQuerySize;

    /**
     * @return Specifies the number of bytes reserved to track the currently executing command for each active session.
     * 
     */
    public Optional<Output<Integer>> trackActivityQuerySize() {
        return Optional.ofNullable(this.trackActivityQuerySize);
    }

    /**
     * Record commit time of transactions.
     * 
     */
    @Import(name="trackCommitTimestamp")
    private @Nullable Output<String> trackCommitTimestamp;

    /**
     * @return Record commit time of transactions.
     * 
     */
    public Optional<Output<String>> trackCommitTimestamp() {
        return Optional.ofNullable(this.trackCommitTimestamp);
    }

    /**
     * Enables tracking of function call counts and time used.
     * 
     */
    @Import(name="trackFunctions")
    private @Nullable Output<String> trackFunctions;

    /**
     * @return Enables tracking of function call counts and time used.
     * 
     */
    public Optional<Output<String>> trackFunctions() {
        return Optional.ofNullable(this.trackFunctions);
    }

    /**
     * Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
     * 
     */
    @Import(name="trackIoTiming")
    private @Nullable Output<String> trackIoTiming;

    /**
     * @return Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
     * 
     */
    public Optional<Output<String>> trackIoTiming() {
        return Optional.ofNullable(this.trackIoTiming);
    }

    /**
     * Variant of the PostgreSQL service, may affect the features that are exposed by default.
     * 
     */
    @Import(name="variant")
    private @Nullable Output<String> variant;

    /**
     * @return Variant of the PostgreSQL service, may affect the features that are exposed by default.
     * 
     */
    public Optional<Output<String>> variant() {
        return Optional.ofNullable(this.variant);
    }

    /**
     * PostgreSQL major version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return PostgreSQL major version.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     * 
     */
    @Import(name="walSenderTimeout")
    private @Nullable Output<Integer> walSenderTimeout;

    /**
     * @return Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     * 
     */
    public Optional<Output<Integer>> walSenderTimeout() {
        return Optional.ofNullable(this.walSenderTimeout);
    }

    /**
     * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
     * 
     */
    @Import(name="walWriterDelay")
    private @Nullable Output<Integer> walWriterDelay;

    /**
     * @return WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
     * 
     */
    public Optional<Output<Integer>> walWriterDelay() {
        return Optional.ofNullable(this.walWriterDelay);
    }

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     * 
     */
    @Import(name="workMem")
    private @Nullable Output<Integer> workMem;

    /**
     * @return Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     * 
     */
    public Optional<Output<Integer>> workMem() {
        return Optional.ofNullable(this.workMem);
    }

    private ManagedDatabasePostgresqlPropertiesArgs() {}

    private ManagedDatabasePostgresqlPropertiesArgs(ManagedDatabasePostgresqlPropertiesArgs $) {
        this.adminPassword = $.adminPassword;
        this.adminUsername = $.adminUsername;
        this.automaticUtilityNetworkIpFilter = $.automaticUtilityNetworkIpFilter;
        this.autovacuumAnalyzeScaleFactor = $.autovacuumAnalyzeScaleFactor;
        this.autovacuumAnalyzeThreshold = $.autovacuumAnalyzeThreshold;
        this.autovacuumFreezeMaxAge = $.autovacuumFreezeMaxAge;
        this.autovacuumMaxWorkers = $.autovacuumMaxWorkers;
        this.autovacuumNaptime = $.autovacuumNaptime;
        this.autovacuumVacuumCostDelay = $.autovacuumVacuumCostDelay;
        this.autovacuumVacuumCostLimit = $.autovacuumVacuumCostLimit;
        this.autovacuumVacuumScaleFactor = $.autovacuumVacuumScaleFactor;
        this.autovacuumVacuumThreshold = $.autovacuumVacuumThreshold;
        this.backupHour = $.backupHour;
        this.backupMinute = $.backupMinute;
        this.bgwriterDelay = $.bgwriterDelay;
        this.bgwriterFlushAfter = $.bgwriterFlushAfter;
        this.bgwriterLruMaxpages = $.bgwriterLruMaxpages;
        this.bgwriterLruMultiplier = $.bgwriterLruMultiplier;
        this.deadlockTimeout = $.deadlockTimeout;
        this.defaultToastCompression = $.defaultToastCompression;
        this.idleInTransactionSessionTimeout = $.idleInTransactionSessionTimeout;
        this.ipFilters = $.ipFilters;
        this.jit = $.jit;
        this.logAutovacuumMinDuration = $.logAutovacuumMinDuration;
        this.logErrorVerbosity = $.logErrorVerbosity;
        this.logLinePrefix = $.logLinePrefix;
        this.logMinDurationStatement = $.logMinDurationStatement;
        this.logTempFiles = $.logTempFiles;
        this.maxFilesPerProcess = $.maxFilesPerProcess;
        this.maxLocksPerTransaction = $.maxLocksPerTransaction;
        this.maxLogicalReplicationWorkers = $.maxLogicalReplicationWorkers;
        this.maxParallelWorkers = $.maxParallelWorkers;
        this.maxParallelWorkersPerGather = $.maxParallelWorkersPerGather;
        this.maxPredLocksPerTransaction = $.maxPredLocksPerTransaction;
        this.maxPreparedTransactions = $.maxPreparedTransactions;
        this.maxReplicationSlots = $.maxReplicationSlots;
        this.maxSlotWalKeepSize = $.maxSlotWalKeepSize;
        this.maxStackDepth = $.maxStackDepth;
        this.maxStandbyArchiveDelay = $.maxStandbyArchiveDelay;
        this.maxStandbyStreamingDelay = $.maxStandbyStreamingDelay;
        this.maxWalSenders = $.maxWalSenders;
        this.maxWorkerProcesses = $.maxWorkerProcesses;
        this.migration = $.migration;
        this.passwordEncryption = $.passwordEncryption;
        this.pgPartmanBgwInterval = $.pgPartmanBgwInterval;
        this.pgPartmanBgwRole = $.pgPartmanBgwRole;
        this.pgStatMonitorEnable = $.pgStatMonitorEnable;
        this.pgStatMonitorPgsmEnableQueryPlan = $.pgStatMonitorPgsmEnableQueryPlan;
        this.pgStatMonitorPgsmMaxBuckets = $.pgStatMonitorPgsmMaxBuckets;
        this.pgStatStatementsTrack = $.pgStatStatementsTrack;
        this.pgaudit = $.pgaudit;
        this.pgbouncer = $.pgbouncer;
        this.pglookout = $.pglookout;
        this.publicAccess = $.publicAccess;
        this.serviceLog = $.serviceLog;
        this.sharedBuffersPercentage = $.sharedBuffersPercentage;
        this.synchronousReplication = $.synchronousReplication;
        this.tempFileLimit = $.tempFileLimit;
        this.timescaledb = $.timescaledb;
        this.timezone = $.timezone;
        this.trackActivityQuerySize = $.trackActivityQuerySize;
        this.trackCommitTimestamp = $.trackCommitTimestamp;
        this.trackFunctions = $.trackFunctions;
        this.trackIoTiming = $.trackIoTiming;
        this.variant = $.variant;
        this.version = $.version;
        this.walSenderTimeout = $.walSenderTimeout;
        this.walWriterDelay = $.walWriterDelay;
        this.workMem = $.workMem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabasePostgresqlPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabasePostgresqlPropertiesArgs $;

        public Builder() {
            $ = new ManagedDatabasePostgresqlPropertiesArgs();
        }

        public Builder(ManagedDatabasePostgresqlPropertiesArgs defaults) {
            $ = new ManagedDatabasePostgresqlPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminPassword Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        /**
         * @param adminPassword Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param adminUsername Custom username for admin user. This must be set only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(@Nullable Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        /**
         * @param adminUsername Custom username for admin user. This must be set only when a new service is being created.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        /**
         * @param automaticUtilityNetworkIpFilter Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
         * 
         * @return builder
         * 
         */
        public Builder automaticUtilityNetworkIpFilter(@Nullable Output<Boolean> automaticUtilityNetworkIpFilter) {
            $.automaticUtilityNetworkIpFilter = automaticUtilityNetworkIpFilter;
            return this;
        }

        /**
         * @param automaticUtilityNetworkIpFilter Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
         * 
         * @return builder
         * 
         */
        public Builder automaticUtilityNetworkIpFilter(Boolean automaticUtilityNetworkIpFilter) {
            return automaticUtilityNetworkIpFilter(Output.of(automaticUtilityNetworkIpFilter));
        }

        /**
         * @param autovacuumAnalyzeScaleFactor Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
         * 
         * @return builder
         * 
         */
        public Builder autovacuumAnalyzeScaleFactor(@Nullable Output<Double> autovacuumAnalyzeScaleFactor) {
            $.autovacuumAnalyzeScaleFactor = autovacuumAnalyzeScaleFactor;
            return this;
        }

        /**
         * @param autovacuumAnalyzeScaleFactor Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
         * 
         * @return builder
         * 
         */
        public Builder autovacuumAnalyzeScaleFactor(Double autovacuumAnalyzeScaleFactor) {
            return autovacuumAnalyzeScaleFactor(Output.of(autovacuumAnalyzeScaleFactor));
        }

        /**
         * @param autovacuumAnalyzeThreshold Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumAnalyzeThreshold(@Nullable Output<Integer> autovacuumAnalyzeThreshold) {
            $.autovacuumAnalyzeThreshold = autovacuumAnalyzeThreshold;
            return this;
        }

        /**
         * @param autovacuumAnalyzeThreshold Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumAnalyzeThreshold(Integer autovacuumAnalyzeThreshold) {
            return autovacuumAnalyzeThreshold(Output.of(autovacuumAnalyzeThreshold));
        }

        /**
         * @param autovacuumFreezeMaxAge Specifies the maximum age (in transactions) that a table&#39;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumFreezeMaxAge(@Nullable Output<Integer> autovacuumFreezeMaxAge) {
            $.autovacuumFreezeMaxAge = autovacuumFreezeMaxAge;
            return this;
        }

        /**
         * @param autovacuumFreezeMaxAge Specifies the maximum age (in transactions) that a table&#39;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumFreezeMaxAge(Integer autovacuumFreezeMaxAge) {
            return autovacuumFreezeMaxAge(Output.of(autovacuumFreezeMaxAge));
        }

        /**
         * @param autovacuumMaxWorkers Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumMaxWorkers(@Nullable Output<Integer> autovacuumMaxWorkers) {
            $.autovacuumMaxWorkers = autovacuumMaxWorkers;
            return this;
        }

        /**
         * @param autovacuumMaxWorkers Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumMaxWorkers(Integer autovacuumMaxWorkers) {
            return autovacuumMaxWorkers(Output.of(autovacuumMaxWorkers));
        }

        /**
         * @param autovacuumNaptime Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumNaptime(@Nullable Output<Integer> autovacuumNaptime) {
            $.autovacuumNaptime = autovacuumNaptime;
            return this;
        }

        /**
         * @param autovacuumNaptime Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumNaptime(Integer autovacuumNaptime) {
            return autovacuumNaptime(Output.of(autovacuumNaptime));
        }

        /**
         * @param autovacuumVacuumCostDelay Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumCostDelay(@Nullable Output<Integer> autovacuumVacuumCostDelay) {
            $.autovacuumVacuumCostDelay = autovacuumVacuumCostDelay;
            return this;
        }

        /**
         * @param autovacuumVacuumCostDelay Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumCostDelay(Integer autovacuumVacuumCostDelay) {
            return autovacuumVacuumCostDelay(Output.of(autovacuumVacuumCostDelay));
        }

        /**
         * @param autovacuumVacuumCostLimit Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumCostLimit(@Nullable Output<Integer> autovacuumVacuumCostLimit) {
            $.autovacuumVacuumCostLimit = autovacuumVacuumCostLimit;
            return this;
        }

        /**
         * @param autovacuumVacuumCostLimit Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumCostLimit(Integer autovacuumVacuumCostLimit) {
            return autovacuumVacuumCostLimit(Output.of(autovacuumVacuumCostLimit));
        }

        /**
         * @param autovacuumVacuumScaleFactor Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumScaleFactor(@Nullable Output<Double> autovacuumVacuumScaleFactor) {
            $.autovacuumVacuumScaleFactor = autovacuumVacuumScaleFactor;
            return this;
        }

        /**
         * @param autovacuumVacuumScaleFactor Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumScaleFactor(Double autovacuumVacuumScaleFactor) {
            return autovacuumVacuumScaleFactor(Output.of(autovacuumVacuumScaleFactor));
        }

        /**
         * @param autovacuumVacuumThreshold Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumThreshold(@Nullable Output<Integer> autovacuumVacuumThreshold) {
            $.autovacuumVacuumThreshold = autovacuumVacuumThreshold;
            return this;
        }

        /**
         * @param autovacuumVacuumThreshold Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
         * 
         * @return builder
         * 
         */
        public Builder autovacuumVacuumThreshold(Integer autovacuumVacuumThreshold) {
            return autovacuumVacuumThreshold(Output.of(autovacuumVacuumThreshold));
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(@Nullable Output<Integer> backupHour) {
            $.backupHour = backupHour;
            return this;
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(Integer backupHour) {
            return backupHour(Output.of(backupHour));
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(@Nullable Output<Integer> backupMinute) {
            $.backupMinute = backupMinute;
            return this;
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(Integer backupMinute) {
            return backupMinute(Output.of(backupMinute));
        }

        /**
         * @param bgwriterDelay Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterDelay(@Nullable Output<Integer> bgwriterDelay) {
            $.bgwriterDelay = bgwriterDelay;
            return this;
        }

        /**
         * @param bgwriterDelay Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterDelay(Integer bgwriterDelay) {
            return bgwriterDelay(Output.of(bgwriterDelay));
        }

        /**
         * @param bgwriterFlushAfter Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterFlushAfter(@Nullable Output<Integer> bgwriterFlushAfter) {
            $.bgwriterFlushAfter = bgwriterFlushAfter;
            return this;
        }

        /**
         * @param bgwriterFlushAfter Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterFlushAfter(Integer bgwriterFlushAfter) {
            return bgwriterFlushAfter(Output.of(bgwriterFlushAfter));
        }

        /**
         * @param bgwriterLruMaxpages In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterLruMaxpages(@Nullable Output<Integer> bgwriterLruMaxpages) {
            $.bgwriterLruMaxpages = bgwriterLruMaxpages;
            return this;
        }

        /**
         * @param bgwriterLruMaxpages In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterLruMaxpages(Integer bgwriterLruMaxpages) {
            return bgwriterLruMaxpages(Output.of(bgwriterLruMaxpages));
        }

        /**
         * @param bgwriterLruMultiplier The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterLruMultiplier(@Nullable Output<Double> bgwriterLruMultiplier) {
            $.bgwriterLruMultiplier = bgwriterLruMultiplier;
            return this;
        }

        /**
         * @param bgwriterLruMultiplier The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
         * 
         * @return builder
         * 
         */
        public Builder bgwriterLruMultiplier(Double bgwriterLruMultiplier) {
            return bgwriterLruMultiplier(Output.of(bgwriterLruMultiplier));
        }

        /**
         * @param deadlockTimeout This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
         * 
         * @return builder
         * 
         */
        public Builder deadlockTimeout(@Nullable Output<Integer> deadlockTimeout) {
            $.deadlockTimeout = deadlockTimeout;
            return this;
        }

        /**
         * @param deadlockTimeout This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
         * 
         * @return builder
         * 
         */
        public Builder deadlockTimeout(Integer deadlockTimeout) {
            return deadlockTimeout(Output.of(deadlockTimeout));
        }

        /**
         * @param defaultToastCompression Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
         * 
         * @return builder
         * 
         */
        public Builder defaultToastCompression(@Nullable Output<String> defaultToastCompression) {
            $.defaultToastCompression = defaultToastCompression;
            return this;
        }

        /**
         * @param defaultToastCompression Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
         * 
         * @return builder
         * 
         */
        public Builder defaultToastCompression(String defaultToastCompression) {
            return defaultToastCompression(Output.of(defaultToastCompression));
        }

        /**
         * @param idleInTransactionSessionTimeout Time out sessions with open transactions after this number of milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder idleInTransactionSessionTimeout(@Nullable Output<Integer> idleInTransactionSessionTimeout) {
            $.idleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
            return this;
        }

        /**
         * @param idleInTransactionSessionTimeout Time out sessions with open transactions after this number of milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder idleInTransactionSessionTimeout(Integer idleInTransactionSessionTimeout) {
            return idleInTransactionSessionTimeout(Output.of(idleInTransactionSessionTimeout));
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param jit Controls system-wide use of Just-in-Time Compilation (JIT).
         * 
         * @return builder
         * 
         */
        public Builder jit(@Nullable Output<Boolean> jit) {
            $.jit = jit;
            return this;
        }

        /**
         * @param jit Controls system-wide use of Just-in-Time Compilation (JIT).
         * 
         * @return builder
         * 
         */
        public Builder jit(Boolean jit) {
            return jit(Output.of(jit));
        }

        /**
         * @param logAutovacuumMinDuration Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
         * 
         * @return builder
         * 
         */
        public Builder logAutovacuumMinDuration(@Nullable Output<Integer> logAutovacuumMinDuration) {
            $.logAutovacuumMinDuration = logAutovacuumMinDuration;
            return this;
        }

        /**
         * @param logAutovacuumMinDuration Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
         * 
         * @return builder
         * 
         */
        public Builder logAutovacuumMinDuration(Integer logAutovacuumMinDuration) {
            return logAutovacuumMinDuration(Output.of(logAutovacuumMinDuration));
        }

        /**
         * @param logErrorVerbosity Controls the amount of detail written in the server log for each message that is logged.
         * 
         * @return builder
         * 
         */
        public Builder logErrorVerbosity(@Nullable Output<String> logErrorVerbosity) {
            $.logErrorVerbosity = logErrorVerbosity;
            return this;
        }

        /**
         * @param logErrorVerbosity Controls the amount of detail written in the server log for each message that is logged.
         * 
         * @return builder
         * 
         */
        public Builder logErrorVerbosity(String logErrorVerbosity) {
            return logErrorVerbosity(Output.of(logErrorVerbosity));
        }

        /**
         * @param logLinePrefix Choose from one of the available log formats.
         * 
         * @return builder
         * 
         */
        public Builder logLinePrefix(@Nullable Output<String> logLinePrefix) {
            $.logLinePrefix = logLinePrefix;
            return this;
        }

        /**
         * @param logLinePrefix Choose from one of the available log formats.
         * 
         * @return builder
         * 
         */
        public Builder logLinePrefix(String logLinePrefix) {
            return logLinePrefix(Output.of(logLinePrefix));
        }

        /**
         * @param logMinDurationStatement Log statements that take more than this number of milliseconds to run, -1 disables.
         * 
         * @return builder
         * 
         */
        public Builder logMinDurationStatement(@Nullable Output<Integer> logMinDurationStatement) {
            $.logMinDurationStatement = logMinDurationStatement;
            return this;
        }

        /**
         * @param logMinDurationStatement Log statements that take more than this number of milliseconds to run, -1 disables.
         * 
         * @return builder
         * 
         */
        public Builder logMinDurationStatement(Integer logMinDurationStatement) {
            return logMinDurationStatement(Output.of(logMinDurationStatement));
        }

        /**
         * @param logTempFiles Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
         * 
         * @return builder
         * 
         */
        public Builder logTempFiles(@Nullable Output<Integer> logTempFiles) {
            $.logTempFiles = logTempFiles;
            return this;
        }

        /**
         * @param logTempFiles Log statements for each temporary file created larger than this number of kilobytes, -1 disables.
         * 
         * @return builder
         * 
         */
        public Builder logTempFiles(Integer logTempFiles) {
            return logTempFiles(Output.of(logTempFiles));
        }

        /**
         * @param maxFilesPerProcess PostgreSQL maximum number of files that can be open per process.
         * 
         * @return builder
         * 
         */
        public Builder maxFilesPerProcess(@Nullable Output<Integer> maxFilesPerProcess) {
            $.maxFilesPerProcess = maxFilesPerProcess;
            return this;
        }

        /**
         * @param maxFilesPerProcess PostgreSQL maximum number of files that can be open per process.
         * 
         * @return builder
         * 
         */
        public Builder maxFilesPerProcess(Integer maxFilesPerProcess) {
            return maxFilesPerProcess(Output.of(maxFilesPerProcess));
        }

        /**
         * @param maxLocksPerTransaction PostgreSQL maximum locks per transaction.
         * 
         * @return builder
         * 
         */
        public Builder maxLocksPerTransaction(@Nullable Output<Integer> maxLocksPerTransaction) {
            $.maxLocksPerTransaction = maxLocksPerTransaction;
            return this;
        }

        /**
         * @param maxLocksPerTransaction PostgreSQL maximum locks per transaction.
         * 
         * @return builder
         * 
         */
        public Builder maxLocksPerTransaction(Integer maxLocksPerTransaction) {
            return maxLocksPerTransaction(Output.of(maxLocksPerTransaction));
        }

        /**
         * @param maxLogicalReplicationWorkers PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
         * 
         * @return builder
         * 
         */
        public Builder maxLogicalReplicationWorkers(@Nullable Output<Integer> maxLogicalReplicationWorkers) {
            $.maxLogicalReplicationWorkers = maxLogicalReplicationWorkers;
            return this;
        }

        /**
         * @param maxLogicalReplicationWorkers PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
         * 
         * @return builder
         * 
         */
        public Builder maxLogicalReplicationWorkers(Integer maxLogicalReplicationWorkers) {
            return maxLogicalReplicationWorkers(Output.of(maxLogicalReplicationWorkers));
        }

        /**
         * @param maxParallelWorkers Sets the maximum number of workers that the system can support for parallel queries.
         * 
         * @return builder
         * 
         */
        public Builder maxParallelWorkers(@Nullable Output<Integer> maxParallelWorkers) {
            $.maxParallelWorkers = maxParallelWorkers;
            return this;
        }

        /**
         * @param maxParallelWorkers Sets the maximum number of workers that the system can support for parallel queries.
         * 
         * @return builder
         * 
         */
        public Builder maxParallelWorkers(Integer maxParallelWorkers) {
            return maxParallelWorkers(Output.of(maxParallelWorkers));
        }

        /**
         * @param maxParallelWorkersPerGather Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
         * 
         * @return builder
         * 
         */
        public Builder maxParallelWorkersPerGather(@Nullable Output<Integer> maxParallelWorkersPerGather) {
            $.maxParallelWorkersPerGather = maxParallelWorkersPerGather;
            return this;
        }

        /**
         * @param maxParallelWorkersPerGather Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
         * 
         * @return builder
         * 
         */
        public Builder maxParallelWorkersPerGather(Integer maxParallelWorkersPerGather) {
            return maxParallelWorkersPerGather(Output.of(maxParallelWorkersPerGather));
        }

        /**
         * @param maxPredLocksPerTransaction PostgreSQL maximum predicate locks per transaction.
         * 
         * @return builder
         * 
         */
        public Builder maxPredLocksPerTransaction(@Nullable Output<Integer> maxPredLocksPerTransaction) {
            $.maxPredLocksPerTransaction = maxPredLocksPerTransaction;
            return this;
        }

        /**
         * @param maxPredLocksPerTransaction PostgreSQL maximum predicate locks per transaction.
         * 
         * @return builder
         * 
         */
        public Builder maxPredLocksPerTransaction(Integer maxPredLocksPerTransaction) {
            return maxPredLocksPerTransaction(Output.of(maxPredLocksPerTransaction));
        }

        /**
         * @param maxPreparedTransactions PostgreSQL maximum prepared transactions.
         * 
         * @return builder
         * 
         */
        public Builder maxPreparedTransactions(@Nullable Output<Integer> maxPreparedTransactions) {
            $.maxPreparedTransactions = maxPreparedTransactions;
            return this;
        }

        /**
         * @param maxPreparedTransactions PostgreSQL maximum prepared transactions.
         * 
         * @return builder
         * 
         */
        public Builder maxPreparedTransactions(Integer maxPreparedTransactions) {
            return maxPreparedTransactions(Output.of(maxPreparedTransactions));
        }

        /**
         * @param maxReplicationSlots PostgreSQL maximum replication slots.
         * 
         * @return builder
         * 
         */
        public Builder maxReplicationSlots(@Nullable Output<Integer> maxReplicationSlots) {
            $.maxReplicationSlots = maxReplicationSlots;
            return this;
        }

        /**
         * @param maxReplicationSlots PostgreSQL maximum replication slots.
         * 
         * @return builder
         * 
         */
        public Builder maxReplicationSlots(Integer maxReplicationSlots) {
            return maxReplicationSlots(Output.of(maxReplicationSlots));
        }

        /**
         * @param maxSlotWalKeepSize PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
         * 
         * @return builder
         * 
         */
        public Builder maxSlotWalKeepSize(@Nullable Output<Integer> maxSlotWalKeepSize) {
            $.maxSlotWalKeepSize = maxSlotWalKeepSize;
            return this;
        }

        /**
         * @param maxSlotWalKeepSize PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
         * 
         * @return builder
         * 
         */
        public Builder maxSlotWalKeepSize(Integer maxSlotWalKeepSize) {
            return maxSlotWalKeepSize(Output.of(maxSlotWalKeepSize));
        }

        /**
         * @param maxStackDepth Maximum depth of the stack in bytes.
         * 
         * @return builder
         * 
         */
        public Builder maxStackDepth(@Nullable Output<Integer> maxStackDepth) {
            $.maxStackDepth = maxStackDepth;
            return this;
        }

        /**
         * @param maxStackDepth Maximum depth of the stack in bytes.
         * 
         * @return builder
         * 
         */
        public Builder maxStackDepth(Integer maxStackDepth) {
            return maxStackDepth(Output.of(maxStackDepth));
        }

        /**
         * @param maxStandbyArchiveDelay Max standby archive delay in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder maxStandbyArchiveDelay(@Nullable Output<Integer> maxStandbyArchiveDelay) {
            $.maxStandbyArchiveDelay = maxStandbyArchiveDelay;
            return this;
        }

        /**
         * @param maxStandbyArchiveDelay Max standby archive delay in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder maxStandbyArchiveDelay(Integer maxStandbyArchiveDelay) {
            return maxStandbyArchiveDelay(Output.of(maxStandbyArchiveDelay));
        }

        /**
         * @param maxStandbyStreamingDelay Max standby streaming delay in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder maxStandbyStreamingDelay(@Nullable Output<Integer> maxStandbyStreamingDelay) {
            $.maxStandbyStreamingDelay = maxStandbyStreamingDelay;
            return this;
        }

        /**
         * @param maxStandbyStreamingDelay Max standby streaming delay in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder maxStandbyStreamingDelay(Integer maxStandbyStreamingDelay) {
            return maxStandbyStreamingDelay(Output.of(maxStandbyStreamingDelay));
        }

        /**
         * @param maxWalSenders PostgreSQL maximum WAL senders.
         * 
         * @return builder
         * 
         */
        public Builder maxWalSenders(@Nullable Output<Integer> maxWalSenders) {
            $.maxWalSenders = maxWalSenders;
            return this;
        }

        /**
         * @param maxWalSenders PostgreSQL maximum WAL senders.
         * 
         * @return builder
         * 
         */
        public Builder maxWalSenders(Integer maxWalSenders) {
            return maxWalSenders(Output.of(maxWalSenders));
        }

        /**
         * @param maxWorkerProcesses Sets the maximum number of background processes that the system can support.
         * 
         * @return builder
         * 
         */
        public Builder maxWorkerProcesses(@Nullable Output<Integer> maxWorkerProcesses) {
            $.maxWorkerProcesses = maxWorkerProcesses;
            return this;
        }

        /**
         * @param maxWorkerProcesses Sets the maximum number of background processes that the system can support.
         * 
         * @return builder
         * 
         */
        public Builder maxWorkerProcesses(Integer maxWorkerProcesses) {
            return maxWorkerProcesses(Output.of(maxWorkerProcesses));
        }

        /**
         * @param migration Migrate data from existing server.
         * 
         * @return builder
         * 
         */
        public Builder migration(@Nullable Output<ManagedDatabasePostgresqlPropertiesMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        /**
         * @param migration Migrate data from existing server.
         * 
         * @return builder
         * 
         */
        public Builder migration(ManagedDatabasePostgresqlPropertiesMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        /**
         * @param passwordEncryption Chooses the algorithm for encrypting passwords.
         * 
         * @return builder
         * 
         */
        public Builder passwordEncryption(@Nullable Output<String> passwordEncryption) {
            $.passwordEncryption = passwordEncryption;
            return this;
        }

        /**
         * @param passwordEncryption Chooses the algorithm for encrypting passwords.
         * 
         * @return builder
         * 
         */
        public Builder passwordEncryption(String passwordEncryption) {
            return passwordEncryption(Output.of(passwordEncryption));
        }

        /**
         * @param pgPartmanBgwInterval Sets the time interval to run pg_partman&#39;s scheduled tasks.
         * 
         * @return builder
         * 
         */
        public Builder pgPartmanBgwInterval(@Nullable Output<Integer> pgPartmanBgwInterval) {
            $.pgPartmanBgwInterval = pgPartmanBgwInterval;
            return this;
        }

        /**
         * @param pgPartmanBgwInterval Sets the time interval to run pg_partman&#39;s scheduled tasks.
         * 
         * @return builder
         * 
         */
        public Builder pgPartmanBgwInterval(Integer pgPartmanBgwInterval) {
            return pgPartmanBgwInterval(Output.of(pgPartmanBgwInterval));
        }

        /**
         * @param pgPartmanBgwRole Controls which role to use for pg_partman&#39;s scheduled background tasks.
         * 
         * @return builder
         * 
         */
        public Builder pgPartmanBgwRole(@Nullable Output<String> pgPartmanBgwRole) {
            $.pgPartmanBgwRole = pgPartmanBgwRole;
            return this;
        }

        /**
         * @param pgPartmanBgwRole Controls which role to use for pg_partman&#39;s scheduled background tasks.
         * 
         * @return builder
         * 
         */
        public Builder pgPartmanBgwRole(String pgPartmanBgwRole) {
            return pgPartmanBgwRole(Output.of(pgPartmanBgwRole));
        }

        /**
         * @param pgStatMonitorEnable Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorEnable(@Nullable Output<Boolean> pgStatMonitorEnable) {
            $.pgStatMonitorEnable = pgStatMonitorEnable;
            return this;
        }

        /**
         * @param pgStatMonitorEnable Enable pg_stat_monitor extension if available for the current cluster. Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted.When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorEnable(Boolean pgStatMonitorEnable) {
            return pgStatMonitorEnable(Output.of(pgStatMonitorEnable));
        }

        /**
         * @param pgStatMonitorPgsmEnableQueryPlan Enables or disables query plan monitoring.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorPgsmEnableQueryPlan(@Nullable Output<Boolean> pgStatMonitorPgsmEnableQueryPlan) {
            $.pgStatMonitorPgsmEnableQueryPlan = pgStatMonitorPgsmEnableQueryPlan;
            return this;
        }

        /**
         * @param pgStatMonitorPgsmEnableQueryPlan Enables or disables query plan monitoring.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorPgsmEnableQueryPlan(Boolean pgStatMonitorPgsmEnableQueryPlan) {
            return pgStatMonitorPgsmEnableQueryPlan(Output.of(pgStatMonitorPgsmEnableQueryPlan));
        }

        /**
         * @param pgStatMonitorPgsmMaxBuckets Sets the maximum number of buckets.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorPgsmMaxBuckets(@Nullable Output<Integer> pgStatMonitorPgsmMaxBuckets) {
            $.pgStatMonitorPgsmMaxBuckets = pgStatMonitorPgsmMaxBuckets;
            return this;
        }

        /**
         * @param pgStatMonitorPgsmMaxBuckets Sets the maximum number of buckets.
         * 
         * @return builder
         * 
         */
        public Builder pgStatMonitorPgsmMaxBuckets(Integer pgStatMonitorPgsmMaxBuckets) {
            return pgStatMonitorPgsmMaxBuckets(Output.of(pgStatMonitorPgsmMaxBuckets));
        }

        /**
         * @param pgStatStatementsTrack Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
         * 
         * @return builder
         * 
         */
        public Builder pgStatStatementsTrack(@Nullable Output<String> pgStatStatementsTrack) {
            $.pgStatStatementsTrack = pgStatStatementsTrack;
            return this;
        }

        /**
         * @param pgStatStatementsTrack Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
         * 
         * @return builder
         * 
         */
        public Builder pgStatStatementsTrack(String pgStatStatementsTrack) {
            return pgStatStatementsTrack(Output.of(pgStatStatementsTrack));
        }

        /**
         * @param pgaudit PGAudit settings. System-wide settings for the pgaudit extension.
         * 
         * @return builder
         * 
         */
        public Builder pgaudit(@Nullable Output<ManagedDatabasePostgresqlPropertiesPgauditArgs> pgaudit) {
            $.pgaudit = pgaudit;
            return this;
        }

        /**
         * @param pgaudit PGAudit settings. System-wide settings for the pgaudit extension.
         * 
         * @return builder
         * 
         */
        public Builder pgaudit(ManagedDatabasePostgresqlPropertiesPgauditArgs pgaudit) {
            return pgaudit(Output.of(pgaudit));
        }

        /**
         * @param pgbouncer PGBouncer connection pooling settings. System-wide settings for pgbouncer.
         * 
         * @return builder
         * 
         */
        public Builder pgbouncer(@Nullable Output<ManagedDatabasePostgresqlPropertiesPgbouncerArgs> pgbouncer) {
            $.pgbouncer = pgbouncer;
            return this;
        }

        /**
         * @param pgbouncer PGBouncer connection pooling settings. System-wide settings for pgbouncer.
         * 
         * @return builder
         * 
         */
        public Builder pgbouncer(ManagedDatabasePostgresqlPropertiesPgbouncerArgs pgbouncer) {
            return pgbouncer(Output.of(pgbouncer));
        }

        /**
         * @param pglookout PGLookout settings. System-wide settings for pglookout.
         * 
         * @return builder
         * 
         */
        public Builder pglookout(@Nullable Output<ManagedDatabasePostgresqlPropertiesPglookoutArgs> pglookout) {
            $.pglookout = pglookout;
            return this;
        }

        /**
         * @param pglookout PGLookout settings. System-wide settings for pglookout.
         * 
         * @return builder
         * 
         */
        public Builder pglookout(ManagedDatabasePostgresqlPropertiesPglookoutArgs pglookout) {
            return pglookout(Output.of(pglookout));
        }

        /**
         * @param publicAccess Public Access. Allow access to the service from the public Internet.
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<Boolean> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Public Access. Allow access to the service from the public Internet.
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(Boolean publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param serviceLog Service logging. Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Service logging. Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param sharedBuffersPercentage Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
         * 
         * @return builder
         * 
         */
        public Builder sharedBuffersPercentage(@Nullable Output<Double> sharedBuffersPercentage) {
            $.sharedBuffersPercentage = sharedBuffersPercentage;
            return this;
        }

        /**
         * @param sharedBuffersPercentage Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
         * 
         * @return builder
         * 
         */
        public Builder sharedBuffersPercentage(Double sharedBuffersPercentage) {
            return sharedBuffersPercentage(Output.of(sharedBuffersPercentage));
        }

        /**
         * @param synchronousReplication Synchronous replication type. Note that the service plan also needs to support synchronous replication.
         * 
         * @return builder
         * 
         */
        public Builder synchronousReplication(@Nullable Output<String> synchronousReplication) {
            $.synchronousReplication = synchronousReplication;
            return this;
        }

        /**
         * @param synchronousReplication Synchronous replication type. Note that the service plan also needs to support synchronous replication.
         * 
         * @return builder
         * 
         */
        public Builder synchronousReplication(String synchronousReplication) {
            return synchronousReplication(Output.of(synchronousReplication));
        }

        /**
         * @param tempFileLimit PostgreSQL temporary file limit in KiB, -1 for unlimited.
         * 
         * @return builder
         * 
         */
        public Builder tempFileLimit(@Nullable Output<Integer> tempFileLimit) {
            $.tempFileLimit = tempFileLimit;
            return this;
        }

        /**
         * @param tempFileLimit PostgreSQL temporary file limit in KiB, -1 for unlimited.
         * 
         * @return builder
         * 
         */
        public Builder tempFileLimit(Integer tempFileLimit) {
            return tempFileLimit(Output.of(tempFileLimit));
        }

        /**
         * @param timescaledb TimescaleDB extension configuration values. System-wide settings for the timescaledb extension.
         * 
         * @return builder
         * 
         */
        public Builder timescaledb(@Nullable Output<ManagedDatabasePostgresqlPropertiesTimescaledbArgs> timescaledb) {
            $.timescaledb = timescaledb;
            return this;
        }

        /**
         * @param timescaledb TimescaleDB extension configuration values. System-wide settings for the timescaledb extension.
         * 
         * @return builder
         * 
         */
        public Builder timescaledb(ManagedDatabasePostgresqlPropertiesTimescaledbArgs timescaledb) {
            return timescaledb(Output.of(timescaledb));
        }

        /**
         * @param timezone PostgreSQL service timezone.
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone PostgreSQL service timezone.
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        /**
         * @param trackActivityQuerySize Specifies the number of bytes reserved to track the currently executing command for each active session.
         * 
         * @return builder
         * 
         */
        public Builder trackActivityQuerySize(@Nullable Output<Integer> trackActivityQuerySize) {
            $.trackActivityQuerySize = trackActivityQuerySize;
            return this;
        }

        /**
         * @param trackActivityQuerySize Specifies the number of bytes reserved to track the currently executing command for each active session.
         * 
         * @return builder
         * 
         */
        public Builder trackActivityQuerySize(Integer trackActivityQuerySize) {
            return trackActivityQuerySize(Output.of(trackActivityQuerySize));
        }

        /**
         * @param trackCommitTimestamp Record commit time of transactions.
         * 
         * @return builder
         * 
         */
        public Builder trackCommitTimestamp(@Nullable Output<String> trackCommitTimestamp) {
            $.trackCommitTimestamp = trackCommitTimestamp;
            return this;
        }

        /**
         * @param trackCommitTimestamp Record commit time of transactions.
         * 
         * @return builder
         * 
         */
        public Builder trackCommitTimestamp(String trackCommitTimestamp) {
            return trackCommitTimestamp(Output.of(trackCommitTimestamp));
        }

        /**
         * @param trackFunctions Enables tracking of function call counts and time used.
         * 
         * @return builder
         * 
         */
        public Builder trackFunctions(@Nullable Output<String> trackFunctions) {
            $.trackFunctions = trackFunctions;
            return this;
        }

        /**
         * @param trackFunctions Enables tracking of function call counts and time used.
         * 
         * @return builder
         * 
         */
        public Builder trackFunctions(String trackFunctions) {
            return trackFunctions(Output.of(trackFunctions));
        }

        /**
         * @param trackIoTiming Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
         * 
         * @return builder
         * 
         */
        public Builder trackIoTiming(@Nullable Output<String> trackIoTiming) {
            $.trackIoTiming = trackIoTiming;
            return this;
        }

        /**
         * @param trackIoTiming Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
         * 
         * @return builder
         * 
         */
        public Builder trackIoTiming(String trackIoTiming) {
            return trackIoTiming(Output.of(trackIoTiming));
        }

        /**
         * @param variant Variant of the PostgreSQL service, may affect the features that are exposed by default.
         * 
         * @return builder
         * 
         */
        public Builder variant(@Nullable Output<String> variant) {
            $.variant = variant;
            return this;
        }

        /**
         * @param variant Variant of the PostgreSQL service, may affect the features that are exposed by default.
         * 
         * @return builder
         * 
         */
        public Builder variant(String variant) {
            return variant(Output.of(variant));
        }

        /**
         * @param version PostgreSQL major version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version PostgreSQL major version.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param walSenderTimeout Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
         * 
         * @return builder
         * 
         */
        public Builder walSenderTimeout(@Nullable Output<Integer> walSenderTimeout) {
            $.walSenderTimeout = walSenderTimeout;
            return this;
        }

        /**
         * @param walSenderTimeout Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
         * 
         * @return builder
         * 
         */
        public Builder walSenderTimeout(Integer walSenderTimeout) {
            return walSenderTimeout(Output.of(walSenderTimeout));
        }

        /**
         * @param walWriterDelay WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
         * 
         * @return builder
         * 
         */
        public Builder walWriterDelay(@Nullable Output<Integer> walWriterDelay) {
            $.walWriterDelay = walWriterDelay;
            return this;
        }

        /**
         * @param walWriterDelay WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
         * 
         * @return builder
         * 
         */
        public Builder walWriterDelay(Integer walWriterDelay) {
            return walWriterDelay(Output.of(walWriterDelay));
        }

        /**
         * @param workMem Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
         * 
         * @return builder
         * 
         */
        public Builder workMem(@Nullable Output<Integer> workMem) {
            $.workMem = workMem;
            return this;
        }

        /**
         * @param workMem Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
         * 
         * @return builder
         * 
         */
        public Builder workMem(Integer workMem) {
            return workMem(Output.of(workMem));
        }

        public ManagedDatabasePostgresqlPropertiesArgs build() {
            return $;
        }
    }

}
