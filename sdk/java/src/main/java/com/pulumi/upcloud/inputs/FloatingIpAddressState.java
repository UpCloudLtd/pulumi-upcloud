// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FloatingIpAddressState extends com.pulumi.resources.ResourceArgs {

    public static final FloatingIpAddressState Empty = new FloatingIpAddressState();

    /**
     * Network access for the floating IP address. Supported value: `public`.
     * 
     */
    @Import(name="access")
    private @Nullable Output<String> access;

    /**
     * @return Network access for the floating IP address. Supported value: `public`.
     * 
     */
    public Optional<Output<String>> access() {
        return Optional.ofNullable(this.access);
    }

    /**
     * The address family of the floating IP address.
     * 
     */
    @Import(name="family")
    private @Nullable Output<String> family;

    /**
     * @return The address family of the floating IP address.
     * 
     */
    public Optional<Output<String>> family() {
        return Optional.ofNullable(this.family);
    }

    /**
     * An UpCloud assigned IP Address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return An UpCloud assigned IP Address.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * MAC address of a server interface to assign address to.
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<String> macAddress;

    /**
     * @return MAC address of a server interface to assign address to.
     * 
     */
    public Optional<Output<String>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * The release policy of the floating IP address.
     * 
     */
    @Import(name="releasePolicy")
    private @Nullable Output<String> releasePolicy;

    /**
     * @return The release policy of the floating IP address.
     * 
     */
    public Optional<Output<String>> releasePolicy() {
        return Optional.ofNullable(this.releasePolicy);
    }

    /**
     * Zone of the address, e.g. `de-fra1`. Required when assigning a detached floating IP address. You can list available zones with `upctl zone list`.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Zone of the address, e.g. `de-fra1`. Required when assigning a detached floating IP address. You can list available zones with `upctl zone list`.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private FloatingIpAddressState() {}

    private FloatingIpAddressState(FloatingIpAddressState $) {
        this.access = $.access;
        this.family = $.family;
        this.ipAddress = $.ipAddress;
        this.macAddress = $.macAddress;
        this.releasePolicy = $.releasePolicy;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FloatingIpAddressState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FloatingIpAddressState $;

        public Builder() {
            $ = new FloatingIpAddressState();
        }

        public Builder(FloatingIpAddressState defaults) {
            $ = new FloatingIpAddressState(Objects.requireNonNull(defaults));
        }

        /**
         * @param access Network access for the floating IP address. Supported value: `public`.
         * 
         * @return builder
         * 
         */
        public Builder access(@Nullable Output<String> access) {
            $.access = access;
            return this;
        }

        /**
         * @param access Network access for the floating IP address. Supported value: `public`.
         * 
         * @return builder
         * 
         */
        public Builder access(String access) {
            return access(Output.of(access));
        }

        /**
         * @param family The address family of the floating IP address.
         * 
         * @return builder
         * 
         */
        public Builder family(@Nullable Output<String> family) {
            $.family = family;
            return this;
        }

        /**
         * @param family The address family of the floating IP address.
         * 
         * @return builder
         * 
         */
        public Builder family(String family) {
            return family(Output.of(family));
        }

        /**
         * @param ipAddress An UpCloud assigned IP Address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress An UpCloud assigned IP Address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param macAddress MAC address of a server interface to assign address to.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<String> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress MAC address of a server interface to assign address to.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param releasePolicy The release policy of the floating IP address.
         * 
         * @return builder
         * 
         */
        public Builder releasePolicy(@Nullable Output<String> releasePolicy) {
            $.releasePolicy = releasePolicy;
            return this;
        }

        /**
         * @param releasePolicy The release policy of the floating IP address.
         * 
         * @return builder
         * 
         */
        public Builder releasePolicy(String releasePolicy) {
            return releasePolicy(Output.of(releasePolicy));
        }

        /**
         * @param zone Zone of the address, e.g. `de-fra1`. Required when assigning a detached floating IP address. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone of the address, e.g. `de-fra1`. Required when assigning a detached floating IP address. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public FloatingIpAddressState build() {
            return $;
        }
    }

}
