// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetIpAddressesAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetIpAddressesAddressArgs Empty = new GetIpAddressesAddressArgs();

    /**
     * Is address for utility or public network
     * 
     */
    @Import(name="access", required=true)
    private Output<String> access;

    /**
     * @return Is address for utility or public network
     * 
     */
    public Output<String> access() {
        return this.access;
    }

    /**
     * An UpCloud assigned IP Address
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return An UpCloud assigned IP Address
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * IP address family
     * 
     */
    @Import(name="family", required=true)
    private Output<String> family;

    /**
     * @return IP address family
     * 
     */
    public Output<String> family() {
        return this.family;
    }

    /**
     * Does the IP Address represents a floating IP Address
     * 
     */
    @Import(name="floating", required=true)
    private Output<Boolean> floating;

    /**
     * @return Does the IP Address represents a floating IP Address
     * 
     */
    public Output<Boolean> floating() {
        return this.floating;
    }

    /**
     * MAC address of server interface to assign address to
     * 
     */
    @Import(name="mac", required=true)
    private Output<String> mac;

    /**
     * @return MAC address of server interface to assign address to
     * 
     */
    public Output<String> mac() {
        return this.mac;
    }

    /**
     * Is the address a part of a plan
     * 
     */
    @Import(name="partOfPlan", required=true)
    private Output<Boolean> partOfPlan;

    /**
     * @return Is the address a part of a plan
     * 
     */
    public Output<Boolean> partOfPlan() {
        return this.partOfPlan;
    }

    /**
     * A reverse DNS record entry
     * 
     */
    @Import(name="ptrRecord", required=true)
    private Output<String> ptrRecord;

    /**
     * @return A reverse DNS record entry
     * 
     */
    public Output<String> ptrRecord() {
        return this.ptrRecord;
    }

    /**
     * Release policy for the address
     * 
     */
    @Import(name="releasePolicy", required=true)
    private Output<String> releasePolicy;

    /**
     * @return Release policy for the address
     * 
     */
    public Output<String> releasePolicy() {
        return this.releasePolicy;
    }

    /**
     * The unique identifier for a server
     * 
     */
    @Import(name="server", required=true)
    private Output<String> server;

    /**
     * @return The unique identifier for a server
     * 
     */
    public Output<String> server() {
        return this.server;
    }

    /**
     * Zone of address, required when assigning a detached floating IP address, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return Zone of address, required when assigning a detached floating IP address, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private GetIpAddressesAddressArgs() {}

    private GetIpAddressesAddressArgs(GetIpAddressesAddressArgs $) {
        this.access = $.access;
        this.address = $.address;
        this.family = $.family;
        this.floating = $.floating;
        this.mac = $.mac;
        this.partOfPlan = $.partOfPlan;
        this.ptrRecord = $.ptrRecord;
        this.releasePolicy = $.releasePolicy;
        this.server = $.server;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetIpAddressesAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetIpAddressesAddressArgs $;

        public Builder() {
            $ = new GetIpAddressesAddressArgs();
        }

        public Builder(GetIpAddressesAddressArgs defaults) {
            $ = new GetIpAddressesAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param access Is address for utility or public network
         * 
         * @return builder
         * 
         */
        public Builder access(Output<String> access) {
            $.access = access;
            return this;
        }

        /**
         * @param access Is address for utility or public network
         * 
         * @return builder
         * 
         */
        public Builder access(String access) {
            return access(Output.of(access));
        }

        /**
         * @param address An UpCloud assigned IP Address
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address An UpCloud assigned IP Address
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param family IP address family
         * 
         * @return builder
         * 
         */
        public Builder family(Output<String> family) {
            $.family = family;
            return this;
        }

        /**
         * @param family IP address family
         * 
         * @return builder
         * 
         */
        public Builder family(String family) {
            return family(Output.of(family));
        }

        /**
         * @param floating Does the IP Address represents a floating IP Address
         * 
         * @return builder
         * 
         */
        public Builder floating(Output<Boolean> floating) {
            $.floating = floating;
            return this;
        }

        /**
         * @param floating Does the IP Address represents a floating IP Address
         * 
         * @return builder
         * 
         */
        public Builder floating(Boolean floating) {
            return floating(Output.of(floating));
        }

        /**
         * @param mac MAC address of server interface to assign address to
         * 
         * @return builder
         * 
         */
        public Builder mac(Output<String> mac) {
            $.mac = mac;
            return this;
        }

        /**
         * @param mac MAC address of server interface to assign address to
         * 
         * @return builder
         * 
         */
        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        /**
         * @param partOfPlan Is the address a part of a plan
         * 
         * @return builder
         * 
         */
        public Builder partOfPlan(Output<Boolean> partOfPlan) {
            $.partOfPlan = partOfPlan;
            return this;
        }

        /**
         * @param partOfPlan Is the address a part of a plan
         * 
         * @return builder
         * 
         */
        public Builder partOfPlan(Boolean partOfPlan) {
            return partOfPlan(Output.of(partOfPlan));
        }

        /**
         * @param ptrRecord A reverse DNS record entry
         * 
         * @return builder
         * 
         */
        public Builder ptrRecord(Output<String> ptrRecord) {
            $.ptrRecord = ptrRecord;
            return this;
        }

        /**
         * @param ptrRecord A reverse DNS record entry
         * 
         * @return builder
         * 
         */
        public Builder ptrRecord(String ptrRecord) {
            return ptrRecord(Output.of(ptrRecord));
        }

        /**
         * @param releasePolicy Release policy for the address
         * 
         * @return builder
         * 
         */
        public Builder releasePolicy(Output<String> releasePolicy) {
            $.releasePolicy = releasePolicy;
            return this;
        }

        /**
         * @param releasePolicy Release policy for the address
         * 
         * @return builder
         * 
         */
        public Builder releasePolicy(String releasePolicy) {
            return releasePolicy(Output.of(releasePolicy));
        }

        /**
         * @param server The unique identifier for a server
         * 
         * @return builder
         * 
         */
        public Builder server(Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server The unique identifier for a server
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        /**
         * @param zone Zone of address, required when assigning a detached floating IP address, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone of address, required when assigning a detached floating IP address, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public GetIpAddressesAddressArgs build() {
            if ($.access == null) {
                throw new MissingRequiredPropertyException("GetIpAddressesAddressArgs", "access");
            }
            if ($.address == null) {
                throw new MissingRequiredPropertyException("GetIpAddressesAddressArgs", "address");
            }
            if ($.family == null) {
                throw new MissingRequiredPropertyException("GetIpAddressesAddressArgs", "family");
            }
            if ($.floating == null) {
                throw new MissingRequiredPropertyException("GetIpAddressesAddressArgs", "floating");
            }
            if ($.mac == null) {
                throw new MissingRequiredPropertyException("GetIpAddressesAddressArgs", "mac");
            }
            if ($.partOfPlan == null) {
                throw new MissingRequiredPropertyException("GetIpAddressesAddressArgs", "partOfPlan");
            }
            if ($.ptrRecord == null) {
                throw new MissingRequiredPropertyException("GetIpAddressesAddressArgs", "ptrRecord");
            }
            if ($.releasePolicy == null) {
                throw new MissingRequiredPropertyException("GetIpAddressesAddressArgs", "releasePolicy");
            }
            if ($.server == null) {
                throw new MissingRequiredPropertyException("GetIpAddressesAddressArgs", "server");
            }
            if ($.zone == null) {
                throw new MissingRequiredPropertyException("GetIpAddressesAddressArgs", "zone");
            }
            return $;
        }
    }

}
