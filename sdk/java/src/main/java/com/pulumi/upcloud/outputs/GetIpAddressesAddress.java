// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetIpAddressesAddress {
    /**
     * @return Is address for utility or public network
     * 
     */
    private String access;
    /**
     * @return An UpCloud assigned IP Address
     * 
     */
    private String address;
    /**
     * @return IP address family
     * 
     */
    private String family;
    /**
     * @return Does the IP Address represents a floating IP Address
     * 
     */
    private Boolean floating;
    /**
     * @return MAC address of server interface to assign address to
     * 
     */
    private String mac;
    /**
     * @return Is the address a part of a plan
     * 
     */
    private Boolean partOfPlan;
    /**
     * @return A reverse DNS record entry
     * 
     */
    private String ptrRecord;
    /**
     * @return Release policy for the address
     * 
     */
    private String releasePolicy;
    /**
     * @return The unique identifier for a server
     * 
     */
    private String server;
    /**
     * @return Zone of address, required when assigning a detached floating IP address, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    private String zone;

    private GetIpAddressesAddress() {}
    /**
     * @return Is address for utility or public network
     * 
     */
    public String access() {
        return this.access;
    }
    /**
     * @return An UpCloud assigned IP Address
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return IP address family
     * 
     */
    public String family() {
        return this.family;
    }
    /**
     * @return Does the IP Address represents a floating IP Address
     * 
     */
    public Boolean floating() {
        return this.floating;
    }
    /**
     * @return MAC address of server interface to assign address to
     * 
     */
    public String mac() {
        return this.mac;
    }
    /**
     * @return Is the address a part of a plan
     * 
     */
    public Boolean partOfPlan() {
        return this.partOfPlan;
    }
    /**
     * @return A reverse DNS record entry
     * 
     */
    public String ptrRecord() {
        return this.ptrRecord;
    }
    /**
     * @return Release policy for the address
     * 
     */
    public String releasePolicy() {
        return this.releasePolicy;
    }
    /**
     * @return The unique identifier for a server
     * 
     */
    public String server() {
        return this.server;
    }
    /**
     * @return Zone of address, required when assigning a detached floating IP address, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIpAddressesAddress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String access;
        private String address;
        private String family;
        private Boolean floating;
        private String mac;
        private Boolean partOfPlan;
        private String ptrRecord;
        private String releasePolicy;
        private String server;
        private String zone;
        public Builder() {}
        public Builder(GetIpAddressesAddress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.address = defaults.address;
    	      this.family = defaults.family;
    	      this.floating = defaults.floating;
    	      this.mac = defaults.mac;
    	      this.partOfPlan = defaults.partOfPlan;
    	      this.ptrRecord = defaults.ptrRecord;
    	      this.releasePolicy = defaults.releasePolicy;
    	      this.server = defaults.server;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder access(String access) {
            if (access == null) {
              throw new MissingRequiredPropertyException("GetIpAddressesAddress", "access");
            }
            this.access = access;
            return this;
        }
        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetIpAddressesAddress", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder family(String family) {
            if (family == null) {
              throw new MissingRequiredPropertyException("GetIpAddressesAddress", "family");
            }
            this.family = family;
            return this;
        }
        @CustomType.Setter
        public Builder floating(Boolean floating) {
            if (floating == null) {
              throw new MissingRequiredPropertyException("GetIpAddressesAddress", "floating");
            }
            this.floating = floating;
            return this;
        }
        @CustomType.Setter
        public Builder mac(String mac) {
            if (mac == null) {
              throw new MissingRequiredPropertyException("GetIpAddressesAddress", "mac");
            }
            this.mac = mac;
            return this;
        }
        @CustomType.Setter
        public Builder partOfPlan(Boolean partOfPlan) {
            if (partOfPlan == null) {
              throw new MissingRequiredPropertyException("GetIpAddressesAddress", "partOfPlan");
            }
            this.partOfPlan = partOfPlan;
            return this;
        }
        @CustomType.Setter
        public Builder ptrRecord(String ptrRecord) {
            if (ptrRecord == null) {
              throw new MissingRequiredPropertyException("GetIpAddressesAddress", "ptrRecord");
            }
            this.ptrRecord = ptrRecord;
            return this;
        }
        @CustomType.Setter
        public Builder releasePolicy(String releasePolicy) {
            if (releasePolicy == null) {
              throw new MissingRequiredPropertyException("GetIpAddressesAddress", "releasePolicy");
            }
            this.releasePolicy = releasePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder server(String server) {
            if (server == null) {
              throw new MissingRequiredPropertyException("GetIpAddressesAddress", "server");
            }
            this.server = server;
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            if (zone == null) {
              throw new MissingRequiredPropertyException("GetIpAddressesAddress", "zone");
            }
            this.zone = zone;
            return this;
        }
        public GetIpAddressesAddress build() {
            final var _resultValue = new GetIpAddressesAddress();
            _resultValue.access = access;
            _resultValue.address = address;
            _resultValue.family = family;
            _resultValue.floating = floating;
            _resultValue.mac = mac;
            _resultValue.partOfPlan = partOfPlan;
            _resultValue.ptrRecord = ptrRecord;
            _resultValue.releasePolicy = releasePolicy;
            _resultValue.server = server;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
