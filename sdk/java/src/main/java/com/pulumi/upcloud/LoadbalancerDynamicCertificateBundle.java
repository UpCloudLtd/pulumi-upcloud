// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.LoadbalancerDynamicCertificateBundleArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.LoadbalancerDynamicCertificateBundleState;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * This resource represents dynamic certificate bundle
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.upcloud.LoadbalancerDynamicCertificateBundle;
 * import com.pulumi.upcloud.LoadbalancerDynamicCertificateBundleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var lbCbD1 = new LoadbalancerDynamicCertificateBundle("lbCbD1", LoadbalancerDynamicCertificateBundleArgs.builder()
 *             .name("lb-cb-d1-test")
 *             .hostnames(            
 *                 "example.com",
 *                 "app.example.net")
 *             .keyType("rsa")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="upcloud:index/loadbalancerDynamicCertificateBundle:LoadbalancerDynamicCertificateBundle")
public class LoadbalancerDynamicCertificateBundle extends com.pulumi.resources.CustomResource {
    /**
     * Certificate hostnames.
     * 
     */
    @Export(name="hostnames", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> hostnames;

    /**
     * @return Certificate hostnames.
     * 
     */
    public Output<List<String>> hostnames() {
        return this.hostnames;
    }
    /**
     * Private key type (`rsa` / `ecdsa`).
     * 
     */
    @Export(name="keyType", refs={String.class}, tree="[0]")
    private Output<String> keyType;

    /**
     * @return Private key type (`rsa` / `ecdsa`).
     * 
     */
    public Output<String> keyType() {
        return this.keyType;
    }
    /**
     * The name of the certificate bundle. Must be unique within customer account.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the certificate bundle. Must be unique within customer account.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The time after which a certificate is no longer valid.
     * 
     */
    @Export(name="notAfter", refs={String.class}, tree="[0]")
    private Output<String> notAfter;

    /**
     * @return The time after which a certificate is no longer valid.
     * 
     */
    public Output<String> notAfter() {
        return this.notAfter;
    }
    /**
     * The time on which a certificate becomes valid.
     * 
     */
    @Export(name="notBefore", refs={String.class}, tree="[0]")
    private Output<String> notBefore;

    /**
     * @return The time on which a certificate becomes valid.
     * 
     */
    public Output<String> notBefore() {
        return this.notBefore;
    }
    /**
     * The service operational state indicates the service&#39;s current operational, effective state. Managed by the system.
     * 
     */
    @Export(name="operationalState", refs={String.class}, tree="[0]")
    private Output<String> operationalState;

    /**
     * @return The service operational state indicates the service&#39;s current operational, effective state. Managed by the system.
     * 
     */
    public Output<String> operationalState() {
        return this.operationalState;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LoadbalancerDynamicCertificateBundle(java.lang.String name) {
        this(name, LoadbalancerDynamicCertificateBundleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LoadbalancerDynamicCertificateBundle(java.lang.String name, LoadbalancerDynamicCertificateBundleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LoadbalancerDynamicCertificateBundle(java.lang.String name, LoadbalancerDynamicCertificateBundleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/loadbalancerDynamicCertificateBundle:LoadbalancerDynamicCertificateBundle", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LoadbalancerDynamicCertificateBundle(java.lang.String name, Output<java.lang.String> id, @Nullable LoadbalancerDynamicCertificateBundleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/loadbalancerDynamicCertificateBundle:LoadbalancerDynamicCertificateBundle", name, state, makeResourceOptions(options, id), false);
    }

    private static LoadbalancerDynamicCertificateBundleArgs makeArgs(LoadbalancerDynamicCertificateBundleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LoadbalancerDynamicCertificateBundleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LoadbalancerDynamicCertificateBundle get(java.lang.String name, Output<java.lang.String> id, @Nullable LoadbalancerDynamicCertificateBundleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LoadbalancerDynamicCertificateBundle(name, id, state, options);
    }
}
