// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerResolverState extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerResolverState Empty = new LoadbalancerResolverState();

    /**
     * Time in seconds to cache invalid results.
     * 
     */
    @Import(name="cacheInvalid")
    private @Nullable Output<Integer> cacheInvalid;

    /**
     * @return Time in seconds to cache invalid results.
     * 
     */
    public Optional<Output<Integer>> cacheInvalid() {
        return Optional.ofNullable(this.cacheInvalid);
    }

    /**
     * Time in seconds to cache valid results.
     * 
     */
    @Import(name="cacheValid")
    private @Nullable Output<Integer> cacheValid;

    /**
     * @return Time in seconds to cache valid results.
     * 
     */
    public Optional<Output<Integer>> cacheValid() {
        return Optional.ofNullable(this.cacheValid);
    }

    /**
     * ID of the load balancer to which the resolver is connected.
     * 
     */
    @Import(name="loadbalancer")
    private @Nullable Output<String> loadbalancer;

    /**
     * @return ID of the load balancer to which the resolver is connected.
     * 
     */
    public Optional<Output<String>> loadbalancer() {
        return Optional.ofNullable(this.loadbalancer);
    }

    /**
     * The name of the resolver. Must be unique within the service.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the resolver. Must be unique within the service.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
     * optional, if missing then default 53 will be used.
     * 
     */
    @Import(name="nameservers")
    private @Nullable Output<List<String>> nameservers;

    /**
     * @return List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
     * optional, if missing then default 53 will be used.
     * 
     */
    public Optional<Output<List<String>>> nameservers() {
        return Optional.ofNullable(this.nameservers);
    }

    /**
     * Number of retries on failure.
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    /**
     * @return Number of retries on failure.
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * Timeout for the query in seconds.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return Timeout for the query in seconds.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Timeout for the query retries in seconds.
     * 
     */
    @Import(name="timeoutRetry")
    private @Nullable Output<Integer> timeoutRetry;

    /**
     * @return Timeout for the query retries in seconds.
     * 
     */
    public Optional<Output<Integer>> timeoutRetry() {
        return Optional.ofNullable(this.timeoutRetry);
    }

    private LoadbalancerResolverState() {}

    private LoadbalancerResolverState(LoadbalancerResolverState $) {
        this.cacheInvalid = $.cacheInvalid;
        this.cacheValid = $.cacheValid;
        this.loadbalancer = $.loadbalancer;
        this.name = $.name;
        this.nameservers = $.nameservers;
        this.retries = $.retries;
        this.timeout = $.timeout;
        this.timeoutRetry = $.timeoutRetry;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerResolverState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerResolverState $;

        public Builder() {
            $ = new LoadbalancerResolverState();
        }

        public Builder(LoadbalancerResolverState defaults) {
            $ = new LoadbalancerResolverState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheInvalid Time in seconds to cache invalid results.
         * 
         * @return builder
         * 
         */
        public Builder cacheInvalid(@Nullable Output<Integer> cacheInvalid) {
            $.cacheInvalid = cacheInvalid;
            return this;
        }

        /**
         * @param cacheInvalid Time in seconds to cache invalid results.
         * 
         * @return builder
         * 
         */
        public Builder cacheInvalid(Integer cacheInvalid) {
            return cacheInvalid(Output.of(cacheInvalid));
        }

        /**
         * @param cacheValid Time in seconds to cache valid results.
         * 
         * @return builder
         * 
         */
        public Builder cacheValid(@Nullable Output<Integer> cacheValid) {
            $.cacheValid = cacheValid;
            return this;
        }

        /**
         * @param cacheValid Time in seconds to cache valid results.
         * 
         * @return builder
         * 
         */
        public Builder cacheValid(Integer cacheValid) {
            return cacheValid(Output.of(cacheValid));
        }

        /**
         * @param loadbalancer ID of the load balancer to which the resolver is connected.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancer(@Nullable Output<String> loadbalancer) {
            $.loadbalancer = loadbalancer;
            return this;
        }

        /**
         * @param loadbalancer ID of the load balancer to which the resolver is connected.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancer(String loadbalancer) {
            return loadbalancer(Output.of(loadbalancer));
        }

        /**
         * @param name The name of the resolver. Must be unique within the service.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the resolver. Must be unique within the service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameservers List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
         * optional, if missing then default 53 will be used.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(@Nullable Output<List<String>> nameservers) {
            $.nameservers = nameservers;
            return this;
        }

        /**
         * @param nameservers List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
         * optional, if missing then default 53 will be used.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(List<String> nameservers) {
            return nameservers(Output.of(nameservers));
        }

        /**
         * @param nameservers List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is
         * optional, if missing then default 53 will be used.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(String... nameservers) {
            return nameservers(List.of(nameservers));
        }

        /**
         * @param retries Number of retries on failure.
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries Number of retries on failure.
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param timeout Timeout for the query in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Timeout for the query in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param timeoutRetry Timeout for the query retries in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutRetry(@Nullable Output<Integer> timeoutRetry) {
            $.timeoutRetry = timeoutRetry;
            return this;
        }

        /**
         * @param timeoutRetry Timeout for the query retries in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutRetry(Integer timeoutRetry) {
            return timeoutRetry(Output.of(timeoutRetry));
        }

        public LoadbalancerResolverState build() {
            return $;
        }
    }

}
