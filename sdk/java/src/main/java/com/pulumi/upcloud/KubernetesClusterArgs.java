// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesClusterArgs Empty = new KubernetesClusterArgs();

    /**
     * IP addresses or IP ranges in CIDR format which are allowed to access the cluster control plane. To allow access from any
     * source, use `[&#34;0.0.0.0/0&#34;]`. To deny access from all sources, use `[]`. Values set here do not restrict access to node
     * groups or exposed Kubernetes services.
     * 
     */
    @Import(name="controlPlaneIpFilters", required=true)
    private Output<List<String>> controlPlaneIpFilters;

    /**
     * @return IP addresses or IP ranges in CIDR format which are allowed to access the cluster control plane. To allow access from any
     * source, use `[&#34;0.0.0.0/0&#34;]`. To deny access from all sources, use `[]`. Values set here do not restrict access to node
     * groups or exposed Kubernetes services.
     * 
     */
    public Output<List<String>> controlPlaneIpFilters() {
        return this.controlPlaneIpFilters;
    }

    /**
     * User defined key-value pairs to classify the cluster.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the cluster.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Cluster name. Needs to be unique within the account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Cluster name. Needs to be unique within the account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network ID for the cluster to run in.
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return Network ID for the cluster to run in.
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * The pricing plan used for the cluster. You can list available plans with `upctl kubernetes plans`.
     * 
     */
    @Import(name="plan")
    private @Nullable Output<String> plan;

    /**
     * @return The pricing plan used for the cluster. You can list available plans with `upctl kubernetes plans`.
     * 
     */
    public Optional<Output<String>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * Enable private node groups. Private node groups requires a network that is routed through NAT gateway.
     * 
     */
    @Import(name="privateNodeGroups")
    private @Nullable Output<Boolean> privateNodeGroups;

    /**
     * @return Enable private node groups. Private node groups requires a network that is routed through NAT gateway.
     * 
     */
    public Optional<Output<Boolean>> privateNodeGroups() {
        return Optional.ofNullable(this.privateNodeGroups);
    }

    /**
     * Set default storage encryption strategy for all nodes in the cluster.
     * 
     */
    @Import(name="storageEncryption")
    private @Nullable Output<String> storageEncryption;

    /**
     * @return Set default storage encryption strategy for all nodes in the cluster.
     * 
     */
    public Optional<Output<String>> storageEncryption() {
        return Optional.ofNullable(this.storageEncryption);
    }

    /**
     * Kubernetes version ID, e.g. `1.30`. You can list available version IDs with `upctl kubernetes versions`.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Kubernetes version ID, e.g. `1.30`. You can list available version IDs with `upctl kubernetes versions`.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * Zone in which the Kubernetes cluster will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone
     * list`.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return Zone in which the Kubernetes cluster will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone
     * list`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private KubernetesClusterArgs() {}

    private KubernetesClusterArgs(KubernetesClusterArgs $) {
        this.controlPlaneIpFilters = $.controlPlaneIpFilters;
        this.labels = $.labels;
        this.name = $.name;
        this.network = $.network;
        this.plan = $.plan;
        this.privateNodeGroups = $.privateNodeGroups;
        this.storageEncryption = $.storageEncryption;
        this.version = $.version;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesClusterArgs $;

        public Builder() {
            $ = new KubernetesClusterArgs();
        }

        public Builder(KubernetesClusterArgs defaults) {
            $ = new KubernetesClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param controlPlaneIpFilters IP addresses or IP ranges in CIDR format which are allowed to access the cluster control plane. To allow access from any
         * source, use `[&#34;0.0.0.0/0&#34;]`. To deny access from all sources, use `[]`. Values set here do not restrict access to node
         * groups or exposed Kubernetes services.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneIpFilters(Output<List<String>> controlPlaneIpFilters) {
            $.controlPlaneIpFilters = controlPlaneIpFilters;
            return this;
        }

        /**
         * @param controlPlaneIpFilters IP addresses or IP ranges in CIDR format which are allowed to access the cluster control plane. To allow access from any
         * source, use `[&#34;0.0.0.0/0&#34;]`. To deny access from all sources, use `[]`. Values set here do not restrict access to node
         * groups or exposed Kubernetes services.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneIpFilters(List<String> controlPlaneIpFilters) {
            return controlPlaneIpFilters(Output.of(controlPlaneIpFilters));
        }

        /**
         * @param controlPlaneIpFilters IP addresses or IP ranges in CIDR format which are allowed to access the cluster control plane. To allow access from any
         * source, use `[&#34;0.0.0.0/0&#34;]`. To deny access from all sources, use `[]`. Values set here do not restrict access to node
         * groups or exposed Kubernetes services.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneIpFilters(String... controlPlaneIpFilters) {
            return controlPlaneIpFilters(List.of(controlPlaneIpFilters));
        }

        /**
         * @param labels User defined key-value pairs to classify the cluster.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User defined key-value pairs to classify the cluster.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Cluster name. Needs to be unique within the account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Cluster name. Needs to be unique within the account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network Network ID for the cluster to run in.
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Network ID for the cluster to run in.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param plan The pricing plan used for the cluster. You can list available plans with `upctl kubernetes plans`.
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan The pricing plan used for the cluster. You can list available plans with `upctl kubernetes plans`.
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param privateNodeGroups Enable private node groups. Private node groups requires a network that is routed through NAT gateway.
         * 
         * @return builder
         * 
         */
        public Builder privateNodeGroups(@Nullable Output<Boolean> privateNodeGroups) {
            $.privateNodeGroups = privateNodeGroups;
            return this;
        }

        /**
         * @param privateNodeGroups Enable private node groups. Private node groups requires a network that is routed through NAT gateway.
         * 
         * @return builder
         * 
         */
        public Builder privateNodeGroups(Boolean privateNodeGroups) {
            return privateNodeGroups(Output.of(privateNodeGroups));
        }

        /**
         * @param storageEncryption Set default storage encryption strategy for all nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageEncryption(@Nullable Output<String> storageEncryption) {
            $.storageEncryption = storageEncryption;
            return this;
        }

        /**
         * @param storageEncryption Set default storage encryption strategy for all nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageEncryption(String storageEncryption) {
            return storageEncryption(Output.of(storageEncryption));
        }

        /**
         * @param version Kubernetes version ID, e.g. `1.30`. You can list available version IDs with `upctl kubernetes versions`.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Kubernetes version ID, e.g. `1.30`. You can list available version IDs with `upctl kubernetes versions`.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param zone Zone in which the Kubernetes cluster will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone
         * list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone in which the Kubernetes cluster will be hosted, e.g. `de-fra1`. You can list available zones with `upctl zone
         * list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public KubernetesClusterArgs build() {
            if ($.controlPlaneIpFilters == null) {
                throw new MissingRequiredPropertyException("KubernetesClusterArgs", "controlPlaneIpFilters");
            }
            if ($.network == null) {
                throw new MissingRequiredPropertyException("KubernetesClusterArgs", "network");
            }
            if ($.zone == null) {
                throw new MissingRequiredPropertyException("KubernetesClusterArgs", "zone");
            }
            return $;
        }
    }

}
