// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.LoadbalancerNodeNetworkIpAddressArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerNodeNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerNodeNetworkArgs Empty = new LoadbalancerNodeNetworkArgs();

    /**
     * IP addresses attached to the network
     * 
     */
    @Import(name="ipAddresses")
    private @Nullable Output<List<LoadbalancerNodeNetworkIpAddressArgs>> ipAddresses;

    /**
     * @return IP addresses attached to the network
     * 
     */
    public Optional<Output<List<LoadbalancerNodeNetworkIpAddressArgs>>> ipAddresses() {
        return Optional.ofNullable(this.ipAddresses);
    }

    /**
     * The name of the network
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the network
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of the network
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the network
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private LoadbalancerNodeNetworkArgs() {}

    private LoadbalancerNodeNetworkArgs(LoadbalancerNodeNetworkArgs $) {
        this.ipAddresses = $.ipAddresses;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerNodeNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerNodeNetworkArgs $;

        public Builder() {
            $ = new LoadbalancerNodeNetworkArgs();
        }

        public Builder(LoadbalancerNodeNetworkArgs defaults) {
            $ = new LoadbalancerNodeNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipAddresses IP addresses attached to the network
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(@Nullable Output<List<LoadbalancerNodeNetworkIpAddressArgs>> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        /**
         * @param ipAddresses IP addresses attached to the network
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(List<LoadbalancerNodeNetworkIpAddressArgs> ipAddresses) {
            return ipAddresses(Output.of(ipAddresses));
        }

        /**
         * @param ipAddresses IP addresses attached to the network
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(LoadbalancerNodeNetworkIpAddressArgs... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }

        /**
         * @param name The name of the network
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the network
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The type of the network
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the network
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LoadbalancerNodeNetworkArgs build() {
            return $;
        }
    }

}
