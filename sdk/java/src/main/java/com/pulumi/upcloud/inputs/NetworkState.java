// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkState Empty = new NetworkState();

    /**
     * IP subnet within the network. Network must have exactly one IP subnet.
     * 
     */
    @Import(name="ipNetwork")
    private @Nullable Output<NetworkIpNetworkArgs> ipNetwork;

    /**
     * @return IP subnet within the network. Network must have exactly one IP subnet.
     * 
     */
    public Optional<Output<NetworkIpNetworkArgs>> ipNetwork() {
        return Optional.ofNullable(this.ipNetwork);
    }

    /**
     * User defined key-value pairs to classify the network.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the network.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the network.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the network.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * UUID of a router to attach to this network.
     * 
     */
    @Import(name="router")
    private @Nullable Output<String> router;

    /**
     * @return UUID of a router to attach to this network.
     * 
     */
    public Optional<Output<String>> router() {
        return Optional.ofNullable(this.router);
    }

    /**
     * The network type
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The network type
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private NetworkState() {}

    private NetworkState(NetworkState $) {
        this.ipNetwork = $.ipNetwork;
        this.labels = $.labels;
        this.name = $.name;
        this.router = $.router;
        this.type = $.type;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkState $;

        public Builder() {
            $ = new NetworkState();
        }

        public Builder(NetworkState defaults) {
            $ = new NetworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipNetwork IP subnet within the network. Network must have exactly one IP subnet.
         * 
         * @return builder
         * 
         */
        public Builder ipNetwork(@Nullable Output<NetworkIpNetworkArgs> ipNetwork) {
            $.ipNetwork = ipNetwork;
            return this;
        }

        /**
         * @param ipNetwork IP subnet within the network. Network must have exactly one IP subnet.
         * 
         * @return builder
         * 
         */
        public Builder ipNetwork(NetworkIpNetworkArgs ipNetwork) {
            return ipNetwork(Output.of(ipNetwork));
        }

        /**
         * @param labels User defined key-value pairs to classify the network.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User defined key-value pairs to classify the network.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Name of the network.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the network.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param router UUID of a router to attach to this network.
         * 
         * @return builder
         * 
         */
        public Builder router(@Nullable Output<String> router) {
            $.router = router;
            return this;
        }

        /**
         * @param router UUID of a router to attach to this network.
         * 
         * @return builder
         * 
         */
        public Builder router(String router) {
            return router(Output.of(router));
        }

        /**
         * @param type The network type
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The network type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zone The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone the network is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public NetworkState build() {
            return $;
        }
    }

}
