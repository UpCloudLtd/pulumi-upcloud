// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedObjectStorageUserAccessKeyState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedObjectStorageUserAccessKeyState Empty = new ManagedObjectStorageUserAccessKeyState();

    /**
     * Access key id.
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    /**
     * @return Access key id.
     * 
     */
    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * Creation time.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Creation time.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Last used.
     * 
     */
    @Import(name="lastUsedAt")
    private @Nullable Output<String> lastUsedAt;

    /**
     * @return Last used.
     * 
     */
    public Optional<Output<String>> lastUsedAt() {
        return Optional.ofNullable(this.lastUsedAt);
    }

    /**
     * Secret access key.
     * 
     */
    @Import(name="secretAccessKey")
    private @Nullable Output<String> secretAccessKey;

    /**
     * @return Secret access key.
     * 
     */
    public Optional<Output<String>> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }

    /**
     * Managed Object Storage service UUID.
     * 
     */
    @Import(name="serviceUuid")
    private @Nullable Output<String> serviceUuid;

    /**
     * @return Managed Object Storage service UUID.
     * 
     */
    public Optional<Output<String>> serviceUuid() {
        return Optional.ofNullable(this.serviceUuid);
    }

    /**
     * Status of the key. Valid values: `Active`|`Inactive`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the key. Valid values: `Active`|`Inactive`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Username.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ManagedObjectStorageUserAccessKeyState() {}

    private ManagedObjectStorageUserAccessKeyState(ManagedObjectStorageUserAccessKeyState $) {
        this.accessKeyId = $.accessKeyId;
        this.createdAt = $.createdAt;
        this.lastUsedAt = $.lastUsedAt;
        this.secretAccessKey = $.secretAccessKey;
        this.serviceUuid = $.serviceUuid;
        this.status = $.status;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedObjectStorageUserAccessKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedObjectStorageUserAccessKeyState $;

        public Builder() {
            $ = new ManagedObjectStorageUserAccessKeyState();
        }

        public Builder(ManagedObjectStorageUserAccessKeyState defaults) {
            $ = new ManagedObjectStorageUserAccessKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId Access key id.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId Access key id.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param createdAt Creation time.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Creation time.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param lastUsedAt Last used.
         * 
         * @return builder
         * 
         */
        public Builder lastUsedAt(@Nullable Output<String> lastUsedAt) {
            $.lastUsedAt = lastUsedAt;
            return this;
        }

        /**
         * @param lastUsedAt Last used.
         * 
         * @return builder
         * 
         */
        public Builder lastUsedAt(String lastUsedAt) {
            return lastUsedAt(Output.of(lastUsedAt));
        }

        /**
         * @param secretAccessKey Secret access key.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(@Nullable Output<String> secretAccessKey) {
            $.secretAccessKey = secretAccessKey;
            return this;
        }

        /**
         * @param secretAccessKey Secret access key.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(String secretAccessKey) {
            return secretAccessKey(Output.of(secretAccessKey));
        }

        /**
         * @param serviceUuid Managed Object Storage service UUID.
         * 
         * @return builder
         * 
         */
        public Builder serviceUuid(@Nullable Output<String> serviceUuid) {
            $.serviceUuid = serviceUuid;
            return this;
        }

        /**
         * @param serviceUuid Managed Object Storage service UUID.
         * 
         * @return builder
         * 
         */
        public Builder serviceUuid(String serviceUuid) {
            return serviceUuid(Output.of(serviceUuid));
        }

        /**
         * @param status Status of the key. Valid values: `Active`|`Inactive`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the key. Valid values: `Active`|`Inactive`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param username Username.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ManagedObjectStorageUserAccessKeyState build() {
            return $;
        }
    }

}
