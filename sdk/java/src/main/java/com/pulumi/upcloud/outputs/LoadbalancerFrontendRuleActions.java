// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.upcloud.outputs.LoadbalancerFrontendRuleActionsHttpRedirect;
import com.pulumi.upcloud.outputs.LoadbalancerFrontendRuleActionsHttpReturn;
import com.pulumi.upcloud.outputs.LoadbalancerFrontendRuleActionsSetForwardedHeader;
import com.pulumi.upcloud.outputs.LoadbalancerFrontendRuleActionsSetRequestHeader;
import com.pulumi.upcloud.outputs.LoadbalancerFrontendRuleActionsSetResponseHeader;
import com.pulumi.upcloud.outputs.LoadbalancerFrontendRuleActionsTcpReject;
import com.pulumi.upcloud.outputs.LoadbalancerFrontendRuleActionsUseBackend;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class LoadbalancerFrontendRuleActions {
    /**
     * @return Redirects HTTP requests to specified location or URL scheme. Only either location or scheme can be defined at a time.
     * 
     */
    private @Nullable List<LoadbalancerFrontendRuleActionsHttpRedirect> httpRedirects;
    /**
     * @return Returns HTTP response with specified HTTP status.
     * 
     */
    private @Nullable List<LoadbalancerFrontendRuleActionsHttpReturn> httpReturns;
    /**
     * @return Adds &#39;X-Forwarded-For / -Proto / -Port&#39; headers in your forwarded requests
     * 
     */
    private @Nullable List<LoadbalancerFrontendRuleActionsSetForwardedHeader> setForwardedHeaders;
    /**
     * @return Set request header
     * 
     */
    private @Nullable List<LoadbalancerFrontendRuleActionsSetRequestHeader> setRequestHeaders;
    /**
     * @return Set response header
     * 
     */
    private @Nullable List<LoadbalancerFrontendRuleActionsSetResponseHeader> setResponseHeaders;
    /**
     * @return Terminates a connection.
     * 
     */
    private @Nullable List<LoadbalancerFrontendRuleActionsTcpReject> tcpRejects;
    /**
     * @return Routes traffic to specified `backend`.
     * 
     */
    private @Nullable List<LoadbalancerFrontendRuleActionsUseBackend> useBackends;

    private LoadbalancerFrontendRuleActions() {}
    /**
     * @return Redirects HTTP requests to specified location or URL scheme. Only either location or scheme can be defined at a time.
     * 
     */
    public List<LoadbalancerFrontendRuleActionsHttpRedirect> httpRedirects() {
        return this.httpRedirects == null ? List.of() : this.httpRedirects;
    }
    /**
     * @return Returns HTTP response with specified HTTP status.
     * 
     */
    public List<LoadbalancerFrontendRuleActionsHttpReturn> httpReturns() {
        return this.httpReturns == null ? List.of() : this.httpReturns;
    }
    /**
     * @return Adds &#39;X-Forwarded-For / -Proto / -Port&#39; headers in your forwarded requests
     * 
     */
    public List<LoadbalancerFrontendRuleActionsSetForwardedHeader> setForwardedHeaders() {
        return this.setForwardedHeaders == null ? List.of() : this.setForwardedHeaders;
    }
    /**
     * @return Set request header
     * 
     */
    public List<LoadbalancerFrontendRuleActionsSetRequestHeader> setRequestHeaders() {
        return this.setRequestHeaders == null ? List.of() : this.setRequestHeaders;
    }
    /**
     * @return Set response header
     * 
     */
    public List<LoadbalancerFrontendRuleActionsSetResponseHeader> setResponseHeaders() {
        return this.setResponseHeaders == null ? List.of() : this.setResponseHeaders;
    }
    /**
     * @return Terminates a connection.
     * 
     */
    public List<LoadbalancerFrontendRuleActionsTcpReject> tcpRejects() {
        return this.tcpRejects == null ? List.of() : this.tcpRejects;
    }
    /**
     * @return Routes traffic to specified `backend`.
     * 
     */
    public List<LoadbalancerFrontendRuleActionsUseBackend> useBackends() {
        return this.useBackends == null ? List.of() : this.useBackends;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadbalancerFrontendRuleActions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<LoadbalancerFrontendRuleActionsHttpRedirect> httpRedirects;
        private @Nullable List<LoadbalancerFrontendRuleActionsHttpReturn> httpReturns;
        private @Nullable List<LoadbalancerFrontendRuleActionsSetForwardedHeader> setForwardedHeaders;
        private @Nullable List<LoadbalancerFrontendRuleActionsSetRequestHeader> setRequestHeaders;
        private @Nullable List<LoadbalancerFrontendRuleActionsSetResponseHeader> setResponseHeaders;
        private @Nullable List<LoadbalancerFrontendRuleActionsTcpReject> tcpRejects;
        private @Nullable List<LoadbalancerFrontendRuleActionsUseBackend> useBackends;
        public Builder() {}
        public Builder(LoadbalancerFrontendRuleActions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpRedirects = defaults.httpRedirects;
    	      this.httpReturns = defaults.httpReturns;
    	      this.setForwardedHeaders = defaults.setForwardedHeaders;
    	      this.setRequestHeaders = defaults.setRequestHeaders;
    	      this.setResponseHeaders = defaults.setResponseHeaders;
    	      this.tcpRejects = defaults.tcpRejects;
    	      this.useBackends = defaults.useBackends;
        }

        @CustomType.Setter
        public Builder httpRedirects(@Nullable List<LoadbalancerFrontendRuleActionsHttpRedirect> httpRedirects) {

            this.httpRedirects = httpRedirects;
            return this;
        }
        public Builder httpRedirects(LoadbalancerFrontendRuleActionsHttpRedirect... httpRedirects) {
            return httpRedirects(List.of(httpRedirects));
        }
        @CustomType.Setter
        public Builder httpReturns(@Nullable List<LoadbalancerFrontendRuleActionsHttpReturn> httpReturns) {

            this.httpReturns = httpReturns;
            return this;
        }
        public Builder httpReturns(LoadbalancerFrontendRuleActionsHttpReturn... httpReturns) {
            return httpReturns(List.of(httpReturns));
        }
        @CustomType.Setter
        public Builder setForwardedHeaders(@Nullable List<LoadbalancerFrontendRuleActionsSetForwardedHeader> setForwardedHeaders) {

            this.setForwardedHeaders = setForwardedHeaders;
            return this;
        }
        public Builder setForwardedHeaders(LoadbalancerFrontendRuleActionsSetForwardedHeader... setForwardedHeaders) {
            return setForwardedHeaders(List.of(setForwardedHeaders));
        }
        @CustomType.Setter
        public Builder setRequestHeaders(@Nullable List<LoadbalancerFrontendRuleActionsSetRequestHeader> setRequestHeaders) {

            this.setRequestHeaders = setRequestHeaders;
            return this;
        }
        public Builder setRequestHeaders(LoadbalancerFrontendRuleActionsSetRequestHeader... setRequestHeaders) {
            return setRequestHeaders(List.of(setRequestHeaders));
        }
        @CustomType.Setter
        public Builder setResponseHeaders(@Nullable List<LoadbalancerFrontendRuleActionsSetResponseHeader> setResponseHeaders) {

            this.setResponseHeaders = setResponseHeaders;
            return this;
        }
        public Builder setResponseHeaders(LoadbalancerFrontendRuleActionsSetResponseHeader... setResponseHeaders) {
            return setResponseHeaders(List.of(setResponseHeaders));
        }
        @CustomType.Setter
        public Builder tcpRejects(@Nullable List<LoadbalancerFrontendRuleActionsTcpReject> tcpRejects) {

            this.tcpRejects = tcpRejects;
            return this;
        }
        public Builder tcpRejects(LoadbalancerFrontendRuleActionsTcpReject... tcpRejects) {
            return tcpRejects(List.of(tcpRejects));
        }
        @CustomType.Setter
        public Builder useBackends(@Nullable List<LoadbalancerFrontendRuleActionsUseBackend> useBackends) {

            this.useBackends = useBackends;
            return this;
        }
        public Builder useBackends(LoadbalancerFrontendRuleActionsUseBackend... useBackends) {
            return useBackends(List.of(useBackends));
        }
        public LoadbalancerFrontendRuleActions build() {
            final var _resultValue = new LoadbalancerFrontendRuleActions();
            _resultValue.httpRedirects = httpRedirects;
            _resultValue.httpReturns = httpReturns;
            _resultValue.setForwardedHeaders = setForwardedHeaders;
            _resultValue.setRequestHeaders = setRequestHeaders;
            _resultValue.setResponseHeaders = setResponseHeaders;
            _resultValue.tcpRejects = tcpRejects;
            _resultValue.useBackends = useBackends;
            return _resultValue;
        }
    }
}
