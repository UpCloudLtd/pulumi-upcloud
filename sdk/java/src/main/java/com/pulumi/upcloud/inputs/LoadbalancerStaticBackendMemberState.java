// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerStaticBackendMemberState extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerStaticBackendMemberState Empty = new LoadbalancerStaticBackendMemberState();

    /**
     * ID of the load balancer backend to which the member is connected.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return ID of the load balancer backend to which the member is connected.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * Indicates if the member is enabled. Disabled members are excluded from load balancing.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates if the member is enabled. Disabled members are excluded from load balancing.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Optional fallback IP address in case of failure on DNS resolving.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return Optional fallback IP address in case of failure on DNS resolving.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Maximum number of sessions before queueing.
     * 
     */
    @Import(name="maxSessions")
    private @Nullable Output<Integer> maxSessions;

    /**
     * @return Maximum number of sessions before queueing.
     * 
     */
    public Optional<Output<Integer>> maxSessions() {
        return Optional.ofNullable(this.maxSessions);
    }

    /**
     * The name of the member. Must be unique within within the load balancer backend.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the member. Must be unique within within the load balancer backend.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Server port. Port is optional and can be specified in DNS SRV record.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Server port. Port is optional and can be specified in DNS SRV record.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Weight of the member. The higher the weight, the more traffic the member receives.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return Weight of the member. The higher the weight, the more traffic the member receives.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private LoadbalancerStaticBackendMemberState() {}

    private LoadbalancerStaticBackendMemberState(LoadbalancerStaticBackendMemberState $) {
        this.backend = $.backend;
        this.enabled = $.enabled;
        this.ip = $.ip;
        this.maxSessions = $.maxSessions;
        this.name = $.name;
        this.port = $.port;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerStaticBackendMemberState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerStaticBackendMemberState $;

        public Builder() {
            $ = new LoadbalancerStaticBackendMemberState();
        }

        public Builder(LoadbalancerStaticBackendMemberState defaults) {
            $ = new LoadbalancerStaticBackendMemberState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend ID of the load balancer backend to which the member is connected.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend ID of the load balancer backend to which the member is connected.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param enabled Indicates if the member is enabled. Disabled members are excluded from load balancing.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates if the member is enabled. Disabled members are excluded from load balancing.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param ip Optional fallback IP address in case of failure on DNS resolving.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip Optional fallback IP address in case of failure on DNS resolving.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param maxSessions Maximum number of sessions before queueing.
         * 
         * @return builder
         * 
         */
        public Builder maxSessions(@Nullable Output<Integer> maxSessions) {
            $.maxSessions = maxSessions;
            return this;
        }

        /**
         * @param maxSessions Maximum number of sessions before queueing.
         * 
         * @return builder
         * 
         */
        public Builder maxSessions(Integer maxSessions) {
            return maxSessions(Output.of(maxSessions));
        }

        /**
         * @param name The name of the member. Must be unique within within the load balancer backend.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the member. Must be unique within within the load balancer backend.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port Server port. Port is optional and can be specified in DNS SRV record.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Server port. Port is optional and can be specified in DNS SRV record.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param weight Weight of the member. The higher the weight, the more traffic the member receives.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight Weight of the member. The higher the weight, the more traffic the member receives.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public LoadbalancerStaticBackendMemberState build() {
            return $;
        }
    }

}
