// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerManualCertificateBundleArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerManualCertificateBundleArgs Empty = new LoadbalancerManualCertificateBundleArgs();

    /**
     * Certificate as base64 encoded string. Must be in PEM format.
     * 
     */
    @Import(name="certificate", required=true)
    private Output<String> certificate;

    /**
     * @return Certificate as base64 encoded string. Must be in PEM format.
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }

    /**
     * Intermediate certificates as base64 encoded string. Must be in PEM format.
     * 
     */
    @Import(name="intermediates")
    private @Nullable Output<String> intermediates;

    /**
     * @return Intermediate certificates as base64 encoded string. Must be in PEM format.
     * 
     */
    public Optional<Output<String>> intermediates() {
        return Optional.ofNullable(this.intermediates);
    }

    /**
     * The name of the certificate bundle. Must be unique within customer account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the certificate bundle. Must be unique within customer account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Private key as base64 encoded string. Must be in PEM format.
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    /**
     * @return Private key as base64 encoded string. Must be in PEM format.
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }

    private LoadbalancerManualCertificateBundleArgs() {}

    private LoadbalancerManualCertificateBundleArgs(LoadbalancerManualCertificateBundleArgs $) {
        this.certificate = $.certificate;
        this.intermediates = $.intermediates;
        this.name = $.name;
        this.privateKey = $.privateKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerManualCertificateBundleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerManualCertificateBundleArgs $;

        public Builder() {
            $ = new LoadbalancerManualCertificateBundleArgs();
        }

        public Builder(LoadbalancerManualCertificateBundleArgs defaults) {
            $ = new LoadbalancerManualCertificateBundleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param intermediates Intermediate certificates as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder intermediates(@Nullable Output<String> intermediates) {
            $.intermediates = intermediates;
            return this;
        }

        /**
         * @param intermediates Intermediate certificates as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder intermediates(String intermediates) {
            return intermediates(Output.of(intermediates));
        }

        /**
         * @param name The name of the certificate bundle. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the certificate bundle. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateKey Private key as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Private key as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        public LoadbalancerManualCertificateBundleArgs build() {
            if ($.certificate == null) {
                throw new MissingRequiredPropertyException("LoadbalancerManualCertificateBundleArgs", "certificate");
            }
            if ($.privateKey == null) {
                throw new MissingRequiredPropertyException("LoadbalancerManualCertificateBundleArgs", "privateKey");
            }
            return $;
        }
    }

}
