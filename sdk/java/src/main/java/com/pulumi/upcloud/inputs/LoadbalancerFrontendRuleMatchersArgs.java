// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersBodySizeArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersBodySizeRangeArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersCookieArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersHeaderArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersHostArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersHttpMethodArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersHttpStatusArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersHttpStatusRangeArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersNumMembersUpArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersPathArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersRequestHeaderArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersResponseHeaderArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersSrcIpArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersSrcPortArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersSrcPortRangeArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersUrlArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersUrlParamArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersUrlQueryArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerFrontendRuleMatchersArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerFrontendRuleMatchersArgs Empty = new LoadbalancerFrontendRuleMatchersArgs();

    /**
     * Matches by range of HTTP request body sizes.
     * 
     */
    @Import(name="bodySizeRanges")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersBodySizeRangeArgs>> bodySizeRanges;

    /**
     * @return Matches by range of HTTP request body sizes.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersBodySizeRangeArgs>>> bodySizeRanges() {
        return Optional.ofNullable(this.bodySizeRanges);
    }

    /**
     * Matches by HTTP request body size.
     * 
     */
    @Import(name="bodySizes")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersBodySizeArgs>> bodySizes;

    /**
     * @return Matches by HTTP request body size.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersBodySizeArgs>>> bodySizes() {
        return Optional.ofNullable(this.bodySizes);
    }

    /**
     * Matches by HTTP cookie value. Cookie name must be provided.
     * 
     */
    @Import(name="cookies")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersCookieArgs>> cookies;

    /**
     * @return Matches by HTTP cookie value. Cookie name must be provided.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersCookieArgs>>> cookies() {
        return Optional.ofNullable(this.cookies);
    }

    /**
     * Matches by HTTP header value. Header name must be provided.
     * 
     * @deprecated
     * Use `request_header` instead.
     * 
     */
    @Deprecated /* Use `request_header` instead. */
    @Import(name="headers")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersHeaderArgs>> headers;

    /**
     * @return Matches by HTTP header value. Header name must be provided.
     * 
     * @deprecated
     * Use `request_header` instead.
     * 
     */
    @Deprecated /* Use `request_header` instead. */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Matches by hostname. Header extracted from HTTP Headers or from TLS certificate in case of secured connection.
     * 
     */
    @Import(name="hosts")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersHostArgs>> hosts;

    /**
     * @return Matches by hostname. Header extracted from HTTP Headers or from TLS certificate in case of secured connection.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersHostArgs>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    /**
     * Matches by HTTP method.
     * 
     */
    @Import(name="httpMethods")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersHttpMethodArgs>> httpMethods;

    /**
     * @return Matches by HTTP method.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersHttpMethodArgs>>> httpMethods() {
        return Optional.ofNullable(this.httpMethods);
    }

    /**
     * Matches by range of HTTP statuses.
     * 
     */
    @Import(name="httpStatusRanges")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersHttpStatusRangeArgs>> httpStatusRanges;

    /**
     * @return Matches by range of HTTP statuses.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersHttpStatusRangeArgs>>> httpStatusRanges() {
        return Optional.ofNullable(this.httpStatusRanges);
    }

    /**
     * Matches by HTTP status.
     * 
     */
    @Import(name="httpStatuses")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersHttpStatusArgs>> httpStatuses;

    /**
     * @return Matches by HTTP status.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersHttpStatusArgs>>> httpStatuses() {
        return Optional.ofNullable(this.httpStatuses);
    }

    /**
     * Matches by number of healthy backend members.
     * 
     */
    @Import(name="numMembersUps")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersNumMembersUpArgs>> numMembersUps;

    /**
     * @return Matches by number of healthy backend members.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersNumMembersUpArgs>>> numMembersUps() {
        return Optional.ofNullable(this.numMembersUps);
    }

    /**
     * Matches by URL path.
     * 
     */
    @Import(name="paths")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersPathArgs>> paths;

    /**
     * @return Matches by URL path.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersPathArgs>>> paths() {
        return Optional.ofNullable(this.paths);
    }

    /**
     * Matches by HTTP request header value. Header name must be provided.
     * 
     */
    @Import(name="requestHeaders")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersRequestHeaderArgs>> requestHeaders;

    /**
     * @return Matches by HTTP request header value. Header name must be provided.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersRequestHeaderArgs>>> requestHeaders() {
        return Optional.ofNullable(this.requestHeaders);
    }

    /**
     * Matches by HTTP response header value. Header name must be provided.
     * 
     */
    @Import(name="responseHeaders")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersResponseHeaderArgs>> responseHeaders;

    /**
     * @return Matches by HTTP response header value. Header name must be provided.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersResponseHeaderArgs>>> responseHeaders() {
        return Optional.ofNullable(this.responseHeaders);
    }

    /**
     * Matches by source IP address.
     * 
     */
    @Import(name="srcIps")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersSrcIpArgs>> srcIps;

    /**
     * @return Matches by source IP address.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersSrcIpArgs>>> srcIps() {
        return Optional.ofNullable(this.srcIps);
    }

    /**
     * Matches by range of source port numbers.
     * 
     */
    @Import(name="srcPortRanges")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersSrcPortRangeArgs>> srcPortRanges;

    /**
     * @return Matches by range of source port numbers.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersSrcPortRangeArgs>>> srcPortRanges() {
        return Optional.ofNullable(this.srcPortRanges);
    }

    /**
     * Matches by source port number.
     * 
     */
    @Import(name="srcPorts")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersSrcPortArgs>> srcPorts;

    /**
     * @return Matches by source port number.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersSrcPortArgs>>> srcPorts() {
        return Optional.ofNullable(this.srcPorts);
    }

    /**
     * Matches by URL query parameter value. Query parameter name must be provided
     * 
     */
    @Import(name="urlParams")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersUrlParamArgs>> urlParams;

    /**
     * @return Matches by URL query parameter value. Query parameter name must be provided
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersUrlParamArgs>>> urlParams() {
        return Optional.ofNullable(this.urlParams);
    }

    /**
     * Matches by URL query string.
     * 
     */
    @Import(name="urlQueries")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersUrlQueryArgs>> urlQueries;

    /**
     * @return Matches by URL query string.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersUrlQueryArgs>>> urlQueries() {
        return Optional.ofNullable(this.urlQueries);
    }

    /**
     * Matches by URL without schema, e.g. `example.com/dashboard`.
     * 
     */
    @Import(name="urls")
    private @Nullable Output<List<LoadbalancerFrontendRuleMatchersUrlArgs>> urls;

    /**
     * @return Matches by URL without schema, e.g. `example.com/dashboard`.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendRuleMatchersUrlArgs>>> urls() {
        return Optional.ofNullable(this.urls);
    }

    private LoadbalancerFrontendRuleMatchersArgs() {}

    private LoadbalancerFrontendRuleMatchersArgs(LoadbalancerFrontendRuleMatchersArgs $) {
        this.bodySizeRanges = $.bodySizeRanges;
        this.bodySizes = $.bodySizes;
        this.cookies = $.cookies;
        this.headers = $.headers;
        this.hosts = $.hosts;
        this.httpMethods = $.httpMethods;
        this.httpStatusRanges = $.httpStatusRanges;
        this.httpStatuses = $.httpStatuses;
        this.numMembersUps = $.numMembersUps;
        this.paths = $.paths;
        this.requestHeaders = $.requestHeaders;
        this.responseHeaders = $.responseHeaders;
        this.srcIps = $.srcIps;
        this.srcPortRanges = $.srcPortRanges;
        this.srcPorts = $.srcPorts;
        this.urlParams = $.urlParams;
        this.urlQueries = $.urlQueries;
        this.urls = $.urls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerFrontendRuleMatchersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerFrontendRuleMatchersArgs $;

        public Builder() {
            $ = new LoadbalancerFrontendRuleMatchersArgs();
        }

        public Builder(LoadbalancerFrontendRuleMatchersArgs defaults) {
            $ = new LoadbalancerFrontendRuleMatchersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bodySizeRanges Matches by range of HTTP request body sizes.
         * 
         * @return builder
         * 
         */
        public Builder bodySizeRanges(@Nullable Output<List<LoadbalancerFrontendRuleMatchersBodySizeRangeArgs>> bodySizeRanges) {
            $.bodySizeRanges = bodySizeRanges;
            return this;
        }

        /**
         * @param bodySizeRanges Matches by range of HTTP request body sizes.
         * 
         * @return builder
         * 
         */
        public Builder bodySizeRanges(List<LoadbalancerFrontendRuleMatchersBodySizeRangeArgs> bodySizeRanges) {
            return bodySizeRanges(Output.of(bodySizeRanges));
        }

        /**
         * @param bodySizeRanges Matches by range of HTTP request body sizes.
         * 
         * @return builder
         * 
         */
        public Builder bodySizeRanges(LoadbalancerFrontendRuleMatchersBodySizeRangeArgs... bodySizeRanges) {
            return bodySizeRanges(List.of(bodySizeRanges));
        }

        /**
         * @param bodySizes Matches by HTTP request body size.
         * 
         * @return builder
         * 
         */
        public Builder bodySizes(@Nullable Output<List<LoadbalancerFrontendRuleMatchersBodySizeArgs>> bodySizes) {
            $.bodySizes = bodySizes;
            return this;
        }

        /**
         * @param bodySizes Matches by HTTP request body size.
         * 
         * @return builder
         * 
         */
        public Builder bodySizes(List<LoadbalancerFrontendRuleMatchersBodySizeArgs> bodySizes) {
            return bodySizes(Output.of(bodySizes));
        }

        /**
         * @param bodySizes Matches by HTTP request body size.
         * 
         * @return builder
         * 
         */
        public Builder bodySizes(LoadbalancerFrontendRuleMatchersBodySizeArgs... bodySizes) {
            return bodySizes(List.of(bodySizes));
        }

        /**
         * @param cookies Matches by HTTP cookie value. Cookie name must be provided.
         * 
         * @return builder
         * 
         */
        public Builder cookies(@Nullable Output<List<LoadbalancerFrontendRuleMatchersCookieArgs>> cookies) {
            $.cookies = cookies;
            return this;
        }

        /**
         * @param cookies Matches by HTTP cookie value. Cookie name must be provided.
         * 
         * @return builder
         * 
         */
        public Builder cookies(List<LoadbalancerFrontendRuleMatchersCookieArgs> cookies) {
            return cookies(Output.of(cookies));
        }

        /**
         * @param cookies Matches by HTTP cookie value. Cookie name must be provided.
         * 
         * @return builder
         * 
         */
        public Builder cookies(LoadbalancerFrontendRuleMatchersCookieArgs... cookies) {
            return cookies(List.of(cookies));
        }

        /**
         * @param headers Matches by HTTP header value. Header name must be provided.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `request_header` instead.
         * 
         */
        @Deprecated /* Use `request_header` instead. */
        public Builder headers(@Nullable Output<List<LoadbalancerFrontendRuleMatchersHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Matches by HTTP header value. Header name must be provided.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `request_header` instead.
         * 
         */
        @Deprecated /* Use `request_header` instead. */
        public Builder headers(List<LoadbalancerFrontendRuleMatchersHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Matches by HTTP header value. Header name must be provided.
         * 
         * @return builder
         * 
         * @deprecated
         * Use `request_header` instead.
         * 
         */
        @Deprecated /* Use `request_header` instead. */
        public Builder headers(LoadbalancerFrontendRuleMatchersHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param hosts Matches by hostname. Header extracted from HTTP Headers or from TLS certificate in case of secured connection.
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable Output<List<LoadbalancerFrontendRuleMatchersHostArgs>> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts Matches by hostname. Header extracted from HTTP Headers or from TLS certificate in case of secured connection.
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<LoadbalancerFrontendRuleMatchersHostArgs> hosts) {
            return hosts(Output.of(hosts));
        }

        /**
         * @param hosts Matches by hostname. Header extracted from HTTP Headers or from TLS certificate in case of secured connection.
         * 
         * @return builder
         * 
         */
        public Builder hosts(LoadbalancerFrontendRuleMatchersHostArgs... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param httpMethods Matches by HTTP method.
         * 
         * @return builder
         * 
         */
        public Builder httpMethods(@Nullable Output<List<LoadbalancerFrontendRuleMatchersHttpMethodArgs>> httpMethods) {
            $.httpMethods = httpMethods;
            return this;
        }

        /**
         * @param httpMethods Matches by HTTP method.
         * 
         * @return builder
         * 
         */
        public Builder httpMethods(List<LoadbalancerFrontendRuleMatchersHttpMethodArgs> httpMethods) {
            return httpMethods(Output.of(httpMethods));
        }

        /**
         * @param httpMethods Matches by HTTP method.
         * 
         * @return builder
         * 
         */
        public Builder httpMethods(LoadbalancerFrontendRuleMatchersHttpMethodArgs... httpMethods) {
            return httpMethods(List.of(httpMethods));
        }

        /**
         * @param httpStatusRanges Matches by range of HTTP statuses.
         * 
         * @return builder
         * 
         */
        public Builder httpStatusRanges(@Nullable Output<List<LoadbalancerFrontendRuleMatchersHttpStatusRangeArgs>> httpStatusRanges) {
            $.httpStatusRanges = httpStatusRanges;
            return this;
        }

        /**
         * @param httpStatusRanges Matches by range of HTTP statuses.
         * 
         * @return builder
         * 
         */
        public Builder httpStatusRanges(List<LoadbalancerFrontendRuleMatchersHttpStatusRangeArgs> httpStatusRanges) {
            return httpStatusRanges(Output.of(httpStatusRanges));
        }

        /**
         * @param httpStatusRanges Matches by range of HTTP statuses.
         * 
         * @return builder
         * 
         */
        public Builder httpStatusRanges(LoadbalancerFrontendRuleMatchersHttpStatusRangeArgs... httpStatusRanges) {
            return httpStatusRanges(List.of(httpStatusRanges));
        }

        /**
         * @param httpStatuses Matches by HTTP status.
         * 
         * @return builder
         * 
         */
        public Builder httpStatuses(@Nullable Output<List<LoadbalancerFrontendRuleMatchersHttpStatusArgs>> httpStatuses) {
            $.httpStatuses = httpStatuses;
            return this;
        }

        /**
         * @param httpStatuses Matches by HTTP status.
         * 
         * @return builder
         * 
         */
        public Builder httpStatuses(List<LoadbalancerFrontendRuleMatchersHttpStatusArgs> httpStatuses) {
            return httpStatuses(Output.of(httpStatuses));
        }

        /**
         * @param httpStatuses Matches by HTTP status.
         * 
         * @return builder
         * 
         */
        public Builder httpStatuses(LoadbalancerFrontendRuleMatchersHttpStatusArgs... httpStatuses) {
            return httpStatuses(List.of(httpStatuses));
        }

        /**
         * @param numMembersUps Matches by number of healthy backend members.
         * 
         * @return builder
         * 
         */
        public Builder numMembersUps(@Nullable Output<List<LoadbalancerFrontendRuleMatchersNumMembersUpArgs>> numMembersUps) {
            $.numMembersUps = numMembersUps;
            return this;
        }

        /**
         * @param numMembersUps Matches by number of healthy backend members.
         * 
         * @return builder
         * 
         */
        public Builder numMembersUps(List<LoadbalancerFrontendRuleMatchersNumMembersUpArgs> numMembersUps) {
            return numMembersUps(Output.of(numMembersUps));
        }

        /**
         * @param numMembersUps Matches by number of healthy backend members.
         * 
         * @return builder
         * 
         */
        public Builder numMembersUps(LoadbalancerFrontendRuleMatchersNumMembersUpArgs... numMembersUps) {
            return numMembersUps(List.of(numMembersUps));
        }

        /**
         * @param paths Matches by URL path.
         * 
         * @return builder
         * 
         */
        public Builder paths(@Nullable Output<List<LoadbalancerFrontendRuleMatchersPathArgs>> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths Matches by URL path.
         * 
         * @return builder
         * 
         */
        public Builder paths(List<LoadbalancerFrontendRuleMatchersPathArgs> paths) {
            return paths(Output.of(paths));
        }

        /**
         * @param paths Matches by URL path.
         * 
         * @return builder
         * 
         */
        public Builder paths(LoadbalancerFrontendRuleMatchersPathArgs... paths) {
            return paths(List.of(paths));
        }

        /**
         * @param requestHeaders Matches by HTTP request header value. Header name must be provided.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(@Nullable Output<List<LoadbalancerFrontendRuleMatchersRequestHeaderArgs>> requestHeaders) {
            $.requestHeaders = requestHeaders;
            return this;
        }

        /**
         * @param requestHeaders Matches by HTTP request header value. Header name must be provided.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(List<LoadbalancerFrontendRuleMatchersRequestHeaderArgs> requestHeaders) {
            return requestHeaders(Output.of(requestHeaders));
        }

        /**
         * @param requestHeaders Matches by HTTP request header value. Header name must be provided.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaders(LoadbalancerFrontendRuleMatchersRequestHeaderArgs... requestHeaders) {
            return requestHeaders(List.of(requestHeaders));
        }

        /**
         * @param responseHeaders Matches by HTTP response header value. Header name must be provided.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaders(@Nullable Output<List<LoadbalancerFrontendRuleMatchersResponseHeaderArgs>> responseHeaders) {
            $.responseHeaders = responseHeaders;
            return this;
        }

        /**
         * @param responseHeaders Matches by HTTP response header value. Header name must be provided.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaders(List<LoadbalancerFrontendRuleMatchersResponseHeaderArgs> responseHeaders) {
            return responseHeaders(Output.of(responseHeaders));
        }

        /**
         * @param responseHeaders Matches by HTTP response header value. Header name must be provided.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaders(LoadbalancerFrontendRuleMatchersResponseHeaderArgs... responseHeaders) {
            return responseHeaders(List.of(responseHeaders));
        }

        /**
         * @param srcIps Matches by source IP address.
         * 
         * @return builder
         * 
         */
        public Builder srcIps(@Nullable Output<List<LoadbalancerFrontendRuleMatchersSrcIpArgs>> srcIps) {
            $.srcIps = srcIps;
            return this;
        }

        /**
         * @param srcIps Matches by source IP address.
         * 
         * @return builder
         * 
         */
        public Builder srcIps(List<LoadbalancerFrontendRuleMatchersSrcIpArgs> srcIps) {
            return srcIps(Output.of(srcIps));
        }

        /**
         * @param srcIps Matches by source IP address.
         * 
         * @return builder
         * 
         */
        public Builder srcIps(LoadbalancerFrontendRuleMatchersSrcIpArgs... srcIps) {
            return srcIps(List.of(srcIps));
        }

        /**
         * @param srcPortRanges Matches by range of source port numbers.
         * 
         * @return builder
         * 
         */
        public Builder srcPortRanges(@Nullable Output<List<LoadbalancerFrontendRuleMatchersSrcPortRangeArgs>> srcPortRanges) {
            $.srcPortRanges = srcPortRanges;
            return this;
        }

        /**
         * @param srcPortRanges Matches by range of source port numbers.
         * 
         * @return builder
         * 
         */
        public Builder srcPortRanges(List<LoadbalancerFrontendRuleMatchersSrcPortRangeArgs> srcPortRanges) {
            return srcPortRanges(Output.of(srcPortRanges));
        }

        /**
         * @param srcPortRanges Matches by range of source port numbers.
         * 
         * @return builder
         * 
         */
        public Builder srcPortRanges(LoadbalancerFrontendRuleMatchersSrcPortRangeArgs... srcPortRanges) {
            return srcPortRanges(List.of(srcPortRanges));
        }

        /**
         * @param srcPorts Matches by source port number.
         * 
         * @return builder
         * 
         */
        public Builder srcPorts(@Nullable Output<List<LoadbalancerFrontendRuleMatchersSrcPortArgs>> srcPorts) {
            $.srcPorts = srcPorts;
            return this;
        }

        /**
         * @param srcPorts Matches by source port number.
         * 
         * @return builder
         * 
         */
        public Builder srcPorts(List<LoadbalancerFrontendRuleMatchersSrcPortArgs> srcPorts) {
            return srcPorts(Output.of(srcPorts));
        }

        /**
         * @param srcPorts Matches by source port number.
         * 
         * @return builder
         * 
         */
        public Builder srcPorts(LoadbalancerFrontendRuleMatchersSrcPortArgs... srcPorts) {
            return srcPorts(List.of(srcPorts));
        }

        /**
         * @param urlParams Matches by URL query parameter value. Query parameter name must be provided
         * 
         * @return builder
         * 
         */
        public Builder urlParams(@Nullable Output<List<LoadbalancerFrontendRuleMatchersUrlParamArgs>> urlParams) {
            $.urlParams = urlParams;
            return this;
        }

        /**
         * @param urlParams Matches by URL query parameter value. Query parameter name must be provided
         * 
         * @return builder
         * 
         */
        public Builder urlParams(List<LoadbalancerFrontendRuleMatchersUrlParamArgs> urlParams) {
            return urlParams(Output.of(urlParams));
        }

        /**
         * @param urlParams Matches by URL query parameter value. Query parameter name must be provided
         * 
         * @return builder
         * 
         */
        public Builder urlParams(LoadbalancerFrontendRuleMatchersUrlParamArgs... urlParams) {
            return urlParams(List.of(urlParams));
        }

        /**
         * @param urlQueries Matches by URL query string.
         * 
         * @return builder
         * 
         */
        public Builder urlQueries(@Nullable Output<List<LoadbalancerFrontendRuleMatchersUrlQueryArgs>> urlQueries) {
            $.urlQueries = urlQueries;
            return this;
        }

        /**
         * @param urlQueries Matches by URL query string.
         * 
         * @return builder
         * 
         */
        public Builder urlQueries(List<LoadbalancerFrontendRuleMatchersUrlQueryArgs> urlQueries) {
            return urlQueries(Output.of(urlQueries));
        }

        /**
         * @param urlQueries Matches by URL query string.
         * 
         * @return builder
         * 
         */
        public Builder urlQueries(LoadbalancerFrontendRuleMatchersUrlQueryArgs... urlQueries) {
            return urlQueries(List.of(urlQueries));
        }

        /**
         * @param urls Matches by URL without schema, e.g. `example.com/dashboard`.
         * 
         * @return builder
         * 
         */
        public Builder urls(@Nullable Output<List<LoadbalancerFrontendRuleMatchersUrlArgs>> urls) {
            $.urls = urls;
            return this;
        }

        /**
         * @param urls Matches by URL without schema, e.g. `example.com/dashboard`.
         * 
         * @return builder
         * 
         */
        public Builder urls(List<LoadbalancerFrontendRuleMatchersUrlArgs> urls) {
            return urls(Output.of(urls));
        }

        /**
         * @param urls Matches by URL without schema, e.g. `example.com/dashboard`.
         * 
         * @return builder
         * 
         */
        public Builder urls(LoadbalancerFrontendRuleMatchersUrlArgs... urls) {
            return urls(List.of(urls));
        }

        public LoadbalancerFrontendRuleMatchersArgs build() {
            return $;
        }
    }

}
