// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.ObjectStorageArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.ObjectStorageState;
import com.pulumi.upcloud.outputs.ObjectStorageBucket;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * &gt; The `upcloud.ObjectStorage` resource manages previous generatation object storage instances that will reach end of life (EOL) by the end of 2024. For new instances, consider using the new Object Storage product managed with `upcloud.ManagedObjectStorage` resource.
 * 
 * This resource represents an UpCloud Object Storage instance, which provides S3 compatible storage.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.upcloud.ObjectStorage;
 * import com.pulumi.upcloud.ObjectStorageArgs;
 * import com.pulumi.upcloud.inputs.ObjectStorageBucketArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Object storage instance called storage-name in the fi-hel2 zone, with 2 buckets called "products" and "images".
 *         var myObjectStorage = new ObjectStorage("myObjectStorage", ObjectStorageArgs.builder()
 *             .size(250)
 *             .name("storage-name")
 *             .zone("fi-hel2")
 *             .accessKey("admin")
 *             .secretKey("changeme")
 *             .description("catalogue")
 *             .buckets(            
 *                 ObjectStorageBucketArgs.builder()
 *                     .name("products")
 *                     .build(),
 *                 ObjectStorageBucketArgs.builder()
 *                     .name("images")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * For object storage import to work properly, you need to set environment variables for access and secret key.
 * 
 * The environment variables names are UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name} and UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}
 * 
 * where {name} is the name of your object storage instance (not the resource label!), all uppercased, and with all dashes (-)
 * 
 * replaced with underscores (_). So importing an object storage that is named &#34;my-storage&#34; will look like this:
 * 
 * UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_STORAGE=accesskey \
 * 
 * UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_STORAGE=supersecret \
 * 
 * ```sh
 * $ pulumi import upcloud:index/objectStorage:ObjectStorage example_storage 06c1f4b6-faf2-47d0-8896-1d941092b009
 * ```
 * 
 */
@ResourceType(type="upcloud:index/objectStorage:ObjectStorage")
public class ObjectStorage extends com.pulumi.resources.CustomResource {
    /**
     * The access key used to identify user.
     * 				Can be set to an empty string, which will tell the provider to get the access key from environment variable.
     * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}&#34;.
     * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
     * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
     * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES&#34;.
     * 
     */
    @Export(name="accessKey", refs={String.class}, tree="[0]")
    private Output<String> accessKey;

    /**
     * @return The access key used to identify user.
     * 				Can be set to an empty string, which will tell the provider to get the access key from environment variable.
     * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}&#34;.
     * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
     * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
     * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES&#34;.
     * 
     */
    public Output<String> accessKey() {
        return this.accessKey;
    }
    @Export(name="buckets", refs={List.class,ObjectStorageBucket.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ObjectStorageBucket>> buckets;

    public Output<Optional<List<ObjectStorageBucket>>> buckets() {
        return Codegen.optional(this.buckets);
    }
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    public Output<String> created() {
        return this.created;
    }
    /**
     * The description of the object storage instance to be created
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description of the object storage instance to be created
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The name of the object storage instance to be created
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the object storage instance to be created
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The secret key used to authenticate user.
     * 				Can be set to an empty string, which will tell the provider to get the secret key from environment variable.
     * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}&#34;.
     * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
     * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
     * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES&#34;.
     * 
     */
    @Export(name="secretKey", refs={String.class}, tree="[0]")
    private Output<String> secretKey;

    /**
     * @return The secret key used to authenticate user.
     * 				Can be set to an empty string, which will tell the provider to get the secret key from environment variable.
     * 				The environment variable should be &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}&#34;.
     * 				{name} is the name given to object storage instance (so not the resource label), it should be all uppercased
     * 				and all dashes (-) should be replaced with underscores (_). For example, object storage named &#34;my-files&#34; would
     * 				use environment variable named &#34;UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES&#34;.
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }
    /**
     * The size of the object storage instance in gigabytes
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return The size of the object storage instance in gigabytes
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    public Output<String> state() {
        return this.state;
    }
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    public Output<String> url() {
        return this.url;
    }
    @Export(name="usedSpace", refs={Integer.class}, tree="[0]")
    private Output<Integer> usedSpace;

    public Output<Integer> usedSpace() {
        return this.usedSpace;
    }
    /**
     * The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return The zone in which the object storage instance will be created, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ObjectStorage(java.lang.String name) {
        this(name, ObjectStorageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ObjectStorage(java.lang.String name, ObjectStorageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ObjectStorage(java.lang.String name, ObjectStorageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/objectStorage:ObjectStorage", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ObjectStorage(java.lang.String name, Output<java.lang.String> id, @Nullable ObjectStorageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/objectStorage:ObjectStorage", name, state, makeResourceOptions(options, id), false);
    }

    private static ObjectStorageArgs makeArgs(ObjectStorageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ObjectStorageArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ObjectStorage get(java.lang.String name, Output<java.lang.String> id, @Nullable ObjectStorageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ObjectStorage(name, id, state, options);
    }
}
