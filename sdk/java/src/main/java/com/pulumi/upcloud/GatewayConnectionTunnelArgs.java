// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.inputs.GatewayConnectionTunnelIpsecAuthPskArgs;
import com.pulumi.upcloud.inputs.GatewayConnectionTunnelIpsecPropertiesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayConnectionTunnelArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayConnectionTunnelArgs Empty = new GatewayConnectionTunnelArgs();

    /**
     * ID of the upcloud.GatewayConnection resource to which the tunnel belongs
     * 
     */
    @Import(name="connectionId", required=true)
    private Output<String> connectionId;

    /**
     * @return ID of the upcloud.GatewayConnection resource to which the tunnel belongs
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }

    /**
     * Configuration for authenticating with pre-shared key
     * 
     */
    @Import(name="ipsecAuthPsk", required=true)
    private Output<GatewayConnectionTunnelIpsecAuthPskArgs> ipsecAuthPsk;

    /**
     * @return Configuration for authenticating with pre-shared key
     * 
     */
    public Output<GatewayConnectionTunnelIpsecAuthPskArgs> ipsecAuthPsk() {
        return this.ipsecAuthPsk;
    }

    /**
     * IPsec configuration for the tunnel
     * 
     */
    @Import(name="ipsecProperties")
    private @Nullable Output<GatewayConnectionTunnelIpsecPropertiesArgs> ipsecProperties;

    /**
     * @return IPsec configuration for the tunnel
     * 
     */
    public Optional<Output<GatewayConnectionTunnelIpsecPropertiesArgs>> ipsecProperties() {
        return Optional.ofNullable(this.ipsecProperties);
    }

    /**
     * Public (UpCloud) endpoint address of this tunnel
     * 
     */
    @Import(name="localAddressName", required=true)
    private Output<String> localAddressName;

    /**
     * @return Public (UpCloud) endpoint address of this tunnel
     * 
     */
    public Output<String> localAddressName() {
        return this.localAddressName;
    }

    /**
     * The name of the tunnel, should be unique within the connection
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the tunnel, should be unique within the connection
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Remote public IP address of the tunnel
     * 
     */
    @Import(name="remoteAddress", required=true)
    private Output<String> remoteAddress;

    /**
     * @return Remote public IP address of the tunnel
     * 
     */
    public Output<String> remoteAddress() {
        return this.remoteAddress;
    }

    private GatewayConnectionTunnelArgs() {}

    private GatewayConnectionTunnelArgs(GatewayConnectionTunnelArgs $) {
        this.connectionId = $.connectionId;
        this.ipsecAuthPsk = $.ipsecAuthPsk;
        this.ipsecProperties = $.ipsecProperties;
        this.localAddressName = $.localAddressName;
        this.name = $.name;
        this.remoteAddress = $.remoteAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayConnectionTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayConnectionTunnelArgs $;

        public Builder() {
            $ = new GatewayConnectionTunnelArgs();
        }

        public Builder(GatewayConnectionTunnelArgs defaults) {
            $ = new GatewayConnectionTunnelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId ID of the upcloud.GatewayConnection resource to which the tunnel belongs
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId ID of the upcloud.GatewayConnection resource to which the tunnel belongs
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param ipsecAuthPsk Configuration for authenticating with pre-shared key
         * 
         * @return builder
         * 
         */
        public Builder ipsecAuthPsk(Output<GatewayConnectionTunnelIpsecAuthPskArgs> ipsecAuthPsk) {
            $.ipsecAuthPsk = ipsecAuthPsk;
            return this;
        }

        /**
         * @param ipsecAuthPsk Configuration for authenticating with pre-shared key
         * 
         * @return builder
         * 
         */
        public Builder ipsecAuthPsk(GatewayConnectionTunnelIpsecAuthPskArgs ipsecAuthPsk) {
            return ipsecAuthPsk(Output.of(ipsecAuthPsk));
        }

        /**
         * @param ipsecProperties IPsec configuration for the tunnel
         * 
         * @return builder
         * 
         */
        public Builder ipsecProperties(@Nullable Output<GatewayConnectionTunnelIpsecPropertiesArgs> ipsecProperties) {
            $.ipsecProperties = ipsecProperties;
            return this;
        }

        /**
         * @param ipsecProperties IPsec configuration for the tunnel
         * 
         * @return builder
         * 
         */
        public Builder ipsecProperties(GatewayConnectionTunnelIpsecPropertiesArgs ipsecProperties) {
            return ipsecProperties(Output.of(ipsecProperties));
        }

        /**
         * @param localAddressName Public (UpCloud) endpoint address of this tunnel
         * 
         * @return builder
         * 
         */
        public Builder localAddressName(Output<String> localAddressName) {
            $.localAddressName = localAddressName;
            return this;
        }

        /**
         * @param localAddressName Public (UpCloud) endpoint address of this tunnel
         * 
         * @return builder
         * 
         */
        public Builder localAddressName(String localAddressName) {
            return localAddressName(Output.of(localAddressName));
        }

        /**
         * @param name The name of the tunnel, should be unique within the connection
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the tunnel, should be unique within the connection
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param remoteAddress Remote public IP address of the tunnel
         * 
         * @return builder
         * 
         */
        public Builder remoteAddress(Output<String> remoteAddress) {
            $.remoteAddress = remoteAddress;
            return this;
        }

        /**
         * @param remoteAddress Remote public IP address of the tunnel
         * 
         * @return builder
         * 
         */
        public Builder remoteAddress(String remoteAddress) {
            return remoteAddress(Output.of(remoteAddress));
        }

        public GatewayConnectionTunnelArgs build() {
            if ($.connectionId == null) {
                throw new MissingRequiredPropertyException("GatewayConnectionTunnelArgs", "connectionId");
            }
            if ($.ipsecAuthPsk == null) {
                throw new MissingRequiredPropertyException("GatewayConnectionTunnelArgs", "ipsecAuthPsk");
            }
            if ($.localAddressName == null) {
                throw new MissingRequiredPropertyException("GatewayConnectionTunnelArgs", "localAddressName");
            }
            if ($.remoteAddress == null) {
                throw new MissingRequiredPropertyException("GatewayConnectionTunnelArgs", "remoteAddress");
            }
            return $;
        }
    }

}
