// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerNetworkArgs Empty = new LoadbalancerNetworkArgs();

    /**
     * DNS name of the load balancer network
     * 
     */
    @Import(name="dnsName")
    private @Nullable Output<String> dnsName;

    /**
     * @return DNS name of the load balancer network
     * 
     */
    public Optional<Output<String>> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * Network family. Currently only `IPv4` is supported.
     * 
     */
    @Import(name="family", required=true)
    private Output<String> family;

    /**
     * @return Network family. Currently only `IPv4` is supported.
     * 
     */
    public Output<String> family() {
        return this.family;
    }

    /**
     * The unique identifier of the network.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The unique identifier of the network.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the network. Must be unique within the service.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the network. Must be unique within the service.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Private network UUID. Required for private networks and must reside in loadbalancer zone. For public network the field should be omitted.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return Private network UUID. Required for private networks and must reside in loadbalancer zone. For public network the field should be omitted.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * The type of the network. Only one public network can be attached and at least one private network must be attached.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the network. Only one public network can be attached and at least one private network must be attached.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private LoadbalancerNetworkArgs() {}

    private LoadbalancerNetworkArgs(LoadbalancerNetworkArgs $) {
        this.dnsName = $.dnsName;
        this.family = $.family;
        this.id = $.id;
        this.name = $.name;
        this.network = $.network;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerNetworkArgs $;

        public Builder() {
            $ = new LoadbalancerNetworkArgs();
        }

        public Builder(LoadbalancerNetworkArgs defaults) {
            $ = new LoadbalancerNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsName DNS name of the load balancer network
         * 
         * @return builder
         * 
         */
        public Builder dnsName(@Nullable Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param dnsName DNS name of the load balancer network
         * 
         * @return builder
         * 
         */
        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        /**
         * @param family Network family. Currently only `IPv4` is supported.
         * 
         * @return builder
         * 
         */
        public Builder family(Output<String> family) {
            $.family = family;
            return this;
        }

        /**
         * @param family Network family. Currently only `IPv4` is supported.
         * 
         * @return builder
         * 
         */
        public Builder family(String family) {
            return family(Output.of(family));
        }

        /**
         * @param id The unique identifier of the network.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier of the network.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the network. Must be unique within the service.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the network. Must be unique within the service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network Private network UUID. Required for private networks and must reside in loadbalancer zone. For public network the field should be omitted.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Private network UUID. Required for private networks and must reside in loadbalancer zone. For public network the field should be omitted.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param type The type of the network. Only one public network can be attached and at least one private network must be attached.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the network. Only one public network can be attached and at least one private network must be attached.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LoadbalancerNetworkArgs build() {
            if ($.family == null) {
                throw new MissingRequiredPropertyException("LoadbalancerNetworkArgs", "family");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("LoadbalancerNetworkArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("LoadbalancerNetworkArgs", "type");
            }
            return $;
        }
    }

}
