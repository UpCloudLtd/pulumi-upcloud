// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class LoadbalancerFrontendRuleActionsHttpReturnArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerFrontendRuleActionsHttpReturnArgs Empty = new LoadbalancerFrontendRuleActionsHttpReturnArgs();

    /**
     * Content type.
     * 
     */
    @Import(name="contentType", required=true)
    private Output<String> contentType;

    /**
     * @return Content type.
     * 
     */
    public Output<String> contentType() {
        return this.contentType;
    }

    /**
     * The payload.
     * 
     */
    @Import(name="payload", required=true)
    private Output<String> payload;

    /**
     * @return The payload.
     * 
     */
    public Output<String> payload() {
        return this.payload;
    }

    /**
     * HTTP status code.
     * 
     */
    @Import(name="status", required=true)
    private Output<Integer> status;

    /**
     * @return HTTP status code.
     * 
     */
    public Output<Integer> status() {
        return this.status;
    }

    private LoadbalancerFrontendRuleActionsHttpReturnArgs() {}

    private LoadbalancerFrontendRuleActionsHttpReturnArgs(LoadbalancerFrontendRuleActionsHttpReturnArgs $) {
        this.contentType = $.contentType;
        this.payload = $.payload;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerFrontendRuleActionsHttpReturnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerFrontendRuleActionsHttpReturnArgs $;

        public Builder() {
            $ = new LoadbalancerFrontendRuleActionsHttpReturnArgs();
        }

        public Builder(LoadbalancerFrontendRuleActionsHttpReturnArgs defaults) {
            $ = new LoadbalancerFrontendRuleActionsHttpReturnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentType Content type.
         * 
         * @return builder
         * 
         */
        public Builder contentType(Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType Content type.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param payload The payload.
         * 
         * @return builder
         * 
         */
        public Builder payload(Output<String> payload) {
            $.payload = payload;
            return this;
        }

        /**
         * @param payload The payload.
         * 
         * @return builder
         * 
         */
        public Builder payload(String payload) {
            return payload(Output.of(payload));
        }

        /**
         * @param status HTTP status code.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<Integer> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status HTTP status code.
         * 
         * @return builder
         * 
         */
        public Builder status(Integer status) {
            return status(Output.of(status));
        }

        public LoadbalancerFrontendRuleActionsHttpReturnArgs build() {
            if ($.contentType == null) {
                throw new MissingRequiredPropertyException("LoadbalancerFrontendRuleActionsHttpReturnArgs", "contentType");
            }
            if ($.payload == null) {
                throw new MissingRequiredPropertyException("LoadbalancerFrontendRuleActionsHttpReturnArgs", "payload");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("LoadbalancerFrontendRuleActionsHttpReturnArgs", "status");
            }
            return $;
        }
    }

}
