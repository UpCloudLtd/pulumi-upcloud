// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerFrontendRuleMatchersSrcPortRangeArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerFrontendRuleMatchersSrcPortRangeArgs Empty = new LoadbalancerFrontendRuleMatchersSrcPortRangeArgs();

    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     * 
     */
    @Import(name="inverse")
    private @Nullable Output<Boolean> inverse;

    /**
     * @return Defines if the condition should be inverted. Works similarly to logical NOT operator.
     * 
     */
    public Optional<Output<Boolean>> inverse() {
        return Optional.ofNullable(this.inverse);
    }

    /**
     * Integer value.
     * 
     */
    @Import(name="rangeEnd", required=true)
    private Output<Integer> rangeEnd;

    /**
     * @return Integer value.
     * 
     */
    public Output<Integer> rangeEnd() {
        return this.rangeEnd;
    }

    /**
     * Integer value.
     * 
     */
    @Import(name="rangeStart", required=true)
    private Output<Integer> rangeStart;

    /**
     * @return Integer value.
     * 
     */
    public Output<Integer> rangeStart() {
        return this.rangeStart;
    }

    private LoadbalancerFrontendRuleMatchersSrcPortRangeArgs() {}

    private LoadbalancerFrontendRuleMatchersSrcPortRangeArgs(LoadbalancerFrontendRuleMatchersSrcPortRangeArgs $) {
        this.inverse = $.inverse;
        this.rangeEnd = $.rangeEnd;
        this.rangeStart = $.rangeStart;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerFrontendRuleMatchersSrcPortRangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerFrontendRuleMatchersSrcPortRangeArgs $;

        public Builder() {
            $ = new LoadbalancerFrontendRuleMatchersSrcPortRangeArgs();
        }

        public Builder(LoadbalancerFrontendRuleMatchersSrcPortRangeArgs defaults) {
            $ = new LoadbalancerFrontendRuleMatchersSrcPortRangeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inverse Defines if the condition should be inverted. Works similarly to logical NOT operator.
         * 
         * @return builder
         * 
         */
        public Builder inverse(@Nullable Output<Boolean> inverse) {
            $.inverse = inverse;
            return this;
        }

        /**
         * @param inverse Defines if the condition should be inverted. Works similarly to logical NOT operator.
         * 
         * @return builder
         * 
         */
        public Builder inverse(Boolean inverse) {
            return inverse(Output.of(inverse));
        }

        /**
         * @param rangeEnd Integer value.
         * 
         * @return builder
         * 
         */
        public Builder rangeEnd(Output<Integer> rangeEnd) {
            $.rangeEnd = rangeEnd;
            return this;
        }

        /**
         * @param rangeEnd Integer value.
         * 
         * @return builder
         * 
         */
        public Builder rangeEnd(Integer rangeEnd) {
            return rangeEnd(Output.of(rangeEnd));
        }

        /**
         * @param rangeStart Integer value.
         * 
         * @return builder
         * 
         */
        public Builder rangeStart(Output<Integer> rangeStart) {
            $.rangeStart = rangeStart;
            return this;
        }

        /**
         * @param rangeStart Integer value.
         * 
         * @return builder
         * 
         */
        public Builder rangeStart(Integer rangeStart) {
            return rangeStart(Output.of(rangeStart));
        }

        public LoadbalancerFrontendRuleMatchersSrcPortRangeArgs build() {
            if ($.rangeEnd == null) {
                throw new MissingRequiredPropertyException("LoadbalancerFrontendRuleMatchersSrcPortRangeArgs", "rangeEnd");
            }
            if ($.rangeStart == null) {
                throw new MissingRequiredPropertyException("LoadbalancerFrontendRuleMatchersSrcPortRangeArgs", "rangeStart");
            }
            return $;
        }
    }

}
