// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.inputs.ServerNetworkInterfaceAdditionalIpAddressArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerNetworkInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerNetworkInterfaceArgs Empty = new ServerNetworkInterfaceArgs();

    /**
     * 0-31 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
     * 
     */
    @Import(name="additionalIpAddresses")
    private @Nullable Output<List<ServerNetworkInterfaceAdditionalIpAddressArgs>> additionalIpAddresses;

    /**
     * @return 0-31 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
     * 
     */
    public Optional<Output<List<ServerNetworkInterfaceAdditionalIpAddressArgs>>> additionalIpAddresses() {
        return Optional.ofNullable(this.additionalIpAddresses);
    }

    /**
     * `true` if this interface should be used for network booting.
     * 
     */
    @Import(name="bootable")
    private @Nullable Output<Boolean> bootable;

    /**
     * @return `true` if this interface should be used for network booting.
     * 
     */
    public Optional<Output<Boolean>> bootable() {
        return Optional.ofNullable(this.bootable);
    }

    /**
     * The interface index.
     * 
     */
    @Import(name="index")
    private @Nullable Output<Integer> index;

    /**
     * @return The interface index.
     * 
     */
    public Optional<Output<Integer>> index() {
        return Optional.ofNullable(this.index);
    }

    /**
     * The primary IP address of this interface.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The primary IP address of this interface.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
     * 
     */
    @Import(name="ipAddressFamily")
    private @Nullable Output<String> ipAddressFamily;

    /**
     * @return The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
     * 
     */
    public Optional<Output<String>> ipAddressFamily() {
        return Optional.ofNullable(this.ipAddressFamily);
    }

    /**
     * `true` indicates that the primary IP address is a floating IP address.
     * 
     */
    @Import(name="ipAddressFloating")
    private @Nullable Output<Boolean> ipAddressFloating;

    /**
     * @return `true` indicates that the primary IP address is a floating IP address.
     * 
     */
    public Optional<Output<Boolean>> ipAddressFloating() {
        return Optional.ofNullable(this.ipAddressFloating);
    }

    /**
     * The MAC address of the interface.
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<String> macAddress;

    /**
     * @return The MAC address of the interface.
     * 
     */
    public Optional<Output<String>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * The UUID of the network to attach this interface to. Required for private network interfaces.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The UUID of the network to attach this interface to. Required for private network interfaces.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * `true` if source IP should be filtered.
     * 
     */
    @Import(name="sourceIpFiltering")
    private @Nullable Output<Boolean> sourceIpFiltering;

    /**
     * @return `true` if source IP should be filtered.
     * 
     */
    public Optional<Output<Boolean>> sourceIpFiltering() {
        return Optional.ofNullable(this.sourceIpFiltering);
    }

    /**
     * Network interface type. For private network interfaces, a network must be specified with an existing network id.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Network interface type. For private network interfaces, a network must be specified with an existing network id.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ServerNetworkInterfaceArgs() {}

    private ServerNetworkInterfaceArgs(ServerNetworkInterfaceArgs $) {
        this.additionalIpAddresses = $.additionalIpAddresses;
        this.bootable = $.bootable;
        this.index = $.index;
        this.ipAddress = $.ipAddress;
        this.ipAddressFamily = $.ipAddressFamily;
        this.ipAddressFloating = $.ipAddressFloating;
        this.macAddress = $.macAddress;
        this.network = $.network;
        this.sourceIpFiltering = $.sourceIpFiltering;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerNetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerNetworkInterfaceArgs $;

        public Builder() {
            $ = new ServerNetworkInterfaceArgs();
        }

        public Builder(ServerNetworkInterfaceArgs defaults) {
            $ = new ServerNetworkInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalIpAddresses 0-31 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
         * 
         * @return builder
         * 
         */
        public Builder additionalIpAddresses(@Nullable Output<List<ServerNetworkInterfaceAdditionalIpAddressArgs>> additionalIpAddresses) {
            $.additionalIpAddresses = additionalIpAddresses;
            return this;
        }

        /**
         * @param additionalIpAddresses 0-31 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
         * 
         * @return builder
         * 
         */
        public Builder additionalIpAddresses(List<ServerNetworkInterfaceAdditionalIpAddressArgs> additionalIpAddresses) {
            return additionalIpAddresses(Output.of(additionalIpAddresses));
        }

        /**
         * @param additionalIpAddresses 0-31 blocks of additional IP addresses to assign to this interface. Allowed only with network interfaces of type `private`
         * 
         * @return builder
         * 
         */
        public Builder additionalIpAddresses(ServerNetworkInterfaceAdditionalIpAddressArgs... additionalIpAddresses) {
            return additionalIpAddresses(List.of(additionalIpAddresses));
        }

        /**
         * @param bootable `true` if this interface should be used for network booting.
         * 
         * @return builder
         * 
         */
        public Builder bootable(@Nullable Output<Boolean> bootable) {
            $.bootable = bootable;
            return this;
        }

        /**
         * @param bootable `true` if this interface should be used for network booting.
         * 
         * @return builder
         * 
         */
        public Builder bootable(Boolean bootable) {
            return bootable(Output.of(bootable));
        }

        /**
         * @param index The interface index.
         * 
         * @return builder
         * 
         */
        public Builder index(@Nullable Output<Integer> index) {
            $.index = index;
            return this;
        }

        /**
         * @param index The interface index.
         * 
         * @return builder
         * 
         */
        public Builder index(Integer index) {
            return index(Output.of(index));
        }

        /**
         * @param ipAddress The primary IP address of this interface.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The primary IP address of this interface.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipAddressFamily The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
         * 
         * @return builder
         * 
         */
        public Builder ipAddressFamily(@Nullable Output<String> ipAddressFamily) {
            $.ipAddressFamily = ipAddressFamily;
            return this;
        }

        /**
         * @param ipAddressFamily The type of the primary IP address of this interface (one of `IPv4` or `IPv6`).
         * 
         * @return builder
         * 
         */
        public Builder ipAddressFamily(String ipAddressFamily) {
            return ipAddressFamily(Output.of(ipAddressFamily));
        }

        /**
         * @param ipAddressFloating `true` indicates that the primary IP address is a floating IP address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressFloating(@Nullable Output<Boolean> ipAddressFloating) {
            $.ipAddressFloating = ipAddressFloating;
            return this;
        }

        /**
         * @param ipAddressFloating `true` indicates that the primary IP address is a floating IP address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressFloating(Boolean ipAddressFloating) {
            return ipAddressFloating(Output.of(ipAddressFloating));
        }

        /**
         * @param macAddress The MAC address of the interface.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<String> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress The MAC address of the interface.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param network The UUID of the network to attach this interface to. Required for private network interfaces.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The UUID of the network to attach this interface to. Required for private network interfaces.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param sourceIpFiltering `true` if source IP should be filtered.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpFiltering(@Nullable Output<Boolean> sourceIpFiltering) {
            $.sourceIpFiltering = sourceIpFiltering;
            return this;
        }

        /**
         * @param sourceIpFiltering `true` if source IP should be filtered.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpFiltering(Boolean sourceIpFiltering) {
            return sourceIpFiltering(Output.of(sourceIpFiltering));
        }

        /**
         * @param type Network interface type. For private network interfaces, a network must be specified with an existing network id.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Network interface type. For private network interfaces, a network must be specified with an existing network id.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServerNetworkInterfaceArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ServerNetworkInterfaceArgs", "type");
            }
            return $;
        }
    }

}
