// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.LoadbalancerBackendPropertiesArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerBackendState extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerBackendState Empty = new LoadbalancerBackendState();

    /**
     * UUID of the load balancer to which the backend is connected.
     * 
     */
    @Import(name="loadbalancer")
    private @Nullable Output<String> loadbalancer;

    /**
     * @return UUID of the load balancer to which the backend is connected.
     * 
     */
    public Optional<Output<String>> loadbalancer() {
        return Optional.ofNullable(this.loadbalancer);
    }

    /**
     * Backend member server UUIDs. Members receive traffic dispatched from the frontends.
     * 
     */
    @Import(name="members")
    private @Nullable Output<List<String>> members;

    /**
     * @return Backend member server UUIDs. Members receive traffic dispatched from the frontends.
     * 
     */
    public Optional<Output<List<String>>> members() {
        return Optional.ofNullable(this.members);
    }

    /**
     * The name of the backend. Must be unique within the load balancer service.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the backend. Must be unique within the load balancer service.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="properties")
    private @Nullable Output<LoadbalancerBackendPropertiesArgs> properties;

    public Optional<Output<LoadbalancerBackendPropertiesArgs>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Domain name resolver used with dynamic type members.
     * 
     */
    @Import(name="resolverName")
    private @Nullable Output<String> resolverName;

    /**
     * @return Domain name resolver used with dynamic type members.
     * 
     */
    public Optional<Output<String>> resolverName() {
        return Optional.ofNullable(this.resolverName);
    }

    /**
     * Set of TLS config names.
     * 
     */
    @Import(name="tlsConfigs")
    private @Nullable Output<List<String>> tlsConfigs;

    /**
     * @return Set of TLS config names.
     * 
     */
    public Optional<Output<List<String>>> tlsConfigs() {
        return Optional.ofNullable(this.tlsConfigs);
    }

    private LoadbalancerBackendState() {}

    private LoadbalancerBackendState(LoadbalancerBackendState $) {
        this.loadbalancer = $.loadbalancer;
        this.members = $.members;
        this.name = $.name;
        this.properties = $.properties;
        this.resolverName = $.resolverName;
        this.tlsConfigs = $.tlsConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerBackendState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerBackendState $;

        public Builder() {
            $ = new LoadbalancerBackendState();
        }

        public Builder(LoadbalancerBackendState defaults) {
            $ = new LoadbalancerBackendState(Objects.requireNonNull(defaults));
        }

        /**
         * @param loadbalancer UUID of the load balancer to which the backend is connected.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancer(@Nullable Output<String> loadbalancer) {
            $.loadbalancer = loadbalancer;
            return this;
        }

        /**
         * @param loadbalancer UUID of the load balancer to which the backend is connected.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancer(String loadbalancer) {
            return loadbalancer(Output.of(loadbalancer));
        }

        /**
         * @param members Backend member server UUIDs. Members receive traffic dispatched from the frontends.
         * 
         * @return builder
         * 
         */
        public Builder members(@Nullable Output<List<String>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members Backend member server UUIDs. Members receive traffic dispatched from the frontends.
         * 
         * @return builder
         * 
         */
        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        /**
         * @param members Backend member server UUIDs. Members receive traffic dispatched from the frontends.
         * 
         * @return builder
         * 
         */
        public Builder members(String... members) {
            return members(List.of(members));
        }

        /**
         * @param name The name of the backend. Must be unique within the load balancer service.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the backend. Must be unique within the load balancer service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder properties(@Nullable Output<LoadbalancerBackendPropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(LoadbalancerBackendPropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param resolverName Domain name resolver used with dynamic type members.
         * 
         * @return builder
         * 
         */
        public Builder resolverName(@Nullable Output<String> resolverName) {
            $.resolverName = resolverName;
            return this;
        }

        /**
         * @param resolverName Domain name resolver used with dynamic type members.
         * 
         * @return builder
         * 
         */
        public Builder resolverName(String resolverName) {
            return resolverName(Output.of(resolverName));
        }

        /**
         * @param tlsConfigs Set of TLS config names.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfigs(@Nullable Output<List<String>> tlsConfigs) {
            $.tlsConfigs = tlsConfigs;
            return this;
        }

        /**
         * @param tlsConfigs Set of TLS config names.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfigs(List<String> tlsConfigs) {
            return tlsConfigs(Output.of(tlsConfigs));
        }

        /**
         * @param tlsConfigs Set of TLS config names.
         * 
         * @return builder
         * 
         */
        public Builder tlsConfigs(String... tlsConfigs) {
            return tlsConfigs(List.of(tlsConfigs));
        }

        public LoadbalancerBackendState build() {
            return $;
        }
    }

}
