// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadbalancerBackendProperties {
    /**
     * @return Expected HTTP status code returned by the customer application to mark server as healthy. Ignored for `tcp` `health_check_type`.
     * 
     */
    private @Nullable Integer healthCheckExpectedStatus;
    /**
     * @return Sets how many failed health checks are allowed until the backend member is taken off from the rotation.
     * 
     */
    private @Nullable Integer healthCheckFall;
    /**
     * @return Interval between health checks in seconds.
     * 
     */
    private @Nullable Integer healthCheckInterval;
    /**
     * @return Sets how many successful health checks are required to put the backend member back into rotation.
     * 
     */
    private @Nullable Integer healthCheckRise;
    /**
     * @return Enables certificate verification with the system CA certificate bundle. Works with https scheme in health_check_url, otherwise ignored.
     * 
     */
    private @Nullable Boolean healthCheckTlsVerify;
    /**
     * @return Health check type.
     * 
     */
    private @Nullable String healthCheckType;
    /**
     * @return Target path for health check HTTP GET requests. Ignored for `tcp` `health_check_type`.
     * 
     */
    private @Nullable String healthCheckUrl;
    /**
     * @return Allow HTTP/2 connections to backend members by utilizing ALPN extension of TLS protocol, therefore it can only be enabled when tls_enabled is set to true. Note: members should support HTTP/2 for this setting to work.
     * 
     */
    private @Nullable Boolean http2Enabled;
    /**
     * @return Enable outbound proxy protocol by setting the desired version. Defaults to empty string. Empty string disables proxy protocol.
     * 
     */
    private @Nullable String outboundProxyProtocol;
    /**
     * @return Sets sticky session cookie name. Empty string disables sticky session.
     * 
     */
    private @Nullable String stickySessionCookieName;
    /**
     * @return Backend server timeout in seconds.
     * 
     */
    private @Nullable Integer timeoutServer;
    /**
     * @return Maximum inactivity time on the client and server side for tunnels in seconds.
     * 
     */
    private @Nullable Integer timeoutTunnel;
    /**
     * @return Enables TLS connection from the load balancer to backend servers.
     * 
     */
    private @Nullable Boolean tlsEnabled;
    /**
     * @return If enabled, then the system CA certificate bundle will be used for the certificate verification.
     * 
     */
    private @Nullable Boolean tlsUseSystemCa;
    /**
     * @return Enables backend servers certificate verification. Please make sure that TLS config with the certificate bundle of type authority attached to the backend or `tls_use_system_ca` enabled. Note: `tls_verify` has preference over `health_check_tls_verify` when `tls_enabled` in true.
     * 
     */
    private @Nullable Boolean tlsVerify;

    private LoadbalancerBackendProperties() {}
    /**
     * @return Expected HTTP status code returned by the customer application to mark server as healthy. Ignored for `tcp` `health_check_type`.
     * 
     */
    public Optional<Integer> healthCheckExpectedStatus() {
        return Optional.ofNullable(this.healthCheckExpectedStatus);
    }
    /**
     * @return Sets how many failed health checks are allowed until the backend member is taken off from the rotation.
     * 
     */
    public Optional<Integer> healthCheckFall() {
        return Optional.ofNullable(this.healthCheckFall);
    }
    /**
     * @return Interval between health checks in seconds.
     * 
     */
    public Optional<Integer> healthCheckInterval() {
        return Optional.ofNullable(this.healthCheckInterval);
    }
    /**
     * @return Sets how many successful health checks are required to put the backend member back into rotation.
     * 
     */
    public Optional<Integer> healthCheckRise() {
        return Optional.ofNullable(this.healthCheckRise);
    }
    /**
     * @return Enables certificate verification with the system CA certificate bundle. Works with https scheme in health_check_url, otherwise ignored.
     * 
     */
    public Optional<Boolean> healthCheckTlsVerify() {
        return Optional.ofNullable(this.healthCheckTlsVerify);
    }
    /**
     * @return Health check type.
     * 
     */
    public Optional<String> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }
    /**
     * @return Target path for health check HTTP GET requests. Ignored for `tcp` `health_check_type`.
     * 
     */
    public Optional<String> healthCheckUrl() {
        return Optional.ofNullable(this.healthCheckUrl);
    }
    /**
     * @return Allow HTTP/2 connections to backend members by utilizing ALPN extension of TLS protocol, therefore it can only be enabled when tls_enabled is set to true. Note: members should support HTTP/2 for this setting to work.
     * 
     */
    public Optional<Boolean> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }
    /**
     * @return Enable outbound proxy protocol by setting the desired version. Defaults to empty string. Empty string disables proxy protocol.
     * 
     */
    public Optional<String> outboundProxyProtocol() {
        return Optional.ofNullable(this.outboundProxyProtocol);
    }
    /**
     * @return Sets sticky session cookie name. Empty string disables sticky session.
     * 
     */
    public Optional<String> stickySessionCookieName() {
        return Optional.ofNullable(this.stickySessionCookieName);
    }
    /**
     * @return Backend server timeout in seconds.
     * 
     */
    public Optional<Integer> timeoutServer() {
        return Optional.ofNullable(this.timeoutServer);
    }
    /**
     * @return Maximum inactivity time on the client and server side for tunnels in seconds.
     * 
     */
    public Optional<Integer> timeoutTunnel() {
        return Optional.ofNullable(this.timeoutTunnel);
    }
    /**
     * @return Enables TLS connection from the load balancer to backend servers.
     * 
     */
    public Optional<Boolean> tlsEnabled() {
        return Optional.ofNullable(this.tlsEnabled);
    }
    /**
     * @return If enabled, then the system CA certificate bundle will be used for the certificate verification.
     * 
     */
    public Optional<Boolean> tlsUseSystemCa() {
        return Optional.ofNullable(this.tlsUseSystemCa);
    }
    /**
     * @return Enables backend servers certificate verification. Please make sure that TLS config with the certificate bundle of type authority attached to the backend or `tls_use_system_ca` enabled. Note: `tls_verify` has preference over `health_check_tls_verify` when `tls_enabled` in true.
     * 
     */
    public Optional<Boolean> tlsVerify() {
        return Optional.ofNullable(this.tlsVerify);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadbalancerBackendProperties defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer healthCheckExpectedStatus;
        private @Nullable Integer healthCheckFall;
        private @Nullable Integer healthCheckInterval;
        private @Nullable Integer healthCheckRise;
        private @Nullable Boolean healthCheckTlsVerify;
        private @Nullable String healthCheckType;
        private @Nullable String healthCheckUrl;
        private @Nullable Boolean http2Enabled;
        private @Nullable String outboundProxyProtocol;
        private @Nullable String stickySessionCookieName;
        private @Nullable Integer timeoutServer;
        private @Nullable Integer timeoutTunnel;
        private @Nullable Boolean tlsEnabled;
        private @Nullable Boolean tlsUseSystemCa;
        private @Nullable Boolean tlsVerify;
        public Builder() {}
        public Builder(LoadbalancerBackendProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheckExpectedStatus = defaults.healthCheckExpectedStatus;
    	      this.healthCheckFall = defaults.healthCheckFall;
    	      this.healthCheckInterval = defaults.healthCheckInterval;
    	      this.healthCheckRise = defaults.healthCheckRise;
    	      this.healthCheckTlsVerify = defaults.healthCheckTlsVerify;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.healthCheckUrl = defaults.healthCheckUrl;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.outboundProxyProtocol = defaults.outboundProxyProtocol;
    	      this.stickySessionCookieName = defaults.stickySessionCookieName;
    	      this.timeoutServer = defaults.timeoutServer;
    	      this.timeoutTunnel = defaults.timeoutTunnel;
    	      this.tlsEnabled = defaults.tlsEnabled;
    	      this.tlsUseSystemCa = defaults.tlsUseSystemCa;
    	      this.tlsVerify = defaults.tlsVerify;
        }

        @CustomType.Setter
        public Builder healthCheckExpectedStatus(@Nullable Integer healthCheckExpectedStatus) {

            this.healthCheckExpectedStatus = healthCheckExpectedStatus;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckFall(@Nullable Integer healthCheckFall) {

            this.healthCheckFall = healthCheckFall;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckInterval(@Nullable Integer healthCheckInterval) {

            this.healthCheckInterval = healthCheckInterval;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckRise(@Nullable Integer healthCheckRise) {

            this.healthCheckRise = healthCheckRise;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckTlsVerify(@Nullable Boolean healthCheckTlsVerify) {

            this.healthCheckTlsVerify = healthCheckTlsVerify;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckType(@Nullable String healthCheckType) {

            this.healthCheckType = healthCheckType;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckUrl(@Nullable String healthCheckUrl) {

            this.healthCheckUrl = healthCheckUrl;
            return this;
        }
        @CustomType.Setter
        public Builder http2Enabled(@Nullable Boolean http2Enabled) {

            this.http2Enabled = http2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder outboundProxyProtocol(@Nullable String outboundProxyProtocol) {

            this.outboundProxyProtocol = outboundProxyProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder stickySessionCookieName(@Nullable String stickySessionCookieName) {

            this.stickySessionCookieName = stickySessionCookieName;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutServer(@Nullable Integer timeoutServer) {

            this.timeoutServer = timeoutServer;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutTunnel(@Nullable Integer timeoutTunnel) {

            this.timeoutTunnel = timeoutTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder tlsEnabled(@Nullable Boolean tlsEnabled) {

            this.tlsEnabled = tlsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder tlsUseSystemCa(@Nullable Boolean tlsUseSystemCa) {

            this.tlsUseSystemCa = tlsUseSystemCa;
            return this;
        }
        @CustomType.Setter
        public Builder tlsVerify(@Nullable Boolean tlsVerify) {

            this.tlsVerify = tlsVerify;
            return this;
        }
        public LoadbalancerBackendProperties build() {
            final var _resultValue = new LoadbalancerBackendProperties();
            _resultValue.healthCheckExpectedStatus = healthCheckExpectedStatus;
            _resultValue.healthCheckFall = healthCheckFall;
            _resultValue.healthCheckInterval = healthCheckInterval;
            _resultValue.healthCheckRise = healthCheckRise;
            _resultValue.healthCheckTlsVerify = healthCheckTlsVerify;
            _resultValue.healthCheckType = healthCheckType;
            _resultValue.healthCheckUrl = healthCheckUrl;
            _resultValue.http2Enabled = http2Enabled;
            _resultValue.outboundProxyProtocol = outboundProxyProtocol;
            _resultValue.stickySessionCookieName = stickySessionCookieName;
            _resultValue.timeoutServer = timeoutServer;
            _resultValue.timeoutTunnel = timeoutTunnel;
            _resultValue.tlsEnabled = tlsEnabled;
            _resultValue.tlsUseSystemCa = tlsUseSystemCa;
            _resultValue.tlsVerify = tlsVerify;
            return _resultValue;
        }
    }
}
