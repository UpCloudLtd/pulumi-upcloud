// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.upcloud.outputs.ServerTemplateBackupRule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerTemplate {
    /**
     * @return The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
     * 
     */
    private @Nullable String address;
    /**
     * @return The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
     * 
     */
    private @Nullable String addressPosition;
    private @Nullable ServerTemplateBackupRule backupRule;
    /**
     * @return If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
     * 
     */
    private @Nullable Boolean deleteAutoresizeBackup;
    /**
     * @return Sets if the storage is encrypted at rest
     * 
     */
    private @Nullable Boolean encrypt;
    /**
     * @return If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
     * 							Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
     * 							to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
     * 							Taking and keeping backups incure costs.
     * 
     */
    private @Nullable Boolean filesystemAutoresize;
    /**
     * @return The unique identifier for the storage
     * 
     */
    private @Nullable String id;
    /**
     * @return The size of the storage in gigabytes
     * 
     */
    private @Nullable Integer size;
    /**
     * @return A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
     * 
     */
    private @Nullable String storage;
    /**
     * @return The storage tier to use.
     * 
     */
    private @Nullable String tier;
    /**
     * @return A short, informative description
     * 
     */
    private @Nullable String title;

    private ServerTemplate() {}
    /**
     * @return The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
     * 
     */
    public Optional<String> address() {
        return Optional.ofNullable(this.address);
    }
    /**
     * @return The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
     * 
     */
    public Optional<String> addressPosition() {
        return Optional.ofNullable(this.addressPosition);
    }
    public Optional<ServerTemplateBackupRule> backupRule() {
        return Optional.ofNullable(this.backupRule);
    }
    /**
     * @return If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
     * 
     */
    public Optional<Boolean> deleteAutoresizeBackup() {
        return Optional.ofNullable(this.deleteAutoresizeBackup);
    }
    /**
     * @return Sets if the storage is encrypted at rest
     * 
     */
    public Optional<Boolean> encrypt() {
        return Optional.ofNullable(this.encrypt);
    }
    /**
     * @return If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
     * 							Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
     * 							to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
     * 							Taking and keeping backups incure costs.
     * 
     */
    public Optional<Boolean> filesystemAutoresize() {
        return Optional.ofNullable(this.filesystemAutoresize);
    }
    /**
     * @return The unique identifier for the storage
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The size of the storage in gigabytes
     * 
     */
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
     * 
     */
    public Optional<String> storage() {
        return Optional.ofNullable(this.storage);
    }
    /**
     * @return The storage tier to use.
     * 
     */
    public Optional<String> tier() {
        return Optional.ofNullable(this.tier);
    }
    /**
     * @return A short, informative description
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String address;
        private @Nullable String addressPosition;
        private @Nullable ServerTemplateBackupRule backupRule;
        private @Nullable Boolean deleteAutoresizeBackup;
        private @Nullable Boolean encrypt;
        private @Nullable Boolean filesystemAutoresize;
        private @Nullable String id;
        private @Nullable Integer size;
        private @Nullable String storage;
        private @Nullable String tier;
        private @Nullable String title;
        public Builder() {}
        public Builder(ServerTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.addressPosition = defaults.addressPosition;
    	      this.backupRule = defaults.backupRule;
    	      this.deleteAutoresizeBackup = defaults.deleteAutoresizeBackup;
    	      this.encrypt = defaults.encrypt;
    	      this.filesystemAutoresize = defaults.filesystemAutoresize;
    	      this.id = defaults.id;
    	      this.size = defaults.size;
    	      this.storage = defaults.storage;
    	      this.tier = defaults.tier;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder address(@Nullable String address) {

            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder addressPosition(@Nullable String addressPosition) {

            this.addressPosition = addressPosition;
            return this;
        }
        @CustomType.Setter
        public Builder backupRule(@Nullable ServerTemplateBackupRule backupRule) {

            this.backupRule = backupRule;
            return this;
        }
        @CustomType.Setter
        public Builder deleteAutoresizeBackup(@Nullable Boolean deleteAutoresizeBackup) {

            this.deleteAutoresizeBackup = deleteAutoresizeBackup;
            return this;
        }
        @CustomType.Setter
        public Builder encrypt(@Nullable Boolean encrypt) {

            this.encrypt = encrypt;
            return this;
        }
        @CustomType.Setter
        public Builder filesystemAutoresize(@Nullable Boolean filesystemAutoresize) {

            this.filesystemAutoresize = filesystemAutoresize;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {

            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder storage(@Nullable String storage) {

            this.storage = storage;
            return this;
        }
        @CustomType.Setter
        public Builder tier(@Nullable String tier) {

            this.tier = tier;
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {

            this.title = title;
            return this;
        }
        public ServerTemplate build() {
            final var _resultValue = new ServerTemplate();
            _resultValue.address = address;
            _resultValue.addressPosition = addressPosition;
            _resultValue.backupRule = backupRule;
            _resultValue.deleteAutoresizeBackup = deleteAutoresizeBackup;
            _resultValue.encrypt = encrypt;
            _resultValue.filesystemAutoresize = filesystemAutoresize;
            _resultValue.id = id;
            _resultValue.size = size;
            _resultValue.storage = storage;
            _resultValue.tier = tier;
            _resultValue.title = title;
            return _resultValue;
        }
    }
}
