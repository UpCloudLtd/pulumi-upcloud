// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendNetworkArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendPropertiesArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerFrontendArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerFrontendArgs Empty = new LoadbalancerFrontendArgs();

    /**
     * The name of the backend where traffic will be routed by default. The default backend can be overridden in frontend rules.
     * 
     *     Note that the frontend resource depends on the default backend resource. Use the `name` field of a backend resource as the value for this field (like in the example above) or the `depends_on` meta argument to ensure the resources are created and destroyed in the correct order.
     * 
     */
    @Import(name="defaultBackendName", required=true)
    private Output<String> defaultBackendName;

    /**
     * @return The name of the backend where traffic will be routed by default. The default backend can be overridden in frontend rules.
     * 
     *     Note that the frontend resource depends on the default backend resource. Use the `name` field of a backend resource as the value for this field (like in the example above) or the `depends_on` meta argument to ensure the resources are created and destroyed in the correct order.
     * 
     */
    public Output<String> defaultBackendName() {
        return this.defaultBackendName;
    }

    /**
     * UUID of the load balancer to which the frontend is connected.
     * 
     */
    @Import(name="loadbalancer", required=true)
    private Output<String> loadbalancer;

    /**
     * @return UUID of the load balancer to which the frontend is connected.
     * 
     */
    public Output<String> loadbalancer() {
        return this.loadbalancer;
    }

    /**
     * When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * The name of the frontend. Must be unique within the load balancer service.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the frontend. Must be unique within the load balancer service.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will be required when deprecated field `network` is removed from load balancer resource.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<LoadbalancerFrontendNetworkArgs>> networks;

    /**
     * @return Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will be required when deprecated field `network` is removed from load balancer resource.
     * 
     */
    public Optional<Output<List<LoadbalancerFrontendNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * Port to listen for incoming requests.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return Port to listen for incoming requests.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    @Import(name="properties")
    private @Nullable Output<LoadbalancerFrontendPropertiesArgs> properties;

    public Optional<Output<LoadbalancerFrontendPropertiesArgs>> properties() {
        return Optional.ofNullable(this.properties);
    }

    private LoadbalancerFrontendArgs() {}

    private LoadbalancerFrontendArgs(LoadbalancerFrontendArgs $) {
        this.defaultBackendName = $.defaultBackendName;
        this.loadbalancer = $.loadbalancer;
        this.mode = $.mode;
        this.name = $.name;
        this.networks = $.networks;
        this.port = $.port;
        this.properties = $.properties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerFrontendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerFrontendArgs $;

        public Builder() {
            $ = new LoadbalancerFrontendArgs();
        }

        public Builder(LoadbalancerFrontendArgs defaults) {
            $ = new LoadbalancerFrontendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultBackendName The name of the backend where traffic will be routed by default. The default backend can be overridden in frontend rules.
         * 
         *     Note that the frontend resource depends on the default backend resource. Use the `name` field of a backend resource as the value for this field (like in the example above) or the `depends_on` meta argument to ensure the resources are created and destroyed in the correct order.
         * 
         * @return builder
         * 
         */
        public Builder defaultBackendName(Output<String> defaultBackendName) {
            $.defaultBackendName = defaultBackendName;
            return this;
        }

        /**
         * @param defaultBackendName The name of the backend where traffic will be routed by default. The default backend can be overridden in frontend rules.
         * 
         *     Note that the frontend resource depends on the default backend resource. Use the `name` field of a backend resource as the value for this field (like in the example above) or the `depends_on` meta argument to ensure the resources are created and destroyed in the correct order.
         * 
         * @return builder
         * 
         */
        public Builder defaultBackendName(String defaultBackendName) {
            return defaultBackendName(Output.of(defaultBackendName));
        }

        /**
         * @param loadbalancer UUID of the load balancer to which the frontend is connected.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancer(Output<String> loadbalancer) {
            $.loadbalancer = loadbalancer;
            return this;
        }

        /**
         * @param loadbalancer UUID of the load balancer to which the frontend is connected.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancer(String loadbalancer) {
            return loadbalancer(Output.of(loadbalancer));
        }

        /**
         * @param mode When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name of the frontend. Must be unique within the load balancer service.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the frontend. Must be unique within the load balancer service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will be required when deprecated field `network` is removed from load balancer resource.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<LoadbalancerFrontendNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will be required when deprecated field `network` is removed from load balancer resource.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<LoadbalancerFrontendNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Networks that frontend will be listening. Networks are required if load balancer has `networks` defined. This field will be required when deprecated field `network` is removed from load balancer resource.
         * 
         * @return builder
         * 
         */
        public Builder networks(LoadbalancerFrontendNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param port Port to listen for incoming requests.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port to listen for incoming requests.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder properties(@Nullable Output<LoadbalancerFrontendPropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(LoadbalancerFrontendPropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        public LoadbalancerFrontendArgs build() {
            if ($.defaultBackendName == null) {
                throw new MissingRequiredPropertyException("LoadbalancerFrontendArgs", "defaultBackendName");
            }
            if ($.loadbalancer == null) {
                throw new MissingRequiredPropertyException("LoadbalancerFrontendArgs", "loadbalancer");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("LoadbalancerFrontendArgs", "mode");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("LoadbalancerFrontendArgs", "port");
            }
            return $;
        }
    }

}
