// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetManagedDatabasePostgresqlSessionsSession extends com.pulumi.resources.InvokeArgs {

    public static final GetManagedDatabasePostgresqlSessionsSession Empty = new GetManagedDatabasePostgresqlSessionsSession();

    /**
     * Name of the application that is connected to this service.
     * 
     */
    @Import(name="applicationName", required=true)
    private String applicationName;

    /**
     * @return Name of the application that is connected to this service.
     * 
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Time when this process was started, i.e., when the client connected to the server.
     * 
     */
    @Import(name="backendStart", required=true)
    private String backendStart;

    /**
     * @return Time when this process was started, i.e., when the client connected to the server.
     * 
     */
    public String backendStart() {
        return this.backendStart;
    }

    /**
     * Type of current service.
     * 
     */
    @Import(name="backendType", required=true)
    private String backendType;

    /**
     * @return Type of current service.
     * 
     */
    public String backendType() {
        return this.backendType;
    }

    /**
     * Top-level transaction identifier of this service, if any.
     * 
     */
    @Import(name="backendXid", required=true)
    private Integer backendXid;

    /**
     * @return Top-level transaction identifier of this service, if any.
     * 
     */
    public Integer backendXid() {
        return this.backendXid;
    }

    /**
     * The current service&#39;s xmin horizon.
     * 
     */
    @Import(name="backendXmin", required=true)
    private Integer backendXmin;

    /**
     * @return The current service&#39;s xmin horizon.
     * 
     */
    public Integer backendXmin() {
        return this.backendXmin;
    }

    /**
     * IP address of the client connected to this service. If this field is null, it indicates either that the client is connected via a Unix socket on the server machine or that this is an internal process such as autovacuum.
     * 
     */
    @Import(name="clientAddr", required=true)
    private String clientAddr;

    /**
     * @return IP address of the client connected to this service. If this field is null, it indicates either that the client is connected via a Unix socket on the server machine or that this is an internal process such as autovacuum.
     * 
     */
    public String clientAddr() {
        return this.clientAddr;
    }

    /**
     * Host name of the connected client, as reported by a reverse DNS lookup of `clientAddr`.
     * 
     */
    @Import(name="clientHostname", required=true)
    private String clientHostname;

    /**
     * @return Host name of the connected client, as reported by a reverse DNS lookup of `clientAddr`.
     * 
     */
    public String clientHostname() {
        return this.clientHostname;
    }

    /**
     * TCP port number that the client is using for communication with this service, or -1 if a Unix socket is used.
     * 
     */
    @Import(name="clientPort", required=true)
    private Integer clientPort;

    /**
     * @return TCP port number that the client is using for communication with this service, or -1 if a Unix socket is used.
     * 
     */
    public Integer clientPort() {
        return this.clientPort;
    }

    /**
     * OID of the database this service is connected to.
     * 
     */
    @Import(name="datid", required=true)
    private Integer datid;

    /**
     * @return OID of the database this service is connected to.
     * 
     */
    public Integer datid() {
        return this.datid;
    }

    /**
     * Name of the database this service is connected to.
     * 
     */
    @Import(name="datname", required=true)
    private String datname;

    /**
     * @return Name of the database this service is connected to.
     * 
     */
    public String datname() {
        return this.datname;
    }

    /**
     * Process ID of this service.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Process ID of this service.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows the last query that was executed.
     * 
     */
    @Import(name="query", required=true)
    private String query;

    /**
     * @return Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows the last query that was executed.
     * 
     */
    public String query() {
        return this.query;
    }

    /**
     * The active query current duration.
     * 
     */
    @Import(name="queryDuration", required=true)
    private String queryDuration;

    /**
     * @return The active query current duration.
     * 
     */
    public String queryDuration() {
        return this.queryDuration;
    }

    /**
     * Time when the currently active query was started, or if state is not active, when the last query was started.
     * 
     */
    @Import(name="queryStart", required=true)
    private String queryStart;

    /**
     * @return Time when the currently active query was started, or if state is not active, when the last query was started.
     * 
     */
    public String queryStart() {
        return this.queryStart;
    }

    /**
     * Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * Time when the state was last changed.
     * 
     */
    @Import(name="stateChange", required=true)
    private String stateChange;

    /**
     * @return Time when the state was last changed.
     * 
     */
    public String stateChange() {
        return this.stateChange;
    }

    /**
     * Name of the user logged into this service.
     * 
     */
    @Import(name="usename", required=true)
    private String usename;

    /**
     * @return Name of the user logged into this service.
     * 
     */
    public String usename() {
        return this.usename;
    }

    /**
     * OID of the user logged into this service.
     * 
     */
    @Import(name="usesysid", required=true)
    private Integer usesysid;

    /**
     * @return OID of the user logged into this service.
     * 
     */
    public Integer usesysid() {
        return this.usesysid;
    }

    /**
     * Wait event name if service is currently waiting.
     * 
     */
    @Import(name="waitEvent", required=true)
    private String waitEvent;

    /**
     * @return Wait event name if service is currently waiting.
     * 
     */
    public String waitEvent() {
        return this.waitEvent;
    }

    /**
     * The type of event for which the service is waiting, if any; otherwise NULL.
     * 
     */
    @Import(name="waitEventType", required=true)
    private String waitEventType;

    /**
     * @return The type of event for which the service is waiting, if any; otherwise NULL.
     * 
     */
    public String waitEventType() {
        return this.waitEventType;
    }

    /**
     * Time when this process&#39; current transaction was started, or null if no transaction is active.
     * 
     */
    @Import(name="xactStart", required=true)
    private String xactStart;

    /**
     * @return Time when this process&#39; current transaction was started, or null if no transaction is active.
     * 
     */
    public String xactStart() {
        return this.xactStart;
    }

    private GetManagedDatabasePostgresqlSessionsSession() {}

    private GetManagedDatabasePostgresqlSessionsSession(GetManagedDatabasePostgresqlSessionsSession $) {
        this.applicationName = $.applicationName;
        this.backendStart = $.backendStart;
        this.backendType = $.backendType;
        this.backendXid = $.backendXid;
        this.backendXmin = $.backendXmin;
        this.clientAddr = $.clientAddr;
        this.clientHostname = $.clientHostname;
        this.clientPort = $.clientPort;
        this.datid = $.datid;
        this.datname = $.datname;
        this.id = $.id;
        this.query = $.query;
        this.queryDuration = $.queryDuration;
        this.queryStart = $.queryStart;
        this.state = $.state;
        this.stateChange = $.stateChange;
        this.usename = $.usename;
        this.usesysid = $.usesysid;
        this.waitEvent = $.waitEvent;
        this.waitEventType = $.waitEventType;
        this.xactStart = $.xactStart;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedDatabasePostgresqlSessionsSession defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedDatabasePostgresqlSessionsSession $;

        public Builder() {
            $ = new GetManagedDatabasePostgresqlSessionsSession();
        }

        public Builder(GetManagedDatabasePostgresqlSessionsSession defaults) {
            $ = new GetManagedDatabasePostgresqlSessionsSession(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationName Name of the application that is connected to this service.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param backendStart Time when this process was started, i.e., when the client connected to the server.
         * 
         * @return builder
         * 
         */
        public Builder backendStart(String backendStart) {
            $.backendStart = backendStart;
            return this;
        }

        /**
         * @param backendType Type of current service.
         * 
         * @return builder
         * 
         */
        public Builder backendType(String backendType) {
            $.backendType = backendType;
            return this;
        }

        /**
         * @param backendXid Top-level transaction identifier of this service, if any.
         * 
         * @return builder
         * 
         */
        public Builder backendXid(Integer backendXid) {
            $.backendXid = backendXid;
            return this;
        }

        /**
         * @param backendXmin The current service&#39;s xmin horizon.
         * 
         * @return builder
         * 
         */
        public Builder backendXmin(Integer backendXmin) {
            $.backendXmin = backendXmin;
            return this;
        }

        /**
         * @param clientAddr IP address of the client connected to this service. If this field is null, it indicates either that the client is connected via a Unix socket on the server machine or that this is an internal process such as autovacuum.
         * 
         * @return builder
         * 
         */
        public Builder clientAddr(String clientAddr) {
            $.clientAddr = clientAddr;
            return this;
        }

        /**
         * @param clientHostname Host name of the connected client, as reported by a reverse DNS lookup of `clientAddr`.
         * 
         * @return builder
         * 
         */
        public Builder clientHostname(String clientHostname) {
            $.clientHostname = clientHostname;
            return this;
        }

        /**
         * @param clientPort TCP port number that the client is using for communication with this service, or -1 if a Unix socket is used.
         * 
         * @return builder
         * 
         */
        public Builder clientPort(Integer clientPort) {
            $.clientPort = clientPort;
            return this;
        }

        /**
         * @param datid OID of the database this service is connected to.
         * 
         * @return builder
         * 
         */
        public Builder datid(Integer datid) {
            $.datid = datid;
            return this;
        }

        /**
         * @param datname Name of the database this service is connected to.
         * 
         * @return builder
         * 
         */
        public Builder datname(String datname) {
            $.datname = datname;
            return this;
        }

        /**
         * @param id Process ID of this service.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param query Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows the last query that was executed.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            $.query = query;
            return this;
        }

        /**
         * @param queryDuration The active query current duration.
         * 
         * @return builder
         * 
         */
        public Builder queryDuration(String queryDuration) {
            $.queryDuration = queryDuration;
            return this;
        }

        /**
         * @param queryStart Time when the currently active query was started, or if state is not active, when the last query was started.
         * 
         * @return builder
         * 
         */
        public Builder queryStart(String queryStart) {
            $.queryStart = queryStart;
            return this;
        }

        /**
         * @param state Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param stateChange Time when the state was last changed.
         * 
         * @return builder
         * 
         */
        public Builder stateChange(String stateChange) {
            $.stateChange = stateChange;
            return this;
        }

        /**
         * @param usename Name of the user logged into this service.
         * 
         * @return builder
         * 
         */
        public Builder usename(String usename) {
            $.usename = usename;
            return this;
        }

        /**
         * @param usesysid OID of the user logged into this service.
         * 
         * @return builder
         * 
         */
        public Builder usesysid(Integer usesysid) {
            $.usesysid = usesysid;
            return this;
        }

        /**
         * @param waitEvent Wait event name if service is currently waiting.
         * 
         * @return builder
         * 
         */
        public Builder waitEvent(String waitEvent) {
            $.waitEvent = waitEvent;
            return this;
        }

        /**
         * @param waitEventType The type of event for which the service is waiting, if any; otherwise NULL.
         * 
         * @return builder
         * 
         */
        public Builder waitEventType(String waitEventType) {
            $.waitEventType = waitEventType;
            return this;
        }

        /**
         * @param xactStart Time when this process&#39; current transaction was started, or null if no transaction is active.
         * 
         * @return builder
         * 
         */
        public Builder xactStart(String xactStart) {
            $.xactStart = xactStart;
            return this;
        }

        public GetManagedDatabasePostgresqlSessionsSession build() {
            if ($.applicationName == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "applicationName");
            }
            if ($.backendStart == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "backendStart");
            }
            if ($.backendType == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "backendType");
            }
            if ($.backendXid == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "backendXid");
            }
            if ($.backendXmin == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "backendXmin");
            }
            if ($.clientAddr == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "clientAddr");
            }
            if ($.clientHostname == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "clientHostname");
            }
            if ($.clientPort == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "clientPort");
            }
            if ($.datid == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "datid");
            }
            if ($.datname == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "datname");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "id");
            }
            if ($.query == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "query");
            }
            if ($.queryDuration == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "queryDuration");
            }
            if ($.queryStart == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "queryStart");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "state");
            }
            if ($.stateChange == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "stateChange");
            }
            if ($.usename == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "usename");
            }
            if ($.usesysid == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "usesysid");
            }
            if ($.waitEvent == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "waitEvent");
            }
            if ($.waitEventType == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "waitEventType");
            }
            if ($.xactStart == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabasePostgresqlSessionsSession", "xactStart");
            }
            return $;
        }
    }

}
