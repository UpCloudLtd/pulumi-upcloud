// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetManagedDatabaseOpensearchIndicesIndexArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetManagedDatabaseOpensearchIndicesIndexArgs Empty = new GetManagedDatabaseOpensearchIndicesIndexArgs();

    /**
     * Timestamp indicating the creation time of the index.
     * 
     */
    @Import(name="createTime", required=true)
    private Output<String> createTime;

    /**
     * @return Timestamp indicating the creation time of the index.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }

    /**
     * Number of documents stored in the index.
     * 
     */
    @Import(name="docs", required=true)
    private Output<Integer> docs;

    /**
     * @return Number of documents stored in the index.
     * 
     */
    public Output<Integer> docs() {
        return this.docs;
    }

    /**
     * Health status of the index e.g. `green`, `yellow`, or `red`.
     * 
     */
    @Import(name="health", required=true)
    private Output<String> health;

    /**
     * @return Health status of the index e.g. `green`, `yellow`, or `red`.
     * 
     */
    public Output<String> health() {
        return this.health;
    }

    /**
     * Name of the index.
     * 
     */
    @Import(name="indexName", required=true)
    private Output<String> indexName;

    /**
     * @return Name of the index.
     * 
     */
    public Output<String> indexName() {
        return this.indexName;
    }

    /**
     * Number of replicas configured for the index.
     * 
     */
    @Import(name="numberOfReplicas", required=true)
    private Output<Integer> numberOfReplicas;

    /**
     * @return Number of replicas configured for the index.
     * 
     */
    public Output<Integer> numberOfReplicas() {
        return this.numberOfReplicas;
    }

    /**
     * Number of shards configured &amp; used by the index.
     * 
     */
    @Import(name="numberOfShards", required=true)
    private Output<Integer> numberOfShards;

    /**
     * @return Number of shards configured &amp; used by the index.
     * 
     */
    public Output<Integer> numberOfShards() {
        return this.numberOfShards;
    }

    /**
     * Indicates whether the index is in a read-only state that permits deletion of the entire index. This attribute can be automatically set to true in certain scenarios where the node disk space exceeds the flood stage.
     * 
     */
    @Import(name="readOnlyAllowDelete", required=true)
    private Output<Boolean> readOnlyAllowDelete;

    /**
     * @return Indicates whether the index is in a read-only state that permits deletion of the entire index. This attribute can be automatically set to true in certain scenarios where the node disk space exceeds the flood stage.
     * 
     */
    public Output<Boolean> readOnlyAllowDelete() {
        return this.readOnlyAllowDelete;
    }

    /**
     * Size of the index in bytes.
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return Size of the index in bytes.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * Status of the index e.g. `open` or `closed`.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Status of the index e.g. `open` or `closed`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    private GetManagedDatabaseOpensearchIndicesIndexArgs() {}

    private GetManagedDatabaseOpensearchIndicesIndexArgs(GetManagedDatabaseOpensearchIndicesIndexArgs $) {
        this.createTime = $.createTime;
        this.docs = $.docs;
        this.health = $.health;
        this.indexName = $.indexName;
        this.numberOfReplicas = $.numberOfReplicas;
        this.numberOfShards = $.numberOfShards;
        this.readOnlyAllowDelete = $.readOnlyAllowDelete;
        this.size = $.size;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedDatabaseOpensearchIndicesIndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedDatabaseOpensearchIndicesIndexArgs $;

        public Builder() {
            $ = new GetManagedDatabaseOpensearchIndicesIndexArgs();
        }

        public Builder(GetManagedDatabaseOpensearchIndicesIndexArgs defaults) {
            $ = new GetManagedDatabaseOpensearchIndicesIndexArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Timestamp indicating the creation time of the index.
         * 
         * @return builder
         * 
         */
        public Builder createTime(Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Timestamp indicating the creation time of the index.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param docs Number of documents stored in the index.
         * 
         * @return builder
         * 
         */
        public Builder docs(Output<Integer> docs) {
            $.docs = docs;
            return this;
        }

        /**
         * @param docs Number of documents stored in the index.
         * 
         * @return builder
         * 
         */
        public Builder docs(Integer docs) {
            return docs(Output.of(docs));
        }

        /**
         * @param health Health status of the index e.g. `green`, `yellow`, or `red`.
         * 
         * @return builder
         * 
         */
        public Builder health(Output<String> health) {
            $.health = health;
            return this;
        }

        /**
         * @param health Health status of the index e.g. `green`, `yellow`, or `red`.
         * 
         * @return builder
         * 
         */
        public Builder health(String health) {
            return health(Output.of(health));
        }

        /**
         * @param indexName Name of the index.
         * 
         * @return builder
         * 
         */
        public Builder indexName(Output<String> indexName) {
            $.indexName = indexName;
            return this;
        }

        /**
         * @param indexName Name of the index.
         * 
         * @return builder
         * 
         */
        public Builder indexName(String indexName) {
            return indexName(Output.of(indexName));
        }

        /**
         * @param numberOfReplicas Number of replicas configured for the index.
         * 
         * @return builder
         * 
         */
        public Builder numberOfReplicas(Output<Integer> numberOfReplicas) {
            $.numberOfReplicas = numberOfReplicas;
            return this;
        }

        /**
         * @param numberOfReplicas Number of replicas configured for the index.
         * 
         * @return builder
         * 
         */
        public Builder numberOfReplicas(Integer numberOfReplicas) {
            return numberOfReplicas(Output.of(numberOfReplicas));
        }

        /**
         * @param numberOfShards Number of shards configured &amp; used by the index.
         * 
         * @return builder
         * 
         */
        public Builder numberOfShards(Output<Integer> numberOfShards) {
            $.numberOfShards = numberOfShards;
            return this;
        }

        /**
         * @param numberOfShards Number of shards configured &amp; used by the index.
         * 
         * @return builder
         * 
         */
        public Builder numberOfShards(Integer numberOfShards) {
            return numberOfShards(Output.of(numberOfShards));
        }

        /**
         * @param readOnlyAllowDelete Indicates whether the index is in a read-only state that permits deletion of the entire index. This attribute can be automatically set to true in certain scenarios where the node disk space exceeds the flood stage.
         * 
         * @return builder
         * 
         */
        public Builder readOnlyAllowDelete(Output<Boolean> readOnlyAllowDelete) {
            $.readOnlyAllowDelete = readOnlyAllowDelete;
            return this;
        }

        /**
         * @param readOnlyAllowDelete Indicates whether the index is in a read-only state that permits deletion of the entire index. This attribute can be automatically set to true in certain scenarios where the node disk space exceeds the flood stage.
         * 
         * @return builder
         * 
         */
        public Builder readOnlyAllowDelete(Boolean readOnlyAllowDelete) {
            return readOnlyAllowDelete(Output.of(readOnlyAllowDelete));
        }

        /**
         * @param size Size of the index in bytes.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size of the index in bytes.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param status Status of the index e.g. `open` or `closed`.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the index e.g. `open` or `closed`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetManagedDatabaseOpensearchIndicesIndexArgs build() {
            if ($.createTime == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndexArgs", "createTime");
            }
            if ($.docs == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndexArgs", "docs");
            }
            if ($.health == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndexArgs", "health");
            }
            if ($.indexName == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndexArgs", "indexName");
            }
            if ($.numberOfReplicas == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndexArgs", "numberOfReplicas");
            }
            if ($.numberOfShards == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndexArgs", "numberOfShards");
            }
            if ($.readOnlyAllowDelete == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndexArgs", "readOnlyAllowDelete");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndexArgs", "size");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseOpensearchIndicesIndexArgs", "status");
            }
            return $;
        }
    }

}
