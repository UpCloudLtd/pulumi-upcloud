// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulation {
    /**
     * @return Enable or disable route auto-population.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Exclude routes coming from specific sources (router-connected-networks, static-route).
     * 
     */
    private @Nullable List<String> excludeBySources;
    /**
     * @return CIDR destinations to include when auto-populating routes.
     * 
     */
    private @Nullable List<String> filterByDestinations;
    /**
     * @return Include only routes of given types (service, user).
     * 
     */
    private @Nullable List<String> filterByRouteTypes;

    private NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulation() {}
    /**
     * @return Enable or disable route auto-population.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Exclude routes coming from specific sources (router-connected-networks, static-route).
     * 
     */
    public List<String> excludeBySources() {
        return this.excludeBySources == null ? List.of() : this.excludeBySources;
    }
    /**
     * @return CIDR destinations to include when auto-populating routes.
     * 
     */
    public List<String> filterByDestinations() {
        return this.filterByDestinations == null ? List.of() : this.filterByDestinations;
    }
    /**
     * @return Include only routes of given types (service, user).
     * 
     */
    public List<String> filterByRouteTypes() {
        return this.filterByRouteTypes == null ? List.of() : this.filterByRouteTypes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enabled;
        private @Nullable List<String> excludeBySources;
        private @Nullable List<String> filterByDestinations;
        private @Nullable List<String> filterByRouteTypes;
        public Builder() {}
        public Builder(NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.excludeBySources = defaults.excludeBySources;
    	      this.filterByDestinations = defaults.filterByDestinations;
    	      this.filterByRouteTypes = defaults.filterByRouteTypes;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder excludeBySources(@Nullable List<String> excludeBySources) {

            this.excludeBySources = excludeBySources;
            return this;
        }
        public Builder excludeBySources(String... excludeBySources) {
            return excludeBySources(List.of(excludeBySources));
        }
        @CustomType.Setter
        public Builder filterByDestinations(@Nullable List<String> filterByDestinations) {

            this.filterByDestinations = filterByDestinations;
            return this;
        }
        public Builder filterByDestinations(String... filterByDestinations) {
            return filterByDestinations(List.of(filterByDestinations));
        }
        @CustomType.Setter
        public Builder filterByRouteTypes(@Nullable List<String> filterByRouteTypes) {

            this.filterByRouteTypes = filterByRouteTypes;
            return this;
        }
        public Builder filterByRouteTypes(String... filterByRouteTypes) {
            return filterByRouteTypes(List.of(filterByRouteTypes));
        }
        public NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulation build() {
            final var _resultValue = new NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulation();
            _resultValue.enabled = enabled;
            _resultValue.excludeBySources = excludeBySources;
            _resultValue.filterByDestinations = filterByDestinations;
            _resultValue.filterByRouteTypes = filterByRouteTypes;
            return _resultValue;
        }
    }
}
