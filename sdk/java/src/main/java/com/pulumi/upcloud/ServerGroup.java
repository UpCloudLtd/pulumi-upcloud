// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.ServerGroupArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.ServerGroupState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Server groups allow grouping servers and defining anti-affinity for the servers.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.upcloud.ServerGroup;
 * import com.pulumi.upcloud.ServerGroupArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var main = new ServerGroup("main", ServerGroupArgs.builder()
 *             .antiAffinityPolicy("yes")
 *             .labels(Map.ofEntries(
 *                 Map.entry("key1", "val1"),
 *                 Map.entry("key2", "val2"),
 *                 Map.entry("key3", "val3")
 *             ))
 *             .members(            
 *                 "00b51165-fb58-4b77-bb8c-552277be1764",
 *                 "00d56575-3821-3301-9de4-2b2bc7e35pqf",
 *                 "000012dc-fe8c-a3y6-91f9-0db1215c36cf")
 *             .title("main_group")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import upcloud:index/serverGroup:ServerGroup main ead4544f-10bf-42a3-b98a-a0fea2e2ad14
 * ```
 * 
 */
@ResourceType(type="upcloud:index/serverGroup:ServerGroup")
public class ServerGroup extends com.pulumi.resources.CustomResource {
    /**
     * Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
     * group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn&#39;t allow
     * servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
     * different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
     * To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
     * please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
     * server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
     * servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
     * 
     */
    @Export(name="antiAffinityPolicy", refs={String.class}, tree="[0]")
    private Output<String> antiAffinityPolicy;

    /**
     * @return Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
     * group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn&#39;t allow
     * servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
     * different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
     * To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
     * please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
     * server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
     * servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
     * 
     */
    public Output<String> antiAffinityPolicy() {
        return this.antiAffinityPolicy;
    }
    /**
     * User defined key-value pairs to classify the server group.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the server group.
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }
    /**
     * UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group`
     * property of `upcloud.Server`. See also `track_members` property.
     * 
     */
    @Export(name="members", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> members;

    /**
     * @return UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group`
     * property of `upcloud.Server`. See also `track_members` property.
     * 
     */
    public Output<Optional<List<String>>> members() {
        return Codegen.optional(this.members);
    }
    /**
     * Title of your server group
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output<String> title;

    /**
     * @return Title of your server group
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group`
     * property of `upcloud.Server` to attach servers to the server group to avoid delayed state updates.
     * 
     */
    @Export(name="trackMembers", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> trackMembers;

    /**
     * @return Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group`
     * property of `upcloud.Server` to attach servers to the server group to avoid delayed state updates.
     * 
     */
    public Output<Boolean> trackMembers() {
        return this.trackMembers;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServerGroup(java.lang.String name) {
        this(name, ServerGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServerGroup(java.lang.String name, ServerGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServerGroup(java.lang.String name, ServerGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/serverGroup:ServerGroup", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ServerGroup(java.lang.String name, Output<java.lang.String> id, @Nullable ServerGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/serverGroup:ServerGroup", name, state, makeResourceOptions(options, id), false);
    }

    private static ServerGroupArgs makeArgs(ServerGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ServerGroupArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServerGroup get(java.lang.String name, Output<java.lang.String> id, @Nullable ServerGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServerGroup(name, id, state, options);
    }
}
