// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.inputs.GatewayConnectionLocalRouteArgs;
import com.pulumi.upcloud.inputs.GatewayConnectionRemoteRouteArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayConnectionArgs Empty = new GatewayConnectionArgs();

    /**
     * The ID of the upcloud.Gateway resource to which the connection belongs.
     * 
     */
    @Import(name="gateway", required=true)
    private Output<String> gateway;

    /**
     * @return The ID of the upcloud.Gateway resource to which the connection belongs.
     * 
     */
    public Output<String> gateway() {
        return this.gateway;
    }

    /**
     * Route for the UpCloud side of the network.
     * 
     */
    @Import(name="localRoutes")
    private @Nullable Output<List<GatewayConnectionLocalRouteArgs>> localRoutes;

    /**
     * @return Route for the UpCloud side of the network.
     * 
     */
    public Optional<Output<List<GatewayConnectionLocalRouteArgs>>> localRoutes() {
        return Optional.ofNullable(this.localRoutes);
    }

    /**
     * The name of the connection, should be unique within the gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the connection, should be unique within the gateway.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Route for the remote side of the network.
     * 
     */
    @Import(name="remoteRoutes")
    private @Nullable Output<List<GatewayConnectionRemoteRouteArgs>> remoteRoutes;

    /**
     * @return Route for the remote side of the network.
     * 
     */
    public Optional<Output<List<GatewayConnectionRemoteRouteArgs>>> remoteRoutes() {
        return Optional.ofNullable(this.remoteRoutes);
    }

    /**
     * The type of the connection; currently the only supported type is &#39;ipsec&#39;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the connection; currently the only supported type is &#39;ipsec&#39;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private GatewayConnectionArgs() {}

    private GatewayConnectionArgs(GatewayConnectionArgs $) {
        this.gateway = $.gateway;
        this.localRoutes = $.localRoutes;
        this.name = $.name;
        this.remoteRoutes = $.remoteRoutes;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayConnectionArgs $;

        public Builder() {
            $ = new GatewayConnectionArgs();
        }

        public Builder(GatewayConnectionArgs defaults) {
            $ = new GatewayConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gateway The ID of the upcloud.Gateway resource to which the connection belongs.
         * 
         * @return builder
         * 
         */
        public Builder gateway(Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway The ID of the upcloud.Gateway resource to which the connection belongs.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param localRoutes Route for the UpCloud side of the network.
         * 
         * @return builder
         * 
         */
        public Builder localRoutes(@Nullable Output<List<GatewayConnectionLocalRouteArgs>> localRoutes) {
            $.localRoutes = localRoutes;
            return this;
        }

        /**
         * @param localRoutes Route for the UpCloud side of the network.
         * 
         * @return builder
         * 
         */
        public Builder localRoutes(List<GatewayConnectionLocalRouteArgs> localRoutes) {
            return localRoutes(Output.of(localRoutes));
        }

        /**
         * @param localRoutes Route for the UpCloud side of the network.
         * 
         * @return builder
         * 
         */
        public Builder localRoutes(GatewayConnectionLocalRouteArgs... localRoutes) {
            return localRoutes(List.of(localRoutes));
        }

        /**
         * @param name The name of the connection, should be unique within the gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the connection, should be unique within the gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param remoteRoutes Route for the remote side of the network.
         * 
         * @return builder
         * 
         */
        public Builder remoteRoutes(@Nullable Output<List<GatewayConnectionRemoteRouteArgs>> remoteRoutes) {
            $.remoteRoutes = remoteRoutes;
            return this;
        }

        /**
         * @param remoteRoutes Route for the remote side of the network.
         * 
         * @return builder
         * 
         */
        public Builder remoteRoutes(List<GatewayConnectionRemoteRouteArgs> remoteRoutes) {
            return remoteRoutes(Output.of(remoteRoutes));
        }

        /**
         * @param remoteRoutes Route for the remote side of the network.
         * 
         * @return builder
         * 
         */
        public Builder remoteRoutes(GatewayConnectionRemoteRouteArgs... remoteRoutes) {
            return remoteRoutes(List.of(remoteRoutes));
        }

        /**
         * @param type The type of the connection; currently the only supported type is &#39;ipsec&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the connection; currently the only supported type is &#39;ipsec&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GatewayConnectionArgs build() {
            if ($.gateway == null) {
                throw new MissingRequiredPropertyException("GatewayConnectionArgs", "gateway");
            }
            return $;
        }
    }

}
