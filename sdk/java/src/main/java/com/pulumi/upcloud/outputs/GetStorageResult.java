// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetStorageResult {
    private String accessType;
    private Boolean encrypt;
    private String id;
    private Map<String,String> labels;
    /**
     * @deprecated
     * Use exact title or UUID to limit the number of matching storages. Note that if you have multiple storages with the same title, you should use UUID to select the storage.
     * 
     */
    @Deprecated /* Use exact title or UUID to limit the number of matching storages. Note that if you have multiple storages with the same title, you should use UUID to select the storage. */
    private @Nullable Boolean mostRecent;
    /**
     * @deprecated
     * Contains the same value as `title`. Use `title` instead.
     * 
     */
    @Deprecated /* Contains the same value as `title`. Use `title` instead. */
    private @Nullable String name;
    /**
     * @deprecated
     * Use exact title or UUID instead.
     * 
     */
    @Deprecated /* Use exact title or UUID instead. */
    private @Nullable String nameRegex;
    private Integer size;
    private String state;
    private Map<String,String> systemLabels;
    private String tier;
    private String title;
    private String type;
    private String zone;

    private GetStorageResult() {}
    public String accessType() {
        return this.accessType;
    }
    public Boolean encrypt() {
        return this.encrypt;
    }
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @deprecated
     * Use exact title or UUID to limit the number of matching storages. Note that if you have multiple storages with the same title, you should use UUID to select the storage.
     * 
     */
    @Deprecated /* Use exact title or UUID to limit the number of matching storages. Note that if you have multiple storages with the same title, you should use UUID to select the storage. */
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    /**
     * @deprecated
     * Contains the same value as `title`. Use `title` instead.
     * 
     */
    @Deprecated /* Contains the same value as `title`. Use `title` instead. */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @deprecated
     * Use exact title or UUID instead.
     * 
     */
    @Deprecated /* Use exact title or UUID instead. */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    public Integer size() {
        return this.size;
    }
    public String state() {
        return this.state;
    }
    public Map<String,String> systemLabels() {
        return this.systemLabels;
    }
    public String tier() {
        return this.tier;
    }
    public String title() {
        return this.title;
    }
    public String type() {
        return this.type;
    }
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStorageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessType;
        private Boolean encrypt;
        private String id;
        private Map<String,String> labels;
        private @Nullable Boolean mostRecent;
        private @Nullable String name;
        private @Nullable String nameRegex;
        private Integer size;
        private String state;
        private Map<String,String> systemLabels;
        private String tier;
        private String title;
        private String type;
        private String zone;
        public Builder() {}
        public Builder(GetStorageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessType = defaults.accessType;
    	      this.encrypt = defaults.encrypt;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.mostRecent = defaults.mostRecent;
    	      this.name = defaults.name;
    	      this.nameRegex = defaults.nameRegex;
    	      this.size = defaults.size;
    	      this.state = defaults.state;
    	      this.systemLabels = defaults.systemLabels;
    	      this.tier = defaults.tier;
    	      this.title = defaults.title;
    	      this.type = defaults.type;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder accessType(String accessType) {
            if (accessType == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "accessType");
            }
            this.accessType = accessType;
            return this;
        }
        @CustomType.Setter
        public Builder encrypt(Boolean encrypt) {
            if (encrypt == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "encrypt");
            }
            this.encrypt = encrypt;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {

            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameRegex(@Nullable String nameRegex) {

            this.nameRegex = nameRegex;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemLabels(Map<String,String> systemLabels) {
            if (systemLabels == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "systemLabels");
            }
            this.systemLabels = systemLabels;
            return this;
        }
        @CustomType.Setter
        public Builder tier(String tier) {
            if (tier == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "tier");
            }
            this.tier = tier;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "title");
            }
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            if (zone == null) {
              throw new MissingRequiredPropertyException("GetStorageResult", "zone");
            }
            this.zone = zone;
            return this;
        }
        public GetStorageResult build() {
            final var _resultValue = new GetStorageResult();
            _resultValue.accessType = accessType;
            _resultValue.encrypt = encrypt;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.mostRecent = mostRecent;
            _resultValue.name = name;
            _resultValue.nameRegex = nameRegex;
            _resultValue.size = size;
            _resultValue.state = state;
            _resultValue.systemLabels = systemLabels;
            _resultValue.tier = tier;
            _resultValue.title = title;
            _resultValue.type = type;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
