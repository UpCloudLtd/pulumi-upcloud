// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.inputs.ManagedObjectStorageNetworkArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedObjectStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedObjectStorageArgs Empty = new ManagedObjectStorageArgs();

    /**
     * Service status managed by the end user.
     * 
     */
    @Import(name="configuredStatus", required=true)
    private Output<String> configuredStatus;

    /**
     * @return Service status managed by the end user.
     * 
     */
    public Output<String> configuredStatus() {
        return this.configuredStatus;
    }

    /**
     * User defined key-value pairs to classify the managed object storage.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the managed object storage.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the Managed Object Storage service. Must be unique within account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Managed Object Storage service. Must be unique within account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain
     * access from multiple private networks that might reside in different zones, create the networks and a corresponding
     * router for each network.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<ManagedObjectStorageNetworkArgs>> networks;

    /**
     * @return Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain
     * access from multiple private networks that might reside in different zones, create the networks and a corresponding
     * router for each network.
     * 
     */
    public Optional<Output<List<ManagedObjectStorageNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * Region in which the service will be hosted, see `upcloud.getManagedObjectStorageRegions` data source.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Region in which the service will be hosted, see `upcloud.getManagedObjectStorageRegions` data source.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    private ManagedObjectStorageArgs() {}

    private ManagedObjectStorageArgs(ManagedObjectStorageArgs $) {
        this.configuredStatus = $.configuredStatus;
        this.labels = $.labels;
        this.name = $.name;
        this.networks = $.networks;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedObjectStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedObjectStorageArgs $;

        public Builder() {
            $ = new ManagedObjectStorageArgs();
        }

        public Builder(ManagedObjectStorageArgs defaults) {
            $ = new ManagedObjectStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuredStatus Service status managed by the end user.
         * 
         * @return builder
         * 
         */
        public Builder configuredStatus(Output<String> configuredStatus) {
            $.configuredStatus = configuredStatus;
            return this;
        }

        /**
         * @param configuredStatus Service status managed by the end user.
         * 
         * @return builder
         * 
         */
        public Builder configuredStatus(String configuredStatus) {
            return configuredStatus(Output.of(configuredStatus));
        }

        /**
         * @param labels User defined key-value pairs to classify the managed object storage.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User defined key-value pairs to classify the managed object storage.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Name of the Managed Object Storage service. Must be unique within account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Managed Object Storage service. Must be unique within account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain
         * access from multiple private networks that might reside in different zones, create the networks and a corresponding
         * router for each network.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<ManagedObjectStorageNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain
         * access from multiple private networks that might reside in different zones, create the networks and a corresponding
         * router for each network.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<ManagedObjectStorageNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Attached networks from where object storage can be used. Private networks must reside in object storage region. To gain
         * access from multiple private networks that might reside in different zones, create the networks and a corresponding
         * router for each network.
         * 
         * @return builder
         * 
         */
        public Builder networks(ManagedObjectStorageNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param region Region in which the service will be hosted, see `upcloud.getManagedObjectStorageRegions` data source.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region in which the service will be hosted, see `upcloud.getManagedObjectStorageRegions` data source.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public ManagedObjectStorageArgs build() {
            if ($.configuredStatus == null) {
                throw new MissingRequiredPropertyException("ManagedObjectStorageArgs", "configuredStatus");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("ManagedObjectStorageArgs", "region");
            }
            return $;
        }
    }

}
