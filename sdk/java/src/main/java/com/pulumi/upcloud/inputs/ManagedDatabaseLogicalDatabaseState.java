// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabaseLogicalDatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabaseLogicalDatabaseState Empty = new ManagedDatabaseLogicalDatabaseState();

    /**
     * Default character set for the database (LC_CTYPE)
     * 
     */
    @Import(name="characterSet")
    private @Nullable Output<String> characterSet;

    /**
     * @return Default character set for the database (LC_CTYPE)
     * 
     */
    public Optional<Output<String>> characterSet() {
        return Optional.ofNullable(this.characterSet);
    }

    /**
     * Default collation for the database (LC_COLLATE)
     * 
     */
    @Import(name="collation")
    private @Nullable Output<String> collation;

    /**
     * @return Default collation for the database (LC_COLLATE)
     * 
     */
    public Optional<Output<String>> collation() {
        return Optional.ofNullable(this.collation);
    }

    /**
     * Name of the logical database
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the logical database
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Service&#39;s UUID for which this user belongs to
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return Service&#39;s UUID for which this user belongs to
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    private ManagedDatabaseLogicalDatabaseState() {}

    private ManagedDatabaseLogicalDatabaseState(ManagedDatabaseLogicalDatabaseState $) {
        this.characterSet = $.characterSet;
        this.collation = $.collation;
        this.name = $.name;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabaseLogicalDatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabaseLogicalDatabaseState $;

        public Builder() {
            $ = new ManagedDatabaseLogicalDatabaseState();
        }

        public Builder(ManagedDatabaseLogicalDatabaseState defaults) {
            $ = new ManagedDatabaseLogicalDatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param characterSet Default character set for the database (LC_CTYPE)
         * 
         * @return builder
         * 
         */
        public Builder characterSet(@Nullable Output<String> characterSet) {
            $.characterSet = characterSet;
            return this;
        }

        /**
         * @param characterSet Default character set for the database (LC_CTYPE)
         * 
         * @return builder
         * 
         */
        public Builder characterSet(String characterSet) {
            return characterSet(Output.of(characterSet));
        }

        /**
         * @param collation Default collation for the database (LC_COLLATE)
         * 
         * @return builder
         * 
         */
        public Builder collation(@Nullable Output<String> collation) {
            $.collation = collation;
            return this;
        }

        /**
         * @param collation Default collation for the database (LC_COLLATE)
         * 
         * @return builder
         * 
         */
        public Builder collation(String collation) {
            return collation(Output.of(collation));
        }

        /**
         * @param name Name of the logical database
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the logical database
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param service Service&#39;s UUID for which this user belongs to
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Service&#39;s UUID for which this user belongs to
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public ManagedDatabaseLogicalDatabaseState build() {
            return $;
        }
    }

}
