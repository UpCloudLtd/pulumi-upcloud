// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabasePostgresqlPropertiesTimescaledbArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabasePostgresqlPropertiesTimescaledbArgs Empty = new ManagedDatabasePostgresqlPropertiesTimescaledbArgs();

    /**
     * The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
     * 
     */
    @Import(name="maxBackgroundWorkers")
    private @Nullable Output<Integer> maxBackgroundWorkers;

    /**
     * @return The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
     * 
     */
    public Optional<Output<Integer>> maxBackgroundWorkers() {
        return Optional.ofNullable(this.maxBackgroundWorkers);
    }

    private ManagedDatabasePostgresqlPropertiesTimescaledbArgs() {}

    private ManagedDatabasePostgresqlPropertiesTimescaledbArgs(ManagedDatabasePostgresqlPropertiesTimescaledbArgs $) {
        this.maxBackgroundWorkers = $.maxBackgroundWorkers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabasePostgresqlPropertiesTimescaledbArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabasePostgresqlPropertiesTimescaledbArgs $;

        public Builder() {
            $ = new ManagedDatabasePostgresqlPropertiesTimescaledbArgs();
        }

        public Builder(ManagedDatabasePostgresqlPropertiesTimescaledbArgs defaults) {
            $ = new ManagedDatabasePostgresqlPropertiesTimescaledbArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxBackgroundWorkers The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
         * 
         * @return builder
         * 
         */
        public Builder maxBackgroundWorkers(@Nullable Output<Integer> maxBackgroundWorkers) {
            $.maxBackgroundWorkers = maxBackgroundWorkers;
            return this;
        }

        /**
         * @param maxBackgroundWorkers The number of background workers for timescaledb operations. You should configure this setting to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.
         * 
         * @return builder
         * 
         */
        public Builder maxBackgroundWorkers(Integer maxBackgroundWorkers) {
            return maxBackgroundWorkers(Output.of(maxBackgroundWorkers));
        }

        public ManagedDatabasePostgresqlPropertiesTimescaledbArgs build() {
            return $;
        }
    }

}
