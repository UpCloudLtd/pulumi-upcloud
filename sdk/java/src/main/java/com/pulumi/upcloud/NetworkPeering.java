// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.NetworkPeeringArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.NetworkPeeringState;
import com.pulumi.upcloud.outputs.NetworkPeeringNetwork;
import com.pulumi.upcloud.outputs.NetworkPeeringPeerNetwork;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Network peerings can be used to connect networks across accounts. For the network peering to become active, the peering must be made from both directions.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.upcloud.Router;
 * import com.pulumi.upcloud.RouterArgs;
 * import com.pulumi.upcloud.Network;
 * import com.pulumi.upcloud.NetworkArgs;
 * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
 * import com.pulumi.upcloud.NetworkPeering;
 * import com.pulumi.upcloud.NetworkPeeringArgs;
 * import com.pulumi.upcloud.inputs.NetworkPeeringNetworkArgs;
 * import com.pulumi.upcloud.inputs.NetworkPeeringPeerNetworkArgs;
 * import com.pulumi.codegen.internal.KeyedValue;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Network peering requires the networks to have routers attached to them.
 *         var this_ = new Router("this", RouterArgs.builder()
 *             .name("network-peering-example-router")
 *             .build());
 * 
 *         var example = new Network("example", NetworkArgs.builder()
 *             .name("network-peering-example-net")
 *             .zone("nl-ams1")
 *             .router(exampleUpcloudRouter.id())
 *             .ipNetwork(NetworkIpNetworkArgs.builder()
 *                 .address("10.0.0.0/24")
 *                 .dhcp(true)
 *                 .family("IPv4")
 *                 .build())
 *             .build());
 * 
 *         for (var i = 0; i < 1; i++) {
 *             new NetworkPeering("thisNetworkPeering-" + i, NetworkPeeringArgs.builder()
 *                 .name("network-peering-example-peering")
 *                 .network(NetworkPeeringNetworkArgs.builder()
 *                     .uuid(example.id())
 *                     .build())
 *                 .peerNetwork(NetworkPeeringPeerNetworkArgs.builder()
 *                     .uuid("0305723a-e5cb-4ef6-985d-e36ed44d133a")
 *                     .build())
 *                 .build());
 * 
 *         
 * }
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="upcloud:index/networkPeering:NetworkPeering")
public class NetworkPeering extends com.pulumi.resources.CustomResource {
    /**
     * Configured status of the network peering.
     * 
     */
    @Export(name="configuredStatus", refs={String.class}, tree="[0]")
    private Output<String> configuredStatus;

    /**
     * @return Configured status of the network peering.
     * 
     */
    public Output<String> configuredStatus() {
        return this.configuredStatus;
    }
    /**
     * User defined key-value pairs to classify the network peering.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the network peering.
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }
    /**
     * Name of the network peering.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the network peering.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Local network of the network peering.
     * 
     */
    @Export(name="network", refs={NetworkPeeringNetwork.class}, tree="[0]")
    private Output<NetworkPeeringNetwork> network;

    /**
     * @return Local network of the network peering.
     * 
     */
    public Output<NetworkPeeringNetwork> network() {
        return this.network;
    }
    /**
     * Peer network of the network peering.
     * 
     */
    @Export(name="peerNetwork", refs={NetworkPeeringPeerNetwork.class}, tree="[0]")
    private Output<NetworkPeeringPeerNetwork> peerNetwork;

    /**
     * @return Peer network of the network peering.
     * 
     */
    public Output<NetworkPeeringPeerNetwork> peerNetwork() {
        return this.peerNetwork;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NetworkPeering(java.lang.String name) {
        this(name, NetworkPeeringArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NetworkPeering(java.lang.String name, NetworkPeeringArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NetworkPeering(java.lang.String name, NetworkPeeringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/networkPeering:NetworkPeering", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NetworkPeering(java.lang.String name, Output<java.lang.String> id, @Nullable NetworkPeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/networkPeering:NetworkPeering", name, state, makeResourceOptions(options, id), false);
    }

    private static NetworkPeeringArgs makeArgs(NetworkPeeringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NetworkPeeringArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NetworkPeering get(java.lang.String name, Output<java.lang.String> id, @Nullable NetworkPeeringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NetworkPeering(name, id, state, options);
    }
}
