// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerBackendTlsConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerBackendTlsConfigArgs Empty = new LoadbalancerBackendTlsConfigArgs();

    /**
     * ID of the load balancer backend to which the TLS config is connected.
     * 
     */
    @Import(name="backend", required=true)
    private Output<String> backend;

    /**
     * @return ID of the load balancer backend to which the TLS config is connected.
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }

    /**
     * Reference to certificate bundle ID.
     * 
     */
    @Import(name="certificateBundle", required=true)
    private Output<String> certificateBundle;

    /**
     * @return Reference to certificate bundle ID.
     * 
     */
    public Output<String> certificateBundle() {
        return this.certificateBundle;
    }

    /**
     * The name of the TLS config. Must be unique within customer account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the TLS config. Must be unique within customer account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private LoadbalancerBackendTlsConfigArgs() {}

    private LoadbalancerBackendTlsConfigArgs(LoadbalancerBackendTlsConfigArgs $) {
        this.backend = $.backend;
        this.certificateBundle = $.certificateBundle;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerBackendTlsConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerBackendTlsConfigArgs $;

        public Builder() {
            $ = new LoadbalancerBackendTlsConfigArgs();
        }

        public Builder(LoadbalancerBackendTlsConfigArgs defaults) {
            $ = new LoadbalancerBackendTlsConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend ID of the load balancer backend to which the TLS config is connected.
         * 
         * @return builder
         * 
         */
        public Builder backend(Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend ID of the load balancer backend to which the TLS config is connected.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param certificateBundle Reference to certificate bundle ID.
         * 
         * @return builder
         * 
         */
        public Builder certificateBundle(Output<String> certificateBundle) {
            $.certificateBundle = certificateBundle;
            return this;
        }

        /**
         * @param certificateBundle Reference to certificate bundle ID.
         * 
         * @return builder
         * 
         */
        public Builder certificateBundle(String certificateBundle) {
            return certificateBundle(Output.of(certificateBundle));
        }

        /**
         * @param name The name of the TLS config. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the TLS config. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public LoadbalancerBackendTlsConfigArgs build() {
            if ($.backend == null) {
                throw new MissingRequiredPropertyException("LoadbalancerBackendTlsConfigArgs", "backend");
            }
            if ($.certificateBundle == null) {
                throw new MissingRequiredPropertyException("LoadbalancerBackendTlsConfigArgs", "certificateBundle");
            }
            return $;
        }
    }

}
