// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabaseUserRedisAccessControlArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabaseUserRedisAccessControlArgs Empty = new ManagedDatabaseUserRedisAccessControlArgs();

    /**
     * Set access control to all commands in specified categories.
     * 
     */
    @Import(name="categories")
    private @Nullable Output<String> categories;

    /**
     * @return Set access control to all commands in specified categories.
     * 
     */
    public Optional<Output<String>> categories() {
        return Optional.ofNullable(this.categories);
    }

    /**
     * Set access control to Pub/Sub channels.
     * 
     */
    @Import(name="channels")
    private @Nullable Output<String> channels;

    /**
     * @return Set access control to Pub/Sub channels.
     * 
     */
    public Optional<Output<String>> channels() {
        return Optional.ofNullable(this.channels);
    }

    /**
     * Set access control to commands.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<String> commands;

    /**
     * @return Set access control to commands.
     * 
     */
    public Optional<Output<String>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * Set access control to keys.
     * 
     */
    @Import(name="keys")
    private @Nullable Output<String> keys;

    /**
     * @return Set access control to keys.
     * 
     */
    public Optional<Output<String>> keys() {
        return Optional.ofNullable(this.keys);
    }

    private ManagedDatabaseUserRedisAccessControlArgs() {}

    private ManagedDatabaseUserRedisAccessControlArgs(ManagedDatabaseUserRedisAccessControlArgs $) {
        this.categories = $.categories;
        this.channels = $.channels;
        this.commands = $.commands;
        this.keys = $.keys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabaseUserRedisAccessControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabaseUserRedisAccessControlArgs $;

        public Builder() {
            $ = new ManagedDatabaseUserRedisAccessControlArgs();
        }

        public Builder(ManagedDatabaseUserRedisAccessControlArgs defaults) {
            $ = new ManagedDatabaseUserRedisAccessControlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categories Set access control to all commands in specified categories.
         * 
         * @return builder
         * 
         */
        public Builder categories(@Nullable Output<String> categories) {
            $.categories = categories;
            return this;
        }

        /**
         * @param categories Set access control to all commands in specified categories.
         * 
         * @return builder
         * 
         */
        public Builder categories(String categories) {
            return categories(Output.of(categories));
        }

        /**
         * @param channels Set access control to Pub/Sub channels.
         * 
         * @return builder
         * 
         */
        public Builder channels(@Nullable Output<String> channels) {
            $.channels = channels;
            return this;
        }

        /**
         * @param channels Set access control to Pub/Sub channels.
         * 
         * @return builder
         * 
         */
        public Builder channels(String channels) {
            return channels(Output.of(channels));
        }

        /**
         * @param commands Set access control to commands.
         * 
         * @return builder
         * 
         */
        public Builder commands(@Nullable Output<String> commands) {
            $.commands = commands;
            return this;
        }

        /**
         * @param commands Set access control to commands.
         * 
         * @return builder
         * 
         */
        public Builder commands(String commands) {
            return commands(Output.of(commands));
        }

        /**
         * @param keys Set access control to keys.
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable Output<String> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys Set access control to keys.
         * 
         * @return builder
         * 
         */
        public Builder keys(String keys) {
            return keys(Output.of(keys));
        }

        public ManagedDatabaseUserRedisAccessControlArgs build() {
            return $;
        }
    }

}
