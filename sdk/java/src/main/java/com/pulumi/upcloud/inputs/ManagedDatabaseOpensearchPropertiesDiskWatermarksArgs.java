// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs Empty = new ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs();

    /**
     * Flood stage watermark (percentage). The flood stage watermark for disk usage.
     * 
     */
    @Import(name="floodStage")
    private @Nullable Output<Integer> floodStage;

    /**
     * @return Flood stage watermark (percentage). The flood stage watermark for disk usage.
     * 
     */
    public Optional<Output<Integer>> floodStage() {
        return Optional.ofNullable(this.floodStage);
    }

    /**
     * High watermark (percentage). The high watermark for disk usage.
     * 
     */
    @Import(name="high")
    private @Nullable Output<Integer> high;

    /**
     * @return High watermark (percentage). The high watermark for disk usage.
     * 
     */
    public Optional<Output<Integer>> high() {
        return Optional.ofNullable(this.high);
    }

    /**
     * Low watermark (percentage). The low watermark for disk usage.
     * 
     */
    @Import(name="low")
    private @Nullable Output<Integer> low;

    /**
     * @return Low watermark (percentage). The low watermark for disk usage.
     * 
     */
    public Optional<Output<Integer>> low() {
        return Optional.ofNullable(this.low);
    }

    private ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs() {}

    private ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs(ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs $) {
        this.floodStage = $.floodStage;
        this.high = $.high;
        this.low = $.low;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs $;

        public Builder() {
            $ = new ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs();
        }

        public Builder(ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs defaults) {
            $ = new ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param floodStage Flood stage watermark (percentage). The flood stage watermark for disk usage.
         * 
         * @return builder
         * 
         */
        public Builder floodStage(@Nullable Output<Integer> floodStage) {
            $.floodStage = floodStage;
            return this;
        }

        /**
         * @param floodStage Flood stage watermark (percentage). The flood stage watermark for disk usage.
         * 
         * @return builder
         * 
         */
        public Builder floodStage(Integer floodStage) {
            return floodStage(Output.of(floodStage));
        }

        /**
         * @param high High watermark (percentage). The high watermark for disk usage.
         * 
         * @return builder
         * 
         */
        public Builder high(@Nullable Output<Integer> high) {
            $.high = high;
            return this;
        }

        /**
         * @param high High watermark (percentage). The high watermark for disk usage.
         * 
         * @return builder
         * 
         */
        public Builder high(Integer high) {
            return high(Output.of(high));
        }

        /**
         * @param low Low watermark (percentage). The low watermark for disk usage.
         * 
         * @return builder
         * 
         */
        public Builder low(@Nullable Output<Integer> low) {
            $.low = low;
            return this;
        }

        /**
         * @param low Low watermark (percentage). The low watermark for disk usage.
         * 
         * @return builder
         * 
         */
        public Builder low(Integer low) {
            return low(Output.of(low));
        }

        public ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs build() {
            return $;
        }
    }

}
