// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.ManagedDatabaseRedisPropertiesMigrationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabaseRedisPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabaseRedisPropertiesArgs Empty = new ManagedDatabaseRedisPropertiesArgs();

    /**
     * Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    @Import(name="automaticUtilityNetworkIpFilter")
    private @Nullable Output<Boolean> automaticUtilityNetworkIpFilter;

    /**
     * @return Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    public Optional<Output<Boolean>> automaticUtilityNetworkIpFilter() {
        return Optional.ofNullable(this.automaticUtilityNetworkIpFilter);
    }

    /**
     * The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    @Import(name="backupHour")
    private @Nullable Output<Integer> backupHour;

    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Output<Integer>> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }

    /**
     * The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    @Import(name="backupMinute")
    private @Nullable Output<Integer> backupMinute;

    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Output<Integer>> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }

    /**
     * IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Migrate data from existing server.
     * 
     */
    @Import(name="migration")
    private @Nullable Output<ManagedDatabaseRedisPropertiesMigrationArgs> migration;

    /**
     * @return Migrate data from existing server.
     * 
     */
    public Optional<Output<ManagedDatabaseRedisPropertiesMigrationArgs>> migration() {
        return Optional.ofNullable(this.migration);
    }

    /**
     * Public Access. Allow access to the service from the public Internet.
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<Boolean> publicAccess;

    /**
     * @return Public Access. Allow access to the service from the public Internet.
     * 
     */
    public Optional<Output<Boolean>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Default ACL for pub/sub channels used when Redis user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
     * 
     */
    @Import(name="redisAclChannelsDefault")
    private @Nullable Output<String> redisAclChannelsDefault;

    /**
     * @return Default ACL for pub/sub channels used when Redis user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
     * 
     */
    public Optional<Output<String>> redisAclChannelsDefault() {
        return Optional.ofNullable(this.redisAclChannelsDefault);
    }

    /**
     * Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
     * 
     */
    @Import(name="redisIoThreads")
    private @Nullable Output<Integer> redisIoThreads;

    /**
     * @return Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
     * 
     */
    public Optional<Output<Integer>> redisIoThreads() {
        return Optional.ofNullable(this.redisIoThreads);
    }

    /**
     * LFU maxmemory-policy counter decay time in minutes.
     * 
     */
    @Import(name="redisLfuDecayTime")
    private @Nullable Output<Integer> redisLfuDecayTime;

    /**
     * @return LFU maxmemory-policy counter decay time in minutes.
     * 
     */
    public Optional<Output<Integer>> redisLfuDecayTime() {
        return Optional.ofNullable(this.redisLfuDecayTime);
    }

    /**
     * Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
     * 
     */
    @Import(name="redisLfuLogFactor")
    private @Nullable Output<Integer> redisLfuLogFactor;

    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
     * 
     */
    public Optional<Output<Integer>> redisLfuLogFactor() {
        return Optional.ofNullable(this.redisLfuLogFactor);
    }

    /**
     * Redis maxmemory-policy.
     * 
     */
    @Import(name="redisMaxmemoryPolicy")
    private @Nullable Output<String> redisMaxmemoryPolicy;

    /**
     * @return Redis maxmemory-policy.
     * 
     */
    public Optional<Output<String>> redisMaxmemoryPolicy() {
        return Optional.ofNullable(this.redisMaxmemoryPolicy);
    }

    /**
     * Set notify-keyspace-events option.
     * 
     */
    @Import(name="redisNotifyKeyspaceEvents")
    private @Nullable Output<String> redisNotifyKeyspaceEvents;

    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    public Optional<Output<String>> redisNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.redisNotifyKeyspaceEvents);
    }

    /**
     * Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
     * 
     */
    @Import(name="redisNumberOfDatabases")
    private @Nullable Output<Integer> redisNumberOfDatabases;

    /**
     * @return Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
     * 
     */
    public Optional<Output<Integer>> redisNumberOfDatabases() {
        return Optional.ofNullable(this.redisNumberOfDatabases);
    }

    /**
     * Redis persistence. When persistence is &#39;rdb&#39;, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
     * 
     */
    @Import(name="redisPersistence")
    private @Nullable Output<String> redisPersistence;

    /**
     * @return Redis persistence. When persistence is &#39;rdb&#39;, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
     * 
     */
    public Optional<Output<String>> redisPersistence() {
        return Optional.ofNullable(this.redisPersistence);
    }

    /**
     * Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    @Import(name="redisPubsubClientOutputBufferLimit")
    private @Nullable Output<Integer> redisPubsubClientOutputBufferLimit;

    /**
     * @return Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    public Optional<Output<Integer>> redisPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.redisPubsubClientOutputBufferLimit);
    }

    /**
     * Require SSL to access Redis.
     * 
     */
    @Import(name="redisSsl")
    private @Nullable Output<Boolean> redisSsl;

    /**
     * @return Require SSL to access Redis.
     * 
     */
    public Optional<Output<Boolean>> redisSsl() {
        return Optional.ofNullable(this.redisSsl);
    }

    /**
     * Redis idle connection timeout in seconds.
     * 
     */
    @Import(name="redisTimeout")
    private @Nullable Output<Integer> redisTimeout;

    /**
     * @return Redis idle connection timeout in seconds.
     * 
     */
    public Optional<Output<Integer>> redisTimeout() {
        return Optional.ofNullable(this.redisTimeout);
    }

    /**
     * Redis major version.
     * 
     */
    @Import(name="redisVersion")
    private @Nullable Output<String> redisVersion;

    /**
     * @return Redis major version.
     * 
     */
    public Optional<Output<String>> redisVersion() {
        return Optional.ofNullable(this.redisVersion);
    }

    /**
     * Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    private ManagedDatabaseRedisPropertiesArgs() {}

    private ManagedDatabaseRedisPropertiesArgs(ManagedDatabaseRedisPropertiesArgs $) {
        this.automaticUtilityNetworkIpFilter = $.automaticUtilityNetworkIpFilter;
        this.backupHour = $.backupHour;
        this.backupMinute = $.backupMinute;
        this.ipFilters = $.ipFilters;
        this.migration = $.migration;
        this.publicAccess = $.publicAccess;
        this.redisAclChannelsDefault = $.redisAclChannelsDefault;
        this.redisIoThreads = $.redisIoThreads;
        this.redisLfuDecayTime = $.redisLfuDecayTime;
        this.redisLfuLogFactor = $.redisLfuLogFactor;
        this.redisMaxmemoryPolicy = $.redisMaxmemoryPolicy;
        this.redisNotifyKeyspaceEvents = $.redisNotifyKeyspaceEvents;
        this.redisNumberOfDatabases = $.redisNumberOfDatabases;
        this.redisPersistence = $.redisPersistence;
        this.redisPubsubClientOutputBufferLimit = $.redisPubsubClientOutputBufferLimit;
        this.redisSsl = $.redisSsl;
        this.redisTimeout = $.redisTimeout;
        this.redisVersion = $.redisVersion;
        this.serviceLog = $.serviceLog;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabaseRedisPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabaseRedisPropertiesArgs $;

        public Builder() {
            $ = new ManagedDatabaseRedisPropertiesArgs();
        }

        public Builder(ManagedDatabaseRedisPropertiesArgs defaults) {
            $ = new ManagedDatabaseRedisPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automaticUtilityNetworkIpFilter Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
         * 
         * @return builder
         * 
         */
        public Builder automaticUtilityNetworkIpFilter(@Nullable Output<Boolean> automaticUtilityNetworkIpFilter) {
            $.automaticUtilityNetworkIpFilter = automaticUtilityNetworkIpFilter;
            return this;
        }

        /**
         * @param automaticUtilityNetworkIpFilter Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
         * 
         * @return builder
         * 
         */
        public Builder automaticUtilityNetworkIpFilter(Boolean automaticUtilityNetworkIpFilter) {
            return automaticUtilityNetworkIpFilter(Output.of(automaticUtilityNetworkIpFilter));
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(@Nullable Output<Integer> backupHour) {
            $.backupHour = backupHour;
            return this;
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(Integer backupHour) {
            return backupHour(Output.of(backupHour));
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(@Nullable Output<Integer> backupMinute) {
            $.backupMinute = backupMinute;
            return this;
        }

        /**
         * @param backupMinute The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(Integer backupMinute) {
            return backupMinute(Output.of(backupMinute));
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param migration Migrate data from existing server.
         * 
         * @return builder
         * 
         */
        public Builder migration(@Nullable Output<ManagedDatabaseRedisPropertiesMigrationArgs> migration) {
            $.migration = migration;
            return this;
        }

        /**
         * @param migration Migrate data from existing server.
         * 
         * @return builder
         * 
         */
        public Builder migration(ManagedDatabaseRedisPropertiesMigrationArgs migration) {
            return migration(Output.of(migration));
        }

        /**
         * @param publicAccess Public Access. Allow access to the service from the public Internet.
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<Boolean> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Public Access. Allow access to the service from the public Internet.
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(Boolean publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param redisAclChannelsDefault Default ACL for pub/sub channels used when Redis user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
         * 
         * @return builder
         * 
         */
        public Builder redisAclChannelsDefault(@Nullable Output<String> redisAclChannelsDefault) {
            $.redisAclChannelsDefault = redisAclChannelsDefault;
            return this;
        }

        /**
         * @param redisAclChannelsDefault Default ACL for pub/sub channels used when Redis user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, allChannels is assumed to keep backward compatibility. This option doesn&#39;t affect Redis configuration acl-pubsub-default.
         * 
         * @return builder
         * 
         */
        public Builder redisAclChannelsDefault(String redisAclChannelsDefault) {
            return redisAclChannelsDefault(Output.of(redisAclChannelsDefault));
        }

        /**
         * @param redisIoThreads Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
         * 
         * @return builder
         * 
         */
        public Builder redisIoThreads(@Nullable Output<Integer> redisIoThreads) {
            $.redisIoThreads = redisIoThreads;
            return this;
        }

        /**
         * @param redisIoThreads Redis IO thread count. Set Redis IO thread count. Changing this will cause a restart of the Redis service.
         * 
         * @return builder
         * 
         */
        public Builder redisIoThreads(Integer redisIoThreads) {
            return redisIoThreads(Output.of(redisIoThreads));
        }

        /**
         * @param redisLfuDecayTime LFU maxmemory-policy counter decay time in minutes.
         * 
         * @return builder
         * 
         */
        public Builder redisLfuDecayTime(@Nullable Output<Integer> redisLfuDecayTime) {
            $.redisLfuDecayTime = redisLfuDecayTime;
            return this;
        }

        /**
         * @param redisLfuDecayTime LFU maxmemory-policy counter decay time in minutes.
         * 
         * @return builder
         * 
         */
        public Builder redisLfuDecayTime(Integer redisLfuDecayTime) {
            return redisLfuDecayTime(Output.of(redisLfuDecayTime));
        }

        /**
         * @param redisLfuLogFactor Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
         * 
         * @return builder
         * 
         */
        public Builder redisLfuLogFactor(@Nullable Output<Integer> redisLfuLogFactor) {
            $.redisLfuLogFactor = redisLfuLogFactor;
            return this;
        }

        /**
         * @param redisLfuLogFactor Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
         * 
         * @return builder
         * 
         */
        public Builder redisLfuLogFactor(Integer redisLfuLogFactor) {
            return redisLfuLogFactor(Output.of(redisLfuLogFactor));
        }

        /**
         * @param redisMaxmemoryPolicy Redis maxmemory-policy.
         * 
         * @return builder
         * 
         */
        public Builder redisMaxmemoryPolicy(@Nullable Output<String> redisMaxmemoryPolicy) {
            $.redisMaxmemoryPolicy = redisMaxmemoryPolicy;
            return this;
        }

        /**
         * @param redisMaxmemoryPolicy Redis maxmemory-policy.
         * 
         * @return builder
         * 
         */
        public Builder redisMaxmemoryPolicy(String redisMaxmemoryPolicy) {
            return redisMaxmemoryPolicy(Output.of(redisMaxmemoryPolicy));
        }

        /**
         * @param redisNotifyKeyspaceEvents Set notify-keyspace-events option.
         * 
         * @return builder
         * 
         */
        public Builder redisNotifyKeyspaceEvents(@Nullable Output<String> redisNotifyKeyspaceEvents) {
            $.redisNotifyKeyspaceEvents = redisNotifyKeyspaceEvents;
            return this;
        }

        /**
         * @param redisNotifyKeyspaceEvents Set notify-keyspace-events option.
         * 
         * @return builder
         * 
         */
        public Builder redisNotifyKeyspaceEvents(String redisNotifyKeyspaceEvents) {
            return redisNotifyKeyspaceEvents(Output.of(redisNotifyKeyspaceEvents));
        }

        /**
         * @param redisNumberOfDatabases Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
         * 
         * @return builder
         * 
         */
        public Builder redisNumberOfDatabases(@Nullable Output<Integer> redisNumberOfDatabases) {
            $.redisNumberOfDatabases = redisNumberOfDatabases;
            return this;
        }

        /**
         * @param redisNumberOfDatabases Number of Redis databases. Set number of Redis databases. Changing this will cause a restart of the Redis service.
         * 
         * @return builder
         * 
         */
        public Builder redisNumberOfDatabases(Integer redisNumberOfDatabases) {
            return redisNumberOfDatabases(Output.of(redisNumberOfDatabases));
        }

        /**
         * @param redisPersistence Redis persistence. When persistence is &#39;rdb&#39;, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder redisPersistence(@Nullable Output<String> redisPersistence) {
            $.redisPersistence = redisPersistence;
            return this;
        }

        /**
         * @param redisPersistence Redis persistence. When persistence is &#39;rdb&#39;, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to the backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps or backups are done, so data can be lost at any moment if the service is restarted for any reason, or if the service is powered off. Also, the service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder redisPersistence(String redisPersistence) {
            return redisPersistence(Output.of(redisPersistence));
        }

        /**
         * @param redisPubsubClientOutputBufferLimit Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
         * 
         * @return builder
         * 
         */
        public Builder redisPubsubClientOutputBufferLimit(@Nullable Output<Integer> redisPubsubClientOutputBufferLimit) {
            $.redisPubsubClientOutputBufferLimit = redisPubsubClientOutputBufferLimit;
            return this;
        }

        /**
         * @param redisPubsubClientOutputBufferLimit Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
         * 
         * @return builder
         * 
         */
        public Builder redisPubsubClientOutputBufferLimit(Integer redisPubsubClientOutputBufferLimit) {
            return redisPubsubClientOutputBufferLimit(Output.of(redisPubsubClientOutputBufferLimit));
        }

        /**
         * @param redisSsl Require SSL to access Redis.
         * 
         * @return builder
         * 
         */
        public Builder redisSsl(@Nullable Output<Boolean> redisSsl) {
            $.redisSsl = redisSsl;
            return this;
        }

        /**
         * @param redisSsl Require SSL to access Redis.
         * 
         * @return builder
         * 
         */
        public Builder redisSsl(Boolean redisSsl) {
            return redisSsl(Output.of(redisSsl));
        }

        /**
         * @param redisTimeout Redis idle connection timeout in seconds.
         * 
         * @return builder
         * 
         */
        public Builder redisTimeout(@Nullable Output<Integer> redisTimeout) {
            $.redisTimeout = redisTimeout;
            return this;
        }

        /**
         * @param redisTimeout Redis idle connection timeout in seconds.
         * 
         * @return builder
         * 
         */
        public Builder redisTimeout(Integer redisTimeout) {
            return redisTimeout(Output.of(redisTimeout));
        }

        /**
         * @param redisVersion Redis major version.
         * 
         * @return builder
         * 
         */
        public Builder redisVersion(@Nullable Output<String> redisVersion) {
            $.redisVersion = redisVersion;
            return this;
        }

        /**
         * @param redisVersion Redis major version.
         * 
         * @return builder
         * 
         */
        public Builder redisVersion(String redisVersion) {
            return redisVersion(Output.of(redisVersion));
        }

        /**
         * @param serviceLog Service logging. Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Service logging. Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        public ManagedDatabaseRedisPropertiesArgs build() {
            return $;
        }
    }

}
