// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesAuthFailureListenersArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesClusterSearchRequestSlowlogArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesIndexRollupArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesIndexTemplateArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesOpenidArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesOpensearchDashboardsArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesSamlArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesSegrepArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesShardIndexingPressureArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabaseOpensearchPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabaseOpensearchPropertiesArgs Empty = new ManagedDatabaseOpensearchPropertiesArgs();

    /**
     * action.auto_create_index. Explicitly allow or block automatic creation of indices. Defaults to true.
     * 
     */
    @Import(name="actionAutoCreateIndexEnabled")
    private @Nullable Output<Boolean> actionAutoCreateIndexEnabled;

    /**
     * @return action.auto_create_index. Explicitly allow or block automatic creation of indices. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> actionAutoCreateIndexEnabled() {
        return Optional.ofNullable(this.actionAutoCreateIndexEnabled);
    }

    /**
     * Require explicit index names when deleting.
     * 
     */
    @Import(name="actionDestructiveRequiresName")
    private @Nullable Output<Boolean> actionDestructiveRequiresName;

    /**
     * @return Require explicit index names when deleting.
     * 
     */
    public Optional<Output<Boolean>> actionDestructiveRequiresName() {
        return Optional.ofNullable(this.actionDestructiveRequiresName);
    }

    /**
     * Opensearch Security Plugin Settings.
     * 
     */
    @Import(name="authFailureListeners")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesAuthFailureListenersArgs> authFailureListeners;

    /**
     * @return Opensearch Security Plugin Settings.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesAuthFailureListenersArgs>> authFailureListeners() {
        return Optional.ofNullable(this.authFailureListeners);
    }

    /**
     * Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    @Import(name="automaticUtilityNetworkIpFilter")
    private @Nullable Output<Boolean> automaticUtilityNetworkIpFilter;

    /**
     * @return Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    public Optional<Output<Boolean>> automaticUtilityNetworkIpFilter() {
        return Optional.ofNullable(this.automaticUtilityNetworkIpFilter);
    }

    /**
     * Controls the number of shards allowed in the cluster per data node.
     * 
     */
    @Import(name="clusterMaxShardsPerNode")
    private @Nullable Output<Integer> clusterMaxShardsPerNode;

    /**
     * @return Controls the number of shards allowed in the cluster per data node.
     * 
     */
    public Optional<Output<Integer>> clusterMaxShardsPerNode() {
        return Optional.ofNullable(this.clusterMaxShardsPerNode);
    }

    /**
     * When set to true, OpenSearch attempts to evenly distribute the primary shards between the cluster nodes. Enabling this setting does not always guarantee an equal number of primary shards on each node, especially in the event of a failover. Changing this setting to false after it was set to true does not invoke redistribution of primary shards. Default is false.
     * 
     */
    @Import(name="clusterRoutingAllocationBalancePreferPrimary")
    private @Nullable Output<Boolean> clusterRoutingAllocationBalancePreferPrimary;

    /**
     * @return When set to true, OpenSearch attempts to evenly distribute the primary shards between the cluster nodes. Enabling this setting does not always guarantee an equal number of primary shards on each node, especially in the event of a failover. Changing this setting to false after it was set to true does not invoke redistribution of primary shards. Default is false.
     * 
     */
    public Optional<Output<Boolean>> clusterRoutingAllocationBalancePreferPrimary() {
        return Optional.ofNullable(this.clusterRoutingAllocationBalancePreferPrimary);
    }

    /**
     * Concurrent incoming/outgoing shard recoveries per node. How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to node cpu count * 2.
     * 
     */
    @Import(name="clusterRoutingAllocationNodeConcurrentRecoveries")
    private @Nullable Output<Integer> clusterRoutingAllocationNodeConcurrentRecoveries;

    /**
     * @return Concurrent incoming/outgoing shard recoveries per node. How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to node cpu count * 2.
     * 
     */
    public Optional<Output<Integer>> clusterRoutingAllocationNodeConcurrentRecoveries() {
        return Optional.ofNullable(this.clusterRoutingAllocationNodeConcurrentRecoveries);
    }

    @Import(name="clusterSearchRequestSlowlog")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesClusterSearchRequestSlowlogArgs> clusterSearchRequestSlowlog;

    public Optional<Output<ManagedDatabaseOpensearchPropertiesClusterSearchRequestSlowlogArgs>> clusterSearchRequestSlowlog() {
        return Optional.ofNullable(this.clusterSearchRequestSlowlog);
    }

    /**
     * Custom domain. Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
     * 
     */
    @Import(name="customDomain")
    private @Nullable Output<String> customDomain;

    /**
     * @return Custom domain. Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
     * 
     */
    public Optional<Output<String>> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }

    /**
     * Watermark settings.
     * 
     */
    @Import(name="diskWatermarks")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs> diskWatermarks;

    /**
     * @return Watermark settings.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs>> diskWatermarks() {
        return Optional.ofNullable(this.diskWatermarks);
    }

    /**
     * Elasticsearch major version.
     * 
     */
    @Import(name="elasticsearchVersion")
    private @Nullable Output<String> elasticsearchVersion;

    /**
     * @return Elasticsearch major version.
     * 
     */
    public Optional<Output<String>> elasticsearchVersion() {
        return Optional.ofNullable(this.elasticsearchVersion);
    }

    /**
     * Sender name placeholder to be used in Opensearch Dashboards and Opensearch keystore. This should be identical to the Sender name defined in Opensearch dashboards.
     * 
     */
    @Import(name="emailSenderName")
    private @Nullable Output<String> emailSenderName;

    /**
     * @return Sender name placeholder to be used in Opensearch Dashboards and Opensearch keystore. This should be identical to the Sender name defined in Opensearch dashboards.
     * 
     */
    public Optional<Output<String>> emailSenderName() {
        return Optional.ofNullable(this.emailSenderName);
    }

    /**
     * Sender password for Opensearch alerts to authenticate with SMTP server. Sender password for Opensearch alerts to authenticate with SMTP server.
     * 
     */
    @Import(name="emailSenderPassword")
    private @Nullable Output<String> emailSenderPassword;

    /**
     * @return Sender password for Opensearch alerts to authenticate with SMTP server. Sender password for Opensearch alerts to authenticate with SMTP server.
     * 
     */
    public Optional<Output<String>> emailSenderPassword() {
        return Optional.ofNullable(this.emailSenderPassword);
    }

    /**
     * Sender username for Opensearch alerts.
     * 
     */
    @Import(name="emailSenderUsername")
    private @Nullable Output<String> emailSenderUsername;

    /**
     * @return Sender username for Opensearch alerts.
     * 
     */
    public Optional<Output<String>> emailSenderUsername() {
        return Optional.ofNullable(this.emailSenderUsername);
    }

    /**
     * Enable remote-backed storage.
     * 
     */
    @Import(name="enableRemoteBackedStorage")
    private @Nullable Output<Boolean> enableRemoteBackedStorage;

    /**
     * @return Enable remote-backed storage.
     * 
     */
    public Optional<Output<Boolean>> enableRemoteBackedStorage() {
        return Optional.ofNullable(this.enableRemoteBackedStorage);
    }

    /**
     * Enable searchable snapshots.
     * 
     */
    @Import(name="enableSearchableSnapshots")
    private @Nullable Output<Boolean> enableSearchableSnapshots;

    /**
     * @return Enable searchable snapshots.
     * 
     */
    public Optional<Output<Boolean>> enableSearchableSnapshots() {
        return Optional.ofNullable(this.enableSearchableSnapshots);
    }

    /**
     * Enable/Disable security audit.
     * 
     */
    @Import(name="enableSecurityAudit")
    private @Nullable Output<Boolean> enableSecurityAudit;

    /**
     * @return Enable/Disable security audit.
     * 
     */
    public Optional<Output<Boolean>> enableSecurityAudit() {
        return Optional.ofNullable(this.enableSecurityAudit);
    }

    /**
     * Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes.
     * 
     */
    @Import(name="httpMaxContentLength")
    private @Nullable Output<Integer> httpMaxContentLength;

    /**
     * @return Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes.
     * 
     */
    public Optional<Output<Integer>> httpMaxContentLength() {
        return Optional.ofNullable(this.httpMaxContentLength);
    }

    /**
     * The max size of allowed headers, in bytes.
     * 
     */
    @Import(name="httpMaxHeaderSize")
    private @Nullable Output<Integer> httpMaxHeaderSize;

    /**
     * @return The max size of allowed headers, in bytes.
     * 
     */
    public Optional<Output<Integer>> httpMaxHeaderSize() {
        return Optional.ofNullable(this.httpMaxHeaderSize);
    }

    /**
     * The max length of an HTTP URL, in bytes.
     * 
     */
    @Import(name="httpMaxInitialLineLength")
    private @Nullable Output<Integer> httpMaxInitialLineLength;

    /**
     * @return The max length of an HTTP URL, in bytes.
     * 
     */
    public Optional<Output<Integer>> httpMaxInitialLineLength() {
        return Optional.ofNullable(this.httpMaxInitialLineLength);
    }

    /**
     * Index patterns.
     * 
     */
    @Import(name="indexPatterns")
    private @Nullable Output<List<String>> indexPatterns;

    /**
     * @return Index patterns.
     * 
     */
    public Optional<Output<List<String>>> indexPatterns() {
        return Optional.ofNullable(this.indexPatterns);
    }

    /**
     * Index rollup settings.
     * 
     */
    @Import(name="indexRollup")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesIndexRollupArgs> indexRollup;

    /**
     * @return Index rollup settings.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesIndexRollupArgs>> indexRollup() {
        return Optional.ofNullable(this.indexRollup);
    }

    /**
     * Template settings for all new indexes.
     * 
     */
    @Import(name="indexTemplate")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesIndexTemplateArgs> indexTemplate;

    /**
     * @return Template settings for all new indexes.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesIndexTemplateArgs>> indexTemplate() {
        return Optional.ofNullable(this.indexTemplate);
    }

    /**
     * Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.
     * 
     */
    @Import(name="indicesFielddataCacheSize")
    private @Nullable Output<Integer> indicesFielddataCacheSize;

    /**
     * @return Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.
     * 
     */
    public Optional<Output<Integer>> indicesFielddataCacheSize() {
        return Optional.ofNullable(this.indicesFielddataCacheSize);
    }

    /**
     * Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.
     * 
     */
    @Import(name="indicesMemoryIndexBufferSize")
    private @Nullable Output<Integer> indicesMemoryIndexBufferSize;

    /**
     * @return Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.
     * 
     */
    public Optional<Output<Integer>> indicesMemoryIndexBufferSize() {
        return Optional.ofNullable(this.indicesMemoryIndexBufferSize);
    }

    /**
     * Absolute value. Default is unbound. Doesn&#39;t work without indices.memory.index_buffer_size. Maximum amount of heap used for query cache, an absolute indices.memory.index_buffer_size maximum hard limit.
     * 
     */
    @Import(name="indicesMemoryMaxIndexBufferSize")
    private @Nullable Output<Integer> indicesMemoryMaxIndexBufferSize;

    /**
     * @return Absolute value. Default is unbound. Doesn&#39;t work without indices.memory.index_buffer_size. Maximum amount of heap used for query cache, an absolute indices.memory.index_buffer_size maximum hard limit.
     * 
     */
    public Optional<Output<Integer>> indicesMemoryMaxIndexBufferSize() {
        return Optional.ofNullable(this.indicesMemoryMaxIndexBufferSize);
    }

    /**
     * Absolute value. Default is 48mb. Doesn&#39;t work without indices.memory.index_buffer_size. Minimum amount of heap used for query cache, an absolute indices.memory.index_buffer_size minimal hard limit.
     * 
     */
    @Import(name="indicesMemoryMinIndexBufferSize")
    private @Nullable Output<Integer> indicesMemoryMinIndexBufferSize;

    /**
     * @return Absolute value. Default is 48mb. Doesn&#39;t work without indices.memory.index_buffer_size. Minimum amount of heap used for query cache, an absolute indices.memory.index_buffer_size minimal hard limit.
     * 
     */
    public Optional<Output<Integer>> indicesMemoryMinIndexBufferSize() {
        return Optional.ofNullable(this.indicesMemoryMinIndexBufferSize);
    }

    /**
     * Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other OpenSearch functionality.
     * 
     */
    @Import(name="indicesQueriesCacheSize")
    private @Nullable Output<Integer> indicesQueriesCacheSize;

    /**
     * @return Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other OpenSearch functionality.
     * 
     */
    public Optional<Output<Integer>> indicesQueriesCacheSize() {
        return Optional.ofNullable(this.indicesQueriesCacheSize);
    }

    /**
     * Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.
     * 
     */
    @Import(name="indicesQueryBoolMaxClauseCount")
    private @Nullable Output<Integer> indicesQueryBoolMaxClauseCount;

    /**
     * @return Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.
     * 
     */
    public Optional<Output<Integer>> indicesQueryBoolMaxClauseCount() {
        return Optional.ofNullable(this.indicesQueryBoolMaxClauseCount);
    }

    /**
     * Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb.
     * 
     */
    @Import(name="indicesRecoveryMaxBytesPerSec")
    private @Nullable Output<Integer> indicesRecoveryMaxBytesPerSec;

    /**
     * @return Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb.
     * 
     */
    public Optional<Output<Integer>> indicesRecoveryMaxBytesPerSec() {
        return Optional.ofNullable(this.indicesRecoveryMaxBytesPerSec);
    }

    /**
     * Number of file chunks sent in parallel for each recovery. Defaults to 2.
     * 
     */
    @Import(name="indicesRecoveryMaxConcurrentFileChunks")
    private @Nullable Output<Integer> indicesRecoveryMaxConcurrentFileChunks;

    /**
     * @return Number of file chunks sent in parallel for each recovery. Defaults to 2.
     * 
     */
    public Optional<Output<Integer>> indicesRecoveryMaxConcurrentFileChunks() {
        return Optional.ofNullable(this.indicesRecoveryMaxConcurrentFileChunks);
    }

    /**
     * IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    @Import(name="ipFilters")
    private @Nullable Output<List<String>> ipFilters;

    /**
     * @return IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public Optional<Output<List<String>>> ipFilters() {
        return Optional.ofNullable(this.ipFilters);
    }

    /**
     * Specifies whether ISM is enabled or not.
     * 
     */
    @Import(name="ismEnabled")
    private @Nullable Output<Boolean> ismEnabled;

    /**
     * @return Specifies whether ISM is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> ismEnabled() {
        return Optional.ofNullable(this.ismEnabled);
    }

    /**
     * Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document.
     * 
     */
    @Import(name="ismHistoryEnabled")
    private @Nullable Output<Boolean> ismHistoryEnabled;

    /**
     * @return Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document.
     * 
     */
    public Optional<Output<Boolean>> ismHistoryEnabled() {
        return Optional.ofNullable(this.ismHistoryEnabled);
    }

    /**
     * The maximum age before rolling over the audit history index in hours.
     * 
     */
    @Import(name="ismHistoryMaxAge")
    private @Nullable Output<Integer> ismHistoryMaxAge;

    /**
     * @return The maximum age before rolling over the audit history index in hours.
     * 
     */
    public Optional<Output<Integer>> ismHistoryMaxAge() {
        return Optional.ofNullable(this.ismHistoryMaxAge);
    }

    /**
     * The maximum number of documents before rolling over the audit history index.
     * 
     */
    @Import(name="ismHistoryMaxDocs")
    private @Nullable Output<Integer> ismHistoryMaxDocs;

    /**
     * @return The maximum number of documents before rolling over the audit history index.
     * 
     */
    public Optional<Output<Integer>> ismHistoryMaxDocs() {
        return Optional.ofNullable(this.ismHistoryMaxDocs);
    }

    /**
     * The time between rollover checks for the audit history index in hours.
     * 
     */
    @Import(name="ismHistoryRolloverCheckPeriod")
    private @Nullable Output<Integer> ismHistoryRolloverCheckPeriod;

    /**
     * @return The time between rollover checks for the audit history index in hours.
     * 
     */
    public Optional<Output<Integer>> ismHistoryRolloverCheckPeriod() {
        return Optional.ofNullable(this.ismHistoryRolloverCheckPeriod);
    }

    /**
     * How long audit history indices are kept in days.
     * 
     */
    @Import(name="ismHistoryRolloverRetentionPeriod")
    private @Nullable Output<Integer> ismHistoryRolloverRetentionPeriod;

    /**
     * @return How long audit history indices are kept in days.
     * 
     */
    public Optional<Output<Integer>> ismHistoryRolloverRetentionPeriod() {
        return Optional.ofNullable(this.ismHistoryRolloverRetentionPeriod);
    }

    /**
     * Don&#39;t reset index.refresh_interval to the default value. Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
     * 
     */
    @Import(name="keepIndexRefreshInterval")
    private @Nullable Output<Boolean> keepIndexRefreshInterval;

    /**
     * @return Don&#39;t reset index.refresh_interval to the default value. Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
     * 
     */
    public Optional<Output<Boolean>> keepIndexRefreshInterval() {
        return Optional.ofNullable(this.keepIndexRefreshInterval);
    }

    /**
     * Enable or disable KNN memory circuit breaker. Defaults to true.
     * 
     */
    @Import(name="knnMemoryCircuitBreakerEnabled")
    private @Nullable Output<Boolean> knnMemoryCircuitBreakerEnabled;

    /**
     * @return Enable or disable KNN memory circuit breaker. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> knnMemoryCircuitBreakerEnabled() {
        return Optional.ofNullable(this.knnMemoryCircuitBreakerEnabled);
    }

    /**
     * Maximum amount of memory that can be used for KNN index. Defaults to 50% of the JVM heap size.
     * 
     */
    @Import(name="knnMemoryCircuitBreakerLimit")
    private @Nullable Output<Integer> knnMemoryCircuitBreakerLimit;

    /**
     * @return Maximum amount of memory that can be used for KNN index. Defaults to 50% of the JVM heap size.
     * 
     */
    public Optional<Output<Integer>> knnMemoryCircuitBreakerLimit() {
        return Optional.ofNullable(this.knnMemoryCircuitBreakerLimit);
    }

    /**
     * OpenSearch OpenID Connect Configuration.
     * 
     */
    @Import(name="openid")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesOpenidArgs> openid;

    /**
     * @return OpenSearch OpenID Connect Configuration.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesOpenidArgs>> openid() {
        return Optional.ofNullable(this.openid);
    }

    /**
     * OpenSearch Dashboards settings.
     * 
     */
    @Import(name="opensearchDashboards")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesOpensearchDashboardsArgs> opensearchDashboards;

    /**
     * @return OpenSearch Dashboards settings.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesOpensearchDashboardsArgs>> opensearchDashboards() {
        return Optional.ofNullable(this.opensearchDashboards);
    }

    /**
     * Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false.
     * 
     */
    @Import(name="overrideMainResponseVersion")
    private @Nullable Output<Boolean> overrideMainResponseVersion;

    /**
     * @return Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false.
     * 
     */
    public Optional<Output<Boolean>> overrideMainResponseVersion() {
        return Optional.ofNullable(this.overrideMainResponseVersion);
    }

    /**
     * Enable or disable filtering of alerting by backend roles. Requires Security plugin. Defaults to false.
     * 
     */
    @Import(name="pluginsAlertingFilterByBackendRoles")
    private @Nullable Output<Boolean> pluginsAlertingFilterByBackendRoles;

    /**
     * @return Enable or disable filtering of alerting by backend roles. Requires Security plugin. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> pluginsAlertingFilterByBackendRoles() {
        return Optional.ofNullable(this.pluginsAlertingFilterByBackendRoles);
    }

    /**
     * Public Access. Allow access to the service from the public Internet.
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<Boolean> publicAccess;

    /**
     * @return Public Access. Allow access to the service from the public Internet.
     * 
     */
    public Optional<Output<Boolean>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
     * 
     */
    @Import(name="reindexRemoteWhitelists")
    private @Nullable Output<List<String>> reindexRemoteWhitelists;

    /**
     * @return Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
     * 
     */
    public Optional<Output<List<String>>> reindexRemoteWhitelists() {
        return Optional.ofNullable(this.reindexRemoteWhitelists);
    }

    /**
     * OpenSearch SAML configuration.
     * 
     */
    @Import(name="saml")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesSamlArgs> saml;

    /**
     * @return OpenSearch SAML configuration.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesSamlArgs>> saml() {
        return Optional.ofNullable(this.saml);
    }

    /**
     * Script max compilation rate - circuit breaker to prevent/minimize OOMs. Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context.
     * 
     */
    @Import(name="scriptMaxCompilationsRate")
    private @Nullable Output<String> scriptMaxCompilationsRate;

    /**
     * @return Script max compilation rate - circuit breaker to prevent/minimize OOMs. Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context.
     * 
     */
    public Optional<Output<String>> scriptMaxCompilationsRate() {
        return Optional.ofNullable(this.scriptMaxCompilationsRate);
    }

    /**
     * Search Backpressure Settings.
     * 
     */
    @Import(name="searchBackpressure")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs> searchBackpressure;

    /**
     * @return Search Backpressure Settings.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs>> searchBackpressure() {
        return Optional.ofNullable(this.searchBackpressure);
    }

    @Import(name="searchInsightsTopQueries")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesArgs> searchInsightsTopQueries;

    public Optional<Output<ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesArgs>> searchInsightsTopQueries() {
        return Optional.ofNullable(this.searchInsightsTopQueries);
    }

    /**
     * Maximum number of aggregation buckets allowed in a single response. OpenSearch default value is used when this is not defined.
     * 
     */
    @Import(name="searchMaxBuckets")
    private @Nullable Output<Integer> searchMaxBuckets;

    /**
     * @return Maximum number of aggregation buckets allowed in a single response. OpenSearch default value is used when this is not defined.
     * 
     */
    public Optional<Output<Integer>> searchMaxBuckets() {
        return Optional.ofNullable(this.searchMaxBuckets);
    }

    /**
     * Segment Replication Backpressure Settings.
     * 
     */
    @Import(name="segrep")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesSegrepArgs> segrep;

    /**
     * @return Segment Replication Backpressure Settings.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesSegrepArgs>> segrep() {
        return Optional.ofNullable(this.segrep);
    }

    /**
     * Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    @Import(name="serviceLog")
    private @Nullable Output<Boolean> serviceLog;

    /**
     * @return Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Output<Boolean>> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }

    /**
     * Shard indexing back pressure settings.
     * 
     */
    @Import(name="shardIndexingPressure")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesShardIndexingPressureArgs> shardIndexingPressure;

    /**
     * @return Shard indexing back pressure settings.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesShardIndexingPressureArgs>> shardIndexingPressure() {
        return Optional.ofNullable(this.shardIndexingPressure);
    }

    /**
     * analyze thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     * 
     */
    @Import(name="threadPoolAnalyzeQueueSize")
    private @Nullable Output<Integer> threadPoolAnalyzeQueueSize;

    /**
     * @return analyze thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     * 
     */
    public Optional<Output<Integer>> threadPoolAnalyzeQueueSize() {
        return Optional.ofNullable(this.threadPoolAnalyzeQueueSize);
    }

    /**
     * analyze thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolAnalyzeSize")
    private @Nullable Output<Integer> threadPoolAnalyzeSize;

    /**
     * @return analyze thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolAnalyzeSize() {
        return Optional.ofNullable(this.threadPoolAnalyzeSize);
    }

    /**
     * force_merge thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolForceMergeSize")
    private @Nullable Output<Integer> threadPoolForceMergeSize;

    /**
     * @return force_merge thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolForceMergeSize() {
        return Optional.ofNullable(this.threadPoolForceMergeSize);
    }

    /**
     * get thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     * 
     */
    @Import(name="threadPoolGetQueueSize")
    private @Nullable Output<Integer> threadPoolGetQueueSize;

    /**
     * @return get thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     * 
     */
    public Optional<Output<Integer>> threadPoolGetQueueSize() {
        return Optional.ofNullable(this.threadPoolGetQueueSize);
    }

    /**
     * get thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolGetSize")
    private @Nullable Output<Integer> threadPoolGetSize;

    /**
     * @return get thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolGetSize() {
        return Optional.ofNullable(this.threadPoolGetSize);
    }

    /**
     * search thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     * 
     */
    @Import(name="threadPoolSearchQueueSize")
    private @Nullable Output<Integer> threadPoolSearchQueueSize;

    /**
     * @return search thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     * 
     */
    public Optional<Output<Integer>> threadPoolSearchQueueSize() {
        return Optional.ofNullable(this.threadPoolSearchQueueSize);
    }

    /**
     * search thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolSearchSize")
    private @Nullable Output<Integer> threadPoolSearchSize;

    /**
     * @return search thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolSearchSize() {
        return Optional.ofNullable(this.threadPoolSearchSize);
    }

    /**
     * search_throttled thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     * 
     */
    @Import(name="threadPoolSearchThrottledQueueSize")
    private @Nullable Output<Integer> threadPoolSearchThrottledQueueSize;

    /**
     * @return search_throttled thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     * 
     */
    public Optional<Output<Integer>> threadPoolSearchThrottledQueueSize() {
        return Optional.ofNullable(this.threadPoolSearchThrottledQueueSize);
    }

    /**
     * search_throttled thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolSearchThrottledSize")
    private @Nullable Output<Integer> threadPoolSearchThrottledSize;

    /**
     * @return search_throttled thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolSearchThrottledSize() {
        return Optional.ofNullable(this.threadPoolSearchThrottledSize);
    }

    /**
     * write thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     * 
     */
    @Import(name="threadPoolWriteQueueSize")
    private @Nullable Output<Integer> threadPoolWriteQueueSize;

    /**
     * @return write thread pool queue size. Size for the thread pool queue. See documentation for exact details.
     * 
     */
    public Optional<Output<Integer>> threadPoolWriteQueueSize() {
        return Optional.ofNullable(this.threadPoolWriteQueueSize);
    }

    /**
     * write thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolWriteSize")
    private @Nullable Output<Integer> threadPoolWriteSize;

    /**
     * @return write thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolWriteSize() {
        return Optional.ofNullable(this.threadPoolWriteSize);
    }

    /**
     * OpenSearch major version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return OpenSearch major version.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ManagedDatabaseOpensearchPropertiesArgs() {}

    private ManagedDatabaseOpensearchPropertiesArgs(ManagedDatabaseOpensearchPropertiesArgs $) {
        this.actionAutoCreateIndexEnabled = $.actionAutoCreateIndexEnabled;
        this.actionDestructiveRequiresName = $.actionDestructiveRequiresName;
        this.authFailureListeners = $.authFailureListeners;
        this.automaticUtilityNetworkIpFilter = $.automaticUtilityNetworkIpFilter;
        this.clusterMaxShardsPerNode = $.clusterMaxShardsPerNode;
        this.clusterRoutingAllocationBalancePreferPrimary = $.clusterRoutingAllocationBalancePreferPrimary;
        this.clusterRoutingAllocationNodeConcurrentRecoveries = $.clusterRoutingAllocationNodeConcurrentRecoveries;
        this.clusterSearchRequestSlowlog = $.clusterSearchRequestSlowlog;
        this.customDomain = $.customDomain;
        this.diskWatermarks = $.diskWatermarks;
        this.elasticsearchVersion = $.elasticsearchVersion;
        this.emailSenderName = $.emailSenderName;
        this.emailSenderPassword = $.emailSenderPassword;
        this.emailSenderUsername = $.emailSenderUsername;
        this.enableRemoteBackedStorage = $.enableRemoteBackedStorage;
        this.enableSearchableSnapshots = $.enableSearchableSnapshots;
        this.enableSecurityAudit = $.enableSecurityAudit;
        this.httpMaxContentLength = $.httpMaxContentLength;
        this.httpMaxHeaderSize = $.httpMaxHeaderSize;
        this.httpMaxInitialLineLength = $.httpMaxInitialLineLength;
        this.indexPatterns = $.indexPatterns;
        this.indexRollup = $.indexRollup;
        this.indexTemplate = $.indexTemplate;
        this.indicesFielddataCacheSize = $.indicesFielddataCacheSize;
        this.indicesMemoryIndexBufferSize = $.indicesMemoryIndexBufferSize;
        this.indicesMemoryMaxIndexBufferSize = $.indicesMemoryMaxIndexBufferSize;
        this.indicesMemoryMinIndexBufferSize = $.indicesMemoryMinIndexBufferSize;
        this.indicesQueriesCacheSize = $.indicesQueriesCacheSize;
        this.indicesQueryBoolMaxClauseCount = $.indicesQueryBoolMaxClauseCount;
        this.indicesRecoveryMaxBytesPerSec = $.indicesRecoveryMaxBytesPerSec;
        this.indicesRecoveryMaxConcurrentFileChunks = $.indicesRecoveryMaxConcurrentFileChunks;
        this.ipFilters = $.ipFilters;
        this.ismEnabled = $.ismEnabled;
        this.ismHistoryEnabled = $.ismHistoryEnabled;
        this.ismHistoryMaxAge = $.ismHistoryMaxAge;
        this.ismHistoryMaxDocs = $.ismHistoryMaxDocs;
        this.ismHistoryRolloverCheckPeriod = $.ismHistoryRolloverCheckPeriod;
        this.ismHistoryRolloverRetentionPeriod = $.ismHistoryRolloverRetentionPeriod;
        this.keepIndexRefreshInterval = $.keepIndexRefreshInterval;
        this.knnMemoryCircuitBreakerEnabled = $.knnMemoryCircuitBreakerEnabled;
        this.knnMemoryCircuitBreakerLimit = $.knnMemoryCircuitBreakerLimit;
        this.openid = $.openid;
        this.opensearchDashboards = $.opensearchDashboards;
        this.overrideMainResponseVersion = $.overrideMainResponseVersion;
        this.pluginsAlertingFilterByBackendRoles = $.pluginsAlertingFilterByBackendRoles;
        this.publicAccess = $.publicAccess;
        this.reindexRemoteWhitelists = $.reindexRemoteWhitelists;
        this.saml = $.saml;
        this.scriptMaxCompilationsRate = $.scriptMaxCompilationsRate;
        this.searchBackpressure = $.searchBackpressure;
        this.searchInsightsTopQueries = $.searchInsightsTopQueries;
        this.searchMaxBuckets = $.searchMaxBuckets;
        this.segrep = $.segrep;
        this.serviceLog = $.serviceLog;
        this.shardIndexingPressure = $.shardIndexingPressure;
        this.threadPoolAnalyzeQueueSize = $.threadPoolAnalyzeQueueSize;
        this.threadPoolAnalyzeSize = $.threadPoolAnalyzeSize;
        this.threadPoolForceMergeSize = $.threadPoolForceMergeSize;
        this.threadPoolGetQueueSize = $.threadPoolGetQueueSize;
        this.threadPoolGetSize = $.threadPoolGetSize;
        this.threadPoolSearchQueueSize = $.threadPoolSearchQueueSize;
        this.threadPoolSearchSize = $.threadPoolSearchSize;
        this.threadPoolSearchThrottledQueueSize = $.threadPoolSearchThrottledQueueSize;
        this.threadPoolSearchThrottledSize = $.threadPoolSearchThrottledSize;
        this.threadPoolWriteQueueSize = $.threadPoolWriteQueueSize;
        this.threadPoolWriteSize = $.threadPoolWriteSize;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabaseOpensearchPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabaseOpensearchPropertiesArgs $;

        public Builder() {
            $ = new ManagedDatabaseOpensearchPropertiesArgs();
        }

        public Builder(ManagedDatabaseOpensearchPropertiesArgs defaults) {
            $ = new ManagedDatabaseOpensearchPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionAutoCreateIndexEnabled action.auto_create_index. Explicitly allow or block automatic creation of indices. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder actionAutoCreateIndexEnabled(@Nullable Output<Boolean> actionAutoCreateIndexEnabled) {
            $.actionAutoCreateIndexEnabled = actionAutoCreateIndexEnabled;
            return this;
        }

        /**
         * @param actionAutoCreateIndexEnabled action.auto_create_index. Explicitly allow or block automatic creation of indices. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder actionAutoCreateIndexEnabled(Boolean actionAutoCreateIndexEnabled) {
            return actionAutoCreateIndexEnabled(Output.of(actionAutoCreateIndexEnabled));
        }

        /**
         * @param actionDestructiveRequiresName Require explicit index names when deleting.
         * 
         * @return builder
         * 
         */
        public Builder actionDestructiveRequiresName(@Nullable Output<Boolean> actionDestructiveRequiresName) {
            $.actionDestructiveRequiresName = actionDestructiveRequiresName;
            return this;
        }

        /**
         * @param actionDestructiveRequiresName Require explicit index names when deleting.
         * 
         * @return builder
         * 
         */
        public Builder actionDestructiveRequiresName(Boolean actionDestructiveRequiresName) {
            return actionDestructiveRequiresName(Output.of(actionDestructiveRequiresName));
        }

        /**
         * @param authFailureListeners Opensearch Security Plugin Settings.
         * 
         * @return builder
         * 
         */
        public Builder authFailureListeners(@Nullable Output<ManagedDatabaseOpensearchPropertiesAuthFailureListenersArgs> authFailureListeners) {
            $.authFailureListeners = authFailureListeners;
            return this;
        }

        /**
         * @param authFailureListeners Opensearch Security Plugin Settings.
         * 
         * @return builder
         * 
         */
        public Builder authFailureListeners(ManagedDatabaseOpensearchPropertiesAuthFailureListenersArgs authFailureListeners) {
            return authFailureListeners(Output.of(authFailureListeners));
        }

        /**
         * @param automaticUtilityNetworkIpFilter Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
         * 
         * @return builder
         * 
         */
        public Builder automaticUtilityNetworkIpFilter(@Nullable Output<Boolean> automaticUtilityNetworkIpFilter) {
            $.automaticUtilityNetworkIpFilter = automaticUtilityNetworkIpFilter;
            return this;
        }

        /**
         * @param automaticUtilityNetworkIpFilter Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
         * 
         * @return builder
         * 
         */
        public Builder automaticUtilityNetworkIpFilter(Boolean automaticUtilityNetworkIpFilter) {
            return automaticUtilityNetworkIpFilter(Output.of(automaticUtilityNetworkIpFilter));
        }

        /**
         * @param clusterMaxShardsPerNode Controls the number of shards allowed in the cluster per data node.
         * 
         * @return builder
         * 
         */
        public Builder clusterMaxShardsPerNode(@Nullable Output<Integer> clusterMaxShardsPerNode) {
            $.clusterMaxShardsPerNode = clusterMaxShardsPerNode;
            return this;
        }

        /**
         * @param clusterMaxShardsPerNode Controls the number of shards allowed in the cluster per data node.
         * 
         * @return builder
         * 
         */
        public Builder clusterMaxShardsPerNode(Integer clusterMaxShardsPerNode) {
            return clusterMaxShardsPerNode(Output.of(clusterMaxShardsPerNode));
        }

        /**
         * @param clusterRoutingAllocationBalancePreferPrimary When set to true, OpenSearch attempts to evenly distribute the primary shards between the cluster nodes. Enabling this setting does not always guarantee an equal number of primary shards on each node, especially in the event of a failover. Changing this setting to false after it was set to true does not invoke redistribution of primary shards. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder clusterRoutingAllocationBalancePreferPrimary(@Nullable Output<Boolean> clusterRoutingAllocationBalancePreferPrimary) {
            $.clusterRoutingAllocationBalancePreferPrimary = clusterRoutingAllocationBalancePreferPrimary;
            return this;
        }

        /**
         * @param clusterRoutingAllocationBalancePreferPrimary When set to true, OpenSearch attempts to evenly distribute the primary shards between the cluster nodes. Enabling this setting does not always guarantee an equal number of primary shards on each node, especially in the event of a failover. Changing this setting to false after it was set to true does not invoke redistribution of primary shards. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder clusterRoutingAllocationBalancePreferPrimary(Boolean clusterRoutingAllocationBalancePreferPrimary) {
            return clusterRoutingAllocationBalancePreferPrimary(Output.of(clusterRoutingAllocationBalancePreferPrimary));
        }

        /**
         * @param clusterRoutingAllocationNodeConcurrentRecoveries Concurrent incoming/outgoing shard recoveries per node. How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to node cpu count * 2.
         * 
         * @return builder
         * 
         */
        public Builder clusterRoutingAllocationNodeConcurrentRecoveries(@Nullable Output<Integer> clusterRoutingAllocationNodeConcurrentRecoveries) {
            $.clusterRoutingAllocationNodeConcurrentRecoveries = clusterRoutingAllocationNodeConcurrentRecoveries;
            return this;
        }

        /**
         * @param clusterRoutingAllocationNodeConcurrentRecoveries Concurrent incoming/outgoing shard recoveries per node. How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to node cpu count * 2.
         * 
         * @return builder
         * 
         */
        public Builder clusterRoutingAllocationNodeConcurrentRecoveries(Integer clusterRoutingAllocationNodeConcurrentRecoveries) {
            return clusterRoutingAllocationNodeConcurrentRecoveries(Output.of(clusterRoutingAllocationNodeConcurrentRecoveries));
        }

        public Builder clusterSearchRequestSlowlog(@Nullable Output<ManagedDatabaseOpensearchPropertiesClusterSearchRequestSlowlogArgs> clusterSearchRequestSlowlog) {
            $.clusterSearchRequestSlowlog = clusterSearchRequestSlowlog;
            return this;
        }

        public Builder clusterSearchRequestSlowlog(ManagedDatabaseOpensearchPropertiesClusterSearchRequestSlowlogArgs clusterSearchRequestSlowlog) {
            return clusterSearchRequestSlowlog(Output.of(clusterSearchRequestSlowlog));
        }

        /**
         * @param customDomain Custom domain. Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
         * 
         * @return builder
         * 
         */
        public Builder customDomain(@Nullable Output<String> customDomain) {
            $.customDomain = customDomain;
            return this;
        }

        /**
         * @param customDomain Custom domain. Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.
         * 
         * @return builder
         * 
         */
        public Builder customDomain(String customDomain) {
            return customDomain(Output.of(customDomain));
        }

        /**
         * @param diskWatermarks Watermark settings.
         * 
         * @return builder
         * 
         */
        public Builder diskWatermarks(@Nullable Output<ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs> diskWatermarks) {
            $.diskWatermarks = diskWatermarks;
            return this;
        }

        /**
         * @param diskWatermarks Watermark settings.
         * 
         * @return builder
         * 
         */
        public Builder diskWatermarks(ManagedDatabaseOpensearchPropertiesDiskWatermarksArgs diskWatermarks) {
            return diskWatermarks(Output.of(diskWatermarks));
        }

        /**
         * @param elasticsearchVersion Elasticsearch major version.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchVersion(@Nullable Output<String> elasticsearchVersion) {
            $.elasticsearchVersion = elasticsearchVersion;
            return this;
        }

        /**
         * @param elasticsearchVersion Elasticsearch major version.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchVersion(String elasticsearchVersion) {
            return elasticsearchVersion(Output.of(elasticsearchVersion));
        }

        /**
         * @param emailSenderName Sender name placeholder to be used in Opensearch Dashboards and Opensearch keystore. This should be identical to the Sender name defined in Opensearch dashboards.
         * 
         * @return builder
         * 
         */
        public Builder emailSenderName(@Nullable Output<String> emailSenderName) {
            $.emailSenderName = emailSenderName;
            return this;
        }

        /**
         * @param emailSenderName Sender name placeholder to be used in Opensearch Dashboards and Opensearch keystore. This should be identical to the Sender name defined in Opensearch dashboards.
         * 
         * @return builder
         * 
         */
        public Builder emailSenderName(String emailSenderName) {
            return emailSenderName(Output.of(emailSenderName));
        }

        /**
         * @param emailSenderPassword Sender password for Opensearch alerts to authenticate with SMTP server. Sender password for Opensearch alerts to authenticate with SMTP server.
         * 
         * @return builder
         * 
         */
        public Builder emailSenderPassword(@Nullable Output<String> emailSenderPassword) {
            $.emailSenderPassword = emailSenderPassword;
            return this;
        }

        /**
         * @param emailSenderPassword Sender password for Opensearch alerts to authenticate with SMTP server. Sender password for Opensearch alerts to authenticate with SMTP server.
         * 
         * @return builder
         * 
         */
        public Builder emailSenderPassword(String emailSenderPassword) {
            return emailSenderPassword(Output.of(emailSenderPassword));
        }

        /**
         * @param emailSenderUsername Sender username for Opensearch alerts.
         * 
         * @return builder
         * 
         */
        public Builder emailSenderUsername(@Nullable Output<String> emailSenderUsername) {
            $.emailSenderUsername = emailSenderUsername;
            return this;
        }

        /**
         * @param emailSenderUsername Sender username for Opensearch alerts.
         * 
         * @return builder
         * 
         */
        public Builder emailSenderUsername(String emailSenderUsername) {
            return emailSenderUsername(Output.of(emailSenderUsername));
        }

        /**
         * @param enableRemoteBackedStorage Enable remote-backed storage.
         * 
         * @return builder
         * 
         */
        public Builder enableRemoteBackedStorage(@Nullable Output<Boolean> enableRemoteBackedStorage) {
            $.enableRemoteBackedStorage = enableRemoteBackedStorage;
            return this;
        }

        /**
         * @param enableRemoteBackedStorage Enable remote-backed storage.
         * 
         * @return builder
         * 
         */
        public Builder enableRemoteBackedStorage(Boolean enableRemoteBackedStorage) {
            return enableRemoteBackedStorage(Output.of(enableRemoteBackedStorage));
        }

        /**
         * @param enableSearchableSnapshots Enable searchable snapshots.
         * 
         * @return builder
         * 
         */
        public Builder enableSearchableSnapshots(@Nullable Output<Boolean> enableSearchableSnapshots) {
            $.enableSearchableSnapshots = enableSearchableSnapshots;
            return this;
        }

        /**
         * @param enableSearchableSnapshots Enable searchable snapshots.
         * 
         * @return builder
         * 
         */
        public Builder enableSearchableSnapshots(Boolean enableSearchableSnapshots) {
            return enableSearchableSnapshots(Output.of(enableSearchableSnapshots));
        }

        /**
         * @param enableSecurityAudit Enable/Disable security audit.
         * 
         * @return builder
         * 
         */
        public Builder enableSecurityAudit(@Nullable Output<Boolean> enableSecurityAudit) {
            $.enableSecurityAudit = enableSecurityAudit;
            return this;
        }

        /**
         * @param enableSecurityAudit Enable/Disable security audit.
         * 
         * @return builder
         * 
         */
        public Builder enableSecurityAudit(Boolean enableSecurityAudit) {
            return enableSecurityAudit(Output.of(enableSecurityAudit));
        }

        /**
         * @param httpMaxContentLength Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder httpMaxContentLength(@Nullable Output<Integer> httpMaxContentLength) {
            $.httpMaxContentLength = httpMaxContentLength;
            return this;
        }

        /**
         * @param httpMaxContentLength Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder httpMaxContentLength(Integer httpMaxContentLength) {
            return httpMaxContentLength(Output.of(httpMaxContentLength));
        }

        /**
         * @param httpMaxHeaderSize The max size of allowed headers, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder httpMaxHeaderSize(@Nullable Output<Integer> httpMaxHeaderSize) {
            $.httpMaxHeaderSize = httpMaxHeaderSize;
            return this;
        }

        /**
         * @param httpMaxHeaderSize The max size of allowed headers, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder httpMaxHeaderSize(Integer httpMaxHeaderSize) {
            return httpMaxHeaderSize(Output.of(httpMaxHeaderSize));
        }

        /**
         * @param httpMaxInitialLineLength The max length of an HTTP URL, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder httpMaxInitialLineLength(@Nullable Output<Integer> httpMaxInitialLineLength) {
            $.httpMaxInitialLineLength = httpMaxInitialLineLength;
            return this;
        }

        /**
         * @param httpMaxInitialLineLength The max length of an HTTP URL, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder httpMaxInitialLineLength(Integer httpMaxInitialLineLength) {
            return httpMaxInitialLineLength(Output.of(httpMaxInitialLineLength));
        }

        /**
         * @param indexPatterns Index patterns.
         * 
         * @return builder
         * 
         */
        public Builder indexPatterns(@Nullable Output<List<String>> indexPatterns) {
            $.indexPatterns = indexPatterns;
            return this;
        }

        /**
         * @param indexPatterns Index patterns.
         * 
         * @return builder
         * 
         */
        public Builder indexPatterns(List<String> indexPatterns) {
            return indexPatterns(Output.of(indexPatterns));
        }

        /**
         * @param indexPatterns Index patterns.
         * 
         * @return builder
         * 
         */
        public Builder indexPatterns(String... indexPatterns) {
            return indexPatterns(List.of(indexPatterns));
        }

        /**
         * @param indexRollup Index rollup settings.
         * 
         * @return builder
         * 
         */
        public Builder indexRollup(@Nullable Output<ManagedDatabaseOpensearchPropertiesIndexRollupArgs> indexRollup) {
            $.indexRollup = indexRollup;
            return this;
        }

        /**
         * @param indexRollup Index rollup settings.
         * 
         * @return builder
         * 
         */
        public Builder indexRollup(ManagedDatabaseOpensearchPropertiesIndexRollupArgs indexRollup) {
            return indexRollup(Output.of(indexRollup));
        }

        /**
         * @param indexTemplate Template settings for all new indexes.
         * 
         * @return builder
         * 
         */
        public Builder indexTemplate(@Nullable Output<ManagedDatabaseOpensearchPropertiesIndexTemplateArgs> indexTemplate) {
            $.indexTemplate = indexTemplate;
            return this;
        }

        /**
         * @param indexTemplate Template settings for all new indexes.
         * 
         * @return builder
         * 
         */
        public Builder indexTemplate(ManagedDatabaseOpensearchPropertiesIndexTemplateArgs indexTemplate) {
            return indexTemplate(Output.of(indexTemplate));
        }

        /**
         * @param indicesFielddataCacheSize Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.
         * 
         * @return builder
         * 
         */
        public Builder indicesFielddataCacheSize(@Nullable Output<Integer> indicesFielddataCacheSize) {
            $.indicesFielddataCacheSize = indicesFielddataCacheSize;
            return this;
        }

        /**
         * @param indicesFielddataCacheSize Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.
         * 
         * @return builder
         * 
         */
        public Builder indicesFielddataCacheSize(Integer indicesFielddataCacheSize) {
            return indicesFielddataCacheSize(Output.of(indicesFielddataCacheSize));
        }

        /**
         * @param indicesMemoryIndexBufferSize Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryIndexBufferSize(@Nullable Output<Integer> indicesMemoryIndexBufferSize) {
            $.indicesMemoryIndexBufferSize = indicesMemoryIndexBufferSize;
            return this;
        }

        /**
         * @param indicesMemoryIndexBufferSize Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryIndexBufferSize(Integer indicesMemoryIndexBufferSize) {
            return indicesMemoryIndexBufferSize(Output.of(indicesMemoryIndexBufferSize));
        }

        /**
         * @param indicesMemoryMaxIndexBufferSize Absolute value. Default is unbound. Doesn&#39;t work without indices.memory.index_buffer_size. Maximum amount of heap used for query cache, an absolute indices.memory.index_buffer_size maximum hard limit.
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryMaxIndexBufferSize(@Nullable Output<Integer> indicesMemoryMaxIndexBufferSize) {
            $.indicesMemoryMaxIndexBufferSize = indicesMemoryMaxIndexBufferSize;
            return this;
        }

        /**
         * @param indicesMemoryMaxIndexBufferSize Absolute value. Default is unbound. Doesn&#39;t work without indices.memory.index_buffer_size. Maximum amount of heap used for query cache, an absolute indices.memory.index_buffer_size maximum hard limit.
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryMaxIndexBufferSize(Integer indicesMemoryMaxIndexBufferSize) {
            return indicesMemoryMaxIndexBufferSize(Output.of(indicesMemoryMaxIndexBufferSize));
        }

        /**
         * @param indicesMemoryMinIndexBufferSize Absolute value. Default is 48mb. Doesn&#39;t work without indices.memory.index_buffer_size. Minimum amount of heap used for query cache, an absolute indices.memory.index_buffer_size minimal hard limit.
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryMinIndexBufferSize(@Nullable Output<Integer> indicesMemoryMinIndexBufferSize) {
            $.indicesMemoryMinIndexBufferSize = indicesMemoryMinIndexBufferSize;
            return this;
        }

        /**
         * @param indicesMemoryMinIndexBufferSize Absolute value. Default is 48mb. Doesn&#39;t work without indices.memory.index_buffer_size. Minimum amount of heap used for query cache, an absolute indices.memory.index_buffer_size minimal hard limit.
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryMinIndexBufferSize(Integer indicesMemoryMinIndexBufferSize) {
            return indicesMemoryMinIndexBufferSize(Output.of(indicesMemoryMinIndexBufferSize));
        }

        /**
         * @param indicesQueriesCacheSize Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other OpenSearch functionality.
         * 
         * @return builder
         * 
         */
        public Builder indicesQueriesCacheSize(@Nullable Output<Integer> indicesQueriesCacheSize) {
            $.indicesQueriesCacheSize = indicesQueriesCacheSize;
            return this;
        }

        /**
         * @param indicesQueriesCacheSize Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other OpenSearch functionality.
         * 
         * @return builder
         * 
         */
        public Builder indicesQueriesCacheSize(Integer indicesQueriesCacheSize) {
            return indicesQueriesCacheSize(Output.of(indicesQueriesCacheSize));
        }

        /**
         * @param indicesQueryBoolMaxClauseCount Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.
         * 
         * @return builder
         * 
         */
        public Builder indicesQueryBoolMaxClauseCount(@Nullable Output<Integer> indicesQueryBoolMaxClauseCount) {
            $.indicesQueryBoolMaxClauseCount = indicesQueryBoolMaxClauseCount;
            return this;
        }

        /**
         * @param indicesQueryBoolMaxClauseCount Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.
         * 
         * @return builder
         * 
         */
        public Builder indicesQueryBoolMaxClauseCount(Integer indicesQueryBoolMaxClauseCount) {
            return indicesQueryBoolMaxClauseCount(Output.of(indicesQueryBoolMaxClauseCount));
        }

        /**
         * @param indicesRecoveryMaxBytesPerSec Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb.
         * 
         * @return builder
         * 
         */
        public Builder indicesRecoveryMaxBytesPerSec(@Nullable Output<Integer> indicesRecoveryMaxBytesPerSec) {
            $.indicesRecoveryMaxBytesPerSec = indicesRecoveryMaxBytesPerSec;
            return this;
        }

        /**
         * @param indicesRecoveryMaxBytesPerSec Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb.
         * 
         * @return builder
         * 
         */
        public Builder indicesRecoveryMaxBytesPerSec(Integer indicesRecoveryMaxBytesPerSec) {
            return indicesRecoveryMaxBytesPerSec(Output.of(indicesRecoveryMaxBytesPerSec));
        }

        /**
         * @param indicesRecoveryMaxConcurrentFileChunks Number of file chunks sent in parallel for each recovery. Defaults to 2.
         * 
         * @return builder
         * 
         */
        public Builder indicesRecoveryMaxConcurrentFileChunks(@Nullable Output<Integer> indicesRecoveryMaxConcurrentFileChunks) {
            $.indicesRecoveryMaxConcurrentFileChunks = indicesRecoveryMaxConcurrentFileChunks;
            return this;
        }

        /**
         * @param indicesRecoveryMaxConcurrentFileChunks Number of file chunks sent in parallel for each recovery. Defaults to 2.
         * 
         * @return builder
         * 
         */
        public Builder indicesRecoveryMaxConcurrentFileChunks(Integer indicesRecoveryMaxConcurrentFileChunks) {
            return indicesRecoveryMaxConcurrentFileChunks(Output.of(indicesRecoveryMaxConcurrentFileChunks));
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(@Nullable Output<List<String>> ipFilters) {
            $.ipFilters = ipFilters;
            return this;
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(List<String> ipFilters) {
            return ipFilters(Output.of(ipFilters));
        }

        /**
         * @param ipFilters IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }

        /**
         * @param ismEnabled Specifies whether ISM is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder ismEnabled(@Nullable Output<Boolean> ismEnabled) {
            $.ismEnabled = ismEnabled;
            return this;
        }

        /**
         * @param ismEnabled Specifies whether ISM is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder ismEnabled(Boolean ismEnabled) {
            return ismEnabled(Output.of(ismEnabled));
        }

        /**
         * @param ismHistoryEnabled Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document.
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryEnabled(@Nullable Output<Boolean> ismHistoryEnabled) {
            $.ismHistoryEnabled = ismHistoryEnabled;
            return this;
        }

        /**
         * @param ismHistoryEnabled Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document.
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryEnabled(Boolean ismHistoryEnabled) {
            return ismHistoryEnabled(Output.of(ismHistoryEnabled));
        }

        /**
         * @param ismHistoryMaxAge The maximum age before rolling over the audit history index in hours.
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryMaxAge(@Nullable Output<Integer> ismHistoryMaxAge) {
            $.ismHistoryMaxAge = ismHistoryMaxAge;
            return this;
        }

        /**
         * @param ismHistoryMaxAge The maximum age before rolling over the audit history index in hours.
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryMaxAge(Integer ismHistoryMaxAge) {
            return ismHistoryMaxAge(Output.of(ismHistoryMaxAge));
        }

        /**
         * @param ismHistoryMaxDocs The maximum number of documents before rolling over the audit history index.
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryMaxDocs(@Nullable Output<Integer> ismHistoryMaxDocs) {
            $.ismHistoryMaxDocs = ismHistoryMaxDocs;
            return this;
        }

        /**
         * @param ismHistoryMaxDocs The maximum number of documents before rolling over the audit history index.
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryMaxDocs(Integer ismHistoryMaxDocs) {
            return ismHistoryMaxDocs(Output.of(ismHistoryMaxDocs));
        }

        /**
         * @param ismHistoryRolloverCheckPeriod The time between rollover checks for the audit history index in hours.
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryRolloverCheckPeriod(@Nullable Output<Integer> ismHistoryRolloverCheckPeriod) {
            $.ismHistoryRolloverCheckPeriod = ismHistoryRolloverCheckPeriod;
            return this;
        }

        /**
         * @param ismHistoryRolloverCheckPeriod The time between rollover checks for the audit history index in hours.
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryRolloverCheckPeriod(Integer ismHistoryRolloverCheckPeriod) {
            return ismHistoryRolloverCheckPeriod(Output.of(ismHistoryRolloverCheckPeriod));
        }

        /**
         * @param ismHistoryRolloverRetentionPeriod How long audit history indices are kept in days.
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryRolloverRetentionPeriod(@Nullable Output<Integer> ismHistoryRolloverRetentionPeriod) {
            $.ismHistoryRolloverRetentionPeriod = ismHistoryRolloverRetentionPeriod;
            return this;
        }

        /**
         * @param ismHistoryRolloverRetentionPeriod How long audit history indices are kept in days.
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryRolloverRetentionPeriod(Integer ismHistoryRolloverRetentionPeriod) {
            return ismHistoryRolloverRetentionPeriod(Output.of(ismHistoryRolloverRetentionPeriod));
        }

        /**
         * @param keepIndexRefreshInterval Don&#39;t reset index.refresh_interval to the default value. Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
         * 
         * @return builder
         * 
         */
        public Builder keepIndexRefreshInterval(@Nullable Output<Boolean> keepIndexRefreshInterval) {
            $.keepIndexRefreshInterval = keepIndexRefreshInterval;
            return this;
        }

        /**
         * @param keepIndexRefreshInterval Don&#39;t reset index.refresh_interval to the default value. Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn&#39;t fit your case, you can disable this by setting up this flag to true.
         * 
         * @return builder
         * 
         */
        public Builder keepIndexRefreshInterval(Boolean keepIndexRefreshInterval) {
            return keepIndexRefreshInterval(Output.of(keepIndexRefreshInterval));
        }

        /**
         * @param knnMemoryCircuitBreakerEnabled Enable or disable KNN memory circuit breaker. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder knnMemoryCircuitBreakerEnabled(@Nullable Output<Boolean> knnMemoryCircuitBreakerEnabled) {
            $.knnMemoryCircuitBreakerEnabled = knnMemoryCircuitBreakerEnabled;
            return this;
        }

        /**
         * @param knnMemoryCircuitBreakerEnabled Enable or disable KNN memory circuit breaker. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder knnMemoryCircuitBreakerEnabled(Boolean knnMemoryCircuitBreakerEnabled) {
            return knnMemoryCircuitBreakerEnabled(Output.of(knnMemoryCircuitBreakerEnabled));
        }

        /**
         * @param knnMemoryCircuitBreakerLimit Maximum amount of memory that can be used for KNN index. Defaults to 50% of the JVM heap size.
         * 
         * @return builder
         * 
         */
        public Builder knnMemoryCircuitBreakerLimit(@Nullable Output<Integer> knnMemoryCircuitBreakerLimit) {
            $.knnMemoryCircuitBreakerLimit = knnMemoryCircuitBreakerLimit;
            return this;
        }

        /**
         * @param knnMemoryCircuitBreakerLimit Maximum amount of memory that can be used for KNN index. Defaults to 50% of the JVM heap size.
         * 
         * @return builder
         * 
         */
        public Builder knnMemoryCircuitBreakerLimit(Integer knnMemoryCircuitBreakerLimit) {
            return knnMemoryCircuitBreakerLimit(Output.of(knnMemoryCircuitBreakerLimit));
        }

        /**
         * @param openid OpenSearch OpenID Connect Configuration.
         * 
         * @return builder
         * 
         */
        public Builder openid(@Nullable Output<ManagedDatabaseOpensearchPropertiesOpenidArgs> openid) {
            $.openid = openid;
            return this;
        }

        /**
         * @param openid OpenSearch OpenID Connect Configuration.
         * 
         * @return builder
         * 
         */
        public Builder openid(ManagedDatabaseOpensearchPropertiesOpenidArgs openid) {
            return openid(Output.of(openid));
        }

        /**
         * @param opensearchDashboards OpenSearch Dashboards settings.
         * 
         * @return builder
         * 
         */
        public Builder opensearchDashboards(@Nullable Output<ManagedDatabaseOpensearchPropertiesOpensearchDashboardsArgs> opensearchDashboards) {
            $.opensearchDashboards = opensearchDashboards;
            return this;
        }

        /**
         * @param opensearchDashboards OpenSearch Dashboards settings.
         * 
         * @return builder
         * 
         */
        public Builder opensearchDashboards(ManagedDatabaseOpensearchPropertiesOpensearchDashboardsArgs opensearchDashboards) {
            return opensearchDashboards(Output.of(opensearchDashboards));
        }

        /**
         * @param overrideMainResponseVersion Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder overrideMainResponseVersion(@Nullable Output<Boolean> overrideMainResponseVersion) {
            $.overrideMainResponseVersion = overrideMainResponseVersion;
            return this;
        }

        /**
         * @param overrideMainResponseVersion Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder overrideMainResponseVersion(Boolean overrideMainResponseVersion) {
            return overrideMainResponseVersion(Output.of(overrideMainResponseVersion));
        }

        /**
         * @param pluginsAlertingFilterByBackendRoles Enable or disable filtering of alerting by backend roles. Requires Security plugin. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder pluginsAlertingFilterByBackendRoles(@Nullable Output<Boolean> pluginsAlertingFilterByBackendRoles) {
            $.pluginsAlertingFilterByBackendRoles = pluginsAlertingFilterByBackendRoles;
            return this;
        }

        /**
         * @param pluginsAlertingFilterByBackendRoles Enable or disable filtering of alerting by backend roles. Requires Security plugin. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder pluginsAlertingFilterByBackendRoles(Boolean pluginsAlertingFilterByBackendRoles) {
            return pluginsAlertingFilterByBackendRoles(Output.of(pluginsAlertingFilterByBackendRoles));
        }

        /**
         * @param publicAccess Public Access. Allow access to the service from the public Internet.
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<Boolean> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Public Access. Allow access to the service from the public Internet.
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(Boolean publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param reindexRemoteWhitelists Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
         * 
         * @return builder
         * 
         */
        public Builder reindexRemoteWhitelists(@Nullable Output<List<String>> reindexRemoteWhitelists) {
            $.reindexRemoteWhitelists = reindexRemoteWhitelists;
            return this;
        }

        /**
         * @param reindexRemoteWhitelists Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
         * 
         * @return builder
         * 
         */
        public Builder reindexRemoteWhitelists(List<String> reindexRemoteWhitelists) {
            return reindexRemoteWhitelists(Output.of(reindexRemoteWhitelists));
        }

        /**
         * @param reindexRemoteWhitelists Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
         * 
         * @return builder
         * 
         */
        public Builder reindexRemoteWhitelists(String... reindexRemoteWhitelists) {
            return reindexRemoteWhitelists(List.of(reindexRemoteWhitelists));
        }

        /**
         * @param saml OpenSearch SAML configuration.
         * 
         * @return builder
         * 
         */
        public Builder saml(@Nullable Output<ManagedDatabaseOpensearchPropertiesSamlArgs> saml) {
            $.saml = saml;
            return this;
        }

        /**
         * @param saml OpenSearch SAML configuration.
         * 
         * @return builder
         * 
         */
        public Builder saml(ManagedDatabaseOpensearchPropertiesSamlArgs saml) {
            return saml(Output.of(saml));
        }

        /**
         * @param scriptMaxCompilationsRate Script max compilation rate - circuit breaker to prevent/minimize OOMs. Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context.
         * 
         * @return builder
         * 
         */
        public Builder scriptMaxCompilationsRate(@Nullable Output<String> scriptMaxCompilationsRate) {
            $.scriptMaxCompilationsRate = scriptMaxCompilationsRate;
            return this;
        }

        /**
         * @param scriptMaxCompilationsRate Script max compilation rate - circuit breaker to prevent/minimize OOMs. Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context.
         * 
         * @return builder
         * 
         */
        public Builder scriptMaxCompilationsRate(String scriptMaxCompilationsRate) {
            return scriptMaxCompilationsRate(Output.of(scriptMaxCompilationsRate));
        }

        /**
         * @param searchBackpressure Search Backpressure Settings.
         * 
         * @return builder
         * 
         */
        public Builder searchBackpressure(@Nullable Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs> searchBackpressure) {
            $.searchBackpressure = searchBackpressure;
            return this;
        }

        /**
         * @param searchBackpressure Search Backpressure Settings.
         * 
         * @return builder
         * 
         */
        public Builder searchBackpressure(ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs searchBackpressure) {
            return searchBackpressure(Output.of(searchBackpressure));
        }

        public Builder searchInsightsTopQueries(@Nullable Output<ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesArgs> searchInsightsTopQueries) {
            $.searchInsightsTopQueries = searchInsightsTopQueries;
            return this;
        }

        public Builder searchInsightsTopQueries(ManagedDatabaseOpensearchPropertiesSearchInsightsTopQueriesArgs searchInsightsTopQueries) {
            return searchInsightsTopQueries(Output.of(searchInsightsTopQueries));
        }

        /**
         * @param searchMaxBuckets Maximum number of aggregation buckets allowed in a single response. OpenSearch default value is used when this is not defined.
         * 
         * @return builder
         * 
         */
        public Builder searchMaxBuckets(@Nullable Output<Integer> searchMaxBuckets) {
            $.searchMaxBuckets = searchMaxBuckets;
            return this;
        }

        /**
         * @param searchMaxBuckets Maximum number of aggregation buckets allowed in a single response. OpenSearch default value is used when this is not defined.
         * 
         * @return builder
         * 
         */
        public Builder searchMaxBuckets(Integer searchMaxBuckets) {
            return searchMaxBuckets(Output.of(searchMaxBuckets));
        }

        /**
         * @param segrep Segment Replication Backpressure Settings.
         * 
         * @return builder
         * 
         */
        public Builder segrep(@Nullable Output<ManagedDatabaseOpensearchPropertiesSegrepArgs> segrep) {
            $.segrep = segrep;
            return this;
        }

        /**
         * @param segrep Segment Replication Backpressure Settings.
         * 
         * @return builder
         * 
         */
        public Builder segrep(ManagedDatabaseOpensearchPropertiesSegrepArgs segrep) {
            return segrep(Output.of(segrep));
        }

        /**
         * @param serviceLog Service logging. Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(@Nullable Output<Boolean> serviceLog) {
            $.serviceLog = serviceLog;
            return this;
        }

        /**
         * @param serviceLog Service logging. Store logs for the service so that they are available in the HTTP API and console.
         * 
         * @return builder
         * 
         */
        public Builder serviceLog(Boolean serviceLog) {
            return serviceLog(Output.of(serviceLog));
        }

        /**
         * @param shardIndexingPressure Shard indexing back pressure settings.
         * 
         * @return builder
         * 
         */
        public Builder shardIndexingPressure(@Nullable Output<ManagedDatabaseOpensearchPropertiesShardIndexingPressureArgs> shardIndexingPressure) {
            $.shardIndexingPressure = shardIndexingPressure;
            return this;
        }

        /**
         * @param shardIndexingPressure Shard indexing back pressure settings.
         * 
         * @return builder
         * 
         */
        public Builder shardIndexingPressure(ManagedDatabaseOpensearchPropertiesShardIndexingPressureArgs shardIndexingPressure) {
            return shardIndexingPressure(Output.of(shardIndexingPressure));
        }

        /**
         * @param threadPoolAnalyzeQueueSize analyze thread pool queue size. Size for the thread pool queue. See documentation for exact details.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolAnalyzeQueueSize(@Nullable Output<Integer> threadPoolAnalyzeQueueSize) {
            $.threadPoolAnalyzeQueueSize = threadPoolAnalyzeQueueSize;
            return this;
        }

        /**
         * @param threadPoolAnalyzeQueueSize analyze thread pool queue size. Size for the thread pool queue. See documentation for exact details.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolAnalyzeQueueSize(Integer threadPoolAnalyzeQueueSize) {
            return threadPoolAnalyzeQueueSize(Output.of(threadPoolAnalyzeQueueSize));
        }

        /**
         * @param threadPoolAnalyzeSize analyze thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolAnalyzeSize(@Nullable Output<Integer> threadPoolAnalyzeSize) {
            $.threadPoolAnalyzeSize = threadPoolAnalyzeSize;
            return this;
        }

        /**
         * @param threadPoolAnalyzeSize analyze thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolAnalyzeSize(Integer threadPoolAnalyzeSize) {
            return threadPoolAnalyzeSize(Output.of(threadPoolAnalyzeSize));
        }

        /**
         * @param threadPoolForceMergeSize force_merge thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolForceMergeSize(@Nullable Output<Integer> threadPoolForceMergeSize) {
            $.threadPoolForceMergeSize = threadPoolForceMergeSize;
            return this;
        }

        /**
         * @param threadPoolForceMergeSize force_merge thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolForceMergeSize(Integer threadPoolForceMergeSize) {
            return threadPoolForceMergeSize(Output.of(threadPoolForceMergeSize));
        }

        /**
         * @param threadPoolGetQueueSize get thread pool queue size. Size for the thread pool queue. See documentation for exact details.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolGetQueueSize(@Nullable Output<Integer> threadPoolGetQueueSize) {
            $.threadPoolGetQueueSize = threadPoolGetQueueSize;
            return this;
        }

        /**
         * @param threadPoolGetQueueSize get thread pool queue size. Size for the thread pool queue. See documentation for exact details.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolGetQueueSize(Integer threadPoolGetQueueSize) {
            return threadPoolGetQueueSize(Output.of(threadPoolGetQueueSize));
        }

        /**
         * @param threadPoolGetSize get thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolGetSize(@Nullable Output<Integer> threadPoolGetSize) {
            $.threadPoolGetSize = threadPoolGetSize;
            return this;
        }

        /**
         * @param threadPoolGetSize get thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolGetSize(Integer threadPoolGetSize) {
            return threadPoolGetSize(Output.of(threadPoolGetSize));
        }

        /**
         * @param threadPoolSearchQueueSize search thread pool queue size. Size for the thread pool queue. See documentation for exact details.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchQueueSize(@Nullable Output<Integer> threadPoolSearchQueueSize) {
            $.threadPoolSearchQueueSize = threadPoolSearchQueueSize;
            return this;
        }

        /**
         * @param threadPoolSearchQueueSize search thread pool queue size. Size for the thread pool queue. See documentation for exact details.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchQueueSize(Integer threadPoolSearchQueueSize) {
            return threadPoolSearchQueueSize(Output.of(threadPoolSearchQueueSize));
        }

        /**
         * @param threadPoolSearchSize search thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchSize(@Nullable Output<Integer> threadPoolSearchSize) {
            $.threadPoolSearchSize = threadPoolSearchSize;
            return this;
        }

        /**
         * @param threadPoolSearchSize search thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchSize(Integer threadPoolSearchSize) {
            return threadPoolSearchSize(Output.of(threadPoolSearchSize));
        }

        /**
         * @param threadPoolSearchThrottledQueueSize search_throttled thread pool queue size. Size for the thread pool queue. See documentation for exact details.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchThrottledQueueSize(@Nullable Output<Integer> threadPoolSearchThrottledQueueSize) {
            $.threadPoolSearchThrottledQueueSize = threadPoolSearchThrottledQueueSize;
            return this;
        }

        /**
         * @param threadPoolSearchThrottledQueueSize search_throttled thread pool queue size. Size for the thread pool queue. See documentation for exact details.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchThrottledQueueSize(Integer threadPoolSearchThrottledQueueSize) {
            return threadPoolSearchThrottledQueueSize(Output.of(threadPoolSearchThrottledQueueSize));
        }

        /**
         * @param threadPoolSearchThrottledSize search_throttled thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchThrottledSize(@Nullable Output<Integer> threadPoolSearchThrottledSize) {
            $.threadPoolSearchThrottledSize = threadPoolSearchThrottledSize;
            return this;
        }

        /**
         * @param threadPoolSearchThrottledSize search_throttled thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchThrottledSize(Integer threadPoolSearchThrottledSize) {
            return threadPoolSearchThrottledSize(Output.of(threadPoolSearchThrottledSize));
        }

        /**
         * @param threadPoolWriteQueueSize write thread pool queue size. Size for the thread pool queue. See documentation for exact details.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolWriteQueueSize(@Nullable Output<Integer> threadPoolWriteQueueSize) {
            $.threadPoolWriteQueueSize = threadPoolWriteQueueSize;
            return this;
        }

        /**
         * @param threadPoolWriteQueueSize write thread pool queue size. Size for the thread pool queue. See documentation for exact details.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolWriteQueueSize(Integer threadPoolWriteQueueSize) {
            return threadPoolWriteQueueSize(Output.of(threadPoolWriteQueueSize));
        }

        /**
         * @param threadPoolWriteSize write thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolWriteSize(@Nullable Output<Integer> threadPoolWriteSize) {
            $.threadPoolWriteSize = threadPoolWriteSize;
            return this;
        }

        /**
         * @param threadPoolWriteSize write thread pool size. Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolWriteSize(Integer threadPoolWriteSize) {
            return threadPoolWriteSize(Output.of(threadPoolWriteSize));
        }

        /**
         * @param version OpenSearch major version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version OpenSearch major version.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ManagedDatabaseOpensearchPropertiesArgs build() {
            return $;
        }
    }

}
