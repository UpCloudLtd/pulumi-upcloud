// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.StorageArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.StorageState;
import com.pulumi.upcloud.outputs.StorageBackupRule;
import com.pulumi.upcloud.outputs.StorageClone;
import com.pulumi.upcloud.outputs.StorageImport;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages UpCloud [Block Storage](https://upcloud.com/products/block-storage) devices.
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import upcloud:index/storage:Storage example_storage 0128ae5a-91dd-4ebf-bd1e-304c47f2c652
 * ```
 * 
 */
@ResourceType(type="upcloud:index/storage:Storage")
public class Storage extends com.pulumi.resources.CustomResource {
    @Export(name="backupRule", refs={StorageBackupRule.class}, tree="[0]")
    private Output</* @Nullable */ StorageBackupRule> backupRule;

    public Output<Optional<StorageBackupRule>> backupRule() {
        return Codegen.optional(this.backupRule);
    }
    /**
     * Block defining another storage/template to clone to storage.
     * 
     */
    @Export(name="clone", refs={StorageClone.class}, tree="[0]")
    private Output</* @Nullable */ StorageClone> clone;

    /**
     * @return Block defining another storage/template to clone to storage.
     * 
     */
    public Output<Optional<StorageClone>> clone_() {
        return Codegen.optional(this.clone);
    }
    /**
     * If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after
     * success.
     * 
     */
    @Export(name="deleteAutoresizeBackup", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> deleteAutoresizeBackup;

    /**
     * @return If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after
     * success.
     * 
     */
    public Output<Boolean> deleteAutoresizeBackup() {
        return this.deleteAutoresizeBackup;
    }
    /**
     * Sets if the storage is encrypted at rest.
     * 
     */
    @Export(name="encrypt", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> encrypt;

    /**
     * @return Sets if the storage is encrypted at rest.
     * 
     */
    public Output<Boolean> encrypt() {
        return this.encrypt;
    }
    /**
     * If set to true, provider will attempt to resize partition and filesystem when the size of the storage changes. Please
     * note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the
     * backup will be used to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless
     * `delete_autoresize_backup` option is set to true). Taking and keeping backups incure costs.
     * 
     */
    @Export(name="filesystemAutoresize", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> filesystemAutoresize;

    /**
     * @return If set to true, provider will attempt to resize partition and filesystem when the size of the storage changes. Please
     * note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the
     * backup will be used to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless
     * `delete_autoresize_backup` option is set to true). Taking and keeping backups incure costs.
     * 
     */
    public Output<Boolean> filesystemAutoresize() {
        return this.filesystemAutoresize;
    }
    /**
     * Block defining external data to import to storage
     * 
     */
    @Export(name="import", refs={StorageImport.class}, tree="[0]")
    private Output</* @Nullable */ StorageImport> import_;

    /**
     * @return Block defining external data to import to storage
     * 
     */
    public Output<Optional<StorageImport>> import_() {
        return Codegen.optional(this.import_);
    }
    /**
     * User defined key-value pairs to classify the storage.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the storage.
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }
    /**
     * The size of the storage in gigabytes.
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return The size of the storage in gigabytes.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore
     * and can not be modified by the user.
     * 
     */
    @Export(name="systemLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> systemLabels;

    /**
     * @return System defined key-value pairs to classify the storage. The keys of system defined labels are prefixed with underscore
     * and can not be modified by the user.
     * 
     */
    public Output<Map<String,String>> systemLabels() {
        return this.systemLabels;
    }
    /**
     * The tier of the storage.
     * 
     */
    @Export(name="tier", refs={String.class}, tree="[0]")
    private Output<String> tier;

    /**
     * @return The tier of the storage.
     * 
     */
    public Output<String> tier() {
        return this.tier;
    }
    /**
     * The title of the storage.
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output<String> title;

    /**
     * @return The title of the storage.
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * The type of the storage.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the storage.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The zone the storage is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return The zone the storage is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Storage(java.lang.String name) {
        this(name, StorageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Storage(java.lang.String name, StorageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Storage(java.lang.String name, StorageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/storage:Storage", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Storage(java.lang.String name, Output<java.lang.String> id, @Nullable StorageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/storage:Storage", name, state, makeResourceOptions(options, id), false);
    }

    private static StorageArgs makeArgs(StorageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? StorageArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Storage get(java.lang.String name, Output<java.lang.String> id, @Nullable StorageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Storage(name, id, state, options);
    }
}
