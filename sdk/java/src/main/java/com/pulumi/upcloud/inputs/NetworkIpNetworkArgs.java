// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkIpNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkIpNetworkArgs Empty = new NetworkIpNetworkArgs();

    /**
     * The CIDR range of the subnet
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return The CIDR range of the subnet
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * Is DHCP enabled?
     * 
     */
    @Import(name="dhcp", required=true)
    private Output<Boolean> dhcp;

    /**
     * @return Is DHCP enabled?
     * 
     */
    public Output<Boolean> dhcp() {
        return this.dhcp;
    }

    /**
     * Is the gateway the DHCP default route?
     * 
     */
    @Import(name="dhcpDefaultRoute")
    private @Nullable Output<Boolean> dhcpDefaultRoute;

    /**
     * @return Is the gateway the DHCP default route?
     * 
     */
    public Optional<Output<Boolean>> dhcpDefaultRoute() {
        return Optional.ofNullable(this.dhcpDefaultRoute);
    }

    /**
     * The DNS servers given by DHCP
     * 
     */
    @Import(name="dhcpDns")
    private @Nullable Output<List<String>> dhcpDns;

    /**
     * @return The DNS servers given by DHCP
     * 
     */
    public Optional<Output<List<String>>> dhcpDns() {
        return Optional.ofNullable(this.dhcpDns);
    }

    /**
     * The additional DHCP classless static routes given by DHCP
     * 
     */
    @Import(name="dhcpRoutes")
    private @Nullable Output<List<String>> dhcpRoutes;

    /**
     * @return The additional DHCP classless static routes given by DHCP
     * 
     */
    public Optional<Output<List<String>>> dhcpRoutes() {
        return Optional.ofNullable(this.dhcpRoutes);
    }

    /**
     * IP address family
     * 
     */
    @Import(name="family", required=true)
    private Output<String> family;

    /**
     * @return IP address family
     * 
     */
    public Output<String> family() {
        return this.family;
    }

    /**
     * Gateway address given by DHCP
     * 
     */
    @Import(name="gateway")
    private @Nullable Output<String> gateway;

    /**
     * @return Gateway address given by DHCP
     * 
     */
    public Optional<Output<String>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    private NetworkIpNetworkArgs() {}

    private NetworkIpNetworkArgs(NetworkIpNetworkArgs $) {
        this.address = $.address;
        this.dhcp = $.dhcp;
        this.dhcpDefaultRoute = $.dhcpDefaultRoute;
        this.dhcpDns = $.dhcpDns;
        this.dhcpRoutes = $.dhcpRoutes;
        this.family = $.family;
        this.gateway = $.gateway;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkIpNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkIpNetworkArgs $;

        public Builder() {
            $ = new NetworkIpNetworkArgs();
        }

        public Builder(NetworkIpNetworkArgs defaults) {
            $ = new NetworkIpNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The CIDR range of the subnet
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The CIDR range of the subnet
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param dhcp Is DHCP enabled?
         * 
         * @return builder
         * 
         */
        public Builder dhcp(Output<Boolean> dhcp) {
            $.dhcp = dhcp;
            return this;
        }

        /**
         * @param dhcp Is DHCP enabled?
         * 
         * @return builder
         * 
         */
        public Builder dhcp(Boolean dhcp) {
            return dhcp(Output.of(dhcp));
        }

        /**
         * @param dhcpDefaultRoute Is the gateway the DHCP default route?
         * 
         * @return builder
         * 
         */
        public Builder dhcpDefaultRoute(@Nullable Output<Boolean> dhcpDefaultRoute) {
            $.dhcpDefaultRoute = dhcpDefaultRoute;
            return this;
        }

        /**
         * @param dhcpDefaultRoute Is the gateway the DHCP default route?
         * 
         * @return builder
         * 
         */
        public Builder dhcpDefaultRoute(Boolean dhcpDefaultRoute) {
            return dhcpDefaultRoute(Output.of(dhcpDefaultRoute));
        }

        /**
         * @param dhcpDns The DNS servers given by DHCP
         * 
         * @return builder
         * 
         */
        public Builder dhcpDns(@Nullable Output<List<String>> dhcpDns) {
            $.dhcpDns = dhcpDns;
            return this;
        }

        /**
         * @param dhcpDns The DNS servers given by DHCP
         * 
         * @return builder
         * 
         */
        public Builder dhcpDns(List<String> dhcpDns) {
            return dhcpDns(Output.of(dhcpDns));
        }

        /**
         * @param dhcpDns The DNS servers given by DHCP
         * 
         * @return builder
         * 
         */
        public Builder dhcpDns(String... dhcpDns) {
            return dhcpDns(List.of(dhcpDns));
        }

        /**
         * @param dhcpRoutes The additional DHCP classless static routes given by DHCP
         * 
         * @return builder
         * 
         */
        public Builder dhcpRoutes(@Nullable Output<List<String>> dhcpRoutes) {
            $.dhcpRoutes = dhcpRoutes;
            return this;
        }

        /**
         * @param dhcpRoutes The additional DHCP classless static routes given by DHCP
         * 
         * @return builder
         * 
         */
        public Builder dhcpRoutes(List<String> dhcpRoutes) {
            return dhcpRoutes(Output.of(dhcpRoutes));
        }

        /**
         * @param dhcpRoutes The additional DHCP classless static routes given by DHCP
         * 
         * @return builder
         * 
         */
        public Builder dhcpRoutes(String... dhcpRoutes) {
            return dhcpRoutes(List.of(dhcpRoutes));
        }

        /**
         * @param family IP address family
         * 
         * @return builder
         * 
         */
        public Builder family(Output<String> family) {
            $.family = family;
            return this;
        }

        /**
         * @param family IP address family
         * 
         * @return builder
         * 
         */
        public Builder family(String family) {
            return family(Output.of(family));
        }

        /**
         * @param gateway Gateway address given by DHCP
         * 
         * @return builder
         * 
         */
        public Builder gateway(@Nullable Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway Gateway address given by DHCP
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        public NetworkIpNetworkArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("NetworkIpNetworkArgs", "address");
            }
            if ($.dhcp == null) {
                throw new MissingRequiredPropertyException("NetworkIpNetworkArgs", "dhcp");
            }
            if ($.family == null) {
                throw new MissingRequiredPropertyException("NetworkIpNetworkArgs", "family");
            }
            return $;
        }
    }

}
