// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StorageImport {
    /**
     * @return sha256 sum of the imported data
     * 
     */
    private @Nullable String sha256sum;
    /**
     * @return The mode of the import task. One of `httpImport` or `directUpload`.
     * 
     */
    private String source;
    /**
     * @return SHA256 hash of the source content. This hash is used to verify the integrity of the imported data by comparing it to `sha256sum` after the import has completed. Possible filename is automatically removed from the hash before comparison.
     * 
     */
    private @Nullable String sourceHash;
    /**
     * @return The location of the file to import. For `httpImport` an accessible URL. For `directUpload` a local file. When direct uploading a compressed image, `Content-Type` header of the PUT request is set automatically based on the file extension (`.gz` or `.xz`, case-insensitive).
     * 
     */
    private String sourceLocation;
    /**
     * @return Number of bytes imported
     * 
     */
    private @Nullable Integer writtenBytes;

    private StorageImport() {}
    /**
     * @return sha256 sum of the imported data
     * 
     */
    public Optional<String> sha256sum() {
        return Optional.ofNullable(this.sha256sum);
    }
    /**
     * @return The mode of the import task. One of `httpImport` or `directUpload`.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return SHA256 hash of the source content. This hash is used to verify the integrity of the imported data by comparing it to `sha256sum` after the import has completed. Possible filename is automatically removed from the hash before comparison.
     * 
     */
    public Optional<String> sourceHash() {
        return Optional.ofNullable(this.sourceHash);
    }
    /**
     * @return The location of the file to import. For `httpImport` an accessible URL. For `directUpload` a local file. When direct uploading a compressed image, `Content-Type` header of the PUT request is set automatically based on the file extension (`.gz` or `.xz`, case-insensitive).
     * 
     */
    public String sourceLocation() {
        return this.sourceLocation;
    }
    /**
     * @return Number of bytes imported
     * 
     */
    public Optional<Integer> writtenBytes() {
        return Optional.ofNullable(this.writtenBytes);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StorageImport defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String sha256sum;
        private String source;
        private @Nullable String sourceHash;
        private String sourceLocation;
        private @Nullable Integer writtenBytes;
        public Builder() {}
        public Builder(StorageImport defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.sha256sum = defaults.sha256sum;
    	      this.source = defaults.source;
    	      this.sourceHash = defaults.sourceHash;
    	      this.sourceLocation = defaults.sourceLocation;
    	      this.writtenBytes = defaults.writtenBytes;
        }

        @CustomType.Setter
        public Builder sha256sum(@Nullable String sha256sum) {

            this.sha256sum = sha256sum;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("StorageImport", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder sourceHash(@Nullable String sourceHash) {

            this.sourceHash = sourceHash;
            return this;
        }
        @CustomType.Setter
        public Builder sourceLocation(String sourceLocation) {
            if (sourceLocation == null) {
              throw new MissingRequiredPropertyException("StorageImport", "sourceLocation");
            }
            this.sourceLocation = sourceLocation;
            return this;
        }
        @CustomType.Setter
        public Builder writtenBytes(@Nullable Integer writtenBytes) {

            this.writtenBytes = writtenBytes;
            return this;
        }
        public StorageImport build() {
            final var _resultValue = new StorageImport();
            _resultValue.sha256sum = sha256sum;
            _resultValue.source = source;
            _resultValue.sourceHash = sourceHash;
            _resultValue.sourceLocation = sourceLocation;
            _resultValue.writtenBytes = writtenBytes;
            return _resultValue;
        }
    }
}
