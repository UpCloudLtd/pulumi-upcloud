// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerStorageDeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerStorageDeviceArgs Empty = new ServerStorageDeviceArgs();

    /**
     * The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The device position in the given bus (defined via field `address`). Valid values for address `virtio` are `0-15` (`0`, for example). Valid values for `scsi` or `ide` are `0-1:0-1` (`0:0`, for example). Leave empty to auto-select next available address in the given bus.
     * 
     */
    @Import(name="addressPosition")
    private @Nullable Output<String> addressPosition;

    /**
     * @return The device position in the given bus (defined via field `address`). Valid values for address `virtio` are `0-15` (`0`, for example). Valid values for `scsi` or `ide` are `0-1:0-1` (`0:0`, for example). Leave empty to auto-select next available address in the given bus.
     * 
     */
    public Optional<Output<String>> addressPosition() {
        return Optional.ofNullable(this.addressPosition);
    }

    /**
     * The UUID of the storage to attach to the server.
     * 
     */
    @Import(name="storage")
    private @Nullable Output<String> storage;

    /**
     * @return The UUID of the storage to attach to the server.
     * 
     */
    public Optional<Output<String>> storage() {
        return Optional.ofNullable(this.storage);
    }

    /**
     * The device type the storage will be attached as
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The device type the storage will be attached as
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ServerStorageDeviceArgs() {}

    private ServerStorageDeviceArgs(ServerStorageDeviceArgs $) {
        this.address = $.address;
        this.addressPosition = $.addressPosition;
        this.storage = $.storage;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerStorageDeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerStorageDeviceArgs $;

        public Builder() {
            $ = new ServerStorageDeviceArgs();
        }

        public Builder(ServerStorageDeviceArgs defaults) {
            $ = new ServerStorageDeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param addressPosition The device position in the given bus (defined via field `address`). Valid values for address `virtio` are `0-15` (`0`, for example). Valid values for `scsi` or `ide` are `0-1:0-1` (`0:0`, for example). Leave empty to auto-select next available address in the given bus.
         * 
         * @return builder
         * 
         */
        public Builder addressPosition(@Nullable Output<String> addressPosition) {
            $.addressPosition = addressPosition;
            return this;
        }

        /**
         * @param addressPosition The device position in the given bus (defined via field `address`). Valid values for address `virtio` are `0-15` (`0`, for example). Valid values for `scsi` or `ide` are `0-1:0-1` (`0:0`, for example). Leave empty to auto-select next available address in the given bus.
         * 
         * @return builder
         * 
         */
        public Builder addressPosition(String addressPosition) {
            return addressPosition(Output.of(addressPosition));
        }

        /**
         * @param storage The UUID of the storage to attach to the server.
         * 
         * @return builder
         * 
         */
        public Builder storage(@Nullable Output<String> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage The UUID of the storage to attach to the server.
         * 
         * @return builder
         * 
         */
        public Builder storage(String storage) {
            return storage(Output.of(storage));
        }

        /**
         * @param type The device type the storage will be attached as
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The device type the storage will be attached as
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServerStorageDeviceArgs build() {
            return $;
        }
    }

}
