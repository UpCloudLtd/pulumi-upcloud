// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedDatabasePostgresqlPropertiesMigration {
    /**
     * @return Database name for bootstrapping the initial connection.
     * 
     */
    private @Nullable String dbname;
    /**
     * @return Hostname or IP address of the server where to migrate data from.
     * 
     */
    private @Nullable String host;
    /**
     * @return Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
     * 
     */
    private @Nullable String ignoreDbs;
    /**
     * @return Comma-separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
     * 
     */
    private @Nullable String ignoreRoles;
    /**
     * @return The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
     * 
     */
    private @Nullable String method;
    /**
     * @return Password for authentication with the server where to migrate data from.
     * 
     */
    private @Nullable String password;
    /**
     * @return Port number of the server where to migrate data from.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The server where to migrate data from is secured with SSL.
     * 
     */
    private @Nullable Boolean ssl;
    /**
     * @return User name for authentication with the server where to migrate data from.
     * 
     */
    private @Nullable String username;

    private ManagedDatabasePostgresqlPropertiesMigration() {}
    /**
     * @return Database name for bootstrapping the initial connection.
     * 
     */
    public Optional<String> dbname() {
        return Optional.ofNullable(this.dbname);
    }
    /**
     * @return Hostname or IP address of the server where to migrate data from.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).
     * 
     */
    public Optional<String> ignoreDbs() {
        return Optional.ofNullable(this.ignoreDbs);
    }
    /**
     * @return Comma-separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment).
     * 
     */
    public Optional<String> ignoreRoles() {
        return Optional.ofNullable(this.ignoreRoles);
    }
    /**
     * @return The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types).
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return Password for authentication with the server where to migrate data from.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Port number of the server where to migrate data from.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The server where to migrate data from is secured with SSL.
     * 
     */
    public Optional<Boolean> ssl() {
        return Optional.ofNullable(this.ssl);
    }
    /**
     * @return User name for authentication with the server where to migrate data from.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedDatabasePostgresqlPropertiesMigration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dbname;
        private @Nullable String host;
        private @Nullable String ignoreDbs;
        private @Nullable String ignoreRoles;
        private @Nullable String method;
        private @Nullable String password;
        private @Nullable Integer port;
        private @Nullable Boolean ssl;
        private @Nullable String username;
        public Builder() {}
        public Builder(ManagedDatabasePostgresqlPropertiesMigration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbname = defaults.dbname;
    	      this.host = defaults.host;
    	      this.ignoreDbs = defaults.ignoreDbs;
    	      this.ignoreRoles = defaults.ignoreRoles;
    	      this.method = defaults.method;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.ssl = defaults.ssl;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder dbname(@Nullable String dbname) {

            this.dbname = dbname;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreDbs(@Nullable String ignoreDbs) {

            this.ignoreDbs = ignoreDbs;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreRoles(@Nullable String ignoreRoles) {

            this.ignoreRoles = ignoreRoles;
            return this;
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {

            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder ssl(@Nullable Boolean ssl) {

            this.ssl = ssl;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public ManagedDatabasePostgresqlPropertiesMigration build() {
            final var _resultValue = new ManagedDatabasePostgresqlPropertiesMigration();
            _resultValue.dbname = dbname;
            _resultValue.host = host;
            _resultValue.ignoreDbs = ignoreDbs;
            _resultValue.ignoreRoles = ignoreRoles;
            _resultValue.method = method;
            _resultValue.password = password;
            _resultValue.port = port;
            _resultValue.ssl = ssl;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
