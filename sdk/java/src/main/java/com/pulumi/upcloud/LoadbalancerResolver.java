// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.LoadbalancerResolverArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.LoadbalancerResolverState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * This resource represents load balancer resolver.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.upcloud.Network;
 * import com.pulumi.upcloud.NetworkArgs;
 * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
 * import com.pulumi.upcloud.Loadbalancer;
 * import com.pulumi.upcloud.LoadbalancerArgs;
 * import com.pulumi.upcloud.LoadbalancerResolver;
 * import com.pulumi.upcloud.LoadbalancerResolverArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var lbZone = config.get("lbZone").orElse("fi-hel2");
 *         var lbNetwork = new Network("lbNetwork", NetworkArgs.builder()
 *             .name("lb-test-net")
 *             .zone(lbZone)
 *             .ipNetwork(NetworkIpNetworkArgs.builder()
 *                 .address("10.0.0.0/24")
 *                 .dhcp(true)
 *                 .family("IPv4")
 *                 .build())
 *             .build());
 * 
 *         var lb = new Loadbalancer("lb", LoadbalancerArgs.builder()
 *             .configuredStatus("started")
 *             .name("lb-test")
 *             .plan("development")
 *             .zone(lbZone)
 *             .network(upcloudNetwork.lbNetwork().id())
 *             .build());
 * 
 *         var lbResolver1 = new LoadbalancerResolver("lbResolver1", LoadbalancerResolverArgs.builder()
 *             .loadbalancer(upcloudLoadbalancer.lb().id())
 *             .name("lb-resolver-1-test")
 *             .cacheInvalid(10)
 *             .cacheValid(100)
 *             .retries(5)
 *             .timeout(10)
 *             .timeoutRetry(10)
 *             .nameservers("10.0.0.10:53")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="upcloud:index/loadbalancerResolver:LoadbalancerResolver")
public class LoadbalancerResolver extends com.pulumi.resources.CustomResource {
    /**
     * Time in seconds to cache invalid results.
     * 
     */
    @Export(name="cacheInvalid", refs={Integer.class}, tree="[0]")
    private Output<Integer> cacheInvalid;

    /**
     * @return Time in seconds to cache invalid results.
     * 
     */
    public Output<Integer> cacheInvalid() {
        return this.cacheInvalid;
    }
    /**
     * Time in seconds to cache valid results.
     * 
     */
    @Export(name="cacheValid", refs={Integer.class}, tree="[0]")
    private Output<Integer> cacheValid;

    /**
     * @return Time in seconds to cache valid results.
     * 
     */
    public Output<Integer> cacheValid() {
        return this.cacheValid;
    }
    /**
     * ID of the load balancer to which the resolver is connected.
     * 
     */
    @Export(name="loadbalancer", refs={String.class}, tree="[0]")
    private Output<String> loadbalancer;

    /**
     * @return ID of the load balancer to which the resolver is connected.
     * 
     */
    public Output<String> loadbalancer() {
        return this.loadbalancer;
    }
    /**
     * The name of the resolver. Must be unique within the service.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the resolver. Must be unique within the service.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is optional, if missing then default 53 will be used.
     * 
     */
    @Export(name="nameservers", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> nameservers;

    /**
     * @return List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. Port is optional, if missing then default 53 will be used.
     * 
     */
    public Output<List<String>> nameservers() {
        return this.nameservers;
    }
    /**
     * Number of retries on failure.
     * 
     */
    @Export(name="retries", refs={Integer.class}, tree="[0]")
    private Output<Integer> retries;

    /**
     * @return Number of retries on failure.
     * 
     */
    public Output<Integer> retries() {
        return this.retries;
    }
    /**
     * Timeout for the query in seconds.
     * 
     */
    @Export(name="timeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeout;

    /**
     * @return Timeout for the query in seconds.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }
    /**
     * Timeout for the query retries in seconds.
     * 
     */
    @Export(name="timeoutRetry", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeoutRetry;

    /**
     * @return Timeout for the query retries in seconds.
     * 
     */
    public Output<Integer> timeoutRetry() {
        return this.timeoutRetry;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LoadbalancerResolver(java.lang.String name) {
        this(name, LoadbalancerResolverArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LoadbalancerResolver(java.lang.String name, LoadbalancerResolverArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LoadbalancerResolver(java.lang.String name, LoadbalancerResolverArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/loadbalancerResolver:LoadbalancerResolver", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LoadbalancerResolver(java.lang.String name, Output<java.lang.String> id, @Nullable LoadbalancerResolverState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/loadbalancerResolver:LoadbalancerResolver", name, state, makeResourceOptions(options, id), false);
    }

    private static LoadbalancerResolverArgs makeArgs(LoadbalancerResolverArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LoadbalancerResolverArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LoadbalancerResolver get(java.lang.String name, Output<java.lang.String> id, @Nullable LoadbalancerResolverState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LoadbalancerResolver(name, id, state, options);
    }
}
