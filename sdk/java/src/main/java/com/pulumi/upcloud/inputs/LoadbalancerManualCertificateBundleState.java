// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerManualCertificateBundleState extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerManualCertificateBundleState Empty = new LoadbalancerManualCertificateBundleState();

    /**
     * Certificate as base64 encoded string. Must be in PEM format.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return Certificate as base64 encoded string. Must be in PEM format.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Intermediate certificates as base64 encoded string. Must be in PEM format.
     * 
     */
    @Import(name="intermediates")
    private @Nullable Output<String> intermediates;

    /**
     * @return Intermediate certificates as base64 encoded string. Must be in PEM format.
     * 
     */
    public Optional<Output<String>> intermediates() {
        return Optional.ofNullable(this.intermediates);
    }

    /**
     * The name of the certificate bundle. Must be unique within customer account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the certificate bundle. Must be unique within customer account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The time after which a certificate is no longer valid.
     * 
     */
    @Import(name="notAfter")
    private @Nullable Output<String> notAfter;

    /**
     * @return The time after which a certificate is no longer valid.
     * 
     */
    public Optional<Output<String>> notAfter() {
        return Optional.ofNullable(this.notAfter);
    }

    /**
     * The time on which a certificate becomes valid.
     * 
     */
    @Import(name="notBefore")
    private @Nullable Output<String> notBefore;

    /**
     * @return The time on which a certificate becomes valid.
     * 
     */
    public Optional<Output<String>> notBefore() {
        return Optional.ofNullable(this.notBefore);
    }

    /**
     * The service operational state indicates the service&#39;s current operational, effective state. Managed by the system.
     * 
     */
    @Import(name="operationalState")
    private @Nullable Output<String> operationalState;

    /**
     * @return The service operational state indicates the service&#39;s current operational, effective state. Managed by the system.
     * 
     */
    public Optional<Output<String>> operationalState() {
        return Optional.ofNullable(this.operationalState);
    }

    /**
     * Private key as base64 encoded string. Must be in PEM format.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return Private key as base64 encoded string. Must be in PEM format.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    private LoadbalancerManualCertificateBundleState() {}

    private LoadbalancerManualCertificateBundleState(LoadbalancerManualCertificateBundleState $) {
        this.certificate = $.certificate;
        this.intermediates = $.intermediates;
        this.name = $.name;
        this.notAfter = $.notAfter;
        this.notBefore = $.notBefore;
        this.operationalState = $.operationalState;
        this.privateKey = $.privateKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerManualCertificateBundleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerManualCertificateBundleState $;

        public Builder() {
            $ = new LoadbalancerManualCertificateBundleState();
        }

        public Builder(LoadbalancerManualCertificateBundleState defaults) {
            $ = new LoadbalancerManualCertificateBundleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param intermediates Intermediate certificates as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder intermediates(@Nullable Output<String> intermediates) {
            $.intermediates = intermediates;
            return this;
        }

        /**
         * @param intermediates Intermediate certificates as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder intermediates(String intermediates) {
            return intermediates(Output.of(intermediates));
        }

        /**
         * @param name The name of the certificate bundle. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the certificate bundle. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notAfter The time after which a certificate is no longer valid.
         * 
         * @return builder
         * 
         */
        public Builder notAfter(@Nullable Output<String> notAfter) {
            $.notAfter = notAfter;
            return this;
        }

        /**
         * @param notAfter The time after which a certificate is no longer valid.
         * 
         * @return builder
         * 
         */
        public Builder notAfter(String notAfter) {
            return notAfter(Output.of(notAfter));
        }

        /**
         * @param notBefore The time on which a certificate becomes valid.
         * 
         * @return builder
         * 
         */
        public Builder notBefore(@Nullable Output<String> notBefore) {
            $.notBefore = notBefore;
            return this;
        }

        /**
         * @param notBefore The time on which a certificate becomes valid.
         * 
         * @return builder
         * 
         */
        public Builder notBefore(String notBefore) {
            return notBefore(Output.of(notBefore));
        }

        /**
         * @param operationalState The service operational state indicates the service&#39;s current operational, effective state. Managed by the system.
         * 
         * @return builder
         * 
         */
        public Builder operationalState(@Nullable Output<String> operationalState) {
            $.operationalState = operationalState;
            return this;
        }

        /**
         * @param operationalState The service operational state indicates the service&#39;s current operational, effective state. Managed by the system.
         * 
         * @return builder
         * 
         */
        public Builder operationalState(String operationalState) {
            return operationalState(Output.of(operationalState));
        }

        /**
         * @param privateKey Private key as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Private key as base64 encoded string. Must be in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        public LoadbalancerManualCertificateBundleState build() {
            return $;
        }
    }

}
