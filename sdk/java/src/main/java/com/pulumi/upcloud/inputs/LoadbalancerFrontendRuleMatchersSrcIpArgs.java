// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerFrontendRuleMatchersSrcIpArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerFrontendRuleMatchersSrcIpArgs Empty = new LoadbalancerFrontendRuleMatchersSrcIpArgs();

    /**
     * Defines if the condition should be inverted. Works similarly to logical NOT operator.
     * 
     */
    @Import(name="inverse")
    private @Nullable Output<Boolean> inverse;

    /**
     * @return Defines if the condition should be inverted. Works similarly to logical NOT operator.
     * 
     */
    public Optional<Output<Boolean>> inverse() {
        return Optional.ofNullable(this.inverse);
    }

    /**
     * IP address. CIDR masks are supported, e.g. `192.168.0.0/24`.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return IP address. CIDR masks are supported, e.g. `192.168.0.0/24`.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private LoadbalancerFrontendRuleMatchersSrcIpArgs() {}

    private LoadbalancerFrontendRuleMatchersSrcIpArgs(LoadbalancerFrontendRuleMatchersSrcIpArgs $) {
        this.inverse = $.inverse;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerFrontendRuleMatchersSrcIpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerFrontendRuleMatchersSrcIpArgs $;

        public Builder() {
            $ = new LoadbalancerFrontendRuleMatchersSrcIpArgs();
        }

        public Builder(LoadbalancerFrontendRuleMatchersSrcIpArgs defaults) {
            $ = new LoadbalancerFrontendRuleMatchersSrcIpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inverse Defines if the condition should be inverted. Works similarly to logical NOT operator.
         * 
         * @return builder
         * 
         */
        public Builder inverse(@Nullable Output<Boolean> inverse) {
            $.inverse = inverse;
            return this;
        }

        /**
         * @param inverse Defines if the condition should be inverted. Works similarly to logical NOT operator.
         * 
         * @return builder
         * 
         */
        public Builder inverse(Boolean inverse) {
            return inverse(Output.of(inverse));
        }

        /**
         * @param value IP address. CIDR masks are supported, e.g. `192.168.0.0/24`.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value IP address. CIDR masks are supported, e.g. `192.168.0.0/24`.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public LoadbalancerFrontendRuleMatchersSrcIpArgs build() {
            if ($.value == null) {
                throw new MissingRequiredPropertyException("LoadbalancerFrontendRuleMatchersSrcIpArgs", "value");
            }
            return $;
        }
    }

}
