// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.LoadbalancerBackendArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.LoadbalancerBackendState;
import com.pulumi.upcloud.outputs.LoadbalancerBackendProperties;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource represents load balancer backend service.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.upcloud.Network;
 * import com.pulumi.upcloud.NetworkArgs;
 * import com.pulumi.upcloud.inputs.NetworkIpNetworkArgs;
 * import com.pulumi.upcloud.Loadbalancer;
 * import com.pulumi.upcloud.LoadbalancerArgs;
 * import com.pulumi.upcloud.LoadbalancerBackend;
 * import com.pulumi.upcloud.LoadbalancerBackendArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var lbZone = config.get("lbZone").orElse("fi-hel2");
 *         var lbNetwork = new Network("lbNetwork", NetworkArgs.builder()
 *             .name("lb-test-net")
 *             .zone(lbZone)
 *             .ipNetwork(NetworkIpNetworkArgs.builder()
 *                 .address("10.0.0.0/24")
 *                 .dhcp(true)
 *                 .family("IPv4")
 *                 .build())
 *             .build());
 * 
 *         var lb = new Loadbalancer("lb", LoadbalancerArgs.builder()
 *             .configuredStatus("started")
 *             .name("lb-test")
 *             .plan("development")
 *             .zone(lbZone)
 *             .network(upcloudNetwork.lbNetwork().id())
 *             .build());
 * 
 *         var lbBe1 = new LoadbalancerBackend("lbBe1", LoadbalancerBackendArgs.builder()
 *             .loadbalancer(upcloudLoadbalancer.lb().id())
 *             .name("lb-be-1-test")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="upcloud:index/loadbalancerBackend:LoadbalancerBackend")
public class LoadbalancerBackend extends com.pulumi.resources.CustomResource {
    /**
     * UUID of the load balancer to which the backend is connected.
     * 
     */
    @Export(name="loadbalancer", refs={String.class}, tree="[0]")
    private Output<String> loadbalancer;

    /**
     * @return UUID of the load balancer to which the backend is connected.
     * 
     */
    public Output<String> loadbalancer() {
        return this.loadbalancer;
    }
    /**
     * Backend member server UUIDs. Members receive traffic dispatched from the frontends.
     * 
     */
    @Export(name="members", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> members;

    /**
     * @return Backend member server UUIDs. Members receive traffic dispatched from the frontends.
     * 
     */
    public Output<List<String>> members() {
        return this.members;
    }
    /**
     * The name of the backend. Must be unique within the load balancer service.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the backend. Must be unique within the load balancer service.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="properties", refs={LoadbalancerBackendProperties.class}, tree="[0]")
    private Output</* @Nullable */ LoadbalancerBackendProperties> properties;

    public Output<Optional<LoadbalancerBackendProperties>> properties() {
        return Codegen.optional(this.properties);
    }
    /**
     * Domain name resolver used with dynamic type members.
     * 
     */
    @Export(name="resolverName", refs={String.class}, tree="[0]")
    private Output<String> resolverName;

    /**
     * @return Domain name resolver used with dynamic type members.
     * 
     */
    public Output<String> resolverName() {
        return this.resolverName;
    }
    /**
     * Set of TLS config names.
     * 
     */
    @Export(name="tlsConfigs", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> tlsConfigs;

    /**
     * @return Set of TLS config names.
     * 
     */
    public Output<List<String>> tlsConfigs() {
        return this.tlsConfigs;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LoadbalancerBackend(java.lang.String name) {
        this(name, LoadbalancerBackendArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LoadbalancerBackend(java.lang.String name, LoadbalancerBackendArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LoadbalancerBackend(java.lang.String name, LoadbalancerBackendArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/loadbalancerBackend:LoadbalancerBackend", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LoadbalancerBackend(java.lang.String name, Output<java.lang.String> id, @Nullable LoadbalancerBackendState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/loadbalancerBackend:LoadbalancerBackend", name, state, makeResourceOptions(options, id), false);
    }

    private static LoadbalancerBackendArgs makeArgs(LoadbalancerBackendArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LoadbalancerBackendArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LoadbalancerBackend get(java.lang.String name, Output<java.lang.String> id, @Nullable LoadbalancerBackendState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LoadbalancerBackend(name, id, state, options);
    }
}
