// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.upcloud.outputs.ManagedDatabaseValkeyPropertiesMigration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedDatabaseValkeyProperties {
    /**
     * @return Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    private @Nullable Boolean automaticUtilityNetworkIpFilter;
    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    private @Nullable Integer backupHour;
    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    private @Nullable Integer backupMinute;
    /**
     * @return Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkey_persistence` is set to `off`.
     * 
     */
    private @Nullable Boolean frequentSnapshots;
    /**
     * @return IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    private @Nullable List<String> ipFilters;
    /**
     * @return Migrate data from existing server.
     * 
     */
    private @Nullable ManagedDatabaseValkeyPropertiesMigration migration;
    /**
     * @return Public Access. Allow access to the service from the public Internet.
     * 
     */
    private @Nullable Boolean publicAccess;
    /**
     * @return Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    private @Nullable Boolean serviceLog;
    /**
     * @return Default ACL for pub/sub channels used when a Valkey user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
     * 
     */
    private @Nullable String valkeyAclChannelsDefault;
    /**
     * @return Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
     * 
     */
    private @Nullable Integer valkeyActiveExpireEffort;
    /**
     * @return Valkey IO thread count. Set Valkey IO thread count. Changing this will cause a restart of the Valkey service.
     * 
     */
    private @Nullable Integer valkeyIoThreads;
    /**
     * @return LFU maxmemory-policy counter decay time in minutes.
     * 
     */
    private @Nullable Integer valkeyLfuDecayTime;
    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
     * 
     */
    private @Nullable Integer valkeyLfuLogFactor;
    /**
     * @return Valkey maxmemory-policy.
     * 
     */
    private @Nullable String valkeyMaxmemoryPolicy;
    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    private @Nullable String valkeyNotifyKeyspaceEvents;
    /**
     * @return Number of Valkey databases. Set number of Valkey databases. Changing this will cause a restart of the Valkey service.
     * 
     */
    private @Nullable Integer valkeyNumberOfDatabases;
    /**
     * @return Valkey persistence. When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    private @Nullable String valkeyPersistence;
    /**
     * @return Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    private @Nullable Integer valkeyPubsubClientOutputBufferLimit;
    /**
     * @return Require SSL to access Valkey.
     * 
     */
    private @Nullable Boolean valkeySsl;
    /**
     * @return Valkey idle connection timeout in seconds.
     * 
     */
    private @Nullable Integer valkeyTimeout;

    private ManagedDatabaseValkeyProperties() {}
    /**
     * @return Automatic utility network IP Filter. Automatically allow connections from servers in the utility network within the same zone.
     * 
     */
    public Optional<Boolean> automaticUtilityNetworkIpFilter() {
        return Optional.ofNullable(this.automaticUtilityNetworkIpFilter);
    }
    /**
     * @return The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Integer> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }
    /**
     * @return The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.
     * 
     */
    public Optional<Integer> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }
    /**
     * @return Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when `valkey_persistence` is set to `off`.
     * 
     */
    public Optional<Boolean> frequentSnapshots() {
        return Optional.ofNullable(this.frequentSnapshots);
    }
    /**
     * @return IP filter. Allow incoming connections from CIDR address block, e.g. &#39;10.20.0.0/16&#39;.
     * 
     */
    public List<String> ipFilters() {
        return this.ipFilters == null ? List.of() : this.ipFilters;
    }
    /**
     * @return Migrate data from existing server.
     * 
     */
    public Optional<ManagedDatabaseValkeyPropertiesMigration> migration() {
        return Optional.ofNullable(this.migration);
    }
    /**
     * @return Public Access. Allow access to the service from the public Internet.
     * 
     */
    public Optional<Boolean> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }
    /**
     * @return Service logging. Store logs for the service so that they are available in the HTTP API and console.
     * 
     */
    public Optional<Boolean> serviceLog() {
        return Optional.ofNullable(this.serviceLog);
    }
    /**
     * @return Default ACL for pub/sub channels used when a Valkey user is created. Determines default pub/sub channels&#39; ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey configuration acl-pubsub-default.
     * 
     */
    public Optional<String> valkeyAclChannelsDefault() {
        return Optional.ofNullable(this.valkeyAclChannelsDefault);
    }
    /**
     * @return Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
     * 
     */
    public Optional<Integer> valkeyActiveExpireEffort() {
        return Optional.ofNullable(this.valkeyActiveExpireEffort);
    }
    /**
     * @return Valkey IO thread count. Set Valkey IO thread count. Changing this will cause a restart of the Valkey service.
     * 
     */
    public Optional<Integer> valkeyIoThreads() {
        return Optional.ofNullable(this.valkeyIoThreads);
    }
    /**
     * @return LFU maxmemory-policy counter decay time in minutes.
     * 
     */
    public Optional<Integer> valkeyLfuDecayTime() {
        return Optional.ofNullable(this.valkeyLfuDecayTime);
    }
    /**
     * @return Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies.
     * 
     */
    public Optional<Integer> valkeyLfuLogFactor() {
        return Optional.ofNullable(this.valkeyLfuLogFactor);
    }
    /**
     * @return Valkey maxmemory-policy.
     * 
     */
    public Optional<String> valkeyMaxmemoryPolicy() {
        return Optional.ofNullable(this.valkeyMaxmemoryPolicy);
    }
    /**
     * @return Set notify-keyspace-events option.
     * 
     */
    public Optional<String> valkeyNotifyKeyspaceEvents() {
        return Optional.ofNullable(this.valkeyNotifyKeyspaceEvents);
    }
    /**
     * @return Number of Valkey databases. Set number of Valkey databases. Changing this will cause a restart of the Valkey service.
     * 
     */
    public Optional<Integer> valkeyNumberOfDatabases() {
        return Optional.ofNullable(this.valkeyNumberOfDatabases);
    }
    /**
     * @return Valkey persistence. When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    public Optional<String> valkeyPersistence() {
        return Optional.ofNullable(this.valkeyPersistence);
    }
    /**
     * @return Pub/sub client output buffer hard limit in MB. Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    public Optional<Integer> valkeyPubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.valkeyPubsubClientOutputBufferLimit);
    }
    /**
     * @return Require SSL to access Valkey.
     * 
     */
    public Optional<Boolean> valkeySsl() {
        return Optional.ofNullable(this.valkeySsl);
    }
    /**
     * @return Valkey idle connection timeout in seconds.
     * 
     */
    public Optional<Integer> valkeyTimeout() {
        return Optional.ofNullable(this.valkeyTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedDatabaseValkeyProperties defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean automaticUtilityNetworkIpFilter;
        private @Nullable Integer backupHour;
        private @Nullable Integer backupMinute;
        private @Nullable Boolean frequentSnapshots;
        private @Nullable List<String> ipFilters;
        private @Nullable ManagedDatabaseValkeyPropertiesMigration migration;
        private @Nullable Boolean publicAccess;
        private @Nullable Boolean serviceLog;
        private @Nullable String valkeyAclChannelsDefault;
        private @Nullable Integer valkeyActiveExpireEffort;
        private @Nullable Integer valkeyIoThreads;
        private @Nullable Integer valkeyLfuDecayTime;
        private @Nullable Integer valkeyLfuLogFactor;
        private @Nullable String valkeyMaxmemoryPolicy;
        private @Nullable String valkeyNotifyKeyspaceEvents;
        private @Nullable Integer valkeyNumberOfDatabases;
        private @Nullable String valkeyPersistence;
        private @Nullable Integer valkeyPubsubClientOutputBufferLimit;
        private @Nullable Boolean valkeySsl;
        private @Nullable Integer valkeyTimeout;
        public Builder() {}
        public Builder(ManagedDatabaseValkeyProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticUtilityNetworkIpFilter = defaults.automaticUtilityNetworkIpFilter;
    	      this.backupHour = defaults.backupHour;
    	      this.backupMinute = defaults.backupMinute;
    	      this.frequentSnapshots = defaults.frequentSnapshots;
    	      this.ipFilters = defaults.ipFilters;
    	      this.migration = defaults.migration;
    	      this.publicAccess = defaults.publicAccess;
    	      this.serviceLog = defaults.serviceLog;
    	      this.valkeyAclChannelsDefault = defaults.valkeyAclChannelsDefault;
    	      this.valkeyActiveExpireEffort = defaults.valkeyActiveExpireEffort;
    	      this.valkeyIoThreads = defaults.valkeyIoThreads;
    	      this.valkeyLfuDecayTime = defaults.valkeyLfuDecayTime;
    	      this.valkeyLfuLogFactor = defaults.valkeyLfuLogFactor;
    	      this.valkeyMaxmemoryPolicy = defaults.valkeyMaxmemoryPolicy;
    	      this.valkeyNotifyKeyspaceEvents = defaults.valkeyNotifyKeyspaceEvents;
    	      this.valkeyNumberOfDatabases = defaults.valkeyNumberOfDatabases;
    	      this.valkeyPersistence = defaults.valkeyPersistence;
    	      this.valkeyPubsubClientOutputBufferLimit = defaults.valkeyPubsubClientOutputBufferLimit;
    	      this.valkeySsl = defaults.valkeySsl;
    	      this.valkeyTimeout = defaults.valkeyTimeout;
        }

        @CustomType.Setter
        public Builder automaticUtilityNetworkIpFilter(@Nullable Boolean automaticUtilityNetworkIpFilter) {

            this.automaticUtilityNetworkIpFilter = automaticUtilityNetworkIpFilter;
            return this;
        }
        @CustomType.Setter
        public Builder backupHour(@Nullable Integer backupHour) {

            this.backupHour = backupHour;
            return this;
        }
        @CustomType.Setter
        public Builder backupMinute(@Nullable Integer backupMinute) {

            this.backupMinute = backupMinute;
            return this;
        }
        @CustomType.Setter
        public Builder frequentSnapshots(@Nullable Boolean frequentSnapshots) {

            this.frequentSnapshots = frequentSnapshots;
            return this;
        }
        @CustomType.Setter
        public Builder ipFilters(@Nullable List<String> ipFilters) {

            this.ipFilters = ipFilters;
            return this;
        }
        public Builder ipFilters(String... ipFilters) {
            return ipFilters(List.of(ipFilters));
        }
        @CustomType.Setter
        public Builder migration(@Nullable ManagedDatabaseValkeyPropertiesMigration migration) {

            this.migration = migration;
            return this;
        }
        @CustomType.Setter
        public Builder publicAccess(@Nullable Boolean publicAccess) {

            this.publicAccess = publicAccess;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLog(@Nullable Boolean serviceLog) {

            this.serviceLog = serviceLog;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyAclChannelsDefault(@Nullable String valkeyAclChannelsDefault) {

            this.valkeyAclChannelsDefault = valkeyAclChannelsDefault;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyActiveExpireEffort(@Nullable Integer valkeyActiveExpireEffort) {

            this.valkeyActiveExpireEffort = valkeyActiveExpireEffort;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyIoThreads(@Nullable Integer valkeyIoThreads) {

            this.valkeyIoThreads = valkeyIoThreads;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyLfuDecayTime(@Nullable Integer valkeyLfuDecayTime) {

            this.valkeyLfuDecayTime = valkeyLfuDecayTime;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyLfuLogFactor(@Nullable Integer valkeyLfuLogFactor) {

            this.valkeyLfuLogFactor = valkeyLfuLogFactor;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyMaxmemoryPolicy(@Nullable String valkeyMaxmemoryPolicy) {

            this.valkeyMaxmemoryPolicy = valkeyMaxmemoryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyNotifyKeyspaceEvents(@Nullable String valkeyNotifyKeyspaceEvents) {

            this.valkeyNotifyKeyspaceEvents = valkeyNotifyKeyspaceEvents;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyNumberOfDatabases(@Nullable Integer valkeyNumberOfDatabases) {

            this.valkeyNumberOfDatabases = valkeyNumberOfDatabases;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyPersistence(@Nullable String valkeyPersistence) {

            this.valkeyPersistence = valkeyPersistence;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyPubsubClientOutputBufferLimit(@Nullable Integer valkeyPubsubClientOutputBufferLimit) {

            this.valkeyPubsubClientOutputBufferLimit = valkeyPubsubClientOutputBufferLimit;
            return this;
        }
        @CustomType.Setter
        public Builder valkeySsl(@Nullable Boolean valkeySsl) {

            this.valkeySsl = valkeySsl;
            return this;
        }
        @CustomType.Setter
        public Builder valkeyTimeout(@Nullable Integer valkeyTimeout) {

            this.valkeyTimeout = valkeyTimeout;
            return this;
        }
        public ManagedDatabaseValkeyProperties build() {
            final var _resultValue = new ManagedDatabaseValkeyProperties();
            _resultValue.automaticUtilityNetworkIpFilter = automaticUtilityNetworkIpFilter;
            _resultValue.backupHour = backupHour;
            _resultValue.backupMinute = backupMinute;
            _resultValue.frequentSnapshots = frequentSnapshots;
            _resultValue.ipFilters = ipFilters;
            _resultValue.migration = migration;
            _resultValue.publicAccess = publicAccess;
            _resultValue.serviceLog = serviceLog;
            _resultValue.valkeyAclChannelsDefault = valkeyAclChannelsDefault;
            _resultValue.valkeyActiveExpireEffort = valkeyActiveExpireEffort;
            _resultValue.valkeyIoThreads = valkeyIoThreads;
            _resultValue.valkeyLfuDecayTime = valkeyLfuDecayTime;
            _resultValue.valkeyLfuLogFactor = valkeyLfuLogFactor;
            _resultValue.valkeyMaxmemoryPolicy = valkeyMaxmemoryPolicy;
            _resultValue.valkeyNotifyKeyspaceEvents = valkeyNotifyKeyspaceEvents;
            _resultValue.valkeyNumberOfDatabases = valkeyNumberOfDatabases;
            _resultValue.valkeyPersistence = valkeyPersistence;
            _resultValue.valkeyPubsubClientOutputBufferLimit = valkeyPubsubClientOutputBufferLimit;
            _resultValue.valkeySsl = valkeySsl;
            _resultValue.valkeyTimeout = valkeyTimeout;
            return _resultValue;
        }
    }
}
