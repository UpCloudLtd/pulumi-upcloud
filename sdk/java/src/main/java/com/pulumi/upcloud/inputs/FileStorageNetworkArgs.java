// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileStorageNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileStorageNetworkArgs Empty = new FileStorageNetworkArgs();

    /**
     * IP family, e.g. IPv4.
     * 
     */
    @Import(name="family", required=true)
    private Output<String> family;

    /**
     * @return IP family, e.g. IPv4.
     * 
     */
    public Output<String> family() {
        return this.family;
    }

    /**
     * IP address to assign (optional, auto-assign otherwise).
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IP address to assign (optional, auto-assign otherwise).
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Attachment name (unique per this service).
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Attachment name (unique per this service).
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * UUID of an existing private network to attach.
     * 
     */
    @Import(name="uuid", required=true)
    private Output<String> uuid;

    /**
     * @return UUID of an existing private network to attach.
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    private FileStorageNetworkArgs() {}

    private FileStorageNetworkArgs(FileStorageNetworkArgs $) {
        this.family = $.family;
        this.ipAddress = $.ipAddress;
        this.name = $.name;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileStorageNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileStorageNetworkArgs $;

        public Builder() {
            $ = new FileStorageNetworkArgs();
        }

        public Builder(FileStorageNetworkArgs defaults) {
            $ = new FileStorageNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param family IP family, e.g. IPv4.
         * 
         * @return builder
         * 
         */
        public Builder family(Output<String> family) {
            $.family = family;
            return this;
        }

        /**
         * @param family IP family, e.g. IPv4.
         * 
         * @return builder
         * 
         */
        public Builder family(String family) {
            return family(Output.of(family));
        }

        /**
         * @param ipAddress IP address to assign (optional, auto-assign otherwise).
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IP address to assign (optional, auto-assign otherwise).
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param name Attachment name (unique per this service).
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Attachment name (unique per this service).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param uuid UUID of an existing private network to attach.
         * 
         * @return builder
         * 
         */
        public Builder uuid(Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid UUID of an existing private network to attach.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public FileStorageNetworkArgs build() {
            if ($.family == null) {
                throw new MissingRequiredPropertyException("FileStorageNetworkArgs", "family");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("FileStorageNetworkArgs", "name");
            }
            if ($.uuid == null) {
                throw new MissingRequiredPropertyException("FileStorageNetworkArgs", "uuid");
            }
            return $;
        }
    }

}
