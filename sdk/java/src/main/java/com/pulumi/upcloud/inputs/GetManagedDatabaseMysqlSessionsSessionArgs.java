// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetManagedDatabaseMysqlSessionsSessionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetManagedDatabaseMysqlSessionsSessionArgs Empty = new GetManagedDatabaseMysqlSessionsSessionArgs();

    /**
     * Name of the application that is connected to this service.
     * 
     */
    @Import(name="applicationName", required=true)
    private Output<String> applicationName;

    /**
     * @return Name of the application that is connected to this service.
     * 
     */
    public Output<String> applicationName() {
        return this.applicationName;
    }

    /**
     * IP address of the client connected to this service.
     * 
     */
    @Import(name="clientAddr", required=true)
    private Output<String> clientAddr;

    /**
     * @return IP address of the client connected to this service.
     * 
     */
    public Output<String> clientAddr() {
        return this.clientAddr;
    }

    /**
     * Name of the database this service is connected to.
     * 
     */
    @Import(name="datname", required=true)
    private Output<String> datname;

    /**
     * @return Name of the database this service is connected to.
     * 
     */
    public Output<String> datname() {
        return this.datname;
    }

    /**
     * Process ID of this service.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Process ID of this service.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows an empty string.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows an empty string.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * The active query current duration.
     * 
     */
    @Import(name="queryDuration", required=true)
    private Output<String> queryDuration;

    /**
     * @return The active query current duration.
     * 
     */
    public Output<String> queryDuration() {
        return this.queryDuration;
    }

    /**
     * Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     * Name of the user logged into this service.
     * 
     */
    @Import(name="usename", required=true)
    private Output<String> usename;

    /**
     * @return Name of the user logged into this service.
     * 
     */
    public Output<String> usename() {
        return this.usename;
    }

    private GetManagedDatabaseMysqlSessionsSessionArgs() {}

    private GetManagedDatabaseMysqlSessionsSessionArgs(GetManagedDatabaseMysqlSessionsSessionArgs $) {
        this.applicationName = $.applicationName;
        this.clientAddr = $.clientAddr;
        this.datname = $.datname;
        this.id = $.id;
        this.query = $.query;
        this.queryDuration = $.queryDuration;
        this.state = $.state;
        this.usename = $.usename;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetManagedDatabaseMysqlSessionsSessionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetManagedDatabaseMysqlSessionsSessionArgs $;

        public Builder() {
            $ = new GetManagedDatabaseMysqlSessionsSessionArgs();
        }

        public Builder(GetManagedDatabaseMysqlSessionsSessionArgs defaults) {
            $ = new GetManagedDatabaseMysqlSessionsSessionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationName Name of the application that is connected to this service.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param applicationName Name of the application that is connected to this service.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        /**
         * @param clientAddr IP address of the client connected to this service.
         * 
         * @return builder
         * 
         */
        public Builder clientAddr(Output<String> clientAddr) {
            $.clientAddr = clientAddr;
            return this;
        }

        /**
         * @param clientAddr IP address of the client connected to this service.
         * 
         * @return builder
         * 
         */
        public Builder clientAddr(String clientAddr) {
            return clientAddr(Output.of(clientAddr));
        }

        /**
         * @param datname Name of the database this service is connected to.
         * 
         * @return builder
         * 
         */
        public Builder datname(Output<String> datname) {
            $.datname = datname;
            return this;
        }

        /**
         * @param datname Name of the database this service is connected to.
         * 
         * @return builder
         * 
         */
        public Builder datname(String datname) {
            return datname(Output.of(datname));
        }

        /**
         * @param id Process ID of this service.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Process ID of this service.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param query Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows an empty string.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Text of this service&#39;s most recent query. If state is active this field shows the currently executing query. In all other states, it shows an empty string.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param queryDuration The active query current duration.
         * 
         * @return builder
         * 
         */
        public Builder queryDuration(Output<String> queryDuration) {
            $.queryDuration = queryDuration;
            return this;
        }

        /**
         * @param queryDuration The active query current duration.
         * 
         * @return builder
         * 
         */
        public Builder queryDuration(String queryDuration) {
            return queryDuration(Output.of(queryDuration));
        }

        /**
         * @param state Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Current overall state of this service: active: The service is executing a query, idle: The service is waiting for a new client command.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param usename Name of the user logged into this service.
         * 
         * @return builder
         * 
         */
        public Builder usename(Output<String> usename) {
            $.usename = usename;
            return this;
        }

        /**
         * @param usename Name of the user logged into this service.
         * 
         * @return builder
         * 
         */
        public Builder usename(String usename) {
            return usename(Output.of(usename));
        }

        public GetManagedDatabaseMysqlSessionsSessionArgs build() {
            if ($.applicationName == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSessionArgs", "applicationName");
            }
            if ($.clientAddr == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSessionArgs", "clientAddr");
            }
            if ($.datname == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSessionArgs", "datname");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSessionArgs", "id");
            }
            if ($.query == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSessionArgs", "query");
            }
            if ($.queryDuration == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSessionArgs", "queryDuration");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSessionArgs", "state");
            }
            if ($.usename == null) {
                throw new MissingRequiredPropertyException("GetManagedDatabaseMysqlSessionsSessionArgs", "usename");
            }
            return $;
        }
    }

}
