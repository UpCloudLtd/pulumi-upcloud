// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.inputs.FileStorageNetworkArgs;
import com.pulumi.upcloud.inputs.FileStorageShareArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileStorageArgs Empty = new FileStorageArgs();

    /**
     * The service configured status indicates the service&#39;s current intended status. Managed by the customer.
     * 
     */
    @Import(name="configuredStatus", required=true)
    private Output<String> configuredStatus;

    /**
     * @return The service configured status indicates the service&#39;s current intended status. Managed by the customer.
     * 
     */
    public Output<String> configuredStatus() {
        return this.configuredStatus;
    }

    /**
     * User defined key-value pairs to classify the file storage.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the file storage.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the file storage service.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the file storage service.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network attached to this file storage (currently supports at most one of these blocks).
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<FileStorageNetworkArgs>> networks;

    /**
     * @return Network attached to this file storage (currently supports at most one of these blocks).
     * 
     */
    public Optional<Output<List<FileStorageNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * List of shares exported by this file storage.
     * 
     */
    @Import(name="shares")
    private @Nullable Output<List<FileStorageShareArgs>> shares;

    /**
     * @return List of shares exported by this file storage.
     * 
     */
    public Optional<Output<List<FileStorageShareArgs>>> shares() {
        return Optional.ofNullable(this.shares);
    }

    /**
     * Size of the file storage in GB.
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return Size of the file storage in GB.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private FileStorageArgs() {}

    private FileStorageArgs(FileStorageArgs $) {
        this.configuredStatus = $.configuredStatus;
        this.labels = $.labels;
        this.name = $.name;
        this.networks = $.networks;
        this.shares = $.shares;
        this.size = $.size;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileStorageArgs $;

        public Builder() {
            $ = new FileStorageArgs();
        }

        public Builder(FileStorageArgs defaults) {
            $ = new FileStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuredStatus The service configured status indicates the service&#39;s current intended status. Managed by the customer.
         * 
         * @return builder
         * 
         */
        public Builder configuredStatus(Output<String> configuredStatus) {
            $.configuredStatus = configuredStatus;
            return this;
        }

        /**
         * @param configuredStatus The service configured status indicates the service&#39;s current intended status. Managed by the customer.
         * 
         * @return builder
         * 
         */
        public Builder configuredStatus(String configuredStatus) {
            return configuredStatus(Output.of(configuredStatus));
        }

        /**
         * @param labels User defined key-value pairs to classify the file storage.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User defined key-value pairs to classify the file storage.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Name of the file storage service.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the file storage service.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks Network attached to this file storage (currently supports at most one of these blocks).
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<FileStorageNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Network attached to this file storage (currently supports at most one of these blocks).
         * 
         * @return builder
         * 
         */
        public Builder networks(List<FileStorageNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Network attached to this file storage (currently supports at most one of these blocks).
         * 
         * @return builder
         * 
         */
        public Builder networks(FileStorageNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param shares List of shares exported by this file storage.
         * 
         * @return builder
         * 
         */
        public Builder shares(@Nullable Output<List<FileStorageShareArgs>> shares) {
            $.shares = shares;
            return this;
        }

        /**
         * @param shares List of shares exported by this file storage.
         * 
         * @return builder
         * 
         */
        public Builder shares(List<FileStorageShareArgs> shares) {
            return shares(Output.of(shares));
        }

        /**
         * @param shares List of shares exported by this file storage.
         * 
         * @return builder
         * 
         */
        public Builder shares(FileStorageShareArgs... shares) {
            return shares(List.of(shares));
        }

        /**
         * @param size Size of the file storage in GB.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size of the file storage in GB.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param zone Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public FileStorageArgs build() {
            if ($.configuredStatus == null) {
                throw new MissingRequiredPropertyException("FileStorageArgs", "configuredStatus");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("FileStorageArgs", "size");
            }
            if ($.zone == null) {
                throw new MissingRequiredPropertyException("FileStorageArgs", "zone");
            }
            return $;
        }
    }

}
