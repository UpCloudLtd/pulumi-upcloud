// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleActionsArgs;
import com.pulumi.upcloud.inputs.LoadbalancerFrontendRuleMatchersArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerFrontendRuleState extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerFrontendRuleState Empty = new LoadbalancerFrontendRuleState();

    /**
     * Rule actions.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<LoadbalancerFrontendRuleActionsArgs> actions;

    /**
     * @return Rule actions.
     * 
     */
    public Optional<Output<LoadbalancerFrontendRuleActionsArgs>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * ID of the load balancer frontend to which the frontend rule is connected.
     * 
     */
    @Import(name="frontend")
    private @Nullable Output<String> frontend;

    /**
     * @return ID of the load balancer frontend to which the frontend rule is connected.
     * 
     */
    public Optional<Output<String>> frontend() {
        return Optional.ofNullable(this.frontend);
    }

    /**
     * Set of rule matchers. If rule doesn&#39;t have matchers, then action applies to all incoming requests.
     * 
     */
    @Import(name="matchers")
    private @Nullable Output<LoadbalancerFrontendRuleMatchersArgs> matchers;

    /**
     * @return Set of rule matchers. If rule doesn&#39;t have matchers, then action applies to all incoming requests.
     * 
     */
    public Optional<Output<LoadbalancerFrontendRuleMatchersArgs>> matchers() {
        return Optional.ofNullable(this.matchers);
    }

    /**
     * Defines boolean operator used to combine multiple matchers. Defaults to `and`.
     * 
     */
    @Import(name="matchingCondition")
    private @Nullable Output<String> matchingCondition;

    /**
     * @return Defines boolean operator used to combine multiple matchers. Defaults to `and`.
     * 
     */
    public Optional<Output<String>> matchingCondition() {
        return Optional.ofNullable(this.matchingCondition);
    }

    /**
     * The name of the frontend rule. Must be unique within the frontend.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the frontend rule. Must be unique within the frontend.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    private LoadbalancerFrontendRuleState() {}

    private LoadbalancerFrontendRuleState(LoadbalancerFrontendRuleState $) {
        this.actions = $.actions;
        this.frontend = $.frontend;
        this.matchers = $.matchers;
        this.matchingCondition = $.matchingCondition;
        this.name = $.name;
        this.priority = $.priority;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerFrontendRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerFrontendRuleState $;

        public Builder() {
            $ = new LoadbalancerFrontendRuleState();
        }

        public Builder(LoadbalancerFrontendRuleState defaults) {
            $ = new LoadbalancerFrontendRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions Rule actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<LoadbalancerFrontendRuleActionsArgs> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions Rule actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(LoadbalancerFrontendRuleActionsArgs actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param frontend ID of the load balancer frontend to which the frontend rule is connected.
         * 
         * @return builder
         * 
         */
        public Builder frontend(@Nullable Output<String> frontend) {
            $.frontend = frontend;
            return this;
        }

        /**
         * @param frontend ID of the load balancer frontend to which the frontend rule is connected.
         * 
         * @return builder
         * 
         */
        public Builder frontend(String frontend) {
            return frontend(Output.of(frontend));
        }

        /**
         * @param matchers Set of rule matchers. If rule doesn&#39;t have matchers, then action applies to all incoming requests.
         * 
         * @return builder
         * 
         */
        public Builder matchers(@Nullable Output<LoadbalancerFrontendRuleMatchersArgs> matchers) {
            $.matchers = matchers;
            return this;
        }

        /**
         * @param matchers Set of rule matchers. If rule doesn&#39;t have matchers, then action applies to all incoming requests.
         * 
         * @return builder
         * 
         */
        public Builder matchers(LoadbalancerFrontendRuleMatchersArgs matchers) {
            return matchers(Output.of(matchers));
        }

        /**
         * @param matchingCondition Defines boolean operator used to combine multiple matchers. Defaults to `and`.
         * 
         * @return builder
         * 
         */
        public Builder matchingCondition(@Nullable Output<String> matchingCondition) {
            $.matchingCondition = matchingCondition;
            return this;
        }

        /**
         * @param matchingCondition Defines boolean operator used to combine multiple matchers. Defaults to `and`.
         * 
         * @return builder
         * 
         */
        public Builder matchingCondition(String matchingCondition) {
            return matchingCondition(Output.of(matchingCondition));
        }

        /**
         * @param name The name of the frontend rule. Must be unique within the frontend.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the frontend rule. Must be unique within the frontend.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public LoadbalancerFrontendRuleState build() {
            return $;
        }
    }

}
