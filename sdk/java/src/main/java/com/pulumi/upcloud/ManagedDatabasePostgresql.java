// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.upcloud.ManagedDatabasePostgresqlArgs;
import com.pulumi.upcloud.Utilities;
import com.pulumi.upcloud.inputs.ManagedDatabasePostgresqlState;
import com.pulumi.upcloud.outputs.ManagedDatabasePostgresqlComponent;
import com.pulumi.upcloud.outputs.ManagedDatabasePostgresqlNetwork;
import com.pulumi.upcloud.outputs.ManagedDatabasePostgresqlNodeState;
import com.pulumi.upcloud.outputs.ManagedDatabasePostgresqlProperties;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource represents PostgreSQL managed database. See UpCloud [Managed Databases](https://upcloud.com/products/managed-databases) product page for more details about the service.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.upcloud.ManagedDatabasePostgresql;
 * import com.pulumi.upcloud.ManagedDatabasePostgresqlArgs;
 * import com.pulumi.upcloud.inputs.ManagedDatabasePostgresqlPropertiesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Minimal config
 *         var example1 = new ManagedDatabasePostgresql("example1", ManagedDatabasePostgresqlArgs.builder()
 *             .name("postgres-1")
 *             .plan("1x1xCPU-2GB-25GB")
 *             .title("postgres")
 *             .zone("fi-hel1")
 *             .build());
 * 
 *         // Service with custom properties
 *         var example2 = new ManagedDatabasePostgresql("example2", ManagedDatabasePostgresqlArgs.builder()
 *             .name("postgres-2")
 *             .plan("1x1xCPU-2GB-25GB")
 *             .title("postgres")
 *             .zone("fi-hel1")
 *             .properties(ManagedDatabasePostgresqlPropertiesArgs.builder()
 *                 .timezone("Europe/Helsinki")
 *                 .adminUsername("admin")
 *                 .adminPassword("<ADMIN_PASSWORD>")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="upcloud:index/managedDatabasePostgresql:ManagedDatabasePostgresql")
public class ManagedDatabasePostgresql extends com.pulumi.resources.CustomResource {
    /**
     * Service component information
     * 
     */
    @Export(name="components", refs={List.class,ManagedDatabasePostgresqlComponent.class}, tree="[0,1]")
    private Output<List<ManagedDatabasePostgresqlComponent>> components;

    /**
     * @return Service component information
     * 
     */
    public Output<List<ManagedDatabasePostgresqlComponent>> components() {
        return this.components;
    }
    /**
     * User defined key-value pairs to classify the managed database.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the managed database.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
     * 
     */
    @Export(name="maintenanceWindowDow", refs={String.class}, tree="[0]")
    private Output<String> maintenanceWindowDow;

    /**
     * @return Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)
     * 
     */
    public Output<String> maintenanceWindowDow() {
        return this.maintenanceWindowDow;
    }
    /**
     * Maintenance window UTC time in hh:mm:ss format
     * 
     */
    @Export(name="maintenanceWindowTime", refs={String.class}, tree="[0]")
    private Output<String> maintenanceWindowTime;

    /**
     * @return Maintenance window UTC time in hh:mm:ss format
     * 
     */
    public Output<String> maintenanceWindowTime() {
        return this.maintenanceWindowTime;
    }
    /**
     * Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Private networks attached to the managed database
     * 
     */
    @Export(name="networks", refs={List.class,ManagedDatabasePostgresqlNetwork.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ManagedDatabasePostgresqlNetwork>> networks;

    /**
     * @return Private networks attached to the managed database
     * 
     */
    public Output<Optional<List<ManagedDatabasePostgresqlNetwork>>> networks() {
        return Codegen.optional(this.networks);
    }
    /**
     * Information about nodes providing the managed service
     * 
     */
    @Export(name="nodeStates", refs={List.class,ManagedDatabasePostgresqlNodeState.class}, tree="[0,1]")
    private Output<List<ManagedDatabasePostgresqlNodeState>> nodeStates;

    /**
     * @return Information about nodes providing the managed service
     * 
     */
    public Output<List<ManagedDatabasePostgresqlNodeState>> nodeStates() {
        return this.nodeStates;
    }
    /**
     * Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans &lt;type&gt;`.
     * 
     */
    @Export(name="plan", refs={String.class}, tree="[0]")
    private Output<String> plan;

    /**
     * @return Service plan to use. This determines how much resources the instance will have. You can list available plans with `upctl database plans &lt;type&gt;`.
     * 
     */
    public Output<String> plan() {
        return this.plan;
    }
    /**
     * The administrative power state of the service
     * 
     */
    @Export(name="powered", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> powered;

    /**
     * @return The administrative power state of the service
     * 
     */
    public Output<Optional<Boolean>> powered() {
        return Codegen.optional(this.powered);
    }
    /**
     * Primary database name
     * 
     */
    @Export(name="primaryDatabase", refs={String.class}, tree="[0]")
    private Output<String> primaryDatabase;

    /**
     * @return Primary database name
     * 
     */
    public Output<String> primaryDatabase() {
        return this.primaryDatabase;
    }
    /**
     * Database Engine properties for PostgreSQL
     * 
     */
    @Export(name="properties", refs={ManagedDatabasePostgresqlProperties.class}, tree="[0]")
    private Output<ManagedDatabasePostgresqlProperties> properties;

    /**
     * @return Database Engine properties for PostgreSQL
     * 
     */
    public Output<ManagedDatabasePostgresqlProperties> properties() {
        return this.properties;
    }
    /**
     * Hostname to the service instance
     * 
     */
    @Export(name="serviceHost", refs={String.class}, tree="[0]")
    private Output<String> serviceHost;

    /**
     * @return Hostname to the service instance
     * 
     */
    public Output<String> serviceHost() {
        return this.serviceHost;
    }
    /**
     * Primary username&#39;s password to the service instance
     * 
     */
    @Export(name="servicePassword", refs={String.class}, tree="[0]")
    private Output<String> servicePassword;

    /**
     * @return Primary username&#39;s password to the service instance
     * 
     */
    public Output<String> servicePassword() {
        return this.servicePassword;
    }
    /**
     * Port to the service instance
     * 
     */
    @Export(name="servicePort", refs={String.class}, tree="[0]")
    private Output<String> servicePort;

    /**
     * @return Port to the service instance
     * 
     */
    public Output<String> servicePort() {
        return this.servicePort;
    }
    /**
     * URI to the service instance
     * 
     */
    @Export(name="serviceUri", refs={String.class}, tree="[0]")
    private Output<String> serviceUri;

    /**
     * @return URI to the service instance
     * 
     */
    public Output<String> serviceUri() {
        return this.serviceUri;
    }
    /**
     * Primary username to the service instance
     * 
     */
    @Export(name="serviceUsername", refs={String.class}, tree="[0]")
    private Output<String> serviceUsername;

    /**
     * @return Primary username to the service instance
     * 
     */
    public Output<String> serviceUsername() {
        return this.serviceUsername;
    }
    /**
     * SSL Connection Mode for PostgreSQL
     * 
     */
    @Export(name="sslmode", refs={String.class}, tree="[0]")
    private Output<String> sslmode;

    /**
     * @return SSL Connection Mode for PostgreSQL
     * 
     */
    public Output<String> sslmode() {
        return this.sslmode;
    }
    /**
     * State of the service
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return State of the service
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * If set to true, prevents the managed service from being powered off, or deleted.
     * 
     */
    @Export(name="terminationProtection", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> terminationProtection;

    /**
     * @return If set to true, prevents the managed service from being powered off, or deleted.
     * 
     */
    public Output<Optional<Boolean>> terminationProtection() {
        return Codegen.optional(this.terminationProtection);
    }
    /**
     * Title of a managed database instance
     * 
     */
    @Export(name="title", refs={String.class}, tree="[0]")
    private Output<String> title;

    /**
     * @return Title of a managed database instance
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * Type of the service
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of the service
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Export(name="zone", refs={String.class}, tree="[0]")
    private Output<String> zone;

    /**
     * @return Zone where the instance resides, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ManagedDatabasePostgresql(java.lang.String name) {
        this(name, ManagedDatabasePostgresqlArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ManagedDatabasePostgresql(java.lang.String name, ManagedDatabasePostgresqlArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ManagedDatabasePostgresql(java.lang.String name, ManagedDatabasePostgresqlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/managedDatabasePostgresql:ManagedDatabasePostgresql", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ManagedDatabasePostgresql(java.lang.String name, Output<java.lang.String> id, @Nullable ManagedDatabasePostgresqlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("upcloud:index/managedDatabasePostgresql:ManagedDatabasePostgresql", name, state, makeResourceOptions(options, id), false);
    }

    private static ManagedDatabasePostgresqlArgs makeArgs(ManagedDatabasePostgresqlArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ManagedDatabasePostgresqlArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/UpCloudLtd/pulumi-upcloud")
            .additionalSecretOutputs(List.of(
                "servicePassword",
                "serviceUri"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ManagedDatabasePostgresql get(java.lang.String name, Output<java.lang.String> id, @Nullable ManagedDatabasePostgresqlState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ManagedDatabasePostgresql(name, id, state, options);
    }
}
