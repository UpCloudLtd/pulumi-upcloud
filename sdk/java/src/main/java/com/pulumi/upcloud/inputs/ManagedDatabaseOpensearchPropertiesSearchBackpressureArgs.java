// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesSearchBackpressureNodeDuressArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchShardTaskArgs;
import com.pulumi.upcloud.inputs.ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchTaskArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs Empty = new ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs();

    /**
     * The search backpressure mode. The search backpressure mode. Valid values are monitor_only, enforced, or disabled. Default is monitor_only.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The search backpressure mode. The search backpressure mode. Valid values are monitor_only, enforced, or disabled. Default is monitor_only.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Node duress settings.
     * 
     */
    @Import(name="nodeDuress")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureNodeDuressArgs> nodeDuress;

    /**
     * @return Node duress settings.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureNodeDuressArgs>> nodeDuress() {
        return Optional.ofNullable(this.nodeDuress);
    }

    /**
     * Search shard settings.
     * 
     */
    @Import(name="searchShardTask")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchShardTaskArgs> searchShardTask;

    /**
     * @return Search shard settings.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchShardTaskArgs>> searchShardTask() {
        return Optional.ofNullable(this.searchShardTask);
    }

    /**
     * Search task settings.
     * 
     */
    @Import(name="searchTask")
    private @Nullable Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchTaskArgs> searchTask;

    /**
     * @return Search task settings.
     * 
     */
    public Optional<Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchTaskArgs>> searchTask() {
        return Optional.ofNullable(this.searchTask);
    }

    private ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs() {}

    private ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs(ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs $) {
        this.mode = $.mode;
        this.nodeDuress = $.nodeDuress;
        this.searchShardTask = $.searchShardTask;
        this.searchTask = $.searchTask;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs $;

        public Builder() {
            $ = new ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs();
        }

        public Builder(ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs defaults) {
            $ = new ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode The search backpressure mode. The search backpressure mode. Valid values are monitor_only, enforced, or disabled. Default is monitor_only.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The search backpressure mode. The search backpressure mode. Valid values are monitor_only, enforced, or disabled. Default is monitor_only.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param nodeDuress Node duress settings.
         * 
         * @return builder
         * 
         */
        public Builder nodeDuress(@Nullable Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureNodeDuressArgs> nodeDuress) {
            $.nodeDuress = nodeDuress;
            return this;
        }

        /**
         * @param nodeDuress Node duress settings.
         * 
         * @return builder
         * 
         */
        public Builder nodeDuress(ManagedDatabaseOpensearchPropertiesSearchBackpressureNodeDuressArgs nodeDuress) {
            return nodeDuress(Output.of(nodeDuress));
        }

        /**
         * @param searchShardTask Search shard settings.
         * 
         * @return builder
         * 
         */
        public Builder searchShardTask(@Nullable Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchShardTaskArgs> searchShardTask) {
            $.searchShardTask = searchShardTask;
            return this;
        }

        /**
         * @param searchShardTask Search shard settings.
         * 
         * @return builder
         * 
         */
        public Builder searchShardTask(ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchShardTaskArgs searchShardTask) {
            return searchShardTask(Output.of(searchShardTask));
        }

        /**
         * @param searchTask Search task settings.
         * 
         * @return builder
         * 
         */
        public Builder searchTask(@Nullable Output<ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchTaskArgs> searchTask) {
            $.searchTask = searchTask;
            return this;
        }

        /**
         * @param searchTask Search task settings.
         * 
         * @return builder
         * 
         */
        public Builder searchTask(ManagedDatabaseOpensearchPropertiesSearchBackpressureSearchTaskArgs searchTask) {
            return searchTask(Output.of(searchTask));
        }

        public ManagedDatabaseOpensearchPropertiesSearchBackpressureArgs build() {
            return $;
        }
    }

}
