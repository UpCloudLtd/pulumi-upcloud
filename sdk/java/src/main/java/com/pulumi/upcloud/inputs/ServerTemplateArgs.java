// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.ServerTemplateBackupRuleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerTemplateArgs Empty = new ServerTemplateArgs();

    /**
     * The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
     * 
     */
    @Import(name="addressPosition")
    private @Nullable Output<String> addressPosition;

    /**
     * @return The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
     * 
     */
    public Optional<Output<String>> addressPosition() {
        return Optional.ofNullable(this.addressPosition);
    }

    @Import(name="backupRule")
    private @Nullable Output<ServerTemplateBackupRuleArgs> backupRule;

    public Optional<Output<ServerTemplateBackupRuleArgs>> backupRule() {
        return Optional.ofNullable(this.backupRule);
    }

    /**
     * If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
     * 
     */
    @Import(name="deleteAutoresizeBackup")
    private @Nullable Output<Boolean> deleteAutoresizeBackup;

    /**
     * @return If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
     * 
     */
    public Optional<Output<Boolean>> deleteAutoresizeBackup() {
        return Optional.ofNullable(this.deleteAutoresizeBackup);
    }

    /**
     * Sets if the storage is encrypted at rest
     * 
     */
    @Import(name="encrypt")
    private @Nullable Output<Boolean> encrypt;

    /**
     * @return Sets if the storage is encrypted at rest
     * 
     */
    public Optional<Output<Boolean>> encrypt() {
        return Optional.ofNullable(this.encrypt);
    }

    /**
     * If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
     * 							Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
     * 							to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
     * 							Taking and keeping backups incure costs.
     * 
     */
    @Import(name="filesystemAutoresize")
    private @Nullable Output<Boolean> filesystemAutoresize;

    /**
     * @return If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
     * 							Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
     * 							to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
     * 							Taking and keeping backups incure costs.
     * 
     */
    public Optional<Output<Boolean>> filesystemAutoresize() {
        return Optional.ofNullable(this.filesystemAutoresize);
    }

    /**
     * The unique identifier for the storage
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The unique identifier for the storage
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The size of the storage in gigabytes
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The size of the storage in gigabytes
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
     * 
     */
    @Import(name="storage")
    private @Nullable Output<String> storage;

    /**
     * @return A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
     * 
     */
    public Optional<Output<String>> storage() {
        return Optional.ofNullable(this.storage);
    }

    /**
     * The storage tier to use.
     * 
     */
    @Import(name="tier")
    private @Nullable Output<String> tier;

    /**
     * @return The storage tier to use.
     * 
     */
    public Optional<Output<String>> tier() {
        return Optional.ofNullable(this.tier);
    }

    /**
     * A short, informative description
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return A short, informative description
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private ServerTemplateArgs() {}

    private ServerTemplateArgs(ServerTemplateArgs $) {
        this.address = $.address;
        this.addressPosition = $.addressPosition;
        this.backupRule = $.backupRule;
        this.deleteAutoresizeBackup = $.deleteAutoresizeBackup;
        this.encrypt = $.encrypt;
        this.filesystemAutoresize = $.filesystemAutoresize;
        this.id = $.id;
        this.size = $.size;
        this.storage = $.storage;
        this.tier = $.tier;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerTemplateArgs $;

        public Builder() {
            $ = new ServerTemplateArgs();
        }

        public Builder(ServerTemplateArgs defaults) {
            $ = new ServerTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The device address the storage will be attached to (`scsi`|`virtio`|`ide`). Leave `address_position` field empty to auto-select next available address from that bus.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param addressPosition The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
         * 
         * @return builder
         * 
         */
        public Builder addressPosition(@Nullable Output<String> addressPosition) {
            $.addressPosition = addressPosition;
            return this;
        }

        /**
         * @param addressPosition The device position in the given bus (defined via field `address`). For example `0:0`, or `0`. Leave empty to auto-select next available address in the given bus.
         * 
         * @return builder
         * 
         */
        public Builder addressPosition(String addressPosition) {
            return addressPosition(Output.of(addressPosition));
        }

        public Builder backupRule(@Nullable Output<ServerTemplateBackupRuleArgs> backupRule) {
            $.backupRule = backupRule;
            return this;
        }

        public Builder backupRule(ServerTemplateBackupRuleArgs backupRule) {
            return backupRule(Output.of(backupRule));
        }

        /**
         * @param deleteAutoresizeBackup If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
         * 
         * @return builder
         * 
         */
        public Builder deleteAutoresizeBackup(@Nullable Output<Boolean> deleteAutoresizeBackup) {
            $.deleteAutoresizeBackup = deleteAutoresizeBackup;
            return this;
        }

        /**
         * @param deleteAutoresizeBackup If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.
         * 
         * @return builder
         * 
         */
        public Builder deleteAutoresizeBackup(Boolean deleteAutoresizeBackup) {
            return deleteAutoresizeBackup(Output.of(deleteAutoresizeBackup));
        }

        /**
         * @param encrypt Sets if the storage is encrypted at rest
         * 
         * @return builder
         * 
         */
        public Builder encrypt(@Nullable Output<Boolean> encrypt) {
            $.encrypt = encrypt;
            return this;
        }

        /**
         * @param encrypt Sets if the storage is encrypted at rest
         * 
         * @return builder
         * 
         */
        public Builder encrypt(Boolean encrypt) {
            return encrypt(Output.of(encrypt));
        }

        /**
         * @param filesystemAutoresize If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
         * 							Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
         * 							to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
         * 							Taking and keeping backups incure costs.
         * 
         * @return builder
         * 
         */
        public Builder filesystemAutoresize(@Nullable Output<Boolean> filesystemAutoresize) {
            $.filesystemAutoresize = filesystemAutoresize;
            return this;
        }

        /**
         * @param filesystemAutoresize If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.
         * 							Please note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used
         * 							to restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).
         * 							Taking and keeping backups incure costs.
         * 
         * @return builder
         * 
         */
        public Builder filesystemAutoresize(Boolean filesystemAutoresize) {
            return filesystemAutoresize(Output.of(filesystemAutoresize));
        }

        /**
         * @param id The unique identifier for the storage
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for the storage
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param size The size of the storage in gigabytes
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the storage in gigabytes
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param storage A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
         * 
         * @return builder
         * 
         */
        public Builder storage(@Nullable Output<String> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage A valid storage UUID or template name. You can list available public templates with `upctl storage list --public --template` and available private templates with `upctl storage list --template`.
         * 
         * @return builder
         * 
         */
        public Builder storage(String storage) {
            return storage(Output.of(storage));
        }

        /**
         * @param tier The storage tier to use.
         * 
         * @return builder
         * 
         */
        public Builder tier(@Nullable Output<String> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier The storage tier to use.
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            return tier(Output.of(tier));
        }

        /**
         * @param title A short, informative description
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title A short, informative description
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public ServerTemplateArgs build() {
            return $;
        }
    }

}
