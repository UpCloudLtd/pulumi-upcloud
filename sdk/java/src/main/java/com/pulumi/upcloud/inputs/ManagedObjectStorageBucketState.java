// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedObjectStorageBucketState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedObjectStorageBucketState Empty = new ManagedObjectStorageBucketState();

    /**
     * Name of the bucket.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the bucket.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Managed Object Storage service UUID.
     * 
     */
    @Import(name="serviceUuid")
    private @Nullable Output<String> serviceUuid;

    /**
     * @return Managed Object Storage service UUID.
     * 
     */
    public Optional<Output<String>> serviceUuid() {
        return Optional.ofNullable(this.serviceUuid);
    }

    /**
     * Number of objects stored in the bucket.
     * 
     */
    @Import(name="totalObjects")
    private @Nullable Output<Integer> totalObjects;

    /**
     * @return Number of objects stored in the bucket.
     * 
     */
    public Optional<Output<Integer>> totalObjects() {
        return Optional.ofNullable(this.totalObjects);
    }

    /**
     * Total size of objects stored in the bucket.
     * 
     */
    @Import(name="totalSizeBytes")
    private @Nullable Output<Integer> totalSizeBytes;

    /**
     * @return Total size of objects stored in the bucket.
     * 
     */
    public Optional<Output<Integer>> totalSizeBytes() {
        return Optional.ofNullable(this.totalSizeBytes);
    }

    private ManagedObjectStorageBucketState() {}

    private ManagedObjectStorageBucketState(ManagedObjectStorageBucketState $) {
        this.name = $.name;
        this.serviceUuid = $.serviceUuid;
        this.totalObjects = $.totalObjects;
        this.totalSizeBytes = $.totalSizeBytes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedObjectStorageBucketState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedObjectStorageBucketState $;

        public Builder() {
            $ = new ManagedObjectStorageBucketState();
        }

        public Builder(ManagedObjectStorageBucketState defaults) {
            $ = new ManagedObjectStorageBucketState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param serviceUuid Managed Object Storage service UUID.
         * 
         * @return builder
         * 
         */
        public Builder serviceUuid(@Nullable Output<String> serviceUuid) {
            $.serviceUuid = serviceUuid;
            return this;
        }

        /**
         * @param serviceUuid Managed Object Storage service UUID.
         * 
         * @return builder
         * 
         */
        public Builder serviceUuid(String serviceUuid) {
            return serviceUuid(Output.of(serviceUuid));
        }

        /**
         * @param totalObjects Number of objects stored in the bucket.
         * 
         * @return builder
         * 
         */
        public Builder totalObjects(@Nullable Output<Integer> totalObjects) {
            $.totalObjects = totalObjects;
            return this;
        }

        /**
         * @param totalObjects Number of objects stored in the bucket.
         * 
         * @return builder
         * 
         */
        public Builder totalObjects(Integer totalObjects) {
            return totalObjects(Output.of(totalObjects));
        }

        /**
         * @param totalSizeBytes Total size of objects stored in the bucket.
         * 
         * @return builder
         * 
         */
        public Builder totalSizeBytes(@Nullable Output<Integer> totalSizeBytes) {
            $.totalSizeBytes = totalSizeBytes;
            return this;
        }

        /**
         * @param totalSizeBytes Total size of objects stored in the bucket.
         * 
         * @return builder
         * 
         */
        public Builder totalSizeBytes(Integer totalSizeBytes) {
            return totalSizeBytes(Output.of(totalSizeBytes));
        }

        public ManagedObjectStorageBucketState build() {
            return $;
        }
    }

}
