// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.upcloud.inputs.GetHostsHostStatisticArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetHostsHostArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetHostsHostArgs Empty = new GetHostsHostArgs();

    /**
     * Free form text describing the host
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Free form text describing the host
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The unique id of the host
     * 
     */
    @Import(name="hostId", required=true)
    private Output<Integer> hostId;

    /**
     * @return The unique id of the host
     * 
     */
    public Output<Integer> hostId() {
        return this.hostId;
    }

    @Import(name="statistics")
    private @Nullable Output<List<GetHostsHostStatisticArgs>> statistics;

    public Optional<Output<List<GetHostsHostStatisticArgs>>> statistics() {
        return Optional.ofNullable(this.statistics);
    }

    /**
     * If true, this node can be used as a host for Windows servers.
     * 
     */
    @Import(name="windowsEnabled", required=true)
    private Output<Boolean> windowsEnabled;

    /**
     * @return If true, this node can be used as a host for Windows servers.
     * 
     */
    public Output<Boolean> windowsEnabled() {
        return this.windowsEnabled;
    }

    /**
     * The zone the host is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return The zone the host is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private GetHostsHostArgs() {}

    private GetHostsHostArgs(GetHostsHostArgs $) {
        this.description = $.description;
        this.hostId = $.hostId;
        this.statistics = $.statistics;
        this.windowsEnabled = $.windowsEnabled;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHostsHostArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHostsHostArgs $;

        public Builder() {
            $ = new GetHostsHostArgs();
        }

        public Builder(GetHostsHostArgs defaults) {
            $ = new GetHostsHostArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Free form text describing the host
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Free form text describing the host
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param hostId The unique id of the host
         * 
         * @return builder
         * 
         */
        public Builder hostId(Output<Integer> hostId) {
            $.hostId = hostId;
            return this;
        }

        /**
         * @param hostId The unique id of the host
         * 
         * @return builder
         * 
         */
        public Builder hostId(Integer hostId) {
            return hostId(Output.of(hostId));
        }

        public Builder statistics(@Nullable Output<List<GetHostsHostStatisticArgs>> statistics) {
            $.statistics = statistics;
            return this;
        }

        public Builder statistics(List<GetHostsHostStatisticArgs> statistics) {
            return statistics(Output.of(statistics));
        }

        public Builder statistics(GetHostsHostStatisticArgs... statistics) {
            return statistics(List.of(statistics));
        }

        /**
         * @param windowsEnabled If true, this node can be used as a host for Windows servers.
         * 
         * @return builder
         * 
         */
        public Builder windowsEnabled(Output<Boolean> windowsEnabled) {
            $.windowsEnabled = windowsEnabled;
            return this;
        }

        /**
         * @param windowsEnabled If true, this node can be used as a host for Windows servers.
         * 
         * @return builder
         * 
         */
        public Builder windowsEnabled(Boolean windowsEnabled) {
            return windowsEnabled(Output.of(windowsEnabled));
        }

        /**
         * @param zone The zone the host is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone the host is in, e.g. `de-fra1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public GetHostsHostArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetHostsHostArgs", "description");
            }
            if ($.hostId == null) {
                throw new MissingRequiredPropertyException("GetHostsHostArgs", "hostId");
            }
            if ($.windowsEnabled == null) {
                throw new MissingRequiredPropertyException("GetHostsHostArgs", "windowsEnabled");
            }
            if ($.zone == null) {
                throw new MissingRequiredPropertyException("GetHostsHostArgs", "zone");
            }
            return $;
        }
    }

}
