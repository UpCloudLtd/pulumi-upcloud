// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupArgs Empty = new ServerGroupArgs();

    /**
     * Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
     * group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn&#39;t allow
     * servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
     * different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
     * To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
     * please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
     * server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
     * servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
     * 
     */
    @Import(name="antiAffinityPolicy")
    private @Nullable Output<String> antiAffinityPolicy;

    /**
     * @return Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
     * group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn&#39;t allow
     * servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
     * different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
     * To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
     * please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
     * server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
     * servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
     * 
     */
    public Optional<Output<String>> antiAffinityPolicy() {
        return Optional.ofNullable(this.antiAffinityPolicy);
    }

    /**
     * User defined key-value pairs to classify the server group.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the server group.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group`
     * property of `upcloud.Server`. See also `track_members` property.
     * 
     */
    @Import(name="members")
    private @Nullable Output<List<String>> members;

    /**
     * @return UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group`
     * property of `upcloud.Server`. See also `track_members` property.
     * 
     */
    public Optional<Output<List<String>>> members() {
        return Optional.ofNullable(this.members);
    }

    /**
     * Title of your server group
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return Title of your server group
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group`
     * property of `upcloud.Server` to attach servers to the server group to avoid delayed state updates.
     * 
     */
    @Import(name="trackMembers")
    private @Nullable Output<Boolean> trackMembers;

    /**
     * @return Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group`
     * property of `upcloud.Server` to attach servers to the server group to avoid delayed state updates.
     * 
     */
    public Optional<Output<Boolean>> trackMembers() {
        return Optional.ofNullable(this.trackMembers);
    }

    private ServerGroupArgs() {}

    private ServerGroupArgs(ServerGroupArgs $) {
        this.antiAffinityPolicy = $.antiAffinityPolicy;
        this.labels = $.labels;
        this.members = $.members;
        this.title = $.title;
        this.trackMembers = $.trackMembers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupArgs $;

        public Builder() {
            $ = new ServerGroupArgs();
        }

        public Builder(ServerGroupArgs defaults) {
            $ = new ServerGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param antiAffinityPolicy Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
         * group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn&#39;t allow
         * servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
         * different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
         * To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
         * please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
         * server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
         * servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityPolicy(@Nullable Output<String> antiAffinityPolicy) {
            $.antiAffinityPolicy = antiAffinityPolicy;
            return this;
        }

        /**
         * @param antiAffinityPolicy Defines if a server group is an anti-affinity group. Setting this to `strict` or `yes` will result in all servers in the
         * group being placed on separate compute hosts. The value can be `strict`, `yes`, or `no`. * `strict` policy doesn&#39;t allow
         * servers in the same server group to be on the same host * `yes` refers to best-effort policy and tries to put servers on
         * different hosts, but this is not guaranteed * `no` refers to having no policy and thus no effect on server host affinity
         * To verify if the anti-affinity policies are met by requesting a server group details from API. For more information
         * please see UpCloud API documentation on server groups. Plese also note that anti-affinity policies are only applied on
         * server start. This means that if anti-affinity policies in server group are not met, you need to manually restart the
         * servers in said group, for example via API, UpCloud Control Panel or upctl (UpCloud CLI)
         * 
         * @return builder
         * 
         */
        public Builder antiAffinityPolicy(String antiAffinityPolicy) {
            return antiAffinityPolicy(Output.of(antiAffinityPolicy));
        }

        /**
         * @param labels User defined key-value pairs to classify the server group.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User defined key-value pairs to classify the server group.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param members UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group`
         * property of `upcloud.Server`. See also `track_members` property.
         * 
         * @return builder
         * 
         */
        public Builder members(@Nullable Output<List<String>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group`
         * property of `upcloud.Server`. See also `track_members` property.
         * 
         * @return builder
         * 
         */
        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        /**
         * @param members UUIDs of the servers that are members of this group. Servers can also be attached to the server group via `server_group`
         * property of `upcloud.Server`. See also `track_members` property.
         * 
         * @return builder
         * 
         */
        public Builder members(String... members) {
            return members(List.of(members));
        }

        /**
         * @param title Title of your server group
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title of your server group
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param trackMembers Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group`
         * property of `upcloud.Server` to attach servers to the server group to avoid delayed state updates.
         * 
         * @return builder
         * 
         */
        public Builder trackMembers(@Nullable Output<Boolean> trackMembers) {
            $.trackMembers = trackMembers;
            return this;
        }

        /**
         * @param trackMembers Controls if members of the server group are being tracked in this resource. Set to `false` when using `server_group`
         * property of `upcloud.Server` to attach servers to the server group to avoid delayed state updates.
         * 
         * @return builder
         * 
         */
        public Builder trackMembers(Boolean trackMembers) {
            return trackMembers(Output.of(trackMembers));
        }

        public ServerGroupArgs build() {
            if ($.title == null) {
                throw new MissingRequiredPropertyException("ServerGroupArgs", "title");
            }
            return $;
        }
    }

}
