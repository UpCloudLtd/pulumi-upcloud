// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetManagedObjectStoragePoliciesPolicy {
    /**
     * @return Policy ARN.
     * 
     */
    private String arn;
    /**
     * @return Attachment count.
     * 
     */
    private Integer attachmentCount;
    /**
     * @return Creation time.
     * 
     */
    private String createdAt;
    /**
     * @return Default version id.
     * 
     */
    private String defaultVersionId;
    /**
     * @return Description of the policy.
     * 
     */
    private @Nullable String description;
    /**
     * @return Policy document, URL-encoded compliant with RFC 3986.
     * 
     */
    private String document;
    /**
     * @return Policy name.
     * 
     */
    private String name;
    /**
     * @return Managed Object Storage service UUID.
     * 
     */
    private String serviceUuid;
    /**
     * @return Defines whether the policy was set up by the system.
     * 
     */
    private Boolean system;
    /**
     * @return Update time.
     * 
     */
    private String updatedAt;

    private GetManagedObjectStoragePoliciesPolicy() {}
    /**
     * @return Policy ARN.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Attachment count.
     * 
     */
    public Integer attachmentCount() {
        return this.attachmentCount;
    }
    /**
     * @return Creation time.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Default version id.
     * 
     */
    public String defaultVersionId() {
        return this.defaultVersionId;
    }
    /**
     * @return Description of the policy.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Policy document, URL-encoded compliant with RFC 3986.
     * 
     */
    public String document() {
        return this.document;
    }
    /**
     * @return Policy name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Managed Object Storage service UUID.
     * 
     */
    public String serviceUuid() {
        return this.serviceUuid;
    }
    /**
     * @return Defines whether the policy was set up by the system.
     * 
     */
    public Boolean system() {
        return this.system;
    }
    /**
     * @return Update time.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedObjectStoragePoliciesPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private Integer attachmentCount;
        private String createdAt;
        private String defaultVersionId;
        private @Nullable String description;
        private String document;
        private String name;
        private String serviceUuid;
        private Boolean system;
        private String updatedAt;
        public Builder() {}
        public Builder(GetManagedObjectStoragePoliciesPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.attachmentCount = defaults.attachmentCount;
    	      this.createdAt = defaults.createdAt;
    	      this.defaultVersionId = defaults.defaultVersionId;
    	      this.description = defaults.description;
    	      this.document = defaults.document;
    	      this.name = defaults.name;
    	      this.serviceUuid = defaults.serviceUuid;
    	      this.system = defaults.system;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetManagedObjectStoragePoliciesPolicy", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder attachmentCount(Integer attachmentCount) {
            if (attachmentCount == null) {
              throw new MissingRequiredPropertyException("GetManagedObjectStoragePoliciesPolicy", "attachmentCount");
            }
            this.attachmentCount = attachmentCount;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetManagedObjectStoragePoliciesPolicy", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder defaultVersionId(String defaultVersionId) {
            if (defaultVersionId == null) {
              throw new MissingRequiredPropertyException("GetManagedObjectStoragePoliciesPolicy", "defaultVersionId");
            }
            this.defaultVersionId = defaultVersionId;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder document(String document) {
            if (document == null) {
              throw new MissingRequiredPropertyException("GetManagedObjectStoragePoliciesPolicy", "document");
            }
            this.document = document;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetManagedObjectStoragePoliciesPolicy", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder serviceUuid(String serviceUuid) {
            if (serviceUuid == null) {
              throw new MissingRequiredPropertyException("GetManagedObjectStoragePoliciesPolicy", "serviceUuid");
            }
            this.serviceUuid = serviceUuid;
            return this;
        }
        @CustomType.Setter
        public Builder system(Boolean system) {
            if (system == null) {
              throw new MissingRequiredPropertyException("GetManagedObjectStoragePoliciesPolicy", "system");
            }
            this.system = system;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetManagedObjectStoragePoliciesPolicy", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetManagedObjectStoragePoliciesPolicy build() {
            final var _resultValue = new GetManagedObjectStoragePoliciesPolicy();
            _resultValue.arn = arn;
            _resultValue.attachmentCount = attachmentCount;
            _resultValue.createdAt = createdAt;
            _resultValue.defaultVersionId = defaultVersionId;
            _resultValue.description = description;
            _resultValue.document = document;
            _resultValue.name = name;
            _resultValue.serviceUuid = serviceUuid;
            _resultValue.system = system;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
