// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs Empty = new NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs();

    /**
     * Enable or disable route auto-population.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable or disable route auto-population.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Exclude routes coming from specific sources (router-connected-networks, static-route).
     * 
     */
    @Import(name="excludeBySources")
    private @Nullable Output<List<String>> excludeBySources;

    /**
     * @return Exclude routes coming from specific sources (router-connected-networks, static-route).
     * 
     */
    public Optional<Output<List<String>>> excludeBySources() {
        return Optional.ofNullable(this.excludeBySources);
    }

    /**
     * CIDR destinations to include when auto-populating routes.
     * 
     */
    @Import(name="filterByDestinations")
    private @Nullable Output<List<String>> filterByDestinations;

    /**
     * @return CIDR destinations to include when auto-populating routes.
     * 
     */
    public Optional<Output<List<String>>> filterByDestinations() {
        return Optional.ofNullable(this.filterByDestinations);
    }

    /**
     * Include only routes of given types (service, user).
     * 
     */
    @Import(name="filterByRouteTypes")
    private @Nullable Output<List<String>> filterByRouteTypes;

    /**
     * @return Include only routes of given types (service, user).
     * 
     */
    public Optional<Output<List<String>>> filterByRouteTypes() {
        return Optional.ofNullable(this.filterByRouteTypes);
    }

    private NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs() {}

    private NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs(NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs $) {
        this.enabled = $.enabled;
        this.excludeBySources = $.excludeBySources;
        this.filterByDestinations = $.filterByDestinations;
        this.filterByRouteTypes = $.filterByRouteTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs $;

        public Builder() {
            $ = new NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs();
        }

        public Builder(NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs defaults) {
            $ = new NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable or disable route auto-population.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable or disable route auto-population.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param excludeBySources Exclude routes coming from specific sources (router-connected-networks, static-route).
         * 
         * @return builder
         * 
         */
        public Builder excludeBySources(@Nullable Output<List<String>> excludeBySources) {
            $.excludeBySources = excludeBySources;
            return this;
        }

        /**
         * @param excludeBySources Exclude routes coming from specific sources (router-connected-networks, static-route).
         * 
         * @return builder
         * 
         */
        public Builder excludeBySources(List<String> excludeBySources) {
            return excludeBySources(Output.of(excludeBySources));
        }

        /**
         * @param excludeBySources Exclude routes coming from specific sources (router-connected-networks, static-route).
         * 
         * @return builder
         * 
         */
        public Builder excludeBySources(String... excludeBySources) {
            return excludeBySources(List.of(excludeBySources));
        }

        /**
         * @param filterByDestinations CIDR destinations to include when auto-populating routes.
         * 
         * @return builder
         * 
         */
        public Builder filterByDestinations(@Nullable Output<List<String>> filterByDestinations) {
            $.filterByDestinations = filterByDestinations;
            return this;
        }

        /**
         * @param filterByDestinations CIDR destinations to include when auto-populating routes.
         * 
         * @return builder
         * 
         */
        public Builder filterByDestinations(List<String> filterByDestinations) {
            return filterByDestinations(Output.of(filterByDestinations));
        }

        /**
         * @param filterByDestinations CIDR destinations to include when auto-populating routes.
         * 
         * @return builder
         * 
         */
        public Builder filterByDestinations(String... filterByDestinations) {
            return filterByDestinations(List.of(filterByDestinations));
        }

        /**
         * @param filterByRouteTypes Include only routes of given types (service, user).
         * 
         * @return builder
         * 
         */
        public Builder filterByRouteTypes(@Nullable Output<List<String>> filterByRouteTypes) {
            $.filterByRouteTypes = filterByRouteTypes;
            return this;
        }

        /**
         * @param filterByRouteTypes Include only routes of given types (service, user).
         * 
         * @return builder
         * 
         */
        public Builder filterByRouteTypes(List<String> filterByRouteTypes) {
            return filterByRouteTypes(Output.of(filterByRouteTypes));
        }

        /**
         * @param filterByRouteTypes Include only routes of given types (service, user).
         * 
         * @return builder
         * 
         */
        public Builder filterByRouteTypes(String... filterByRouteTypes) {
            return filterByRouteTypes(List.of(filterByRouteTypes));
        }

        public NetworkIpNetworkDhcpRoutesConfigurationEffectiveRoutesAutoPopulationArgs build() {
            return $;
        }
    }

}
