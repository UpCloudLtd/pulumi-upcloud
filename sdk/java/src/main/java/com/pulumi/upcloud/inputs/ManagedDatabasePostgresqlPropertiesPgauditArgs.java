// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabasePostgresqlPropertiesPgauditArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabasePostgresqlPropertiesPgauditArgs Empty = new ManagedDatabasePostgresqlPropertiesPgauditArgs();

    /**
     * Enable pgaudit extension. Enable pgaudit extension. When enabled, pgaudit extension will be automatically installed.Otherwise, extension will be uninstalled but auditing configurations will be preserved.
     * 
     */
    @Import(name="featureEnabled")
    private @Nullable Output<Boolean> featureEnabled;

    /**
     * @return Enable pgaudit extension. Enable pgaudit extension. When enabled, pgaudit extension will be automatically installed.Otherwise, extension will be uninstalled but auditing configurations will be preserved.
     * 
     */
    public Optional<Output<Boolean>> featureEnabled() {
        return Optional.ofNullable(this.featureEnabled);
    }

    /**
     * Log Catalog. Specifies that session logging should be enabled in the case where all relations
     * in a statement are in pg_catalog.
     * 
     */
    @Import(name="logCatalog")
    private @Nullable Output<Boolean> logCatalog;

    /**
     * @return Log Catalog. Specifies that session logging should be enabled in the case where all relations
     * in a statement are in pg_catalog.
     * 
     */
    public Optional<Output<Boolean>> logCatalog() {
        return Optional.ofNullable(this.logCatalog);
    }

    /**
     * Log Client. Specifies whether log messages will be visible to a client process such as psql.
     * 
     */
    @Import(name="logClient")
    private @Nullable Output<Boolean> logClient;

    /**
     * @return Log Client. Specifies whether log messages will be visible to a client process such as psql.
     * 
     */
    public Optional<Output<Boolean>> logClient() {
        return Optional.ofNullable(this.logClient);
    }

    /**
     * Log level. Specifies the log level that will be used for log entries.
     * 
     */
    @Import(name="logLevel")
    private @Nullable Output<String> logLevel;

    /**
     * @return Log level. Specifies the log level that will be used for log entries.
     * 
     */
    public Optional<Output<String>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * Log Max String Length. Crop parameters representation and whole statements if they exceed this threshold.
     * A (default) value of -1 disable the truncation.
     * 
     */
    @Import(name="logMaxStringLength")
    private @Nullable Output<Integer> logMaxStringLength;

    /**
     * @return Log Max String Length. Crop parameters representation and whole statements if they exceed this threshold.
     * A (default) value of -1 disable the truncation.
     * 
     */
    public Optional<Output<Integer>> logMaxStringLength() {
        return Optional.ofNullable(this.logMaxStringLength);
    }

    /**
     * Log Nested Statements. This GUC allows to turn off logging nested statements, that is, statements that are
     * executed as part of another ExecutorRun.
     * 
     */
    @Import(name="logNestedStatements")
    private @Nullable Output<Boolean> logNestedStatements;

    /**
     * @return Log Nested Statements. This GUC allows to turn off logging nested statements, that is, statements that are
     * executed as part of another ExecutorRun.
     * 
     */
    public Optional<Output<Boolean>> logNestedStatements() {
        return Optional.ofNullable(this.logNestedStatements);
    }

    /**
     * Log Parameter. Specifies that audit logging should include the parameters that were passed with the statement.
     * 
     */
    @Import(name="logParameter")
    private @Nullable Output<Boolean> logParameter;

    /**
     * @return Log Parameter. Specifies that audit logging should include the parameters that were passed with the statement.
     * 
     */
    public Optional<Output<Boolean>> logParameter() {
        return Optional.ofNullable(this.logParameter);
    }

    /**
     * Log Parameter Max Size. Specifies that parameter values longer than this setting (in bytes) should not be logged,
     * but replaced with &lt;long param suppressed&gt;.
     * 
     */
    @Import(name="logParameterMaxSize")
    private @Nullable Output<Integer> logParameterMaxSize;

    /**
     * @return Log Parameter Max Size. Specifies that parameter values longer than this setting (in bytes) should not be logged,
     * but replaced with &lt;long param suppressed&gt;.
     * 
     */
    public Optional<Output<Integer>> logParameterMaxSize() {
        return Optional.ofNullable(this.logParameterMaxSize);
    }

    /**
     * Log Relation. Specifies whether session audit logging should create a separate log entry
     * for each relation (TABLE, VIEW, etc.) referenced in a SELECT or DML statement.
     * 
     */
    @Import(name="logRelation")
    private @Nullable Output<Boolean> logRelation;

    /**
     * @return Log Relation. Specifies whether session audit logging should create a separate log entry
     * for each relation (TABLE, VIEW, etc.) referenced in a SELECT or DML statement.
     * 
     */
    public Optional<Output<Boolean>> logRelation() {
        return Optional.ofNullable(this.logRelation);
    }

    /**
     * Log Rows.
     * 
     */
    @Import(name="logRows")
    private @Nullable Output<Boolean> logRows;

    /**
     * @return Log Rows.
     * 
     */
    public Optional<Output<Boolean>> logRows() {
        return Optional.ofNullable(this.logRows);
    }

    /**
     * Log Statement. Specifies whether logging will include the statement text and parameters (if enabled).
     * 
     */
    @Import(name="logStatement")
    private @Nullable Output<Boolean> logStatement;

    /**
     * @return Log Statement. Specifies whether logging will include the statement text and parameters (if enabled).
     * 
     */
    public Optional<Output<Boolean>> logStatement() {
        return Optional.ofNullable(this.logStatement);
    }

    /**
     * Log Statement Once. Specifies whether logging will include the statement text and parameters with
     * the first log entry for a statement/substatement combination or with every entry.
     * 
     */
    @Import(name="logStatementOnce")
    private @Nullable Output<Boolean> logStatementOnce;

    /**
     * @return Log Statement Once. Specifies whether logging will include the statement text and parameters with
     * the first log entry for a statement/substatement combination or with every entry.
     * 
     */
    public Optional<Output<Boolean>> logStatementOnce() {
        return Optional.ofNullable(this.logStatementOnce);
    }

    /**
     * Log. Specifies which classes of statements will be logged by session audit logging.
     * 
     */
    @Import(name="logs")
    private @Nullable Output<List<String>> logs;

    /**
     * @return Log. Specifies which classes of statements will be logged by session audit logging.
     * 
     */
    public Optional<Output<List<String>>> logs() {
        return Optional.ofNullable(this.logs);
    }

    /**
     * Role. Specifies the master role to use for object audit logging.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return Role. Specifies the master role to use for object audit logging.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    private ManagedDatabasePostgresqlPropertiesPgauditArgs() {}

    private ManagedDatabasePostgresqlPropertiesPgauditArgs(ManagedDatabasePostgresqlPropertiesPgauditArgs $) {
        this.featureEnabled = $.featureEnabled;
        this.logCatalog = $.logCatalog;
        this.logClient = $.logClient;
        this.logLevel = $.logLevel;
        this.logMaxStringLength = $.logMaxStringLength;
        this.logNestedStatements = $.logNestedStatements;
        this.logParameter = $.logParameter;
        this.logParameterMaxSize = $.logParameterMaxSize;
        this.logRelation = $.logRelation;
        this.logRows = $.logRows;
        this.logStatement = $.logStatement;
        this.logStatementOnce = $.logStatementOnce;
        this.logs = $.logs;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabasePostgresqlPropertiesPgauditArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabasePostgresqlPropertiesPgauditArgs $;

        public Builder() {
            $ = new ManagedDatabasePostgresqlPropertiesPgauditArgs();
        }

        public Builder(ManagedDatabasePostgresqlPropertiesPgauditArgs defaults) {
            $ = new ManagedDatabasePostgresqlPropertiesPgauditArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param featureEnabled Enable pgaudit extension. Enable pgaudit extension. When enabled, pgaudit extension will be automatically installed.Otherwise, extension will be uninstalled but auditing configurations will be preserved.
         * 
         * @return builder
         * 
         */
        public Builder featureEnabled(@Nullable Output<Boolean> featureEnabled) {
            $.featureEnabled = featureEnabled;
            return this;
        }

        /**
         * @param featureEnabled Enable pgaudit extension. Enable pgaudit extension. When enabled, pgaudit extension will be automatically installed.Otherwise, extension will be uninstalled but auditing configurations will be preserved.
         * 
         * @return builder
         * 
         */
        public Builder featureEnabled(Boolean featureEnabled) {
            return featureEnabled(Output.of(featureEnabled));
        }

        /**
         * @param logCatalog Log Catalog. Specifies that session logging should be enabled in the case where all relations
         * in a statement are in pg_catalog.
         * 
         * @return builder
         * 
         */
        public Builder logCatalog(@Nullable Output<Boolean> logCatalog) {
            $.logCatalog = logCatalog;
            return this;
        }

        /**
         * @param logCatalog Log Catalog. Specifies that session logging should be enabled in the case where all relations
         * in a statement are in pg_catalog.
         * 
         * @return builder
         * 
         */
        public Builder logCatalog(Boolean logCatalog) {
            return logCatalog(Output.of(logCatalog));
        }

        /**
         * @param logClient Log Client. Specifies whether log messages will be visible to a client process such as psql.
         * 
         * @return builder
         * 
         */
        public Builder logClient(@Nullable Output<Boolean> logClient) {
            $.logClient = logClient;
            return this;
        }

        /**
         * @param logClient Log Client. Specifies whether log messages will be visible to a client process such as psql.
         * 
         * @return builder
         * 
         */
        public Builder logClient(Boolean logClient) {
            return logClient(Output.of(logClient));
        }

        /**
         * @param logLevel Log level. Specifies the log level that will be used for log entries.
         * 
         * @return builder
         * 
         */
        public Builder logLevel(@Nullable Output<String> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        /**
         * @param logLevel Log level. Specifies the log level that will be used for log entries.
         * 
         * @return builder
         * 
         */
        public Builder logLevel(String logLevel) {
            return logLevel(Output.of(logLevel));
        }

        /**
         * @param logMaxStringLength Log Max String Length. Crop parameters representation and whole statements if they exceed this threshold.
         * A (default) value of -1 disable the truncation.
         * 
         * @return builder
         * 
         */
        public Builder logMaxStringLength(@Nullable Output<Integer> logMaxStringLength) {
            $.logMaxStringLength = logMaxStringLength;
            return this;
        }

        /**
         * @param logMaxStringLength Log Max String Length. Crop parameters representation and whole statements if they exceed this threshold.
         * A (default) value of -1 disable the truncation.
         * 
         * @return builder
         * 
         */
        public Builder logMaxStringLength(Integer logMaxStringLength) {
            return logMaxStringLength(Output.of(logMaxStringLength));
        }

        /**
         * @param logNestedStatements Log Nested Statements. This GUC allows to turn off logging nested statements, that is, statements that are
         * executed as part of another ExecutorRun.
         * 
         * @return builder
         * 
         */
        public Builder logNestedStatements(@Nullable Output<Boolean> logNestedStatements) {
            $.logNestedStatements = logNestedStatements;
            return this;
        }

        /**
         * @param logNestedStatements Log Nested Statements. This GUC allows to turn off logging nested statements, that is, statements that are
         * executed as part of another ExecutorRun.
         * 
         * @return builder
         * 
         */
        public Builder logNestedStatements(Boolean logNestedStatements) {
            return logNestedStatements(Output.of(logNestedStatements));
        }

        /**
         * @param logParameter Log Parameter. Specifies that audit logging should include the parameters that were passed with the statement.
         * 
         * @return builder
         * 
         */
        public Builder logParameter(@Nullable Output<Boolean> logParameter) {
            $.logParameter = logParameter;
            return this;
        }

        /**
         * @param logParameter Log Parameter. Specifies that audit logging should include the parameters that were passed with the statement.
         * 
         * @return builder
         * 
         */
        public Builder logParameter(Boolean logParameter) {
            return logParameter(Output.of(logParameter));
        }

        /**
         * @param logParameterMaxSize Log Parameter Max Size. Specifies that parameter values longer than this setting (in bytes) should not be logged,
         * but replaced with &lt;long param suppressed&gt;.
         * 
         * @return builder
         * 
         */
        public Builder logParameterMaxSize(@Nullable Output<Integer> logParameterMaxSize) {
            $.logParameterMaxSize = logParameterMaxSize;
            return this;
        }

        /**
         * @param logParameterMaxSize Log Parameter Max Size. Specifies that parameter values longer than this setting (in bytes) should not be logged,
         * but replaced with &lt;long param suppressed&gt;.
         * 
         * @return builder
         * 
         */
        public Builder logParameterMaxSize(Integer logParameterMaxSize) {
            return logParameterMaxSize(Output.of(logParameterMaxSize));
        }

        /**
         * @param logRelation Log Relation. Specifies whether session audit logging should create a separate log entry
         * for each relation (TABLE, VIEW, etc.) referenced in a SELECT or DML statement.
         * 
         * @return builder
         * 
         */
        public Builder logRelation(@Nullable Output<Boolean> logRelation) {
            $.logRelation = logRelation;
            return this;
        }

        /**
         * @param logRelation Log Relation. Specifies whether session audit logging should create a separate log entry
         * for each relation (TABLE, VIEW, etc.) referenced in a SELECT or DML statement.
         * 
         * @return builder
         * 
         */
        public Builder logRelation(Boolean logRelation) {
            return logRelation(Output.of(logRelation));
        }

        /**
         * @param logRows Log Rows.
         * 
         * @return builder
         * 
         */
        public Builder logRows(@Nullable Output<Boolean> logRows) {
            $.logRows = logRows;
            return this;
        }

        /**
         * @param logRows Log Rows.
         * 
         * @return builder
         * 
         */
        public Builder logRows(Boolean logRows) {
            return logRows(Output.of(logRows));
        }

        /**
         * @param logStatement Log Statement. Specifies whether logging will include the statement text and parameters (if enabled).
         * 
         * @return builder
         * 
         */
        public Builder logStatement(@Nullable Output<Boolean> logStatement) {
            $.logStatement = logStatement;
            return this;
        }

        /**
         * @param logStatement Log Statement. Specifies whether logging will include the statement text and parameters (if enabled).
         * 
         * @return builder
         * 
         */
        public Builder logStatement(Boolean logStatement) {
            return logStatement(Output.of(logStatement));
        }

        /**
         * @param logStatementOnce Log Statement Once. Specifies whether logging will include the statement text and parameters with
         * the first log entry for a statement/substatement combination or with every entry.
         * 
         * @return builder
         * 
         */
        public Builder logStatementOnce(@Nullable Output<Boolean> logStatementOnce) {
            $.logStatementOnce = logStatementOnce;
            return this;
        }

        /**
         * @param logStatementOnce Log Statement Once. Specifies whether logging will include the statement text and parameters with
         * the first log entry for a statement/substatement combination or with every entry.
         * 
         * @return builder
         * 
         */
        public Builder logStatementOnce(Boolean logStatementOnce) {
            return logStatementOnce(Output.of(logStatementOnce));
        }

        /**
         * @param logs Log. Specifies which classes of statements will be logged by session audit logging.
         * 
         * @return builder
         * 
         */
        public Builder logs(@Nullable Output<List<String>> logs) {
            $.logs = logs;
            return this;
        }

        /**
         * @param logs Log. Specifies which classes of statements will be logged by session audit logging.
         * 
         * @return builder
         * 
         */
        public Builder logs(List<String> logs) {
            return logs(Output.of(logs));
        }

        /**
         * @param logs Log. Specifies which classes of statements will be logged by session audit logging.
         * 
         * @return builder
         * 
         */
        public Builder logs(String... logs) {
            return logs(List.of(logs));
        }

        /**
         * @param role Role. Specifies the master role to use for object audit logging.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Role. Specifies the master role to use for object audit logging.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public ManagedDatabasePostgresqlPropertiesPgauditArgs build() {
            return $;
        }
    }

}
