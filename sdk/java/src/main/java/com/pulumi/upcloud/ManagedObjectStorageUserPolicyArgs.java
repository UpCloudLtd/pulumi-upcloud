// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedObjectStorageUserPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedObjectStorageUserPolicyArgs Empty = new ManagedObjectStorageUserPolicyArgs();

    /**
     * Policy name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Policy name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Managed Object Storage service UUID.
     * 
     */
    @Import(name="serviceUuid", required=true)
    private Output<String> serviceUuid;

    /**
     * @return Managed Object Storage service UUID.
     * 
     */
    public Output<String> serviceUuid() {
        return this.serviceUuid;
    }

    /**
     * Username.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Username.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ManagedObjectStorageUserPolicyArgs() {}

    private ManagedObjectStorageUserPolicyArgs(ManagedObjectStorageUserPolicyArgs $) {
        this.name = $.name;
        this.serviceUuid = $.serviceUuid;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedObjectStorageUserPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedObjectStorageUserPolicyArgs $;

        public Builder() {
            $ = new ManagedObjectStorageUserPolicyArgs();
        }

        public Builder(ManagedObjectStorageUserPolicyArgs defaults) {
            $ = new ManagedObjectStorageUserPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Policy name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Policy name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param serviceUuid Managed Object Storage service UUID.
         * 
         * @return builder
         * 
         */
        public Builder serviceUuid(Output<String> serviceUuid) {
            $.serviceUuid = serviceUuid;
            return this;
        }

        /**
         * @param serviceUuid Managed Object Storage service UUID.
         * 
         * @return builder
         * 
         */
        public Builder serviceUuid(String serviceUuid) {
            return serviceUuid(Output.of(serviceUuid));
        }

        /**
         * @param username Username.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ManagedObjectStorageUserPolicyArgs build() {
            if ($.serviceUuid == null) {
                throw new MissingRequiredPropertyException("ManagedObjectStorageUserPolicyArgs", "serviceUuid");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("ManagedObjectStorageUserPolicyArgs", "username");
            }
            return $;
        }
    }

}
