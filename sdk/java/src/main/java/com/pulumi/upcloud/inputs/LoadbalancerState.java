// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.upcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.upcloud.inputs.LoadbalancerNetworkArgs;
import com.pulumi.upcloud.inputs.LoadbalancerNodeArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerState extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerState Empty = new LoadbalancerState();

    /**
     * Backends are groups of customer servers whose traffic should be balanced.
     * 
     */
    @Import(name="backends")
    private @Nullable Output<List<String>> backends;

    /**
     * @return Backends are groups of customer servers whose traffic should be balanced.
     * 
     */
    public Optional<Output<List<String>>> backends() {
        return Optional.ofNullable(this.backends);
    }

    /**
     * The service configured status indicates the service&#39;s current intended status. Managed by the customer.
     * 
     */
    @Import(name="configuredStatus")
    private @Nullable Output<String> configuredStatus;

    /**
     * @return The service configured status indicates the service&#39;s current intended status. Managed by the customer.
     * 
     */
    public Optional<Output<String>> configuredStatus() {
        return Optional.ofNullable(this.configuredStatus);
    }

    /**
     * DNS name of the load balancer
     * 
     * @deprecated
     * Use &#39;networks&#39; to get network DNS name
     * 
     */
    @Deprecated /* Use 'networks' to get network DNS name */
    @Import(name="dnsName")
    private @Nullable Output<String> dnsName;

    /**
     * @return DNS name of the load balancer
     * 
     * @deprecated
     * Use &#39;networks&#39; to get network DNS name
     * 
     */
    @Deprecated /* Use 'networks' to get network DNS name */
    public Optional<Output<String>> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * Frontends receive the traffic before dispatching it to the backends.
     * 
     */
    @Import(name="frontends")
    private @Nullable Output<List<String>> frontends;

    /**
     * @return Frontends receive the traffic before dispatching it to the backends.
     * 
     */
    public Optional<Output<List<String>>> frontends() {
        return Optional.ofNullable(this.frontends);
    }

    /**
     * User defined key-value pairs to classify the load balancer.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User defined key-value pairs to classify the load balancer.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day. Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
     * 
     */
    @Import(name="maintenanceDow")
    private @Nullable Output<String> maintenanceDow;

    /**
     * @return The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day. Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
     * 
     */
    public Optional<Output<String>> maintenanceDow() {
        return Optional.ofNullable(this.maintenanceDow);
    }

    /**
     * The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC HH:MM:SSZ, for example `20:01:01Z`.
     * 
     */
    @Import(name="maintenanceTime")
    private @Nullable Output<String> maintenanceTime;

    /**
     * @return The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC HH:MM:SSZ, for example `20:01:01Z`.
     * 
     */
    public Optional<Output<String>> maintenanceTime() {
        return Optional.ofNullable(this.maintenanceTime);
    }

    /**
     * The name of the service. Must be unique within customer account.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the service. Must be unique within customer account.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Private network UUID where traffic will be routed. Must reside in load balancer zone.
     * 
     * @deprecated
     * Use &#39;networks&#39; to define networks attached to load balancer
     * 
     */
    @Deprecated /* Use 'networks' to define networks attached to load balancer */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return Private network UUID where traffic will be routed. Must reside in load balancer zone.
     * 
     * @deprecated
     * Use &#39;networks&#39; to define networks attached to load balancer
     * 
     */
    @Deprecated /* Use 'networks' to define networks attached to load balancer */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<LoadbalancerNetworkArgs>> networks;

    /**
     * @return Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
     * 
     */
    public Optional<Output<List<LoadbalancerNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * Nodes are instances running load balancer service
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<LoadbalancerNodeArgs>> nodes;

    /**
     * @return Nodes are instances running load balancer service
     * 
     */
    public Optional<Output<List<LoadbalancerNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * The service operational state indicates the service&#39;s current operational, effective state. Managed by the system.
     * 
     */
    @Import(name="operationalState")
    private @Nullable Output<String> operationalState;

    /**
     * @return The service operational state indicates the service&#39;s current operational, effective state. Managed by the system.
     * 
     */
    public Optional<Output<String>> operationalState() {
        return Optional.ofNullable(this.operationalState);
    }

    /**
     * Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
     * 
     */
    @Import(name="plan")
    private @Nullable Output<String> plan;

    /**
     * @return Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
     * 
     */
    public Optional<Output<String>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * Domain Name Resolvers.
     * 
     */
    @Import(name="resolvers")
    private @Nullable Output<List<String>> resolvers;

    /**
     * @return Domain Name Resolvers.
     * 
     */
    public Optional<Output<List<String>>> resolvers() {
        return Optional.ofNullable(this.resolvers);
    }

    /**
     * Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private LoadbalancerState() {}

    private LoadbalancerState(LoadbalancerState $) {
        this.backends = $.backends;
        this.configuredStatus = $.configuredStatus;
        this.dnsName = $.dnsName;
        this.frontends = $.frontends;
        this.labels = $.labels;
        this.maintenanceDow = $.maintenanceDow;
        this.maintenanceTime = $.maintenanceTime;
        this.name = $.name;
        this.network = $.network;
        this.networks = $.networks;
        this.nodes = $.nodes;
        this.operationalState = $.operationalState;
        this.plan = $.plan;
        this.resolvers = $.resolvers;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerState $;

        public Builder() {
            $ = new LoadbalancerState();
        }

        public Builder(LoadbalancerState defaults) {
            $ = new LoadbalancerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backends Backends are groups of customer servers whose traffic should be balanced.
         * 
         * @return builder
         * 
         */
        public Builder backends(@Nullable Output<List<String>> backends) {
            $.backends = backends;
            return this;
        }

        /**
         * @param backends Backends are groups of customer servers whose traffic should be balanced.
         * 
         * @return builder
         * 
         */
        public Builder backends(List<String> backends) {
            return backends(Output.of(backends));
        }

        /**
         * @param backends Backends are groups of customer servers whose traffic should be balanced.
         * 
         * @return builder
         * 
         */
        public Builder backends(String... backends) {
            return backends(List.of(backends));
        }

        /**
         * @param configuredStatus The service configured status indicates the service&#39;s current intended status. Managed by the customer.
         * 
         * @return builder
         * 
         */
        public Builder configuredStatus(@Nullable Output<String> configuredStatus) {
            $.configuredStatus = configuredStatus;
            return this;
        }

        /**
         * @param configuredStatus The service configured status indicates the service&#39;s current intended status. Managed by the customer.
         * 
         * @return builder
         * 
         */
        public Builder configuredStatus(String configuredStatus) {
            return configuredStatus(Output.of(configuredStatus));
        }

        /**
         * @param dnsName DNS name of the load balancer
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;networks&#39; to get network DNS name
         * 
         */
        @Deprecated /* Use 'networks' to get network DNS name */
        public Builder dnsName(@Nullable Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param dnsName DNS name of the load balancer
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;networks&#39; to get network DNS name
         * 
         */
        @Deprecated /* Use 'networks' to get network DNS name */
        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        /**
         * @param frontends Frontends receive the traffic before dispatching it to the backends.
         * 
         * @return builder
         * 
         */
        public Builder frontends(@Nullable Output<List<String>> frontends) {
            $.frontends = frontends;
            return this;
        }

        /**
         * @param frontends Frontends receive the traffic before dispatching it to the backends.
         * 
         * @return builder
         * 
         */
        public Builder frontends(List<String> frontends) {
            return frontends(Output.of(frontends));
        }

        /**
         * @param frontends Frontends receive the traffic before dispatching it to the backends.
         * 
         * @return builder
         * 
         */
        public Builder frontends(String... frontends) {
            return frontends(List.of(frontends));
        }

        /**
         * @param labels User defined key-value pairs to classify the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User defined key-value pairs to classify the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param maintenanceDow The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day. Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceDow(@Nullable Output<String> maintenanceDow) {
            $.maintenanceDow = maintenanceDow;
            return this;
        }

        /**
         * @param maintenanceDow The day of the week on which maintenance will be performed. If not provided, we will randomly select a weekend day. Valid values `monday|tuesday|wednesday|thursday|friday|saturday|sunday`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceDow(String maintenanceDow) {
            return maintenanceDow(Output.of(maintenanceDow));
        }

        /**
         * @param maintenanceTime The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC HH:MM:SSZ, for example `20:01:01Z`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceTime(@Nullable Output<String> maintenanceTime) {
            $.maintenanceTime = maintenanceTime;
            return this;
        }

        /**
         * @param maintenanceTime The time at which the maintenance will begin in UTC. A 2-hour timeframe has been allocated for maintenance. During this period, the multi-node production plans will not experience any downtime, while the one-node plans will have a downtime of 1-2 minutes. If not provided, we will randomly select an off-peak time. Needs to be a valid time format in UTC HH:MM:SSZ, for example `20:01:01Z`.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceTime(String maintenanceTime) {
            return maintenanceTime(Output.of(maintenanceTime));
        }

        /**
         * @param name The name of the service. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the service. Must be unique within customer account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network Private network UUID where traffic will be routed. Must reside in load balancer zone.
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;networks&#39; to define networks attached to load balancer
         * 
         */
        @Deprecated /* Use 'networks' to define networks attached to load balancer */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Private network UUID where traffic will be routed. Must reside in load balancer zone.
         * 
         * @return builder
         * 
         * @deprecated
         * Use &#39;networks&#39; to define networks attached to load balancer
         * 
         */
        @Deprecated /* Use 'networks' to define networks attached to load balancer */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param networks Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<LoadbalancerNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<LoadbalancerNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Attached Networks from where traffic consumed and routed. Private networks must reside in loadbalancer zone.
         * 
         * @return builder
         * 
         */
        public Builder networks(LoadbalancerNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param nodes Nodes are instances running load balancer service
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<LoadbalancerNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes Nodes are instances running load balancer service
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<LoadbalancerNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes Nodes are instances running load balancer service
         * 
         * @return builder
         * 
         */
        public Builder nodes(LoadbalancerNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param operationalState The service operational state indicates the service&#39;s current operational, effective state. Managed by the system.
         * 
         * @return builder
         * 
         */
        public Builder operationalState(@Nullable Output<String> operationalState) {
            $.operationalState = operationalState;
            return this;
        }

        /**
         * @param operationalState The service operational state indicates the service&#39;s current operational, effective state. Managed by the system.
         * 
         * @return builder
         * 
         */
        public Builder operationalState(String operationalState) {
            return operationalState(Output.of(operationalState));
        }

        /**
         * @param plan Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan Plan which the service will have. You can list available load balancer plans with `upctl loadbalancer plans`
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param resolvers Domain Name Resolvers.
         * 
         * @return builder
         * 
         */
        public Builder resolvers(@Nullable Output<List<String>> resolvers) {
            $.resolvers = resolvers;
            return this;
        }

        /**
         * @param resolvers Domain Name Resolvers.
         * 
         * @return builder
         * 
         */
        public Builder resolvers(List<String> resolvers) {
            return resolvers(Output.of(resolvers));
        }

        /**
         * @param resolvers Domain Name Resolvers.
         * 
         * @return builder
         * 
         */
        public Builder resolvers(String... resolvers) {
            return resolvers(List.of(resolvers));
        }

        /**
         * @param zone Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone in which the service will be hosted, e.g. `fi-hel1`. You can list available zones with `upctl zone list`.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public LoadbalancerState build() {
            return $;
        }
    }

}
