# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LoadbalancerFrontendTlsConfigArgs', 'LoadbalancerFrontendTlsConfig']

@pulumi.input_type
class LoadbalancerFrontendTlsConfigArgs:
    def __init__(__self__, *,
                 certificate_bundle: pulumi.Input[str],
                 frontend: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LoadbalancerFrontendTlsConfig resource.
        :param pulumi.Input[str] certificate_bundle: Reference to certificate bundle ID.
        :param pulumi.Input[str] frontend: ID of the load balancer frontend to which the TLS config is connected.
        :param pulumi.Input[str] name: The name of the TLS config. Must be unique within customer account.
        """
        pulumi.set(__self__, "certificate_bundle", certificate_bundle)
        pulumi.set(__self__, "frontend", frontend)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="certificateBundle")
    def certificate_bundle(self) -> pulumi.Input[str]:
        """
        Reference to certificate bundle ID.
        """
        return pulumi.get(self, "certificate_bundle")

    @certificate_bundle.setter
    def certificate_bundle(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_bundle", value)

    @property
    @pulumi.getter
    def frontend(self) -> pulumi.Input[str]:
        """
        ID of the load balancer frontend to which the TLS config is connected.
        """
        return pulumi.get(self, "frontend")

    @frontend.setter
    def frontend(self, value: pulumi.Input[str]):
        pulumi.set(self, "frontend", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the TLS config. Must be unique within customer account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _LoadbalancerFrontendTlsConfigState:
    def __init__(__self__, *,
                 certificate_bundle: Optional[pulumi.Input[str]] = None,
                 frontend: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LoadbalancerFrontendTlsConfig resources.
        :param pulumi.Input[str] certificate_bundle: Reference to certificate bundle ID.
        :param pulumi.Input[str] frontend: ID of the load balancer frontend to which the TLS config is connected.
        :param pulumi.Input[str] name: The name of the TLS config. Must be unique within customer account.
        """
        if certificate_bundle is not None:
            pulumi.set(__self__, "certificate_bundle", certificate_bundle)
        if frontend is not None:
            pulumi.set(__self__, "frontend", frontend)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="certificateBundle")
    def certificate_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to certificate bundle ID.
        """
        return pulumi.get(self, "certificate_bundle")

    @certificate_bundle.setter
    def certificate_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_bundle", value)

    @property
    @pulumi.getter
    def frontend(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the load balancer frontend to which the TLS config is connected.
        """
        return pulumi.get(self, "frontend")

    @frontend.setter
    def frontend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frontend", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the TLS config. Must be unique within customer account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class LoadbalancerFrontendTlsConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_bundle: Optional[pulumi.Input[str]] = None,
                 frontend: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource represents frontend TLS config

        ## Example Usage

        ```python
        import pulumi
        import pulumi_upcloud as upcloud

        lb_fe1_tls1 = upcloud.LoadbalancerFrontendTlsConfig("lbFe1Tls1",
            frontend=resource["upcloud_loadbalancer_frontend"]["lb_fe_1"]["id"],
            certificate_bundle=resource["upcloud_loadbalancer_manual_certificate_bundle"]["lb-cb-m1"]["id"])
        config = pulumi.Config()
        lb_zone = config.get("lbZone")
        if lb_zone is None:
            lb_zone = "fi-hel2"
        lb_network = upcloud.Network("lbNetwork",
            zone=lb_zone,
            ip_network={
                "address": "10.0.0.0/24",
                "dhcp": True,
                "family": "IPv4",
            })
        lb_cb_m1 = upcloud.LoadbalancerManualCertificateBundle("lb-cb-m1",
            certificate="LS0tLS1CRUdJTiBDRVJ...",
            private_key="LS0tLS1CRUdJTiBQUkl...")
        lb_fe1 = upcloud.LoadbalancerFrontend("lbFe1",
            loadbalancer=resource["upcloud_loadbalancer"]["lb"]["id"],
            mode="http",
            port=8080,
            default_backend_name=resource["upcloud_loadbalancer_backend"]["lb_be_1"]["name"])
        lb = upcloud.Loadbalancer("lb",
            configured_status="started",
            plan="development",
            zone=lb_zone,
            network=resource["upcloud_network"]["lb_network"]["id"])
        lb_be1 = upcloud.LoadbalancerBackend("lbBe1", loadbalancer=resource["upcloud_loadbalancer"]["lb"]["id"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_bundle: Reference to certificate bundle ID.
        :param pulumi.Input[str] frontend: ID of the load balancer frontend to which the TLS config is connected.
        :param pulumi.Input[str] name: The name of the TLS config. Must be unique within customer account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadbalancerFrontendTlsConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource represents frontend TLS config

        ## Example Usage

        ```python
        import pulumi
        import pulumi_upcloud as upcloud

        lb_fe1_tls1 = upcloud.LoadbalancerFrontendTlsConfig("lbFe1Tls1",
            frontend=resource["upcloud_loadbalancer_frontend"]["lb_fe_1"]["id"],
            certificate_bundle=resource["upcloud_loadbalancer_manual_certificate_bundle"]["lb-cb-m1"]["id"])
        config = pulumi.Config()
        lb_zone = config.get("lbZone")
        if lb_zone is None:
            lb_zone = "fi-hel2"
        lb_network = upcloud.Network("lbNetwork",
            zone=lb_zone,
            ip_network={
                "address": "10.0.0.0/24",
                "dhcp": True,
                "family": "IPv4",
            })
        lb_cb_m1 = upcloud.LoadbalancerManualCertificateBundle("lb-cb-m1",
            certificate="LS0tLS1CRUdJTiBDRVJ...",
            private_key="LS0tLS1CRUdJTiBQUkl...")
        lb_fe1 = upcloud.LoadbalancerFrontend("lbFe1",
            loadbalancer=resource["upcloud_loadbalancer"]["lb"]["id"],
            mode="http",
            port=8080,
            default_backend_name=resource["upcloud_loadbalancer_backend"]["lb_be_1"]["name"])
        lb = upcloud.Loadbalancer("lb",
            configured_status="started",
            plan="development",
            zone=lb_zone,
            network=resource["upcloud_network"]["lb_network"]["id"])
        lb_be1 = upcloud.LoadbalancerBackend("lbBe1", loadbalancer=resource["upcloud_loadbalancer"]["lb"]["id"])
        ```

        :param str resource_name: The name of the resource.
        :param LoadbalancerFrontendTlsConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadbalancerFrontendTlsConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_bundle: Optional[pulumi.Input[str]] = None,
                 frontend: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadbalancerFrontendTlsConfigArgs.__new__(LoadbalancerFrontendTlsConfigArgs)

            if certificate_bundle is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_bundle'")
            __props__.__dict__["certificate_bundle"] = certificate_bundle
            if frontend is None and not opts.urn:
                raise TypeError("Missing required property 'frontend'")
            __props__.__dict__["frontend"] = frontend
            __props__.__dict__["name"] = name
        super(LoadbalancerFrontendTlsConfig, __self__).__init__(
            'upcloud:index/loadbalancerFrontendTlsConfig:LoadbalancerFrontendTlsConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_bundle: Optional[pulumi.Input[str]] = None,
            frontend: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'LoadbalancerFrontendTlsConfig':
        """
        Get an existing LoadbalancerFrontendTlsConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_bundle: Reference to certificate bundle ID.
        :param pulumi.Input[str] frontend: ID of the load balancer frontend to which the TLS config is connected.
        :param pulumi.Input[str] name: The name of the TLS config. Must be unique within customer account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadbalancerFrontendTlsConfigState.__new__(_LoadbalancerFrontendTlsConfigState)

        __props__.__dict__["certificate_bundle"] = certificate_bundle
        __props__.__dict__["frontend"] = frontend
        __props__.__dict__["name"] = name
        return LoadbalancerFrontendTlsConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateBundle")
    def certificate_bundle(self) -> pulumi.Output[str]:
        """
        Reference to certificate bundle ID.
        """
        return pulumi.get(self, "certificate_bundle")

    @property
    @pulumi.getter
    def frontend(self) -> pulumi.Output[str]:
        """
        ID of the load balancer frontend to which the TLS config is connected.
        """
        return pulumi.get(self, "frontend")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the TLS config. Must be unique within customer account.
        """
        return pulumi.get(self, "name")

