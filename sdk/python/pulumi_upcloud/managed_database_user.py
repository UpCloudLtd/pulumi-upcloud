# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ManagedDatabaseUserArgs', 'ManagedDatabaseUser']

@pulumi.input_type
class ManagedDatabaseUserArgs:
    def __init__(__self__, *,
                 service: pulumi.Input[str],
                 username: pulumi.Input[str],
                 authentication: Optional[pulumi.Input[str]] = None,
                 opensearch_access_control: Optional[pulumi.Input['ManagedDatabaseUserOpensearchAccessControlArgs']] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pg_access_control: Optional[pulumi.Input['ManagedDatabaseUserPgAccessControlArgs']] = None,
                 redis_access_control: Optional[pulumi.Input['ManagedDatabaseUserRedisAccessControlArgs']] = None):
        """
        The set of arguments for constructing a ManagedDatabaseUser resource.
        :param pulumi.Input[str] service: Service's UUID for which this user belongs to
        :param pulumi.Input[str] username: Name of the database user
        :param pulumi.Input[str] authentication: MySQL only, authentication type.
        :param pulumi.Input['ManagedDatabaseUserOpensearchAccessControlArgs'] opensearch_access_control: OpenSearch access control object.
        :param pulumi.Input[str] password: Password for the database user. Defaults to a random value
        :param pulumi.Input['ManagedDatabaseUserPgAccessControlArgs'] pg_access_control: PostgreSQL access control object.
        :param pulumi.Input['ManagedDatabaseUserRedisAccessControlArgs'] redis_access_control: Redis access control object.
        """
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "username", username)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if opensearch_access_control is not None:
            pulumi.set(__self__, "opensearch_access_control", opensearch_access_control)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pg_access_control is not None:
            pulumi.set(__self__, "pg_access_control", pg_access_control)
        if redis_access_control is not None:
            pulumi.set(__self__, "redis_access_control", redis_access_control)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        Service's UUID for which this user belongs to
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Name of the database user
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        MySQL only, authentication type.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="opensearchAccessControl")
    def opensearch_access_control(self) -> Optional[pulumi.Input['ManagedDatabaseUserOpensearchAccessControlArgs']]:
        """
        OpenSearch access control object.
        """
        return pulumi.get(self, "opensearch_access_control")

    @opensearch_access_control.setter
    def opensearch_access_control(self, value: Optional[pulumi.Input['ManagedDatabaseUserOpensearchAccessControlArgs']]):
        pulumi.set(self, "opensearch_access_control", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the database user. Defaults to a random value
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pgAccessControl")
    def pg_access_control(self) -> Optional[pulumi.Input['ManagedDatabaseUserPgAccessControlArgs']]:
        """
        PostgreSQL access control object.
        """
        return pulumi.get(self, "pg_access_control")

    @pg_access_control.setter
    def pg_access_control(self, value: Optional[pulumi.Input['ManagedDatabaseUserPgAccessControlArgs']]):
        pulumi.set(self, "pg_access_control", value)

    @property
    @pulumi.getter(name="redisAccessControl")
    def redis_access_control(self) -> Optional[pulumi.Input['ManagedDatabaseUserRedisAccessControlArgs']]:
        """
        Redis access control object.
        """
        return pulumi.get(self, "redis_access_control")

    @redis_access_control.setter
    def redis_access_control(self, value: Optional[pulumi.Input['ManagedDatabaseUserRedisAccessControlArgs']]):
        pulumi.set(self, "redis_access_control", value)


@pulumi.input_type
class _ManagedDatabaseUserState:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 opensearch_access_control: Optional[pulumi.Input['ManagedDatabaseUserOpensearchAccessControlArgs']] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pg_access_control: Optional[pulumi.Input['ManagedDatabaseUserPgAccessControlArgs']] = None,
                 redis_access_control: Optional[pulumi.Input['ManagedDatabaseUserRedisAccessControlArgs']] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ManagedDatabaseUser resources.
        :param pulumi.Input[str] authentication: MySQL only, authentication type.
        :param pulumi.Input['ManagedDatabaseUserOpensearchAccessControlArgs'] opensearch_access_control: OpenSearch access control object.
        :param pulumi.Input[str] password: Password for the database user. Defaults to a random value
        :param pulumi.Input['ManagedDatabaseUserPgAccessControlArgs'] pg_access_control: PostgreSQL access control object.
        :param pulumi.Input['ManagedDatabaseUserRedisAccessControlArgs'] redis_access_control: Redis access control object.
        :param pulumi.Input[str] service: Service's UUID for which this user belongs to
        :param pulumi.Input[str] type: Type of the user. Only normal type users can be created
        :param pulumi.Input[str] username: Name of the database user
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if opensearch_access_control is not None:
            pulumi.set(__self__, "opensearch_access_control", opensearch_access_control)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pg_access_control is not None:
            pulumi.set(__self__, "pg_access_control", pg_access_control)
        if redis_access_control is not None:
            pulumi.set(__self__, "redis_access_control", redis_access_control)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        MySQL only, authentication type.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="opensearchAccessControl")
    def opensearch_access_control(self) -> Optional[pulumi.Input['ManagedDatabaseUserOpensearchAccessControlArgs']]:
        """
        OpenSearch access control object.
        """
        return pulumi.get(self, "opensearch_access_control")

    @opensearch_access_control.setter
    def opensearch_access_control(self, value: Optional[pulumi.Input['ManagedDatabaseUserOpensearchAccessControlArgs']]):
        pulumi.set(self, "opensearch_access_control", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the database user. Defaults to a random value
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pgAccessControl")
    def pg_access_control(self) -> Optional[pulumi.Input['ManagedDatabaseUserPgAccessControlArgs']]:
        """
        PostgreSQL access control object.
        """
        return pulumi.get(self, "pg_access_control")

    @pg_access_control.setter
    def pg_access_control(self, value: Optional[pulumi.Input['ManagedDatabaseUserPgAccessControlArgs']]):
        pulumi.set(self, "pg_access_control", value)

    @property
    @pulumi.getter(name="redisAccessControl")
    def redis_access_control(self) -> Optional[pulumi.Input['ManagedDatabaseUserRedisAccessControlArgs']]:
        """
        Redis access control object.
        """
        return pulumi.get(self, "redis_access_control")

    @redis_access_control.setter
    def redis_access_control(self, value: Optional[pulumi.Input['ManagedDatabaseUserRedisAccessControlArgs']]):
        pulumi.set(self, "redis_access_control", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service's UUID for which this user belongs to
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the user. Only normal type users can be created
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the database user
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class ManagedDatabaseUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 opensearch_access_control: Optional[pulumi.Input[Union['ManagedDatabaseUserOpensearchAccessControlArgs', 'ManagedDatabaseUserOpensearchAccessControlArgsDict']]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pg_access_control: Optional[pulumi.Input[Union['ManagedDatabaseUserPgAccessControlArgs', 'ManagedDatabaseUserPgAccessControlArgsDict']]] = None,
                 redis_access_control: Optional[pulumi.Input[Union['ManagedDatabaseUserRedisAccessControlArgs', 'ManagedDatabaseUserRedisAccessControlArgsDict']]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource represents a user in managed database

        ## Example Usage

        ```python
        import pulumi
        import pulumi_upcloud as upcloud

        example = upcloud.ManagedDatabasePostgresql("example",
            plan="1x1xCPU-2GB-25GB",
            title="postgres",
            zone="fi-hel1")
        example_user = upcloud.ManagedDatabaseUser("exampleUser",
            service=example.id,
            username="example_user",
            password="<USER_PASSWORD>")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication: MySQL only, authentication type.
        :param pulumi.Input[Union['ManagedDatabaseUserOpensearchAccessControlArgs', 'ManagedDatabaseUserOpensearchAccessControlArgsDict']] opensearch_access_control: OpenSearch access control object.
        :param pulumi.Input[str] password: Password for the database user. Defaults to a random value
        :param pulumi.Input[Union['ManagedDatabaseUserPgAccessControlArgs', 'ManagedDatabaseUserPgAccessControlArgsDict']] pg_access_control: PostgreSQL access control object.
        :param pulumi.Input[Union['ManagedDatabaseUserRedisAccessControlArgs', 'ManagedDatabaseUserRedisAccessControlArgsDict']] redis_access_control: Redis access control object.
        :param pulumi.Input[str] service: Service's UUID for which this user belongs to
        :param pulumi.Input[str] username: Name of the database user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManagedDatabaseUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource represents a user in managed database

        ## Example Usage

        ```python
        import pulumi
        import pulumi_upcloud as upcloud

        example = upcloud.ManagedDatabasePostgresql("example",
            plan="1x1xCPU-2GB-25GB",
            title="postgres",
            zone="fi-hel1")
        example_user = upcloud.ManagedDatabaseUser("exampleUser",
            service=example.id,
            username="example_user",
            password="<USER_PASSWORD>")
        ```

        :param str resource_name: The name of the resource.
        :param ManagedDatabaseUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManagedDatabaseUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 opensearch_access_control: Optional[pulumi.Input[Union['ManagedDatabaseUserOpensearchAccessControlArgs', 'ManagedDatabaseUserOpensearchAccessControlArgsDict']]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pg_access_control: Optional[pulumi.Input[Union['ManagedDatabaseUserPgAccessControlArgs', 'ManagedDatabaseUserPgAccessControlArgsDict']]] = None,
                 redis_access_control: Optional[pulumi.Input[Union['ManagedDatabaseUserRedisAccessControlArgs', 'ManagedDatabaseUserRedisAccessControlArgsDict']]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManagedDatabaseUserArgs.__new__(ManagedDatabaseUserArgs)

            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["opensearch_access_control"] = opensearch_access_control
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["pg_access_control"] = pg_access_control
            __props__.__dict__["redis_access_control"] = redis_access_control
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ManagedDatabaseUser, __self__).__init__(
            'upcloud:index/managedDatabaseUser:ManagedDatabaseUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            opensearch_access_control: Optional[pulumi.Input[Union['ManagedDatabaseUserOpensearchAccessControlArgs', 'ManagedDatabaseUserOpensearchAccessControlArgsDict']]] = None,
            password: Optional[pulumi.Input[str]] = None,
            pg_access_control: Optional[pulumi.Input[Union['ManagedDatabaseUserPgAccessControlArgs', 'ManagedDatabaseUserPgAccessControlArgsDict']]] = None,
            redis_access_control: Optional[pulumi.Input[Union['ManagedDatabaseUserRedisAccessControlArgs', 'ManagedDatabaseUserRedisAccessControlArgsDict']]] = None,
            service: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'ManagedDatabaseUser':
        """
        Get an existing ManagedDatabaseUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication: MySQL only, authentication type.
        :param pulumi.Input[Union['ManagedDatabaseUserOpensearchAccessControlArgs', 'ManagedDatabaseUserOpensearchAccessControlArgsDict']] opensearch_access_control: OpenSearch access control object.
        :param pulumi.Input[str] password: Password for the database user. Defaults to a random value
        :param pulumi.Input[Union['ManagedDatabaseUserPgAccessControlArgs', 'ManagedDatabaseUserPgAccessControlArgsDict']] pg_access_control: PostgreSQL access control object.
        :param pulumi.Input[Union['ManagedDatabaseUserRedisAccessControlArgs', 'ManagedDatabaseUserRedisAccessControlArgsDict']] redis_access_control: Redis access control object.
        :param pulumi.Input[str] service: Service's UUID for which this user belongs to
        :param pulumi.Input[str] type: Type of the user. Only normal type users can be created
        :param pulumi.Input[str] username: Name of the database user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManagedDatabaseUserState.__new__(_ManagedDatabaseUserState)

        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["opensearch_access_control"] = opensearch_access_control
        __props__.__dict__["password"] = password
        __props__.__dict__["pg_access_control"] = pg_access_control
        __props__.__dict__["redis_access_control"] = redis_access_control
        __props__.__dict__["service"] = service
        __props__.__dict__["type"] = type
        __props__.__dict__["username"] = username
        return ManagedDatabaseUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[Optional[str]]:
        """
        MySQL only, authentication type.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="opensearchAccessControl")
    def opensearch_access_control(self) -> pulumi.Output[Optional['outputs.ManagedDatabaseUserOpensearchAccessControl']]:
        """
        OpenSearch access control object.
        """
        return pulumi.get(self, "opensearch_access_control")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password for the database user. Defaults to a random value
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pgAccessControl")
    def pg_access_control(self) -> pulumi.Output[Optional['outputs.ManagedDatabaseUserPgAccessControl']]:
        """
        PostgreSQL access control object.
        """
        return pulumi.get(self, "pg_access_control")

    @property
    @pulumi.getter(name="redisAccessControl")
    def redis_access_control(self) -> pulumi.Output[Optional['outputs.ManagedDatabaseUserRedisAccessControl']]:
        """
        Redis access control object.
        """
        return pulumi.get(self, "redis_access_control")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[str]:
        """
        Service's UUID for which this user belongs to
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the user. Only normal type users can be created
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Name of the database user
        """
        return pulumi.get(self, "username")

